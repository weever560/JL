
rom.exe:	file format ELF32-pi32v2

Disassembly of section .rom_code:
_start:
  100000:    c0 ea eb 64       	goto 0xc9d6 <_startup : 10c9da >			  ## startup.S:25:0


WOLAAnalysisFilter_Float_M64_m4_r1:
  100004:	 00 00 00 00 4a 9f c4 38         ....J..8
  10000c:	 b4 54 06 39 be 55 30 39         .T.9.U09
  100014:	 4b cc 60 39 b5 18 8c 39         K.`9...9
  10001c:	 56 7e ab 39 79 d1 ce 39         V~.9y..9
  100024:	 b6 4a f6 39 0f 10 11 3a         .J.9...:
  10002c:	 57 42 29 3a c2 d3 43 3a         WB):..C:
  100034:	 ab d9 60 3a 66 33 80 3a         ..`:f3.:
  10003c:	 7c 45 91 3a 46 a9 a3 3a         |E.:F..:
  100044:	 37 63 b7 3a 98 75 cc 3a         7c.:.u.:
  10004c:	 9c e0 e2 3a ea a1 fa 3a         ...:...:
  100054:	 5b da 09 3b a8 08 17 3b         [..;...;
  10005c:	 97 d6 24 3b 51 3d 33 3b         ..$;Q=3;
  100064:	 58 34 42 3b 81 b1 51 3b         X4B;..Q;
  10006c:	 db a8 61 3b 91 0c 72 3b         ..a;..r;
  100074:	 78 66 81 3b 2c ec 89 3b         xf.;,..;
  10007c:	 92 8d 92 3b d5 3f 9b 3b         ...;.?.;
  100084:	 18 f7 a3 3b 7a a6 ac 3b         ...;z..;
  10008c:	 13 40 b5 3b ec b4 bd 3b         .@.;...;
  100094:	 0f f5 c5 3b 82 ef cd 3b         ...;...;
  10009c:	 50 92 d5 3b 8f ca dc 3b         P..;...;
  1000a4:	 67 84 e3 3b 1d ab e9 3b         g..;...;
  1000ac:	 21 29 ef 3b 18 e8 f3 3b         !).;...;
  1000b4:	 ec d0 f7 3b d9 cb fa 3b         ...;...;
  1000bc:	 8e c0 fc 3b 2a 96 fd 3b         ...;*..;
  1000c4:	 63 33 fd 3b 93 7e fb 3b         c3.;.~.;
  1000cc:	 d9 5d f8 3b 29 b7 f3 3b         .].;)..;
  1000d4:	 6a 70 ed 3b 93 6f e5 3b         jp.;.o.;
  1000dc:	 ca 9a db 3b 7b d8 cf 3b         ...;{..;
  1000e4:	 7c 0f c2 3b 29 27 b2 3b         |..;)'.;
  1000ec:	 87 07 a0 3b 66 99 8b 3b         ...;f..;
  1000f4:	 e6 8c 69 3b e0 f2 36 3b         ..i;..6;
  1000fc:	 fd 78 fe 3a 43 88 84 3a         .x.:C..:
  100104:	 00 00 00 00 8a f5 8f ba         ........
  10010c:	 7c 7d 15 bb 18 ba 68 bb         |}....h.
  100114:	 de e2 a0 bb c6 58 d0 bb         .....X..
  10011c:	 a3 62 01 bc 52 16 1c bc         .b..R...
  100124:	 71 48 38 bc db f8 55 bc         qH8...U.
  10012c:	 28 26 75 bc d9 e6 8a bc         (&u.....
  100134:	 ca f5 9b bc 42 bd ad bc         ....B...
  10013c:	 07 3a c0 bc 1c 68 d3 bc         .:...h..
  100144:	 e5 42 e7 bc 1d c5 fb bc         .B......
  10014c:	 63 74 08 bd 9f 53 13 bd         ct...S..
  100154:	 9b 7c 1e bd 5c eb 29 bd         .|..\.).
  10015c:	 98 9b 35 bd ae 88 41 bd         ..5...A.
  100164:	 b3 ad 4d bd 72 05 5a bd         ..M.r.Z.
  10016c:	 6e 8a 66 bd df 36 73 bd         n.f..6s.
  100174:	 61 02 80 bd ec 76 86 bd         a....v..
  10017c:	 d1 f5 8c bd ba 7b 93 bd         .....{..
  100184:	 37 05 9a bd c6 8e a0 bd         7.......
  10018c:	 d1 14 a7 bd b2 93 ad bd         ........
  100194:	 ba 07 b4 bd 2a 6d ba bd         ....*m..
  10019c:	 47 c0 c0 bd 4c fd c6 bd         G...L...
  1001a4:	 6d 20 cd bd fd 25 d3 bd         m ...%..
  1001ac:	 35 0a d9 bd 69 c9 de bd         5...i...
  1001b4:	 fc 5f e4 bd 5c ca e9 bd         ._..\...
  1001bc:	 13 05 ef bd ad 0c f4 bd         ........
  1001c4:	 f5 dd f8 bd ac 75 fd bd         .....u..
  1001cc:	 6b e8 00 be 40 f6 02 be         k...@...
  1001d4:	 fa e2 04 be 49 ad 06 be         ....I...
  1001dc:	 f0 53 08 be de d5 09 be         .S......
  1001e4:	 05 32 0b be 75 67 0c be         .2..ug..
  1001ec:	 55 75 0d be f2 5a 0e be         Uu...Z..
  1001f4:	 a3 17 0f be f6 aa 0f be         ........
  1001fc:	 79 14 10 be e3 53 10 be         y....S..
  100204:	 0b 69 10 be e3 53 10 be         .i...S..
  10020c:	 79 14 10 be f6 aa 0f be         y.......
  100214:	 a3 17 0f be f2 5a 0e be         .....Z..
  10021c:	 55 75 0d be 75 67 0c be         Uu..ug..
  100224:	 05 32 0b be de d5 09 be         .2......
  10022c:	 f0 53 08 be 49 ad 06 be         .S..I...
  100234:	 fa e2 04 be 40 f6 02 be         ....@...
  10023c:	 6b e8 00 be ac 75 fd bd         k....u..
  100244:	 f5 dd f8 bd ad 0c f4 bd         ........
  10024c:	 13 05 ef bd 5c ca e9 bd         ....\...
  100254:	 fc 5f e4 bd 69 c9 de bd         ._..i...
  10025c:	 35 0a d9 bd fd 25 d3 bd         5....%..
  100264:	 6d 20 cd bd 4c fd c6 bd         m ..L...
  10026c:	 47 c0 c0 bd 2a 6d ba bd         G...*m..
  100274:	 ba 07 b4 bd b2 93 ad bd         ........
  10027c:	 d1 14 a7 bd c6 8e a0 bd         ........
  100284:	 37 05 9a bd ba 7b 93 bd         7....{..
  10028c:	 d1 f5 8c bd ec 76 86 bd         .....v..
  100294:	 61 02 80 bd df 36 73 bd         a....6s.
  10029c:	 6e 8a 66 bd 72 05 5a bd         n.f.r.Z.
  1002a4:	 b3 ad 4d bd ae 88 41 bd         ..M...A.
  1002ac:	 98 9b 35 bd 5c eb 29 bd         ..5.\.).
  1002b4:	 9b 7c 1e bd 9f 53 13 bd         .|...S..
  1002bc:	 63 74 08 bd 1d c5 fb bc         ct......
  1002c4:	 e5 42 e7 bc 1c 68 d3 bc         .B...h..
  1002cc:	 07 3a c0 bc 42 bd ad bc         .:..B...
  1002d4:	 ca f5 9b bc d9 e6 8a bc         ........
  1002dc:	 28 26 75 bc db f8 55 bc         (&u...U.
  1002e4:	 71 48 38 bc 52 16 1c bc         qH8.R...
  1002ec:	 a3 62 01 bc c6 58 d0 bb         .b...X..
  1002f4:	 de e2 a0 bb 18 ba 68 bb         ......h.
  1002fc:	 7c 7d 15 bb 8a f5 8f ba         |}......
  100304:	 00 00 00 00 43 88 84 3a         ....C..:
  10030c:	 fd 78 fe 3a e0 f2 36 3b         .x.:..6;
  100314:	 e6 8c 69 3b 66 99 8b 3b         ..i;f..;
  10031c:	 87 07 a0 3b 29 27 b2 3b         ...;)'.;
  100324:	 7c 0f c2 3b 7b d8 cf 3b         |..;{..;
  10032c:	 ca 9a db 3b 93 6f e5 3b         ...;.o.;
  100334:	 6a 70 ed 3b 29 b7 f3 3b         jp.;)..;
  10033c:	 d9 5d f8 3b 93 7e fb 3b         .].;.~.;
  100344:	 63 33 fd 3b 2a 96 fd 3b         c3.;*..;
  10034c:	 8e c0 fc 3b d9 cb fa 3b         ...;...;
  100354:	 ec d0 f7 3b 18 e8 f3 3b         ...;...;
  10035c:	 21 29 ef 3b 1d ab e9 3b         !).;...;
  100364:	 67 84 e3 3b 8f ca dc 3b         g..;...;
  10036c:	 50 92 d5 3b 82 ef cd 3b         P..;...;
  100374:	 0f f5 c5 3b ec b4 bd 3b         ...;...;
  10037c:	 13 40 b5 3b 7a a6 ac 3b         .@.;z..;
  100384:	 18 f7 a3 3b d5 3f 9b 3b         ...;.?.;
  10038c:	 92 8d 92 3b 2c ec 89 3b         ...;,..;
  100394:	 78 66 81 3b 91 0c 72 3b         xf.;..r;
  10039c:	 db a8 61 3b 81 b1 51 3b         ..a;..Q;
  1003a4:	 58 34 42 3b 51 3d 33 3b         X4B;Q=3;
  1003ac:	 97 d6 24 3b a8 08 17 3b         ..$;...;
  1003b4:	 5b da 09 3b ea a1 fa 3a         [..;...:
  1003bc:	 9c e0 e2 3a 98 75 cc 3a         ...:.u.:
  1003c4:	 37 63 b7 3a 46 a9 a3 3a         7c.:F..:
  1003cc:	 7c 45 91 3a 66 33 80 3a         |E.:f3.:
  1003d4:	 ab d9 60 3a c2 d3 43 3a         ..`:..C:
  1003dc:	 57 42 29 3a 0f 10 11 3a         WB):...:
  1003e4:	 b6 4a f6 39 79 d1 ce 39         .J.9y..9
  1003ec:	 56 7e ab 39 b5 18 8c 39         V~.9...9
  1003f4:	 4b cc 60 39 be 55 30 39         K.`9.U09
  1003fc:	 b4 54 06 39 4a 9f c4 38         .T.9J..8


WOLASynthesisFilter_Float_M64_m4_r1:
  100404:	 c6 52 a3 3c 7b 1b f6 3c         .R.<{..<
  10040c:	 18 98 22 3d c8 00 48 3d         .."=..H=
  100414:	 a3 02 6b 3d d3 ad 85 3d         ..k=...=
  10041c:	 c7 66 94 3d 27 8f a1 3d         .f.='..=
  100424:	 55 0c ad 3d 64 c6 b6 3d         U..=d..=
  10042c:	 57 a8 be 3d 4f a0 c4 3d         W..=O..=
  100434:	 d4 9f c8 3d 06 9c ca 3d         ...=...=
  10043c:	 c0 8d ca 3d c4 71 c8 3d         ...=.q.=
  100444:	 e8 48 c4 3d 21 18 be 3d         .H.=!..=
  10044c:	 a0 e8 b5 3d db c7 ab 3d         ...=...=
  100454:	 98 c7 9f 3d e4 fd 91 3d         ...=...=
  10045c:	 10 85 82 3d 23 f7 62 3d         ...=#.b=
  100464:	 eb 07 3e 3d 6f 89 16 3d         ..>=o..=
  10046c:	 60 a0 d9 3c a7 6f 82 3c         `..<.o.<
  100474:	 2a 15 a1 3b 27 37 d0 bb         *..;'7..
  10047c:	 8d ad 91 bc 91 fb ec bc         ........
  100484:	 58 8b 9c bd 86 34 df bd         X....4..
  10048c:	 18 d3 0f be d1 ab 2e be         ........
  100494:	 07 e1 4b be cd 30 67 be         ..K..0g.
  10049c:	 9a 2d 80 be 74 91 8b be         .-..t...
  1004a4:	 c2 a6 95 be 23 52 9e be         ....#R..
  1004ac:	 43 7a a5 be 00 08 ab be         Cz......
  1004b4:	 e0 e6 ae be 01 05 b1 be         ........
  1004bc:	 95 53 b1 be d4 c6 af be         .S......
  1004c4:	 6a 56 ac be 6c fd a6 be         jV..l...
  1004cc:	 96 ba 9f be 76 90 96 be         ....v...
  1004d4:	 6f 85 8b be ab 47 7d be         o....G}.
  1004dc:	 20 f4 5f be 1a 35 3f be          ._..5?.
  1004e4:	 86 37 1b be 12 61 e8 bd         .7...a..
  1004ec:	 85 ba 94 bd d8 15 f0 bc         ........
  1004f4:	 61 92 84 3c 2f 1b 82 3d         a..</..=
  1004fc:	 6f 27 e6 3d 11 76 25 3e         o'.=.v%>
  100504:	 ca da 83 3e 42 28 ae 3e         ...>B(.>
  10050c:	 78 ec d7 3e 20 68 00 3f         x..> h.?
  100514:	 8a 3d 14 3f b6 49 27 3f         .=.?.I'?
  10051c:	 ba 5f 39 3f b3 52 4a 3f         ._9?.RJ?
  100524:	 2d f6 59 3f 45 1e 68 3f         -.Y?E.h?
  10052c:	 08 a0 74 3f bd 51 7f 3f         ..t?.Q.?
  100534:	 8a 05 84 3f d2 52 87 3f         ...?.R.?
  10053c:	 5f 7e 89 3f 25 77 8a 3f         _~.?%w.?
  100544:	 49 2d 8a 3f 47 92 88 3f         I-.?G..?
  10054c:	 35 99 85 3f b5 36 81 3f         5..?.6.?
  100554:	 34 c2 76 3f 21 21 68 3f         4.v?!!h?
  10055c:	 37 7e 56 3f 7a d1 41 3f         7~V?z.A?
  100564:	 eb 16 2a 3f ba 4e 0f 3f         ..*?.N.?
  10056c:	 9e fa e2 3e bd 56 a1 3e         ...>.V.>
  100574:	 d0 97 33 3e 4d cf c7 3c         ..3>M..<
  10057c:	 44 d5 0c be a6 29 9e be         D....)..
  100584:	 59 54 09 bf 17 61 44 bf         YT...aD.
  10058c:	 0d c2 80 bf 89 41 a0 bf         .....A..
  100594:	 0c 90 c0 bf 37 8d e1 bf         ....7...
  10059c:	 9c 8b 01 c0 90 85 12 c0         ........
  1005a4:	 6e a2 23 c0 cc cf 34 c0         n.#...4.
  1005ac:	 f0 fa 45 c0 d8 10 57 c0         ..E...W.
  1005b4:	 72 fe 67 c0 92 b0 78 c0         r.g...x.
  1005bc:	 18 8a 84 c0 31 8b 8c c0         ....1...
  1005c4:	 48 52 94 c0 3d d6 9b c0         HR..=...
  1005cc:	 2a 0e a3 c0 80 f1 a9 c0         *.......
  1005d4:	 f5 77 b0 c0 a6 99 b6 c0         .w......
  1005dc:	 22 4f bc c0 5e 91 c1 c0         "O..^...
  1005e4:	 e4 59 c6 c0 b8 a2 ca c0         .Y......
  1005ec:	 77 66 ce c0 5c a0 d1 c0         wf..\...
  1005f4:	 40 4c d4 c0 a1 66 d6 c0         @L...f..
  1005fc:	 b3 ec d7 c0 c1 e5 d8 c0         ........
  100604:	 48 0b d8 c0 60 77 d6 c0         H...`w..
  10060c:	 4c 4f d4 c0 f0 95 d1 c0         LO......
  100614:	 d7 4e ce c0 3d 7e ca c0         .N..=~..
  10061c:	 fc 28 c6 c0 7c 54 c1 c0         .(..|T..
  100624:	 cb 06 bc c0 6f 46 b6 c0         ....oF..
  10062c:	 7a 1a b0 c0 70 8a a9 c0         z...p...
  100634:	 3a 9e a2 c0 27 5e 9b c0         :...'^..
  10063c:	 db d2 93 c0 3a 05 8c c0         ....:...
  100644:	 6b fe 83 c0 86 8f 77 c0         k.....w.
  10064c:	 73 d5 66 c0 a8 e1 55 c0         s.f...U.
  100654:	 4c c7 44 c0 7c 99 33 c0         L.D.|.3.
  10065c:	 38 6b 22 c0 2f 4f 11 c0         8k"./O..
  100664:	 c5 57 00 c0 fd 2d df bf         .W...-..
  10066c:	 86 3c be bf e3 fc 9d bf         .<......
  100674:	 9d 1e 7d bf 29 25 40 bf         ..}.)%@.
  10067c:	 7a 47 05 bf 08 f4 98 be         zG......
  100684:	 26 c5 e7 bd 7b a3 43 3d         &...{.C=
  10068c:	 bb 73 4a 3e 60 34 ac 3e         .sJ>`4.>
  100694:	 01 42 ed 3e cb 24 14 3f         .B.>.$.?
  10069c:	 44 9d 2e 3f 73 06 46 3f         D..?s.F?
  1006a4:	 a4 60 5a 3f 39 b0 6b 3f         .`Z?9.k?
  1006ac:	 a4 fd 79 3f 9f aa 82 3f         ..y?...?
  1006b4:	 9b e3 86 3f 8d b3 89 3f         ...?...?
  1006bc:	 0f 26 8b 3f 45 48 8b 3f         .&.?EH.?
  1006c4:	 cc 28 8a 3f aa d7 87 3f         .(.?...?
  1006cc:	 23 66 84 3f 3b cd 7f 3f         #f.?;..?
  1006d4:	 fc d8 74 3f 07 18 68 3f         ..t?..h?
  1006dc:	 4d b4 59 3f f4 d8 49 3f         M.Y?..I?
  1006e4:	 fc b1 38 3f 06 6c 26 3f         ..8?.l&?
  1006ec:	 05 34 13 3f fd 6d fe 3e         .4.?.m.>
  1006f4:	 79 43 d5 3e 1f 41 ab 3e         yC.>.A.>
  1006fc:	 0e be 80 3e 80 60 2b 3e         ...>.`+>
  100704:	 2a 26 c7 3d c1 b0 45 3d         *&.=..E=
  10070c:	 a8 86 5f 3a 4f e0 36 bd         .._:O.6.
  100714:	 10 0e b4 bd 48 c1 03 be         ....H...
  10071c:	 86 a2 2a be 5f 6e 4e be         ..*._nN.
  100724:	 8d f0 6e be 6f fe 85 be         ..n.o...
  10072c:	 a7 b7 92 be fb 95 9d be         ........
  100734:	 7e 8f a6 be 41 9e ad be         ~...A...
  10073c:	 25 c0 b2 be d8 f6 b5 be         %.......
  100744:	 a6 47 b7 be 6a bb b6 be         .G..j...
  10074c:	 3a 5e b4 be 5c 3f b0 be         :^..\?..
  100754:	 08 71 aa be 21 08 a3 be         .q..!...
  10075c:	 18 1c 9a be a1 c6 8f be         ........
  100764:	 67 23 84 be cf 9f 6e be         g#....n.
  10076c:	 38 d6 52 be 63 2a 35 be         8.R.c*5.
  100774:	 be de 15 be 33 6e ea bd         ....3n..
  10077c:	 44 f0 a6 bd c0 f3 41 bd         D.....A.
  100784:	 e6 ea 85 bc 9c de 98 bb         ........
  10078c:	 5f 1f e0 3b b9 f7 93 3c         _..;...<
  100794:	 6e c7 ec 3c 71 d9 20 3d         n..<q. =
  10079c:	 b9 01 49 3d 7f 88 6e 3d         ..I=..n=
  1007a4:	 a3 90 88 3d c0 43 98 3d         ...=.C.=
  1007ac:	 69 3f a6 3d a9 69 b2 3d         i?.=.i.=
  1007b4:	 cb ac bc 3d 6b f7 c4 3d         ...=k..=
  1007bc:	 75 3c cb 3d 20 73 cf 3d         u<.= s.=
  1007c4:	 e6 96 d1 3d 5d a7 d1 3d         ...=]..=
  1007cc:	 2f a8 cf 3d f4 a0 cb 3d         /..=...=
  1007d4:	 fb 9c c5 3d 30 ab bd 3d         ...=0..=
  1007dc:	 d4 dd b3 3d 58 4a a8 3d         ...=XJ.=
  1007e4:	 15 09 9b 3d 0a 35 8c 3d         ...=.5.=
  1007ec:	 42 d7 77 3d b1 98 54 3d         B.w=..T=
  1007f4:	 1c f1 2e 3d 47 26 07 3d         ...=G&.=
  1007fc:	 13 01 bb 3c 94 d6 46 3c         ...<..F<


WOLAAnalysisFilter_Float_M128_m4_r1:
  100804:	 00 00 00 00 6a 43 79 b8         ....jCy.
  10080c:	 2e b4 93 b8 1f be ac b8         ........
  100814:	 df d4 c7 b8 d9 0d e5 b8         ........
  10081c:	 41 3f 02 b9 24 1e 13 b9         A?..$...
  100824:	 43 2e 25 b9 47 7a 38 b9         C.%.Gz8.
  10082c:	 cc 0c 4d b9 40 f0 62 b9         ..M.@.b.
  100834:	 09 2f 7a b9 ad 69 89 b9         ./z..i..
  10083c:	 9e 73 96 b9 48 3a a4 b9         .s..H:..
  100844:	 79 c2 b2 b9 e5 10 c2 b9         y.......
  10084c:	 13 2a d2 b9 69 12 e3 b9         .*..i...
  100854:	 1c ce f4 b9 9f b0 03 ba         ........
  10085c:	 cf 67 0d ba 6f 8e 17 ba         .g..o...
  100864:	 32 26 22 ba a9 30 2d ba         2&"..0-.
  10086c:	 43 af 38 ba 50 a3 44 ba         C.8.P.D.
  100874:	 f7 0d 51 ba 34 f0 5d ba         ..Q.4.].
  10087c:	 df 4a 6b ba a1 1e 79 ba         .Jk...y.
  100884:	 fa b5 83 ba 93 19 8b ba         ........
  10088c:	 24 ba 92 ba 9b 97 9a ba         $.......
  100894:	 e0 b1 a2 ba 9c 08 ab ba         ........
  10089c:	 70 9b b3 ba dc 69 bc ba         p....i..
  1008a4:	 3c 73 c5 ba d4 b6 ce ba         <s......
  1008ac:	 bc 33 d8 ba fa e8 e1 ba         .3......
  1008b4:	 51 d5 eb ba 8b f7 f5 ba         Q.......
  1008bc:	 13 27 00 bb cb 6b 05 bb         .'...k..
  1008c4:	 0b c9 0a bb e6 3d 10 bb         .....=..
  1008cc:	 4d c9 15 bb 29 6a 1b bb         M...)j..
  1008d4:	 4a 1f 21 bb 6d e7 26 bb         J.!.m.&.
  1008dc:	 32 c1 2c bb 30 ab 32 bb         2.,.0.2.
  1008e4:	 d8 a3 38 bb 92 a9 3e bb         ..8...>.
  1008ec:	 ab ba 44 bb 55 d5 4a bb         ..D.U.J.
  1008f4:	 b7 f7 50 bb d1 1f 57 bb         ..P...W.
  1008fc:	 97 4b 5d bb e5 78 63 bb         .K]..xc.
  100904:	 7a a5 69 bb 01 cf 6f bb         z.i...o.
  10090c:	 14 f3 75 bb 2b 0f 7c bb         ..u.+.|.
  100914:	 56 10 81 bb 72 12 84 bb         V...r...
  10091c:	 84 0c 87 bb 20 fd 89 bb         .... ...
  100924:	 c7 e2 8c bb f5 bb 8f bb         ........
  10092c:	 16 87 92 bb 92 42 95 bb         .....B..
  100934:	 be ec 97 bb e7 83 9a bb         ........
  10093c:	 54 06 9d bb 3d 72 9f bb         T...=r..
  100944:	 d0 c5 a1 bb 34 ff a3 bb         ....4...
  10094c:	 88 1c a6 bb d9 1b a8 bb         ........
  100954:	 37 fb a9 bb a0 b8 ab bb         7.......
  10095c:	 11 52 ad bb 79 c5 ae bb         .R..y...
  100964:	 c3 10 b0 bb d1 31 b1 bb         .....1..
  10096c:	 81 26 b2 bb a7 ec b2 bb         .&......
  100974:	 16 82 b3 bb 9a e4 b3 bb         ........
  10097c:	 f6 11 b4 bb eb 07 b4 bb         ........
  100984:	 3b c4 b3 bb 9d 44 b3 bb         ;....D..
  10098c:	 cc 86 b2 bb 7d 88 b1 bb         ....}...
  100994:	 64 47 b0 bb 2f c1 ae bb         dG../...
  10099c:	 98 f3 ac bb 4d dc aa bb         ....M...
  1009a4:	 03 79 a8 bb 6d c7 a5 bb         .y..m...
  1009ac:	 41 c5 a2 bb 3b 70 9f bb         A...;p..
  1009b4:	 15 c6 9b bb 93 c4 97 bb         ........
  1009bc:	 76 69 93 bb 8b b2 8e bb         vi......
  1009c4:	 a1 9d 89 bb 91 28 84 bb         .....(..
  1009cc:	 71 a2 7c bb fe 2a 70 bb         q.|..*p.
  1009d4:	 a6 e6 62 bb 5c d1 54 bb         ..b.\.T.
  1009dc:	 2f e7 45 bb 2e 24 36 bb         /.E..$6.
  1009e4:	 9b 84 25 bb bc 04 14 bb         ..%.....
  1009ec:	 fb a0 01 bb b4 ab dc ba         ........
  1009f4:	 f4 3f b4 ba 33 f8 89 ba         .?..3...
  1009fc:	 70 9c 3b ba f0 ef be b9         p.;.....
  100a04:	 00 00 00 00 5d df c8 39         ....]..9
  100a0c:	 0c 48 4c 3a 9b 0d 9c 3a         .HL:...:
  100a14:	 2b f9 d3 3a 6c f5 06 3b         +..:l..;
  100a1c:	 4c f3 24 3b f0 f7 43 3b         L.$;..C;
  100a24:	 f8 04 64 3b e4 8d 82 3b         ..d;...;
  100a2c:	 ce 9e 93 3b c0 35 a5 3b         ...;.5.;
  100a34:	 24 53 b7 3b 50 f7 c9 3b         $S.;P..;
  100a3c:	 79 22 dd 3b bf d4 f0 3b         y".;...;
  100a44:	 14 87 02 3c 4d e7 0c 3c         ...<M..<
  100a4c:	 f1 8a 17 3c db 71 22 3c         ...<.q"<
  100a54:	 da 9b 2d 3c 95 08 39 3c         ..-<..9<
  100a5c:	 d5 b7 44 3c 30 a9 50 3c         ..D<0.P<
  100a64:	 2f dc 5c 3c 5b 50 69 3c         /.\<[Pi<
  100a6c:	 20 05 76 3c f3 7c 81 3c          .v<.|.<
  100a74:	 06 17 88 3c 63 d0 8e 3c         ...<c..<
  100a7c:	 a4 a8 95 3c 68 9f 9c 3c         ...<h..<
  100a84:	 2f b4 a3 3c 83 e6 aa 3c         /..<...<
  100a8c:	 dd 35 b2 3c b7 a1 b9 3c         .5.<...<
  100a94:	 7b 29 c1 3c 92 cc c8 3c         {).<...<
  100a9c:	 51 8a d0 3c 1c 62 d8 3c         Q..<.b.<
  100aa4:	 37 53 e0 3c f6 5c e8 3c         7S.<.\.<
  100aac:	 8d 7e f0 3c 3c b7 f8 3c         .~.<<..<
  100ab4:	 1d 83 00 3d 54 b5 04 3d         ...=T..=
  100abc:	 d9 f1 08 3d 3d 38 0d 3d         ...==8.=
  100ac4:	 05 88 11 3d c0 e0 15 3d         ...=...=
  100acc:	 f0 41 1a 3d 19 ab 1e 3d         .A.=...=
  100ad4:	 b9 1b 23 3d 4a 93 27 3d         ..#=J.'=
  100adc:	 4b 11 2c 3d 2c 95 30 3d         K.,=,.0=
  100ae4:	 65 1e 35 3d 64 ac 39 3d         e.5=d.9=
  100aec:	 9d 3e 3e 3d 76 d4 42 3d         .>>=v.B=
  100af4:	 5d 6d 47 3d b7 08 4c 3d         ]mG=..L=
  100afc:	 f0 a5 50 3d 63 44 55 3d         ..P=cDU=
  100b04:	 79 e3 59 3d 8f 82 5e 3d         y.Y=..^=
  100b0c:	 05 21 63 3d 38 be 67 3d         .!c=8.g=
  100b14:	 82 59 6c 3d 41 f2 70 3d         .Yl=A.p=
  100b1c:	 cc 87 75 3d 7c 19 7a 3d         ..u=|.z=
  100b24:	 a9 a6 7e 3d 56 97 81 3d         ..~=V..=
  100b2c:	 6d d8 83 3d 43 16 86 3d         m..=C..=
  100b34:	 85 50 88 3d df 86 8a 3d         .P.=...=
  100b3c:	 fa b8 8c 3d 81 e6 8e 3d         ...=...=
  100b44:	 20 0f 91 3d 82 32 93 3d          ..=.2.=
  100b4c:	 53 50 95 3d 3f 68 97 3d         SP.=?h.=
  100b54:	 f3 79 99 3d 1b 85 9b 3d         .y.=...=
  100b5c:	 66 89 9d 3d 82 86 9f 3d         f..=...=
  100b64:	 1d 7c a1 3d e9 69 a3 3d         .|.=.i.=
  100b6c:	 94 4f a5 3d d4 2c a7 3d         .O.=.,.=
  100b74:	 57 01 a9 3d d5 cc aa 3d         W..=...=
  100b7c:	 02 8f ac 3d 92 47 ae 3d         ...=.G.=
  100b84:	 41 f6 af 3d c4 9a b1 3d         A..=...=
  100b8c:	 d7 34 b3 3d 36 c4 b4 3d         .4.=6..=
  100b94:	 9f 48 b6 3d d2 c1 b7 3d         .H.=...=
  100b9c:	 8d 2f b9 3d 95 91 ba 3d         ./.=...=
  100ba4:	 ae e7 bb 3d 9e 31 bd 3d         ...=.1.=
  100bac:	 2d 6f be 3d 26 a0 bf 3d         -o.=&..=
  100bb4:	 55 c4 c0 3d 87 db c1 3d         U..=...=
  100bbc:	 8e e5 c2 3d 3c e2 c3 3d         ...=<..=
  100bc4:	 66 d1 c4 3d e2 b2 c5 3d         f..=...=
  100bcc:	 8a 86 c6 3d 3a 4c c7 3d         ...=:L.=
  100bd4:	 d0 03 c8 3d 2c ad c8 3d         ...=,..=
  100bdc:	 30 48 c9 3d c3 d4 c9 3d         0H.=...=
  100be4:	 ca 52 ca 3d 32 c2 ca 3d         .R.=2..=
  100bec:	 e6 22 cb 3d d7 74 cb 3d         .".=.t.=
  100bf4:	 f4 b7 cb 3d 35 ec cb 3d         ...=5..=
  100bfc:	 8d 11 cc 3d f8 27 cc 3d         ...=.'.=
  100c04:	 71 2f cc 3d f8 27 cc 3d         q/.=.'.=
  100c0c:	 8d 11 cc 3d 35 ec cb 3d         ...=5..=
  100c14:	 f4 b7 cb 3d d7 74 cb 3d         ...=.t.=
  100c1c:	 e6 22 cb 3d 32 c2 ca 3d         .".=2..=
  100c24:	 ca 52 ca 3d c3 d4 c9 3d         .R.=...=
  100c2c:	 30 48 c9 3d 2c ad c8 3d         0H.=,..=
  100c34:	 d0 03 c8 3d 3a 4c c7 3d         ...=:L.=
  100c3c:	 8a 86 c6 3d e2 b2 c5 3d         ...=...=
  100c44:	 66 d1 c4 3d 3c e2 c3 3d         f..=<..=
  100c4c:	 8e e5 c2 3d 87 db c1 3d         ...=...=
  100c54:	 55 c4 c0 3d 26 a0 bf 3d         U..=&..=
  100c5c:	 2d 6f be 3d 9e 31 bd 3d         -o.=.1.=
  100c64:	 ae e7 bb 3d 95 91 ba 3d         ...=...=
  100c6c:	 8d 2f b9 3d d2 c1 b7 3d         ./.=...=
  100c74:	 9f 48 b6 3d 36 c4 b4 3d         .H.=6..=
  100c7c:	 d7 34 b3 3d c4 9a b1 3d         .4.=...=
  100c84:	 41 f6 af 3d 92 47 ae 3d         A..=.G.=
  100c8c:	 02 8f ac 3d d5 cc aa 3d         ...=...=
  100c94:	 57 01 a9 3d d4 2c a7 3d         W..=.,.=
  100c9c:	 94 4f a5 3d e9 69 a3 3d         .O.=.i.=
  100ca4:	 1d 7c a1 3d 82 86 9f 3d         .|.=...=
  100cac:	 66 89 9d 3d 1b 85 9b 3d         f..=...=
  100cb4:	 f3 79 99 3d 3f 68 97 3d         .y.=?h.=
  100cbc:	 53 50 95 3d 82 32 93 3d         SP.=.2.=
  100cc4:	 20 0f 91 3d 81 e6 8e 3d          ..=...=
  100ccc:	 fa b8 8c 3d df 86 8a 3d         ...=...=
  100cd4:	 85 50 88 3d 43 16 86 3d         .P.=C..=
  100cdc:	 6d d8 83 3d 56 97 81 3d         m..=V..=
  100ce4:	 a9 a6 7e 3d 7c 19 7a 3d         ..~=|.z=
  100cec:	 cc 87 75 3d 41 f2 70 3d         ..u=A.p=
  100cf4:	 82 59 6c 3d 38 be 67 3d         .Yl=8.g=
  100cfc:	 05 21 63 3d 8f 82 5e 3d         .!c=..^=
  100d04:	 79 e3 59 3d 63 44 55 3d         y.Y=cDU=
  100d0c:	 f0 a5 50 3d b7 08 4c 3d         ..P=..L=
  100d14:	 5d 6d 47 3d 76 d4 42 3d         ]mG=v.B=
  100d1c:	 9d 3e 3e 3d 64 ac 39 3d         .>>=d.9=
  100d24:	 65 1e 35 3d 2c 95 30 3d         e.5=,.0=
  100d2c:	 4b 11 2c 3d 4a 93 27 3d         K.,=J.'=
  100d34:	 b9 1b 23 3d 19 ab 1e 3d         ..#=...=
  100d3c:	 f0 41 1a 3d c0 e0 15 3d         .A.=...=
  100d44:	 05 88 11 3d 3d 38 0d 3d         ...==8.=
  100d4c:	 d9 f1 08 3d 54 b5 04 3d         ...=T..=
  100d54:	 1d 83 00 3d 3c b7 f8 3c         ...=<..<
  100d5c:	 8d 7e f0 3c f6 5c e8 3c         .~.<.\.<
  100d64:	 37 53 e0 3c 1c 62 d8 3c         7S.<.b.<
  100d6c:	 51 8a d0 3c 92 cc c8 3c         Q..<...<
  100d74:	 7b 29 c1 3c b7 a1 b9 3c         {).<...<
  100d7c:	 dd 35 b2 3c 83 e6 aa 3c         .5.<...<
  100d84:	 2f b4 a3 3c 68 9f 9c 3c         /..<h..<
  100d8c:	 a4 a8 95 3c 63 d0 8e 3c         ...<c..<
  100d94:	 06 17 88 3c f3 7c 81 3c         ...<.|.<
  100d9c:	 20 05 76 3c 5b 50 69 3c          .v<[Pi<
  100da4:	 2f dc 5c 3c 30 a9 50 3c         /.\<0.P<
  100dac:	 d5 b7 44 3c 95 08 39 3c         ..D<..9<
  100db4:	 da 9b 2d 3c db 71 22 3c         ..-<.q"<
  100dbc:	 f1 8a 17 3c 4d e7 0c 3c         ...<M..<
  100dc4:	 14 87 02 3c bf d4 f0 3b         ...<...;
  100dcc:	 79 22 dd 3b 50 f7 c9 3b         y".;P..;
  100dd4:	 24 53 b7 3b c0 35 a5 3b         $S.;.5.;
  100ddc:	 ce 9e 93 3b e4 8d 82 3b         ...;...;
  100de4:	 f8 04 64 3b f0 f7 43 3b         ..d;..C;
  100dec:	 4c f3 24 3b 6c f5 06 3b         L.$;l..;
  100df4:	 2b f9 d3 3a 9b 0d 9c 3a         +..:...:
  100dfc:	 0c 48 4c 3a 5d df c8 39         .HL:]..9
  100e04:	 00 00 00 00 f0 ef be b9         ........
  100e0c:	 70 9c 3b ba 33 f8 89 ba         p.;.3...
  100e14:	 f4 3f b4 ba b4 ab dc ba         .?......
  100e1c:	 fb a0 01 bb bc 04 14 bb         ........
  100e24:	 9b 84 25 bb 2e 24 36 bb         ..%..$6.
  100e2c:	 2f e7 45 bb 5c d1 54 bb         /.E.\.T.
  100e34:	 a6 e6 62 bb fe 2a 70 bb         ..b..*p.
  100e3c:	 71 a2 7c bb 91 28 84 bb         q.|..(..
  100e44:	 a1 9d 89 bb 8b b2 8e bb         ........
  100e4c:	 76 69 93 bb 93 c4 97 bb         vi......
  100e54:	 15 c6 9b bb 3b 70 9f bb         ....;p..
  100e5c:	 41 c5 a2 bb 6d c7 a5 bb         A...m...
  100e64:	 03 79 a8 bb 4d dc aa bb         .y..M...
  100e6c:	 98 f3 ac bb 2f c1 ae bb         ..../...
  100e74:	 64 47 b0 bb 7d 88 b1 bb         dG..}...
  100e7c:	 cc 86 b2 bb 9d 44 b3 bb         .....D..
  100e84:	 3b c4 b3 bb eb 07 b4 bb         ;.......
  100e8c:	 f6 11 b4 bb 9a e4 b3 bb         ........
  100e94:	 16 82 b3 bb a7 ec b2 bb         ........
  100e9c:	 81 26 b2 bb d1 31 b1 bb         .&...1..
  100ea4:	 c3 10 b0 bb 79 c5 ae bb         ....y...
  100eac:	 11 52 ad bb a0 b8 ab bb         .R......
  100eb4:	 37 fb a9 bb d9 1b a8 bb         7.......
  100ebc:	 88 1c a6 bb 34 ff a3 bb         ....4...
  100ec4:	 d0 c5 a1 bb 3d 72 9f bb         ....=r..
  100ecc:	 54 06 9d bb e7 83 9a bb         T.......
  100ed4:	 be ec 97 bb 92 42 95 bb         .....B..
  100edc:	 16 87 92 bb f5 bb 8f bb         ........
  100ee4:	 c7 e2 8c bb 20 fd 89 bb         .... ...
  100eec:	 84 0c 87 bb 72 12 84 bb         ....r...
  100ef4:	 56 10 81 bb 2b 0f 7c bb         V...+.|.
  100efc:	 14 f3 75 bb 01 cf 6f bb         ..u...o.
  100f04:	 7a a5 69 bb e5 78 63 bb         z.i..xc.
  100f0c:	 97 4b 5d bb d1 1f 57 bb         .K]...W.
  100f14:	 b7 f7 50 bb 55 d5 4a bb         ..P.U.J.
  100f1c:	 ab ba 44 bb 92 a9 3e bb         ..D...>.
  100f24:	 d8 a3 38 bb 30 ab 32 bb         ..8.0.2.
  100f2c:	 32 c1 2c bb 6d e7 26 bb         2.,.m.&.
  100f34:	 4a 1f 21 bb 29 6a 1b bb         J.!.)j..
  100f3c:	 4d c9 15 bb e6 3d 10 bb         M....=..
  100f44:	 0b c9 0a bb cb 6b 05 bb         .....k..
  100f4c:	 13 27 00 bb 8b f7 f5 ba         .'......
  100f54:	 51 d5 eb ba fa e8 e1 ba         Q.......
  100f5c:	 bc 33 d8 ba d4 b6 ce ba         .3......
  100f64:	 3c 73 c5 ba dc 69 bc ba         <s...i..
  100f6c:	 70 9b b3 ba 9c 08 ab ba         p.......
  100f74:	 e0 b1 a2 ba 9b 97 9a ba         ........
  100f7c:	 24 ba 92 ba 93 19 8b ba         $.......
  100f84:	 fa b5 83 ba a1 1e 79 ba         ......y.
  100f8c:	 df 4a 6b ba 34 f0 5d ba         .Jk.4.].
  100f94:	 f7 0d 51 ba 50 a3 44 ba         ..Q.P.D.
  100f9c:	 43 af 38 ba a9 30 2d ba         C.8..0-.
  100fa4:	 32 26 22 ba 6f 8e 17 ba         2&".o...
  100fac:	 cf 67 0d ba 9f b0 03 ba         .g......
  100fb4:	 1c ce f4 b9 69 12 e3 b9         ....i...
  100fbc:	 13 2a d2 b9 e5 10 c2 b9         .*......
  100fc4:	 79 c2 b2 b9 48 3a a4 b9         y...H:..
  100fcc:	 9e 73 96 b9 ad 69 89 b9         .s...i..
  100fd4:	 09 2f 7a b9 40 f0 62 b9         ./z.@.b.
  100fdc:	 cc 0c 4d b9 47 7a 38 b9         ..M.Gz8.
  100fe4:	 43 2e 25 b9 24 1e 13 b9         C.%.$...
  100fec:	 41 3f 02 b9 d9 0d e5 b8         A?......
  100ff4:	 df d4 c7 b8 1f be ac b8         ........
  100ffc:	 2e b4 93 b8 6a 43 79 b8         ....jCy.


WOLASynthesisFilter_Float_M128_m4_r1:
  101004:	 41 cc b0 bc 67 8d ee bc         A...g...
  10100c:	 05 98 15 bd c6 4c 33 bd         .....L3.
  101014:	 c1 57 50 bd f5 ab 6c bd         .WP...l.
  10101c:	 4a 1e 84 bd 84 7e 91 bd         J....~..
  101024:	 7a 70 9e bd 28 ee aa bd         zp..(...
  10102c:	 a8 f1 b6 bd 4b 75 c2 bd         ....Ku..
  101034:	 86 73 cd bd f7 e6 d7 bd         .s......
  10103c:	 8b ca e1 bd 39 19 eb bd         ....9...
  101044:	 64 ce f3 bd 89 e5 fb bd         d.......
  10104c:	 3c ad 01 be 9a 14 05 be         <.......
  101054:	 0f 27 08 be e1 e2 0a be         .'......
  10105c:	 83 46 0d be 8c 50 0f be         .F...P..
  101064:	 b2 ff 10 be f6 52 12 be         .....R..
  10106c:	 61 49 13 be 21 e2 13 be         aI..!...
  101074:	 b1 1c 14 be 9f f8 13 be         ........
  10107c:	 b5 75 13 be e5 93 12 be         .u......
  101084:	 44 53 11 be 30 b4 0f be         DS..0...
  10108c:	 1b b7 0d be c7 5c 0b be         .....\..
  101094:	 0b a6 08 be f3 93 05 be         ........
  10109c:	 c9 27 02 be 17 c6 fc bd         .'......
  1010a4:	 98 8e f4 bd dc ac eb bd         ........
  1010ac:	 ee 24 e2 bd 41 fb d7 bd         .$..A...
  1010b4:	 a9 34 cd bd 40 d6 c1 bd         .4..@...
  1010bc:	 b1 e5 b5 bd dd 68 a9 bd         .....h..
  1010c4:	 15 66 9c bd f5 e3 8e bd         .f......
  1010cc:	 7e e9 80 bd 00 fc 64 bd         ~.....d.
  1010d4:	 47 52 47 bd c8 e5 28 bd         GRG...(.
  1010dc:	 11 c7 09 bd a0 0e d4 bc         ........
  1010e4:	 85 70 93 bc dd b0 23 bc         .p....#.
  1010ec:	 bc c0 f6 ba eb b7 ce 3b         .......;
  1010f4:	 0a 9c 6e 3c 90 4b bb 3c         ..n<.K.<
  1010fc:	 43 7d ff 3c 00 bf 1f 3d         C}.<...=
  101104:	 7f a3 ad 3d 74 02 df 3d         ...=t..=
  10110c:	 b5 e5 07 3e d0 f2 1f 3e         ...>...>
  101114:	 41 9c 37 3e ae d5 4e 3e         A.7>..N>
  10111c:	 e7 92 65 3e c2 c7 7b 3e         ..e>..{>
  101124:	 14 b4 88 3e 1b 34 93 3e         ...>.4.>
  10112c:	 15 5e 9d 3e 30 2c a7 3e         .^.>0,.>
  101134:	 c0 98 b0 3e 2d 9e b9 3e         ...>-..>
  10113c:	 fe 36 c2 3e e1 5d ca 3e         .6.>.].>
  101144:	 ad 0d d2 3e 53 41 d9 3e         ...>SA.>
  10114c:	 fe f3 df 3e ff 20 e6 3e         ...>. .>
  101154:	 e1 c3 eb 3e 52 d8 f0 3e         ...>R..>
  10115c:	 47 5a f5 3e e6 45 f9 3e         GZ.>.E.>
  101164:	 92 97 fc 3e ef 4b ff 3e         ...>.K.>
  10116c:	 f0 af 00 3f 45 68 01 3f         ...?Eh.?
  101174:	 ab cd 01 3f fc de 01 3f         ...?...?
  10117c:	 35 9b 01 3f 7c 01 01 3f         5..?|..?
  101184:	 1d 11 00 3f 0f 93 fd 3e         ...?...>
  10118c:	 b5 54 fa 3e b0 66 f6 3e         .T.>.f.>
  101194:	 e7 c8 f1 3e 86 7b ec 3e         ...>.{.>
  10119c:	 1b 7f e6 3e 8d d4 df 3e         ...>...>
  1011a4:	 15 7d d8 3e 51 7a d0 3e         .}.>Qz.>
  1011ac:	 2e ce c7 3e fe 7a be 3e         ...>.z.>
  1011b4:	 6d 83 b4 3e 83 ea a9 3e         m..>...>
  1011bc:	 9d b3 9e 3e 80 e2 92 3e         ...>...>
  1011c4:	 4e 7b 86 3e fc 04 73 3e         N{.>..s>
  1011cc:	 d0 f9 57 3e 82 df 3b 3e         ..W>..;>
  1011d4:	 27 c1 1e 3e 8d aa 00 3e         '..>...>
  1011dc:	 8d 50 c3 3d ed 8e 83 3d         .P.=...=
  1011e4:	 1c 58 04 3d fd f3 ba b9         .X.=....
  1011ec:	 60 0f 0a bd 6d 9a 8a bd         `...m...
  1011f4:	 38 52 d1 bd 71 86 0c be         8R..q...
  1011fc:	 79 d3 30 be 44 40 54 be         y.0.D@T.
  101204:	 6e 4c 93 be f1 d6 b1 be         nL......
  10120c:	 ec 51 d0 be 41 ae ee be         .Q..A...
  101214:	 54 6e 06 bf d8 66 15 bf         Tn...f..
  10121c:	 d7 38 24 bf 78 dc 32 bf         .8$.x.2.
  101224:	 ca 49 41 bf d8 78 4f bf         .IA..xO.
  10122c:	 99 61 5d bf 1e fc 6a bf         .a]...j.
  101234:	 42 40 78 bf 10 93 82 bf         B@x.....
  10123c:	 cc d2 88 bf 6a db 8e bf         ....j...
  101244:	 e3 a8 94 bf 50 37 9a bf         ....P7..
  10124c:	 cb 82 9f bf 77 87 a4 bf         ....w...
  101254:	 7d 41 a9 bf 21 ad ad bf         }A..!...
  10125c:	 a8 c6 b1 bf 76 8a b5 bf         ....v...
  101264:	 f9 f4 b8 bf b0 02 bc bf         ........
  10126c:	 32 b0 be bf 2f fa c0 bf         2.../...
  101274:	 72 dd c2 bf d6 56 c4 bf         r....V..
  10127c:	 5e 63 c5 bf 11 00 c6 bf         ^c......
  101284:	 3d 2a c6 bf 33 df c5 bf         =*..3...
  10128c:	 54 1c c5 bf 55 df c3 bf         T...U...
  101294:	 ea 25 c2 bf e9 ed bf bf         .%......
  10129c:	 65 35 bd bf 87 fa b9 bf         e5......
  1012a4:	 a3 3b b6 bf 38 f7 b1 bf         .;..8...
  1012ac:	 ed 2b ad bf 9d d8 a7 bf         .+......
  1012b4:	 3b fc a1 bf ff 95 9b bf         ;.......
  1012bc:	 2f a5 94 bf 67 29 8d bf         /...g)..
  1012c4:	 53 22 85 bf a5 1f 79 bf         S"....y.
  1012cc:	 0a e4 66 bf 46 92 53 bf         ..f.F.S.
  1012d4:	 51 2b 3f bf 79 b0 29 bf         Q+?.y.).
  1012dc:	 6b 23 13 bf 6e 0c f7 be         k#..n...
  1012e4:	 a9 b6 c5 be 34 4b 92 be         ....4K..
  1012ec:	 19 a1 39 be 9d 37 95 bd         ..9..7..
  1012f4:	 8a a5 21 3d ec 5c 1f 3e         ..!=.\.>
  1012fc:	 dc 15 8d 3e 47 85 cb 3e         ...>G..>
  101304:	 e7 9f 10 3f d7 59 39 3f         ...?.Y9?
  10130c:	 b1 e6 62 3f 6f 9e 86 3f         ..b?o..?
  101314:	 39 29 9c 3f a6 0e b2 3f         9).?...?
  10131c:	 66 49 c8 3f 1b d4 de 3f         fI.?...?
  101324:	 19 a9 f5 3f 63 61 06 40         ...?ca.@
  10132c:	 a2 0d 12 40 52 d6 1d 40         ...@R..@
  101334:	 67 b8 29 40 cd b0 35 40         g.)@..5@
  10133c:	 62 bc 41 40 f1 d7 4d 40         b.A@..M@
  101344:	 4b 00 5a 40 27 32 66 40         K.Z@'2f@
  10134c:	 38 6a 72 40 2b a5 7e 40         8jr@+.~@
  101354:	 d4 6f 85 40 2a 8b 8b 40         .o.@*..@
  10135c:	 e2 a2 91 40 4a b5 97 40         ...@J..@
  101364:	 af c0 9d 40 5f c3 a3 40         ...@_..@
  10136c:	 a3 bb a9 40 c6 a7 af 40         ...@...@
  101374:	 18 86 b5 40 eb 54 bb 40         ...@.T.@
  10137c:	 8e 12 c1 40 5a bd c6 40         ...@Z..@
  101384:	 a6 53 cc 40 d0 d3 d1 40         .S.@...@
  10138c:	 38 3c d7 40 4a 8b dc 40         8<.@J..@
  101394:	 72 bf e1 40 21 d7 e6 40         r..@!..@
  10139c:	 d9 d0 eb 40 15 ab f0 40         ...@...@
  1013a4:	 60 64 f5 40 55 fb f9 40         `d.@U..@
  1013ac:	 89 6e fe 40 52 5e 01 41         .n.@R^.A
  1013b4:	 2a 72 03 41 2c 72 05 41         *r.A,r.A
  1013bc:	 b5 5d 07 41 3f 34 09 41         .].A?4.A
  1013c4:	 1a f5 0a 41 d9 9f 0c 41         ...A...A
  1013cc:	 e0 33 0e 41 c0 b0 0f 41         .3.A...A
  1013d4:	 f9 15 11 41 19 63 12 41         ...A.c.A
  1013dc:	 bb 97 13 41 81 b3 14 41         ...A...A
  1013e4:	 f9 b5 15 41 e9 9e 16 41         ...A...A
  1013ec:	 f9 6d 17 41 e6 22 18 41         .m.A.".A
  1013f4:	 6a bd 18 41 64 3d 19 41         j..Ad=.A
  1013fc:	 8f a2 19 41 2a f4 19 41         ...A*..A
  101404:	 82 af 19 41 dc 47 19 41         ...A.G.A
  10140c:	 78 c5 18 41 80 28 18 41         x..A.(.A
  101414:	 21 71 17 41 ae 9f 16 41         !q.A...A
  10141c:	 5d b4 15 41 7a af 14 41         ]..Az..A
  101424:	 64 91 13 41 72 5a 12 41         d..ArZ.A
  10142c:	 08 0b 11 41 91 a3 0f 41         ...A...A
  101434:	 7a 24 0e 41 3b 8e 0c 41         z$.A;..A
  10143c:	 5f e1 0a 41 67 1e 09 41         _..Ag..A
  101444:	 da 45 07 41 4c 58 05 41         .E.ALX.A
  10144c:	 59 56 03 41 9d 40 01 41         YV.A.@.A
  101454:	 73 2f fe 40 ae b8 f9 40         s/.@...@
  10145c:	 4b 1e f5 40 aa 61 f0 40         K..@.a.@
  101464:	 3e 84 eb 40 79 87 e6 40         >..@y..@
  10146c:	 db 6c e1 40 e7 35 dc 40         .l.@.5.@
  101474:	 2e e4 d6 40 40 79 d1 40         ...@@y.@
  10147c:	 b8 f6 cb 40 33 5e c6 40         ...@3^.@
  101484:	 53 b1 c0 40 c3 f1 ba 40         S..@...@
  10148c:	 29 21 b5 40 35 41 af 40         )!.@5A.@
  101494:	 97 53 a9 40 06 5a a3 40         .S.@.Z.@
  10149c:	 2e 56 9d 40 c7 49 97 40         .V.@.I.@
  1014a4:	 85 36 91 40 1d 1e 8b 40         .6.@...@
  1014ac:	 3f 02 85 40 3f c9 7d 40         ?..@?.}@
  1014b4:	 da 8d 71 40 a8 55 65 40         ..q@.Ue@
  1014bc:	 fb 23 59 40 1e fc 4c 40         .#Y@..L@
  1014c4:	 50 e1 40 40 d4 d6 34 40         P.@@..4@
  1014cc:	 ce df 28 40 65 ff 1c 40         ..(@e..@
  1014d4:	 ac 38 11 40 ac 8e 05 40         .8.@...@
  1014dc:	 b7 08 f4 3f 4b 39 dd 3f         ...?K9.?
  1014e4:	 c0 b4 c6 3f ae 80 b0 3f         ...?...?
  1014ec:	 6e a2 9a 3f 47 1f 85 3f         n..?G..?
  1014f4:	 b0 f8 5f 3f 0e 7d 36 3f         .._?.}6?
  1014fc:	 42 d5 0d 3f 47 48 cb 3e         B..?GH.>
  101504:	 93 2d 84 3e 24 e4 0d 3e         .-.>$..>
  10150c:	 2b 5b ba 3c 67 b8 b6 bd         +[.<g...
  101514:	 33 01 4a be da 49 9a be         3.J..I..
  10151c:	 b7 82 cd be ca a4 fe be         ........
  101524:	 3c d5 16 bf 73 47 2d bf         <...sG-.
  10152c:	 05 a7 42 bf 43 f2 56 bf         ..B.C.V.
  101534:	 ff 27 6a bf 44 47 7c bf         .'j.DG|.
  10153c:	 ce a7 86 bf 77 a0 8e bf         ....w...
  101544:	 b2 0d 96 bf dd ef 9c bf         ........
  10154c:	 6b 47 a3 bf 16 15 a9 bf         kG......
  101554:	 a7 59 ae bf 2b 16 b3 bf         .Y..+...
  10155c:	 d7 4b b7 bf fc fb ba bf         .K......
  101564:	 2c 28 be bf 13 d2 c0 bf         ,(......
  10156c:	 8f fb c2 bf 8f a6 c4 bf         ........
  101574:	 3d d5 c5 bf db 89 c6 bf         =.......
  10157c:	 e7 c6 c6 bf de 8e c6 bf         ........
  101584:	 71 e4 c5 bf 60 ca c4 bf         q...`...
  10158c:	 b7 43 c3 bf 58 53 c1 bf         .C..XS..
  101594:	 7a fc be bf 5b 42 bc bf         z...[B..
  10159c:	 52 28 b9 bf af b1 b5 bf         R(......
  1015a4:	 15 e2 b1 bf 06 bd ad bf         ........
  1015ac:	 24 46 a9 bf 34 81 a4 bf         $F..4...
  1015b4:	 f3 71 9f bf 37 1c 9a bf         .q..7...
  1015bc:	 d3 83 94 bf c1 ac 8e bf         ........
  1015c4:	 ed 9a 88 bf 3f 52 82 bf         ....?R..
  1015cc:	 95 ad 77 bf 12 59 6a bf         ..w..Yj.
  1015d4:	 ee ae 5c bf 4b b7 4e bf         ..\.K.N.
  1015dc:	 1b 7a 40 bf 66 ff 31 bf         .z@.f.1.
  1015e4:	 23 4f 23 bf 41 71 14 bf         #O#.Aq..
  1015ec:	 a0 6d 05 bf 23 98 ec be         .m..#...
  1015f4:	 96 28 ce be ea 9b af be         .(......
  1015fc:	 34 01 91 be 9d a8 63 be         4.....c.
  101604:	 a1 02 26 be ae a6 01 be         ..&.....
  10160c:	 8a 7a bb bd 29 60 69 bd         .z..)`i.
  101614:	 32 40 bc bc 6d 25 2a 3c         2@..m%*<
  10161c:	 02 5d 30 3d 1c 8f 99 3d         .]0=...=
  101624:	 7d 49 d9 3d 0a a1 0b 3e         }I.=...>
  10162c:	 41 af 29 3e f7 c2 46 3e         A.)>..F>
  101634:	 66 d0 62 3e 7f cc 7d 3e         f.b>..}>
  10163c:	 84 d6 8b 3e 21 34 98 3e         ...>!4.>
  101644:	 b1 fa a3 3e 1b 26 af 3e         ...>.&.>
  10164c:	 a6 b2 b9 3e fa 9c c3 3e         ...>...>
  101654:	 16 e2 cc 3e 5c 7f d5 3e         ...>\..>
  10165c:	 84 72 dd 3e a6 b9 e4 3e         .r.>...>
  101664:	 35 53 eb 3e fe 3d f1 3e         5S.>.=.>
  10166c:	 21 79 f6 3e 22 04 fb 3e         !y.>"..>
  101674:	 d4 de fe 3e af 04 01 3f         ...>...?
  10167c:	 24 42 02 3f 2f 28 03 3f         $B.?/(.?
  101684:	 65 b7 03 3f 7b f0 03 3f         e..?{..?
  10168c:	 54 d4 03 3f f7 63 03 3f         T..?.c.?
  101694:	 90 a0 02 3f 6b 8b 01 3f         ...?k..?
  10169c:	 fa 25 00 3f a9 e3 fc 3e         .%.?...>
  1016a4:	 50 e1 f8 3e 96 48 f4 3e         P..>.H.>
  1016ac:	 5a 1d ef 3e b1 63 e9 3e         Z..>.c.>
  1016b4:	 eb 1f e3 3e 93 56 dc 3e         ...>.V.>
  1016bc:	 51 0c d5 3e 11 46 cd 3e         Q..>.F.>
  1016c4:	 db 08 c5 3e e7 59 bc 3e         ...>.Y.>
  1016cc:	 8a 3e b3 3e 48 bc a9 3e         .>.>H..>
  1016d4:	 b4 d8 9f 3e 90 99 95 3e         ...>...>
  1016dc:	 a1 04 8b 3e dd 1f 80 3e         ...>...>
  1016e4:	 66 e2 69 3e 68 fd 52 3e         f.i>h.R>
  1016ec:	 ec 9c 3b 3e 3c cd 23 3e         ..;><.#>
  1016f4:	 a4 9a 0b 3e 07 23 e6 3d         ...>.#.=
  1016fc:	 87 7c b4 3d 4b 14 81 3d         .|.=K..=
  101704:	 0f df f7 3c 24 eb b2 3c         ...<$..<
  10170c:	 85 64 5c 3c f9 76 a7 3b         .d\<.v.;
  101714:	 19 4f 4f bb 0c fa 39 bc         .OO...9.
  10171c:	 04 35 9f bc 41 6c e0 bc         .5..Al..
  101724:	 10 3f 10 bd 99 a3 2f bd         .?..../.
  10172c:	 96 52 4e bd 7d 3b 6c bd         .RN.};l.
  101734:	 30 a7 84 bd 00 be 92 bd         0.......
  10173c:	 dd 5a a0 bd d4 76 ad bd         .Z...v..
  101744:	 3c 0b ba bd e9 11 c6 bd         <.......
  10174c:	 dd 84 d1 bd 8b 5e dc bd         .....^..
  101754:	 e3 99 e6 bd 12 32 f0 bd         .....2..
  10175c:	 a4 22 f9 bd c7 b3 00 be         ."......
  101764:	 a1 7e 04 be 38 f0 07 be         .~..8...
  10176c:	 15 07 0b be 02 c2 0d be         ........
  101774:	 ee 1f 10 be 07 20 12 be         ..... ..
  10177c:	 92 c1 13 be 16 04 15 be         ........
  101784:	 50 e7 15 be 1e 6b 16 be         P....k..
  10178c:	 95 8f 16 be f1 54 16 be         .....T..
  101794:	 b1 bb 15 be 5c c4 14 be         ....\...
  10179c:	 c1 6f 13 be da be 11 be         .o......
  1017a4:	 b8 b2 0f be a6 4c 0d be         .....L..
  1017ac:	 0d 8e 0a be 86 78 07 be         .....x..
  1017b4:	 c7 0d 04 be a4 4f 00 be         .....O..
  1017bc:	 44 80 f8 bd de c2 ef bd         D.......
  1017c4:	 61 6b e6 bd bc 7e dc bd         ak...~..
  1017cc:	 cd 01 d2 bd b6 f9 c6 bd         ........
  1017d4:	 f0 6b bb bd 01 5e af bd         .k...^..
  1017dc:	 ac d5 a2 bd d8 d8 95 bd         ........
  1017e4:	 96 6d 88 bd 2d 34 75 bd         .m..-4u.
  1017ec:	 5d c9 58 bd 91 a7 3b bd         ].X...;.
  1017f4:	 e6 db 1d bd 21 e7 fe bc         ....!...
  1017fc:	 dd f7 c0 bc bd 40 80 bc         .....@..


WOLAAnalysisFilter_Float_M256_m4_r1:
  101804:	 00 00 00 00 d3 bc 26 b8         ......&.
  10180c:	 8e 3f 36 b8 9f 6d 46 b8         .?6..mF.
  101814:	 c5 4a 57 b8 c4 da 68 b8         .JW...h.
  10181c:	 5e 21 7b b8 2d 11 87 b8         ^!{.-...
  101824:	 be f0 90 b8 49 31 9b b8         ....I1..
  10182c:	 b1 d4 a5 b8 dc dc b0 b8         ........
  101834:	 ad 4b bc b8 09 23 c8 b8         .K...#..
  10183c:	 d6 64 d4 b8 f9 12 e1 b8         .d......
  101844:	 46 2f ee b8 ad bb fb b8         F/......
  10184c:	 00 dd 04 b9 10 16 0c b9         ........
  101854:	 f8 89 13 b9 a1 39 1b b9         .....9..
  10185c:	 f4 25 23 b9 db 4f 2b b9         .%#..O+.
  101864:	 41 b8 33 b9 07 60 3c b9         A.3..`<.
  10186c:	 17 48 45 b9 47 71 4e b9         .HE.GqN.
  101874:	 80 dc 57 b9 9d 8a 61 b9         ..W...a.
  10187c:	 7c 7c 6b b9 e9 b2 75 b9         ||k...u.
  101884:	 61 17 80 b9 6d 78 85 b9         a...mx..
  10188c:	 00 fd 8a b9 7a a5 90 b9         ....z...
  101894:	 46 72 96 b9 c1 63 9c b9         Fr...c..
  10189c:	 4d 7a a2 b9 49 b6 a8 b9         Mz..I...
  1018a4:	 10 18 af b9 f9 9f b5 b9         ........
  1018ac:	 61 4e bc b9 99 23 c3 b9         aN...#..
  1018b4:	 f8 1f ca b9 c5 43 d1 b9         .....C..
  1018bc:	 58 8f d8 b9 f8 02 e0 b9         X.......
  1018c4:	 e9 9e e7 b9 74 63 ef b9         ....tc..
  1018cc:	 dd 50 f7 b9 5c 67 ff b9         .P..\g..
  1018d4:	 9b d3 03 ba 4e 08 08 ba         ....N...
  1018dc:	 e4 51 0c ba 75 b0 10 ba         .Q..u...
  1018e4:	 17 24 15 ba e1 ac 19 ba         .$......
  1018ec:	 e7 4a 1e ba 38 fe 22 ba         .J..8.".
  1018f4:	 e5 c6 27 ba fc a4 2c ba         ..'...,.
  1018fc:	 88 98 31 ba 92 a1 36 ba         ..1...6.
  101904:	 24 c0 3b ba 3f f4 40 ba         $.;.?.@.
  10190c:	 e7 3d 46 ba 20 9d 4b ba         .=F. .K.
  101914:	 e4 11 51 ba 32 9c 56 ba         ..Q.2.V.
  10191c:	 01 3c 5c ba 49 f1 61 ba         .<\.I.a.
  101924:	 ff bb 67 ba 16 9c 6d ba         ..g...m.
  10192c:	 7a 91 73 ba 1a 9c 79 ba         z.s...y.
  101934:	 e1 bb 7f ba 5a f8 82 ba         ....Z...
  10193c:	 3b 1d 86 ba 89 4c 89 ba         ;....L..
  101944:	 2d 86 8c ba 1e ca 8f ba         -.......
  10194c:	 3a 18 93 ba 78 70 96 ba         :...xp..
  101954:	 be d2 99 ba f3 3e 9d ba         .....>..
  10195c:	 06 b5 a0 ba cb 34 a4 ba         .....4..
  101964:	 31 be a7 ba 16 51 ab ba         1....Q..
  10196c:	 60 ed ae ba e5 92 b2 ba         `.......
  101974:	 81 41 b6 ba 1c f9 b9 ba         .A......
  10197c:	 81 b9 bd ba 86 82 c1 ba         ........
  101984:	 10 54 c5 ba ed 2d c9 ba         .T...-..
  10198c:	 e9 0f cd ba d0 f9 d0 ba         ........
  101994:	 7f eb d4 ba c4 e4 d8 ba         ........
  10199c:	 5a e5 dc ba 15 ed e0 ba         Z.......
  1019a4:	 ba fb e4 ba 0c 11 e9 ba         ........
  1019ac:	 d0 2c ed ba c8 4e f1 ba         .,...N..
  1019b4:	 ba 76 f5 ba 57 a4 f9 ba         .v..W...
  1019bc:	 64 d7 fd ba ca 07 01 bb         d.......
  1019c4:	 54 26 03 bb 27 47 05 bb         T&..'G..
  1019cc:	 20 6a 07 bb 13 8f 09 bb          j......
  1019d4:	 db b5 0b bb 54 de 0d bb         ....T...
  1019dc:	 47 08 10 bb 96 33 12 bb         G....3..
  1019e4:	 12 60 14 bb 87 8d 16 bb         .`......
  1019ec:	 ca bb 18 bb b0 ea 1a bb         ........
  1019f4:	 06 1a 1d bb 9c 49 1f bb         .....I..
  1019fc:	 3b 79 21 bb b8 a8 23 bb         ;y!...#.
  101a04:	 d6 d7 25 bb 62 06 28 bb         ..%.b.(.
  101a0c:	 28 34 2a bb f2 60 2c bb         (4*..`,.
  101a14:	 85 8c 2e bb a8 b6 30 bb         ......0.
  101a1c:	 1d df 32 bb b1 05 35 bb         ..2...5.
  101a24:	 1f 2a 37 bb 2b 4c 39 bb         .*7.+L9.
  101a2c:	 9a 6b 3b bb 29 88 3d bb         .k;.).=.
  101a34:	 9a a1 3f bb ac b7 41 bb         ..?...A.
  101a3c:	 1a ca 43 bb 9f d8 45 bb         ..C...E.
  101a44:	 fb e2 47 bb e4 e8 49 bb         ..G...I.
  101a4c:	 17 ea 4b bb 4a e6 4d bb         ..K.J.M.
  101a54:	 38 dd 4f bb 90 ce 51 bb         8.O...Q.
  101a5c:	 11 ba 53 bb 6a 9f 55 bb         ..S.j.U.
  101a64:	 4e 7e 57 bb 73 56 59 bb         N~W.sVY.
  101a6c:	 88 27 5b bb 43 f1 5c bb         .'[.C.\.
  101a74:	 4c b3 5e bb 57 6d 60 bb         L.^.Wm`.
  101a7c:	 15 1f 62 bb 2f c8 63 bb         ..b./.c.
  101a84:	 53 68 65 bb 31 ff 66 bb         She.1.f.
  101a8c:	 68 8c 68 bb ad 0f 6a bb         h.h...j.
  101a94:	 a9 88 6b bb fe f6 6c bb         ..k...l.
  101a9c:	 55 5a 6e bb 59 b2 6f bb         UZn.Y.o.
  101aa4:	 b0 fe 70 bb fc 3e 72 bb         ..p..>r.
  101aac:	 e1 72 73 bb 06 9a 74 bb         .rs...t.
  101ab4:	 0c b4 75 bb 9a c0 76 bb         ..u...v.
  101abc:	 50 bf 77 bb cc af 78 bb         P.w...x.
  101ac4:	 b4 91 79 bb a0 64 7a bb         ..y..dz.
  101acc:	 37 28 7b bb 19 dc 7b bb         7({...{.
  101ad4:	 dd 7f 7c bb 26 13 7d bb         ..|.&.}.
  101adc:	 8f 95 7d bb b8 06 7e bb         ..}...~.
  101ae4:	 3c 66 7e bb b2 b3 7e bb         <f~...~.
  101aec:	 c0 ee 7e bb f7 16 7f bb         ..~.....
  101af4:	 f4 2b 7f bb 58 2d 7f bb         .+..X-..
  101afc:	 b5 1a 7f bb aa f3 7e bb         ......~.
  101b04:	 ce b7 7e bb b8 66 7e bb         ..~..f~.
  101b0c:	 07 00 7e bb 4e 83 7d bb         ..~.N.}.
  101b14:	 27 f0 7c bb 2a 46 7c bb         '.|.*F|.
  101b1c:	 f5 84 7b bb 19 ac 7a bb         ..{...z.
  101b24:	 2d bb 79 bb cf b1 78 bb         -.y...x.
  101b2c:	 95 8f 77 bb 12 54 76 bb         ..w..Tv.
  101b34:	 e3 fe 74 bb a2 8f 73 bb         ..t...s.
  101b3c:	 df 05 72 bb 38 61 70 bb         ..r.8ap.
  101b44:	 44 a1 6e bb 9d c5 6c bb         D.n...l.
  101b4c:	 d8 cd 6a bb 8e b9 68 bb         ..j...h.
  101b54:	 5b 88 66 bb d5 39 64 bb         [.f..9d.
  101b5c:	 99 cd 61 bb 3e 43 5f bb         ..a.>C_.
  101b64:	 60 9a 5c bb 9a d2 59 bb         `.\...Y.
  101b6c:	 81 eb 56 bb b7 e4 53 bb         ..V...S.
  101b74:	 d9 bd 50 bb 7c 76 4d bb         ..P.|vM.
  101b7c:	 45 0e 4a bb ce 84 46 bb         E.J...F.
  101b84:	 b3 d9 42 bb 96 0c 3f bb         ..B...?.
  101b8c:	 15 1d 3b bb cc 0a 37 bb         ..;...7.
  101b94:	 66 d5 32 bb 7b 7c 2e bb         f.2.{|..
  101b9c:	 b6 ff 29 bb b0 5e 25 bb         ..)..^%.
  101ba4:	 17 99 20 bb 87 ae 1b bb         .. .....
  101bac:	 ac 9e 16 bb 27 69 11 bb         ....'i..
  101bb4:	 a6 0d 0c bb d3 8b 06 bb         ........
  101bbc:	 51 e3 00 bb 98 27 f6 ba         Q....'..
  101bc4:	 e7 39 ea ba e5 fc dd ba         .9......
  101bcc:	 ec 6f d1 ba 63 92 c4 ba         .o..c...
  101bd4:	 a6 63 b7 ba 13 e3 a9 ba         .c......
  101bdc:	 1f 10 9c ba 1f ea 8d ba         ........
  101be4:	 28 e1 7e ba c1 45 61 ba         (.~..Ea.
  101bec:	 ee 00 43 ba 9b 11 24 ba         ..C...$.
  101bf4:	 b5 76 04 ba 61 5e c8 b9         .v..a^..
  101bfc:	 0e 74 86 b9 f2 58 06 b9         .t...X..
  101c04:	 00 00 00 00 87 04 0f 39         .......9
  101c0c:	 26 ed 8e 39 c5 bc d7 39         &..9...9
  101c14:	 6e f9 10 3a 90 c8 36 3a         n..:..6:
  101c1c:	 94 4c 5d 3a 24 43 82 3a         .L]:$C.:
  101c24:	 38 3b 96 3a d7 8e aa 3a         8;.:...:
  101c2c:	 6f 3e bf 3a 45 4a d4 3a         o>.:EJ.:
  101c34:	 ae b2 e9 3a f8 77 ff 3a         ...:.w.:
  101c3c:	 39 cd 0a 3b 2e 0d 16 3b         9..;...;
  101c44:	 00 7c 21 3b c7 19 2d 3b         .|!;..-;
  101c4c:	 a2 e6 38 3b af e2 44 3b         ..8;..D;
  101c54:	 03 0e 51 3b b8 68 5d 3b         ..Q;.h];
  101c5c:	 df f2 69 3b 85 ac 76 3b         ..i;..v;
  101c64:	 e2 ca 81 3b 50 57 88 3b         ...;PW.;
  101c6c:	 95 fb 8e 3b b6 b7 95 3b         ...;...;
  101c74:	 b2 8b 9c 3b 8d 77 a3 3b         ...;.w.;
  101c7c:	 4b 7b aa 3b e9 96 b1 3b         K{.;...;
  101c84:	 66 ca b8 3b bc 15 c0 3b         f..;...;
  101c8c:	 ee 78 c7 3b f1 f3 ce 3b         .x.;...;
  101c94:	 c0 86 d6 3b 55 31 de 3b         ...;U1.;
  101c9c:	 a5 f3 e5 3b a6 cd ed 3b         ...;...;
  101ca4:	 4e bf f5 3b 92 c8 fd 3b         N..;...;
  101cac:	 b0 f4 02 3c d5 10 07 3c         ...<...<
  101cb4:	 b0 38 0b 3c 38 6c 0f 3c         .8.<8l.<
  101cbc:	 64 ab 13 3c 29 f6 17 3c         d..<)..<
  101cc4:	 7d 4c 1c 3c 54 ae 20 3c         }L.<T. <
  101ccc:	 a3 1b 25 3c 59 94 29 3c         ..%<Y.)<
  101cd4:	 6c 18 2e 3c c8 a7 32 3c         l..<..2<
  101cdc:	 6c 42 37 3c 39 e8 3b 3c         lB7<9.;<
  101ce4:	 2d 99 40 3c 29 55 45 3c         -.@<)UE<
  101cec:	 23 1c 4a 3c 0f ee 4e 3c         #.J<..N<
  101cf4:	 ce ca 53 3c 53 b2 58 3c         ..S<S.X<
  101cfc:	 81 a4 5d 3c 55 a1 62 3c         ..]<U.b<
  101d04:	 a6 a8 67 3c 68 ba 6c 3c         ..g<h.l<
  101d0c:	 87 d6 71 3c ec fc 76 3c         ..q<..v<
  101d14:	 6d 2d 7c 3c 00 b4 80 3c         m-|<...<
  101d1c:	 46 56 83 3c 7b fd 85 3c         FV.<{..<
  101d24:	 92 a9 88 3c 77 5a 8b 3c         ...<wZ.<
  101d2c:	 24 10 8e 3c 88 ca 90 3c         $..<...<
  101d34:	 90 89 93 3c 34 4d 96 3c         ...<4M.<
  101d3c:	 5b 15 99 3c fe e1 9b 3c         [..<...<
  101d44:	 0e b3 9e 3c 71 88 a1 3c         ...<q..<
  101d4c:	 20 62 a4 3c 00 40 a7 3c          b.<.@.<
  101d54:	 08 22 aa 3c 26 08 ad 3c         .".<&..<
  101d5c:	 41 f2 af 3c 4d e0 b2 3c         A..<M..<
  101d64:	 3a d2 b5 3c ed c7 b8 3c         :..<...<
  101d6c:	 57 c1 bb 3c 61 be be 3c         W..<a..<
  101d74:	 fd be c1 3c 18 c3 c4 3c         ...<...<
  101d7c:	 95 ca c7 3c 61 d5 ca 3c         ...<a..<
  101d84:	 6d e3 cd 3c a5 f4 d0 3c         m..<...<
  101d8c:	 ec 08 d4 3c 2d 20 d7 3c         ...<- .<
  101d94:	 59 3a da 3c 4e 57 dd 3c         Y:.<NW.<
  101d9c:	 03 77 e0 3c 57 99 e3 3c         .w.<W..<
  101da4:	 35 be e6 3c 87 e5 e9 3c         5..<...<
  101dac:	 38 0f ed 3c 2c 3b f0 3c         8..<,;.<
  101db4:	 49 69 f3 3c 7a 99 f6 3c         Ii.<z..<
  101dbc:	 a9 cb f9 3c b5 ff fc 3c         ...<...<
  101dc4:	 c8 1a 00 3d 8c b6 01 3d         ...=...=
  101dcc:	 19 53 03 3d 65 f0 04 3d         .S.=e..=
  101dd4:	 62 8e 06 3d 05 2d 08 3d         b..=.-.=
  101ddc:	 3c cc 09 3d ff 6b 0b 3d         <..=.k.=
  101de4:	 3d 0c 0d 3d e9 ac 0e 3d         =..=...=
  101dec:	 f6 4d 10 3d 56 ef 11 3d         .M.=V..=
  101df4:	 fc 90 13 3d da 32 15 3d         ...=.2.=
  101dfc:	 e3 d4 16 3d 07 77 18 3d         ...=.w.=
  101e04:	 39 19 1a 3d 68 bb 1b 3d         9..=h..=
  101e0c:	 8c 5d 1d 3d 8f ff 1e 3d         .].=...=
  101e14:	 6b a1 20 3d 0b 43 22 3d         k. =.C"=
  101e1c:	 63 e4 23 3d 66 85 25 3d         c.#=f.%=
  101e24:	 02 26 27 3d 2a c6 28 3d         .&'=*.(=
  101e2c:	 d2 65 2a 3d e6 04 2c 3d         .e*=..,=
  101e34:	 5c a3 2d 3d 23 41 2f 3d         \.-=#A/=
  101e3c:	 29 de 30 3d 66 7a 32 3d         ).0=fz2=
  101e44:	 c7 15 34 3d 3e b0 35 3d         ..4=>.5=
  101e4c:	 bb 49 37 3d 2f e2 38 3d         .I7=/.8=
  101e54:	 8e 79 3a 3d c3 0f 3c 3d         .y:=..<=
  101e5c:	 c6 a4 3d 3d 85 38 3f 3d         ..==.8?=
  101e64:	 ee ca 40 3d f5 5b 42 3d         ..@=.[B=
  101e6c:	 8d eb 43 3d a4 79 45 3d         ..C=.yE=
  101e74:	 29 06 47 3d 13 91 48 3d         ).G=..H=
  101e7c:	 4d 1a 4a 3d cc a1 4b 3d         M.J=..K=
  101e84:	 80 27 4d 3d 59 ab 4e 3d         .'M=Y.N=
  101e8c:	 4a 2d 50 3d 41 ad 51 3d         J-P=A.Q=
  101e94:	 33 2b 53 3d 0e a7 54 3d         3+S=..T=
  101e9c:	 c6 20 56 3d 4a 98 57 3d         . V=J.W=
  101ea4:	 8d 0d 59 3d 7f 80 5a 3d         ..Y=..Z=
  101eac:	 12 f1 5b 3d 39 5f 5d 3d         ..[=9_]=
  101eb4:	 e4 ca 5e 3d 02 34 60 3d         ..^=.4`=
  101ebc:	 8a 9a 61 3d 6a fe 62 3d         ..a=j.b=
  101ec4:	 96 5f 64 3d fd bd 65 3d         ._d=..e=
  101ecc:	 95 19 67 3d 4d 72 68 3d         ..g=Mrh=
  101ed4:	 18 c8 69 3d e9 1a 6b 3d         ..i=..k=
  101edc:	 b2 6a 6c 3d 66 b7 6d 3d         .jl=f.m=
  101ee4:	 f4 00 6f 3d 53 47 70 3d         ..o=SGp=
  101eec:	 71 8a 71 3d 48 ca 72 3d         q.q=H.r=
  101ef4:	 c5 06 74 3d db 3f 75 3d         ..t=.?u=
  101efc:	 83 75 76 3d aa a7 77 3d         .uv=..w=
  101f04:	 43 d6 78 3d 48 01 7a 3d         C.x=H.z=
  101f0c:	 a8 28 7b 3d 57 4c 7c 3d         .({=WL|=
  101f14:	 4a 6c 7d 3d 74 88 7e 3d         Jl}=t.~=
  101f1c:	 ca a0 7f 3d a0 5a 80 3d         ...=.Z.=
  101f24:	 e5 e2 80 3d 30 69 81 3d         ...=0i.=
  101f2c:	 78 ed 81 3d bb 6f 82 3d         x..=.o.=
  101f34:	 f2 ef 82 3d 17 6e 83 3d         ...=.n.=
  101f3c:	 25 ea 83 3d 18 64 84 3d         %..=.d.=
  101f44:	 ea db 84 3d 96 51 85 3d         ...=.Q.=
  101f4c:	 16 c5 85 3d 67 36 86 3d         ...=g6.=
  101f54:	 84 a5 86 3d 66 12 87 3d         ...=f..=
  101f5c:	 0a 7d 87 3d 6d e5 87 3d         .}.=m..=
  101f64:	 87 4b 88 3d 58 af 88 3d         .K.=X..=
  101f6c:	 d7 10 89 3d 03 70 89 3d         ...=.p.=
  101f74:	 d8 cc 89 3d 51 27 8a 3d         ...=Q'.=
  101f7c:	 6b 7f 8a 3d 21 d5 8a 3d         k..=!..=
  101f84:	 70 28 8b 3d 53 79 8b 3d         p(.=Sy.=
  101f8c:	 ca c7 8b 3d ce 13 8c 3d         ...=...=
  101f94:	 5e 5d 8c 3d 75 a4 8c 3d         ^].=u..=
  101f9c:	 12 e9 8c 3d 31 2b 8d 3d         ...=1+.=
  101fa4:	 cf 6a 8d 3d ea a7 8d 3d         .j.=...=
  101fac:	 7f e2 8d 3d 8a 1a 8e 3d         ...=...=
  101fb4:	 0b 50 8e 3d 00 83 8e 3d         .P.=...=
  101fbc:	 63 b3 8e 3d 36 e1 8e 3d         c..=6..=
  101fc4:	 74 0c 8f 3d 1e 35 8f 3d         t..=.5.=
  101fcc:	 2f 5b 8f 3d a8 7e 8f 3d         /[.=.~.=
  101fd4:	 87 9f 8f 3d c8 bd 8f 3d         ...=...=
  101fdc:	 6e d9 8f 3d 75 f2 8f 3d         n..=u..=
  101fe4:	 dc 08 90 3d a3 1c 90 3d         ...=...=
  101fec:	 c9 2d 90 3d 4c 3c 90 3d         .-.=L<.=
  101ff4:	 2e 48 90 3d 6b 51 90 3d         .H.=kQ.=
  101ffc:	 04 58 90 3d fb 5b 90 3d         .X.=.[.=
  102004:	 4d 5d 90 3d fb 5b 90 3d         M].=.[.=
  10200c:	 04 58 90 3d 6b 51 90 3d         .X.=kQ.=
  102014:	 2e 48 90 3d 4c 3c 90 3d         .H.=L<.=
  10201c:	 c9 2d 90 3d a3 1c 90 3d         .-.=...=
  102024:	 dc 08 90 3d 75 f2 8f 3d         ...=u..=
  10202c:	 6e d9 8f 3d c8 bd 8f 3d         n..=...=
  102034:	 87 9f 8f 3d a8 7e 8f 3d         ...=.~.=
  10203c:	 2f 5b 8f 3d 1e 35 8f 3d         /[.=.5.=
  102044:	 74 0c 8f 3d 36 e1 8e 3d         t..=6..=
  10204c:	 63 b3 8e 3d 00 83 8e 3d         c..=...=
  102054:	 0b 50 8e 3d 8a 1a 8e 3d         .P.=...=
  10205c:	 7f e2 8d 3d ea a7 8d 3d         ...=...=
  102064:	 cf 6a 8d 3d 31 2b 8d 3d         .j.=1+.=
  10206c:	 12 e9 8c 3d 75 a4 8c 3d         ...=u..=
  102074:	 5e 5d 8c 3d ce 13 8c 3d         ^].=...=
  10207c:	 ca c7 8b 3d 53 79 8b 3d         ...=Sy.=
  102084:	 70 28 8b 3d 21 d5 8a 3d         p(.=!..=
  10208c:	 6b 7f 8a 3d 51 27 8a 3d         k..=Q'.=
  102094:	 d8 cc 89 3d 03 70 89 3d         ...=.p.=
  10209c:	 d7 10 89 3d 58 af 88 3d         ...=X..=
  1020a4:	 87 4b 88 3d 6d e5 87 3d         .K.=m..=
  1020ac:	 0a 7d 87 3d 66 12 87 3d         .}.=f..=
  1020b4:	 84 a5 86 3d 67 36 86 3d         ...=g6.=
  1020bc:	 16 c5 85 3d 96 51 85 3d         ...=.Q.=
  1020c4:	 ea db 84 3d 18 64 84 3d         ...=.d.=
  1020cc:	 25 ea 83 3d 17 6e 83 3d         %..=.n.=
  1020d4:	 f2 ef 82 3d bb 6f 82 3d         ...=.o.=
  1020dc:	 78 ed 81 3d 30 69 81 3d         x..=0i.=
  1020e4:	 e5 e2 80 3d a0 5a 80 3d         ...=.Z.=
  1020ec:	 ca a0 7f 3d 74 88 7e 3d         ...=t.~=
  1020f4:	 4a 6c 7d 3d 57 4c 7c 3d         Jl}=WL|=
  1020fc:	 a8 28 7b 3d 48 01 7a 3d         .({=H.z=
  102104:	 43 d6 78 3d aa a7 77 3d         C.x=..w=
  10210c:	 83 75 76 3d db 3f 75 3d         .uv=.?u=
  102114:	 c5 06 74 3d 48 ca 72 3d         ..t=H.r=
  10211c:	 71 8a 71 3d 53 47 70 3d         q.q=SGp=
  102124:	 f4 00 6f 3d 66 b7 6d 3d         ..o=f.m=
  10212c:	 b2 6a 6c 3d e9 1a 6b 3d         .jl=..k=
  102134:	 18 c8 69 3d 4d 72 68 3d         ..i=Mrh=
  10213c:	 95 19 67 3d fd bd 65 3d         ..g=..e=
  102144:	 96 5f 64 3d 6a fe 62 3d         ._d=j.b=
  10214c:	 8a 9a 61 3d 02 34 60 3d         ..a=.4`=
  102154:	 e4 ca 5e 3d 39 5f 5d 3d         ..^=9_]=
  10215c:	 12 f1 5b 3d 7f 80 5a 3d         ..[=..Z=
  102164:	 8d 0d 59 3d 4a 98 57 3d         ..Y=J.W=
  10216c:	 c6 20 56 3d 0e a7 54 3d         . V=..T=
  102174:	 33 2b 53 3d 41 ad 51 3d         3+S=A.Q=
  10217c:	 4a 2d 50 3d 59 ab 4e 3d         J-P=Y.N=
  102184:	 80 27 4d 3d cc a1 4b 3d         .'M=..K=
  10218c:	 4d 1a 4a 3d 13 91 48 3d         M.J=..H=
  102194:	 29 06 47 3d a4 79 45 3d         ).G=.yE=
  10219c:	 8d eb 43 3d f5 5b 42 3d         ..C=.[B=
  1021a4:	 ee ca 40 3d 85 38 3f 3d         ..@=.8?=
  1021ac:	 c6 a4 3d 3d c3 0f 3c 3d         ..==..<=
  1021b4:	 8e 79 3a 3d 2f e2 38 3d         .y:=/.8=
  1021bc:	 bb 49 37 3d 3e b0 35 3d         .I7=>.5=
  1021c4:	 c7 15 34 3d 66 7a 32 3d         ..4=fz2=
  1021cc:	 29 de 30 3d 23 41 2f 3d         ).0=#A/=
  1021d4:	 5c a3 2d 3d e6 04 2c 3d         \.-=..,=
  1021dc:	 d2 65 2a 3d 2a c6 28 3d         .e*=*.(=
  1021e4:	 02 26 27 3d 66 85 25 3d         .&'=f.%=
  1021ec:	 63 e4 23 3d 0b 43 22 3d         c.#=.C"=
  1021f4:	 6b a1 20 3d 8f ff 1e 3d         k. =...=
  1021fc:	 8c 5d 1d 3d 68 bb 1b 3d         .].=h..=
  102204:	 39 19 1a 3d 07 77 18 3d         9..=.w.=
  10220c:	 e3 d4 16 3d da 32 15 3d         ...=.2.=
  102214:	 fc 90 13 3d 56 ef 11 3d         ...=V..=
  10221c:	 f6 4d 10 3d e9 ac 0e 3d         .M.=...=
  102224:	 3d 0c 0d 3d ff 6b 0b 3d         =..=.k.=
  10222c:	 3c cc 09 3d 05 2d 08 3d         <..=.-.=
  102234:	 62 8e 06 3d 65 f0 04 3d         b..=e..=
  10223c:	 19 53 03 3d 8c b6 01 3d         .S.=...=
  102244:	 c8 1a 00 3d b5 ff fc 3c         ...=...<
  10224c:	 a9 cb f9 3c 7a 99 f6 3c         ...<z..<
  102254:	 49 69 f3 3c 2c 3b f0 3c         Ii.<,;.<
  10225c:	 38 0f ed 3c 87 e5 e9 3c         8..<...<
  102264:	 35 be e6 3c 57 99 e3 3c         5..<W..<
  10226c:	 03 77 e0 3c 4e 57 dd 3c         .w.<NW.<
  102274:	 59 3a da 3c 2d 20 d7 3c         Y:.<- .<
  10227c:	 ec 08 d4 3c a5 f4 d0 3c         ...<...<
  102284:	 6d e3 cd 3c 61 d5 ca 3c         m..<a..<
  10228c:	 95 ca c7 3c 18 c3 c4 3c         ...<...<
  102294:	 fd be c1 3c 61 be be 3c         ...<a..<
  10229c:	 57 c1 bb 3c ed c7 b8 3c         W..<...<
  1022a4:	 3a d2 b5 3c 4d e0 b2 3c         :..<M..<
  1022ac:	 41 f2 af 3c 26 08 ad 3c         A..<&..<
  1022b4:	 08 22 aa 3c 00 40 a7 3c         .".<.@.<
  1022bc:	 20 62 a4 3c 71 88 a1 3c          b.<q..<
  1022c4:	 0e b3 9e 3c fe e1 9b 3c         ...<...<
  1022cc:	 5b 15 99 3c 34 4d 96 3c         [..<4M.<
  1022d4:	 90 89 93 3c 88 ca 90 3c         ...<...<
  1022dc:	 24 10 8e 3c 77 5a 8b 3c         $..<wZ.<
  1022e4:	 92 a9 88 3c 7b fd 85 3c         ...<{..<
  1022ec:	 46 56 83 3c 00 b4 80 3c         FV.<...<
  1022f4:	 6d 2d 7c 3c ec fc 76 3c         m-|<..v<
  1022fc:	 87 d6 71 3c 68 ba 6c 3c         ..q<h.l<
  102304:	 a6 a8 67 3c 55 a1 62 3c         ..g<U.b<
  10230c:	 81 a4 5d 3c 53 b2 58 3c         ..]<S.X<
  102314:	 ce ca 53 3c 0f ee 4e 3c         ..S<..N<
  10231c:	 23 1c 4a 3c 29 55 45 3c         #.J<)UE<
  102324:	 2d 99 40 3c 39 e8 3b 3c         -.@<9.;<
  10232c:	 6c 42 37 3c c8 a7 32 3c         lB7<..2<
  102334:	 6c 18 2e 3c 59 94 29 3c         l..<Y.)<
  10233c:	 a3 1b 25 3c 54 ae 20 3c         ..%<T. <
  102344:	 7d 4c 1c 3c 29 f6 17 3c         }L.<)..<
  10234c:	 64 ab 13 3c 38 6c 0f 3c         d..<8l.<
  102354:	 b0 38 0b 3c d5 10 07 3c         .8.<...<
  10235c:	 b0 f4 02 3c 92 c8 fd 3b         ...<...;
  102364:	 4e bf f5 3b a6 cd ed 3b         N..;...;
  10236c:	 a5 f3 e5 3b 55 31 de 3b         ...;U1.;
  102374:	 c0 86 d6 3b f1 f3 ce 3b         ...;...;
  10237c:	 ee 78 c7 3b bc 15 c0 3b         .x.;...;
  102384:	 66 ca b8 3b e9 96 b1 3b         f..;...;
  10238c:	 4b 7b aa 3b 8d 77 a3 3b         K{.;.w.;
  102394:	 b2 8b 9c 3b b6 b7 95 3b         ...;...;
  10239c:	 95 fb 8e 3b 50 57 88 3b         ...;PW.;
  1023a4:	 e2 ca 81 3b 85 ac 76 3b         ...;..v;
  1023ac:	 df f2 69 3b b8 68 5d 3b         ..i;.h];
  1023b4:	 03 0e 51 3b af e2 44 3b         ..Q;..D;
  1023bc:	 a2 e6 38 3b c7 19 2d 3b         ..8;..-;
  1023c4:	 00 7c 21 3b 2e 0d 16 3b         .|!;...;
  1023cc:	 39 cd 0a 3b f8 77 ff 3a         9..;.w.:
  1023d4:	 ae b2 e9 3a 45 4a d4 3a         ...:EJ.:
  1023dc:	 6f 3e bf 3a d7 8e aa 3a         o>.:...:
  1023e4:	 38 3b 96 3a 24 43 82 3a         8;.:$C.:
  1023ec:	 94 4c 5d 3a 90 c8 36 3a         .L]:..6:
  1023f4:	 6e f9 10 3a c5 bc d7 39         n..:...9
  1023fc:	 26 ed 8e 39 87 04 0f 39         &..9...9
  102404:	 00 00 00 00 f2 58 06 b9         .....X..
  10240c:	 0e 74 86 b9 61 5e c8 b9         .t..a^..
  102414:	 b5 76 04 ba 9b 11 24 ba         .v....$.
  10241c:	 ee 00 43 ba c1 45 61 ba         ..C..Ea.
  102424:	 28 e1 7e ba 1f ea 8d ba         (.~.....
  10242c:	 1f 10 9c ba 13 e3 a9 ba         ........
  102434:	 a6 63 b7 ba 63 92 c4 ba         .c..c...
  10243c:	 ec 6f d1 ba e5 fc dd ba         .o......
  102444:	 e7 39 ea ba 98 27 f6 ba         .9...'..
  10244c:	 51 e3 00 bb d3 8b 06 bb         Q.......
  102454:	 a6 0d 0c bb 27 69 11 bb         ....'i..
  10245c:	 ac 9e 16 bb 87 ae 1b bb         ........
  102464:	 17 99 20 bb b0 5e 25 bb         .. ..^%.
  10246c:	 b6 ff 29 bb 7b 7c 2e bb         ..).{|..
  102474:	 66 d5 32 bb cc 0a 37 bb         f.2...7.
  10247c:	 15 1d 3b bb 96 0c 3f bb         ..;...?.
  102484:	 b3 d9 42 bb ce 84 46 bb         ..B...F.
  10248c:	 45 0e 4a bb 7c 76 4d bb         E.J.|vM.
  102494:	 d9 bd 50 bb b7 e4 53 bb         ..P...S.
  10249c:	 81 eb 56 bb 9a d2 59 bb         ..V...Y.
  1024a4:	 60 9a 5c bb 3e 43 5f bb         `.\.>C_.
  1024ac:	 99 cd 61 bb d5 39 64 bb         ..a..9d.
  1024b4:	 5b 88 66 bb 8e b9 68 bb         [.f...h.
  1024bc:	 d8 cd 6a bb 9d c5 6c bb         ..j...l.
  1024c4:	 44 a1 6e bb 38 61 70 bb         D.n.8ap.
  1024cc:	 df 05 72 bb a2 8f 73 bb         ..r...s.
  1024d4:	 e3 fe 74 bb 12 54 76 bb         ..t..Tv.
  1024dc:	 95 8f 77 bb cf b1 78 bb         ..w...x.
  1024e4:	 2d bb 79 bb 19 ac 7a bb         -.y...z.
  1024ec:	 f5 84 7b bb 2a 46 7c bb         ..{.*F|.
  1024f4:	 27 f0 7c bb 4e 83 7d bb         '.|.N.}.
  1024fc:	 07 00 7e bb b8 66 7e bb         ..~..f~.
  102504:	 ce b7 7e bb aa f3 7e bb         ..~...~.
  10250c:	 b5 1a 7f bb 58 2d 7f bb         ....X-..
  102514:	 f4 2b 7f bb f7 16 7f bb         .+......
  10251c:	 c0 ee 7e bb b2 b3 7e bb         ..~...~.
  102524:	 3c 66 7e bb b8 06 7e bb         <f~...~.
  10252c:	 8f 95 7d bb 26 13 7d bb         ..}.&.}.
  102534:	 dd 7f 7c bb 19 dc 7b bb         ..|...{.
  10253c:	 37 28 7b bb a0 64 7a bb         7({..dz.
  102544:	 b4 91 79 bb cc af 78 bb         ..y...x.
  10254c:	 50 bf 77 bb 9a c0 76 bb         P.w...v.
  102554:	 0c b4 75 bb 06 9a 74 bb         ..u...t.
  10255c:	 e1 72 73 bb fc 3e 72 bb         .rs..>r.
  102564:	 b0 fe 70 bb 59 b2 6f bb         ..p.Y.o.
  10256c:	 55 5a 6e bb fe f6 6c bb         UZn...l.
  102574:	 a9 88 6b bb ad 0f 6a bb         ..k...j.
  10257c:	 68 8c 68 bb 31 ff 66 bb         h.h.1.f.
  102584:	 53 68 65 bb 2f c8 63 bb         She./.c.
  10258c:	 15 1f 62 bb 57 6d 60 bb         ..b.Wm`.
  102594:	 4c b3 5e bb 43 f1 5c bb         L.^.C.\.
  10259c:	 88 27 5b bb 73 56 59 bb         .'[.sVY.
  1025a4:	 4e 7e 57 bb 6a 9f 55 bb         N~W.j.U.
  1025ac:	 11 ba 53 bb 90 ce 51 bb         ..S...Q.
  1025b4:	 38 dd 4f bb 4a e6 4d bb         8.O.J.M.
  1025bc:	 17 ea 4b bb e4 e8 49 bb         ..K...I.
  1025c4:	 fb e2 47 bb 9f d8 45 bb         ..G...E.
  1025cc:	 1a ca 43 bb ac b7 41 bb         ..C...A.
  1025d4:	 9a a1 3f bb 29 88 3d bb         ..?.).=.
  1025dc:	 9a 6b 3b bb 2b 4c 39 bb         .k;.+L9.
  1025e4:	 1f 2a 37 bb b1 05 35 bb         .*7...5.
  1025ec:	 1d df 32 bb a8 b6 30 bb         ..2...0.
  1025f4:	 85 8c 2e bb f2 60 2c bb         .....`,.
  1025fc:	 28 34 2a bb 62 06 28 bb         (4*.b.(.
  102604:	 d6 d7 25 bb b8 a8 23 bb         ..%...#.
  10260c:	 3b 79 21 bb 9c 49 1f bb         ;y!..I..
  102614:	 06 1a 1d bb b0 ea 1a bb         ........
  10261c:	 ca bb 18 bb 87 8d 16 bb         ........
  102624:	 12 60 14 bb 96 33 12 bb         .`...3..
  10262c:	 47 08 10 bb 54 de 0d bb         G...T...
  102634:	 db b5 0b bb 13 8f 09 bb         ........
  10263c:	 20 6a 07 bb 27 47 05 bb          j..'G..
  102644:	 54 26 03 bb ca 07 01 bb         T&......
  10264c:	 64 d7 fd ba 57 a4 f9 ba         d...W...
  102654:	 ba 76 f5 ba c8 4e f1 ba         .v...N..
  10265c:	 d0 2c ed ba 0c 11 e9 ba         .,......
  102664:	 ba fb e4 ba 15 ed e0 ba         ........
  10266c:	 5a e5 dc ba c4 e4 d8 ba         Z.......
  102674:	 7f eb d4 ba d0 f9 d0 ba         ........
  10267c:	 e9 0f cd ba ed 2d c9 ba         .....-..
  102684:	 10 54 c5 ba 86 82 c1 ba         .T......
  10268c:	 81 b9 bd ba 1c f9 b9 ba         ........
  102694:	 81 41 b6 ba e5 92 b2 ba         .A......
  10269c:	 60 ed ae ba 16 51 ab ba         `....Q..
  1026a4:	 31 be a7 ba cb 34 a4 ba         1....4..
  1026ac:	 06 b5 a0 ba f3 3e 9d ba         .....>..
  1026b4:	 be d2 99 ba 78 70 96 ba         ....xp..
  1026bc:	 3a 18 93 ba 1e ca 8f ba         :.......
  1026c4:	 2d 86 8c ba 89 4c 89 ba         -....L..
  1026cc:	 3b 1d 86 ba 5a f8 82 ba         ;...Z...
  1026d4:	 e1 bb 7f ba 1a 9c 79 ba         ......y.
  1026dc:	 7a 91 73 ba 16 9c 6d ba         z.s...m.
  1026e4:	 ff bb 67 ba 49 f1 61 ba         ..g.I.a.
  1026ec:	 01 3c 5c ba 32 9c 56 ba         .<\.2.V.
  1026f4:	 e4 11 51 ba 20 9d 4b ba         ..Q. .K.
  1026fc:	 e7 3d 46 ba 3f f4 40 ba         .=F.?.@.
  102704:	 24 c0 3b ba 92 a1 36 ba         $.;...6.
  10270c:	 88 98 31 ba fc a4 2c ba         ..1...,.
  102714:	 e5 c6 27 ba 38 fe 22 ba         ..'.8.".
  10271c:	 e7 4a 1e ba e1 ac 19 ba         .J......
  102724:	 17 24 15 ba 75 b0 10 ba         .$..u...
  10272c:	 e4 51 0c ba 4e 08 08 ba         .Q..N...
  102734:	 9b d3 03 ba 5c 67 ff b9         ....\g..
  10273c:	 dd 50 f7 b9 74 63 ef b9         .P..tc..
  102744:	 e9 9e e7 b9 f8 02 e0 b9         ........
  10274c:	 58 8f d8 b9 c5 43 d1 b9         X....C..
  102754:	 f8 1f ca b9 99 23 c3 b9         .....#..
  10275c:	 61 4e bc b9 f9 9f b5 b9         aN......
  102764:	 10 18 af b9 49 b6 a8 b9         ....I...
  10276c:	 4d 7a a2 b9 c1 63 9c b9         Mz...c..
  102774:	 46 72 96 b9 7a a5 90 b9         Fr..z...
  10277c:	 00 fd 8a b9 6d 78 85 b9         ....mx..
  102784:	 61 17 80 b9 e9 b2 75 b9         a.....u.
  10278c:	 7c 7c 6b b9 9d 8a 61 b9         ||k...a.
  102794:	 80 dc 57 b9 47 71 4e b9         ..W.GqN.
  10279c:	 17 48 45 b9 07 60 3c b9         .HE..`<.
  1027a4:	 41 b8 33 b9 db 4f 2b b9         A.3..O+.
  1027ac:	 f4 25 23 b9 a1 39 1b b9         .%#..9..
  1027b4:	 f8 89 13 b9 10 16 0c b9         ........
  1027bc:	 00 dd 04 b9 ad bb fb b8         ........
  1027c4:	 46 2f ee b8 f9 12 e1 b8         F/......
  1027cc:	 d6 64 d4 b8 09 23 c8 b8         .d...#..
  1027d4:	 ad 4b bc b8 dc dc b0 b8         .K......
  1027dc:	 b1 d4 a5 b8 49 31 9b b8         ....I1..
  1027e4:	 be f0 90 b8 2d 11 87 b8         ....-...
  1027ec:	 5e 21 7b b8 c4 da 68 b8         ^!{...h.
  1027f4:	 c5 4a 57 b8 9f 6d 46 b8         .JW..mF.
  1027fc:	 8e 3f 36 b8 d3 bc 26 b8         .?6...&.


WOLASynthesisFilter_Float_M256_m4_r1:
  102804:	 e8 d3 d0 bc 04 9d fd bc         ........
  10280c:	 e5 04 15 bd b6 0a 2b bd         ......+.
  102814:	 93 dd 40 bd 11 7b 56 bd         ..@..{V.
  10281c:	 d7 e0 6b bd 44 86 80 bd         ..k.D...
  102824:	 eb fd 8a bd 2d 56 95 bd         ....-V..
  10282c:	 e5 8d 9f bd ee a3 a9 bd         ........
  102834:	 22 97 b3 bd 67 66 bd bd         "...gf..
  10283c:	 98 10 c7 bd a3 94 d0 bd         ........
  102844:	 5e f1 d9 bd ba 25 e3 bd         ^....%..
  10284c:	 b8 30 ec bd 32 11 f5 bd         .0..2...
  102854:	 19 c6 fd bd 3f 27 03 be         ....?'..
  10285c:	 aa 54 07 be cd 6a 0b be         .T...j..
  102864:	 2a 69 0f be 40 4f 13 be         *i..@O..
  10286c:	 9e 1c 17 be cb d0 1a be         ........
  102874:	 54 6b 1e be c2 eb 21 be         Tk....!.
  10287c:	 a8 51 25 be 9b 9c 28 be         .Q%...(.
  102884:	 29 cc 2b be f5 df 2e be         ).+.....
  10288c:	 92 d7 31 be a3 b2 34 be         ..1...4.
  102894:	 c4 70 37 be a3 11 3a be         .p7...:.
  10289c:	 d5 94 3c be 18 fa 3e be         ..<...>.
  1028a4:	 06 41 41 be 5c 69 43 be         .AA.\iC.
  1028ac:	 ca 72 45 be 00 5d 47 be         .rE..]G.
  1028b4:	 c7 27 49 be cf d2 4a be         .'I...J.
  1028bc:	 dc 5d 4c be b8 c8 4d be         .]L...M.
  1028c4:	 2e 13 4f be fa 3c 50 be         ..O..<P.
  1028cc:	 f3 45 51 be f3 2d 52 be         .EQ..-R.
  1028d4:	 cf f4 52 be 5b 9a 53 be         ..R.[.S.
  1028dc:	 79 1e 54 be 0a 81 54 be         y.T...T.
  1028e4:	 f2 c1 54 be 2b e1 54 be         ..T.+.T.
  1028ec:	 8c de 54 be 1c ba 54 be         ..T...T.
  1028f4:	 c0 73 54 be 7f 0b 54 be         .sT...T.
  1028fc:	 58 81 53 be 46 d5 52 be         X.S.F.R.
  102904:	 55 07 52 be 8d 17 51 be         U.R...Q.
  10290c:	 01 06 50 be be d2 4e be         ..P...N.
  102914:	 e8 7d 4d be 90 07 4c be         .}M...L.
  10291c:	 e0 6f 4a be fa b6 48 be         .oJ...H.
  102924:	 fe dc 46 be 2a e2 44 be         ..F.*.D.
  10292c:	 a5 c6 42 be a6 8a 40 be         ..B...@.
  102934:	 68 2e 3e be 35 b2 3b be         h.>.5.;.
  10293c:	 3d 16 39 be d7 5a 36 be         =.9..Z6.
  102944:	 4c 80 33 be ed 86 30 be         L.3...0.
  10294c:	 04 6f 2d be fc 38 2a be         .o-..8*.
  102954:	 2c e5 26 be f3 73 23 be         ,.&..s#.
  10295c:	 b5 e5 1f be e4 3a 1c be         .....:..
  102964:	 ec 73 18 be 3e 91 14 be         .s..>...
  10296c:	 5a 93 10 be ac 7a 0c be         Z....z..
  102974:	 c0 47 08 be 1c fb 03 be         .G......
  10297c:	 83 2a ff bd 76 2d f6 bd         .*..v-..
  102984:	 3c 00 ed bd f9 a3 e3 bd         <.......
  10298c:	 d7 19 da bd 25 63 d0 bd         ....%c..
  102994:	 0e 81 c6 bd df 74 bc bd         .....t..
  10299c:	 ee 3f b2 bd 8c e3 a7 bd         .?......
  1029a4:	 18 61 9d bd fb b9 92 bd         .a......
  1029ac:	 a0 ef 87 bd f7 06 7a bd         ......z.
  1029b4:	 0e ee 63 bd 90 97 4d bd         ..c...M.
  1029bc:	 8d 06 37 bd 29 3e 20 bd         ..7.)> .
  1029c4:	 82 41 09 bd ad 27 e4 bc         .A...'..
  1029cc:	 e0 70 b5 bc 3a 65 86 bc         .p..:e..
  1029d4:	 df 16 2e bc 4f a9 9d bb         ....O...
  1029dc:	 0d 73 87 3a 8a 48 e2 3b         .s.:.H.;
  1029e4:	 da be 51 3c f0 57 99 3c         ..Q<.W.<
  1029ec:	 70 f4 c9 3c 9b ad fa 3c         p..<...<
  1029f4:	 10 be 15 3d 38 2c 2e 3d         ...=8,.=
  1029fc:	 93 9d 46 3d f6 ef 5b 3d         ..F=..[=
  102a04:	 f6 a1 d1 3d a8 4a f5 3d         ...=.J.=
  102a0c:	 bc 63 0c 3e ff 09 1e 3e         .c.>...>
  102a14:	 e9 95 2f 3e 47 05 41 3e         ../>G.A>
  102a1c:	 e6 55 52 3e 98 85 63 3e         .UR>..c>
  102a24:	 22 92 74 3e ac bc 82 3e         ".t>...>
  102a2c:	 86 1c 8b 3e 86 67 93 3e         ...>.g.>
  102a34:	 95 9c 9b 3e a0 ba a3 3e         ...>...>
  102a3c:	 93 c0 ab 3e 4b ad b3 3e         ...>K..>
  102a44:	 d3 7f bb 3e fd 36 c3 3e         ...>.6.>
  102a4c:	 d0 d1 ca 3e 2d 4f d2 3e         ...>-O.>
  102a54:	 16 ae d9 3e 77 ed e0 3e         ...>w..>
  102a5c:	 55 0c e8 3e a0 09 ef 3e         U..>...>
  102a64:	 53 e4 f5 3e 7a 9b fc 3e         S..>z..>
  102a6c:	 03 97 01 3f 8a cd 04 3f         ...?...?
  102a74:	 ca f0 07 3f 51 00 0b 3f         ...?Q..?
  102a7c:	 9f fb 0d 3f 43 e2 10 3f         ...?C..?
  102a84:	 c6 b3 13 3f b5 6f 16 3f         ...?.o.?
  102a8c:	 9b 15 19 3f 09 a5 1b 3f         ...?...?
  102a94:	 8f 1d 1e 3f c6 7e 20 3f         ...?.~ ?
  102a9c:	 3f c8 22 3f 98 f9 24 3f         ?."?..$?
  102aa4:	 6d 12 27 3f 52 12 29 3f         m.'?R.)?
  102aac:	 eb f8 2a 3f d5 c5 2c 3f         ..*?..,?
  102ab4:	 bd 78 2e 3f 46 11 30 3f         .x.?F.0?
  102abc:	 1a 8f 31 3f dc f1 32 3f         ..1?..2?
  102ac4:	 4b 39 34 3f 09 65 35 3f         K94?.e5?
  102acc:	 d3 74 36 3f 58 68 37 3f         .t6?Xh7?
  102ad4:	 60 3f 38 3f 9a f9 38 3f         `?8?..8?
  102adc:	 c7 96 39 3f b4 16 3a 3f         ..9?..:?
  102ae4:	 20 79 3a 3f d8 bd 3a 3f          y:?..:?
  102aec:	 a1 e4 3a 3f 4d ed 3a 3f         ..:?M.:?
  102af4:	 b8 d7 3a 3f af a3 3a 3f         ..:?..:?
  102afc:	 13 51 3a 3f bb df 39 3f         .Q:?..9?
  102b04:	 8b 4f 39 3f 66 a0 38 3f         .O9?f.8?
  102b0c:	 32 d2 37 3f e1 e4 36 3f         2.7?..6?
  102b14:	 5b d8 35 3f 9c ac 34 3f         [.5?..4?
  102b1c:	 8e 61 33 3f 36 f7 31 3f         .a3?6.1?
  102b24:	 8e 6d 30 3f 92 c4 2e 3f         .m0?...?
  102b2c:	 55 fc 2c 3f d5 14 2b 3f         U.,?..+?
  102b34:	 27 0e 29 3f 55 e8 26 3f         '.)?U.&?
  102b3c:	 7b a3 24 3f b5 3f 22 3f         {.$?.?"?
  102b44:	 11 bd 1f 3f c5 1b 1d 3f         ...?...?
  102b4c:	 e3 5b 1a 3f a4 7d 17 3f         .[.?.}.?
  102b54:	 2f 81 14 3f b3 66 11 3f         /..?.f.?
  102b5c:	 68 2e 0e 3f 86 d8 0a 3f         h..?...?
  102b64:	 4f 65 07 3f 04 d5 03 3f         Oe.?...?
  102b6c:	 e8 27 00 3f 8c bc f8 3e         .'.?...>
  102b74:	 d8 f0 f0 3e 58 ed e8 3e         ...>X..>
  102b7c:	 c2 b2 e0 3e c9 41 d8 3e         ...>.A.>
  102b84:	 21 9b cf 3e 98 bf c6 3e         !..>...>
  102b8c:	 f9 af bd 3e 1b 6d b4 3e         ...>.m.>
  102b94:	 dd f7 aa 3e 1e 51 a1 3e         ...>.Q.>
  102b9c:	 d9 79 97 3e 00 73 8d 3e         .y.>.s.>
  102ba4:	 8e 3d 83 3e 20 b5 71 3e         .=.> .q>
  102bac:	 1e 96 5c 3e 49 20 47 3e         ..\>I G>
  102bb4:	 dd 55 31 3e 2d 39 1b 3e         .U1>-9.>
  102bbc:	 90 cc 04 3e df 24 dc 3d         ...>.$.=
  102bc4:	 a5 1a ae 3d de fe 7e 3d         ...=..~=
  102bcc:	 f5 b0 20 3d 58 ac 82 3c         .. =X..<
  102bd4:	 b2 34 f8 bb 3b 5a 00 bd         .4..;Z..
  102bdc:	 73 99 62 bd 55 dc a2 bd         s.b.U...
  102be4:	 0e d6 d4 bd f6 99 03 be         ........
  102bec:	 e5 f7 1c be be 81 36 be         ......6.
  102bf4:	 5a 34 50 be 79 0c 6a be         Z4P.y.j.
  102bfc:	 71 03 82 be 30 26 8e be         q...0&..
  102c04:	 15 c2 b3 be a2 8a c9 be         ........
  102c0c:	 82 53 df be 0a 1a f5 be         .S......
  102c14:	 ca 6d 05 bf bd 4a 10 bf         .m...J..
  102c1c:	 82 22 1b bf c7 f3 25 bf         ."....%.
  102c24:	 23 bd 30 bf 45 7d 3b bf         #.0.E};.
  102c2c:	 bf 32 46 bf 38 dc 50 bf         .2F.8.P.
  102c34:	 4b 78 5b bf 92 05 66 bf         Kx[...f.
  102c3c:	 a7 82 70 bf 1b ee 7a bf         ..p...z.
  102c44:	 48 a3 82 bf 48 c5 87 bf         H...H...
  102c4c:	 66 dc 8c bf da e7 91 bf         f.......
  102c54:	 f3 e6 96 bf 02 d9 9b bf         ........
  102c5c:	 45 bd a0 bf 14 93 a5 bf         E.......
  102c64:	 b0 59 aa bf 5e 10 af bf         .Y..^...
  102c6c:	 78 b6 b3 bf 34 4b b8 bf         x...4K..
  102c74:	 ea cd bc bf e2 3d c1 bf         .....=..
  102c7c:	 63 9a c5 bf bd e2 c9 bf         c.......
  102c84:	 2f 16 ce bf 1a 34 d2 bf         /....4..
  102c8c:	 bc 3b d6 bf 6f 2c da bf         .;..o,..
  102c94:	 71 05 de bf 22 c6 e1 bf         q..."...
  102c9c:	 ca 6d e5 bf c2 fb e8 bf         .m......
  102ca4:	 58 6f ec bf d6 c7 ef bf         Xo......
  102cac:	 a3 04 f3 bf 10 25 f6 bf         .....%..
  102cb4:	 74 28 f9 bf 1f 0e fc bf         t(......
  102cbc:	 7c d5 fe bf f0 be 00 c0         |.......
  102cc4:	 58 03 02 c0 a0 37 03 c0         X....7..
  102ccc:	 7d 5b 04 c0 9c 6e 05 c0         }[...n..
  102cd4:	 b9 70 06 c0 80 61 07 c0         .p...a..
  102cdc:	 ab 40 08 c0 e9 0d 09 c0         .@......
  102ce4:	 fc c8 09 c0 93 71 0a c0         .....q..
  102cec:	 68 07 0b c0 3b 8a 0b c0         h...;...
  102cf4:	 c6 f9 0b c0 c5 55 0c c0         .....U..
  102cfc:	 f5 9d 0c c0 1c d2 0c c0         ........
  102d04:	 f1 f1 0c c0 3f fd 0c c0         ....?...
  102d0c:	 c7 f3 0c c0 4e d5 0c c0         ....N...
  102d14:	 98 a1 0c c0 75 58 0c c0         ....uX..
  102d1c:	 a9 f9 0b c0 01 85 0b c0         ........
  102d24:	 4c fa 0a c0 58 59 0a c0         L...XY..
  102d2c:	 f5 a1 09 c0 f2 d3 08 c0         ........
  102d34:	 24 ef 07 c0 62 f3 06 c0         $...b...
  102d3c:	 87 e0 05 c0 63 b6 04 c0         ....c...
  102d44:	 d6 74 03 c0 bd 1b 02 c0         .t......
  102d4c:	 f3 aa 00 c0 bf 44 fe bf         .....D..
  102d54:	 b8 03 fb bf a7 92 f7 bf         ........
  102d5c:	 4a f1 f3 bf 7d 1f f0 bf         J...}...
  102d64:	 11 1d ec bf d1 e9 e7 bf         ........
  102d6c:	 ad 85 e3 bf 7c f0 de bf         ....|...
  102d74:	 13 2a da bf 72 32 d5 bf         .*..r2..
  102d7c:	 81 09 d0 bf 1d af ca bf         ........
  102d84:	 4f 23 c5 bf fe 65 bf bf         O#...e..
  102d8c:	 32 77 b9 bf eb 56 b3 bf         2w...V..
  102d94:	 29 05 ad bf fe 81 a6 bf         ).......
  102d9c:	 70 cd 9f bf 92 e7 98 bf         p.......
  102da4:	 7d d0 91 bf 48 88 8a bf         }...H...
  102dac:	 17 0f 83 bf 11 ca 76 bf         ......v.
  102db4:	 90 14 67 bf fc fd 56 bf         ..g...V.
  102dbc:	 bc 86 46 bf 35 af 35 bf         ..F.5.5.
  102dc4:	 de 77 24 bf 32 e1 12 bf         .w$.2...
  102dcc:	 b5 eb 00 bf dd 2f dd be         ...../..
  102dd4:	 00 cd b7 be f9 af 91 be         ........
  102ddc:	 4d b4 55 be c1 99 06 be         M.U.....
  102de4:	 e3 4c 58 bd 33 e2 de 3c         .LX.3..<
  102dec:	 20 63 de 3d 5d e9 43 3e          c.=].C>
  102df4:	 1a 00 8d 3e 45 b9 b8 3e         ...>E..>
  102dfc:	 5a 1e e5 3e 82 75 08 3f         Z..>.u.?
  102e04:	 40 60 29 3f f6 c8 45 3f         @`)?..E?
  102e0c:	 fe 7f 62 3f b4 83 7f 3f         ..b?...?
  102e14:	 40 69 8e 3f 4c 35 9d 3f         @i.?L5.?
  102e1c:	 31 25 ac 3f 0d 38 bb 3f         1%.?.8.?
  102e24:	 f4 6c ca 3f 0d c3 d9 3f         .l.?...?
  102e2c:	 65 39 e9 3f 10 cf f8 3f         e9.?...?
  102e34:	 92 41 04 40 52 2a 0c 40         .A.@R*.@
  102e3c:	 4f 21 14 40 07 26 1c 40         O!.@.&.@
  102e44:	 04 38 24 40 bd 56 2c 40         .8$@.V,@
  102e4c:	 b2 81 34 40 5f b8 3c 40         ..4@_.<@
  102e54:	 44 fa 44 40 d4 46 4d 40         D.D@.FM@
  102e5c:	 84 9d 55 40 e3 fd 5d 40         ..U@..]@
  102e64:	 45 67 66 40 34 d9 6e 40         Egf@4.n@
  102e6c:	 11 53 77 40 67 d4 7f 40         .Sw@g..@
  102e74:	 47 2e 84 40 86 75 88 40         G..@.u.@
  102e7c:	 a3 bf 8c 40 54 0c 91 40         ...@T..@
  102e84:	 55 5b 95 40 52 ac 99 40         U[.@R..@
  102e8c:	 06 ff 9d 40 2e 53 a2 40         ...@.S.@
  102e94:	 70 a8 a6 40 8d fe aa 40         p..@...@
  102e9c:	 32 55 af 40 17 ac b3 40         2U.@...@
  102ea4:	 ef 02 b8 40 6d 59 bc 40         ...@mY.@
  102eac:	 45 af c0 40 27 04 c5 40         E..@'..@
  102eb4:	 cb 57 c9 40 e3 a9 cd 40         .W.@...@
  102ebc:	 1e fa d1 40 34 48 d6 40         ...@4H.@
  102ec4:	 d3 93 da 40 af dc de 40         ...@...@
  102ecc:	 81 22 e3 40 eb 64 e7 40         .".@.d.@
  102ed4:	 ad a3 eb 40 7d de ef 40         ...@}..@
  102edc:	 03 15 f4 40 f1 46 f8 40         ...@.F.@
  102ee4:	 0a 74 fc 40 f7 4d 00 41         .t.@.M.A
  102eec:	 2f 5f 02 41 82 6d 04 41         /_.A.m.A
  102ef4:	 cf 78 06 41 ed 80 08 41         .x.A...A
  102efc:	 b5 85 0a 41 05 87 0c 41         ...A...A
  102f04:	 b4 84 0e 41 9f 7e 10 41         ...A.~.A
  102f0c:	 9f 74 12 41 91 66 14 41         .t.A.f.A
  102f14:	 51 54 16 41 ba 3d 18 41         QT.A.=.A
  102f1c:	 a8 22 1a 41 f4 02 1c 41         .".A...A
  102f24:	 7d de 1d 41 1f b5 1f 41         }..A...A
  102f2c:	 b8 86 21 41 26 53 23 41         ..!A&S#A
  102f34:	 4c 1a 25 41 f5 db 26 41         L.%A..&A
  102f3c:	 16 98 28 41 7b 4e 2a 41         ..(A{N*A
  102f44:	 0f ff 2b 41 b3 a9 2d 41         ..+A..-A
  102f4c:	 3c 4e 2f 41 8b ec 30 41         <N/A..0A
  102f54:	 8c 84 32 41 1e 16 34 41         ..2A..4A
  102f5c:	 18 a1 35 41 65 25 37 41         ..5Ae%7A
  102f64:	 db a2 38 41 70 19 3a 41         ..8Ap.:A
  102f6c:	 f8 88 3b 41 61 f1 3c 41         ..;Aa.<A
  102f74:	 89 52 3e 41 52 ac 3f 41         .R>AR.?A
  102f7c:	 b0 fe 40 41 7b 49 42 41         ..@A{IBA
  102f84:	 93 8c 43 41 ed c7 44 41         ..CA..DA
  102f8c:	 74 fb 45 41 fe 26 47 41         t.EA.&GA
  102f94:	 8c 4a 48 41 e9 65 49 41         .JHA.eIA
  102f9c:	 1e 79 4a 41 f9 83 4b 41         .yJA..KA
  102fa4:	 79 86 4c 41 7e 80 4d 41         y.LA~.MA
  102fac:	 fe 71 4e 41 e4 5a 4f 41         .qNA.ZOA
  102fb4:	 10 3b 50 41 84 12 51 41         .;PA..QA
  102fbc:	 1e e1 51 41 df a6 52 41         ..QA..RA
  102fc4:	 9d 63 53 41 63 17 54 41         .cSAc.TA
  102fcc:	 1c c2 54 41 a8 63 55 41         ..TA.cUA
  102fd4:	 11 fc 55 41 39 8b 56 41         ..UA9.VA
  102fdc:	 1f 11 57 41 b9 8d 57 41         ..WA..WA
  102fe4:	 f1 00 58 41 c8 6a 58 41         ..XA.jXA
  102fec:	 34 cb 58 41 29 22 59 41         4.XA)"YA
  102ff4:	 9e 6f 59 41 92 b3 59 41         .oYA..YA
  102ffc:	 f0 ed 59 41 7e 29 5a 41         ..YA~)ZA
  103004:	 cf f7 59 41 8a bc 59 41         ..YA..YA
  10300c:	 c4 77 59 41 69 29 59 41         .wYAi)YA
  103014:	 98 d1 58 41 5a 70 58 41         ..XAZpXA
  10301c:	 a7 05 58 41 88 91 57 41         ..XA..WA
  103024:	 1d 14 57 41 5a 8d 56 41         ..WAZ.VA
  10302c:	 4c fd 55 41 11 64 55 41         L.UA.dUA
  103034:	 a9 c1 54 41 1e 16 54 41         ..TA..TA
  10303c:	 87 61 53 41 ec a3 52 41         .aSA..RA
  103044:	 59 dd 51 41 ed 0d 51 41         Y.QA..QA
  10304c:	 a8 35 50 41 aa 54 4f 41         .5PA.TOA
  103054:	 f2 6a 4e 41 ab 78 4d 41         .jNA.xMA
  10305c:	 d4 7d 4c 41 8d 7a 4b 41         .}LA.zKA
  103064:	 e1 6e 4a 41 ee 5a 49 41         .nJA.ZIA
  10306c:	 c0 3e 48 41 76 1a 47 41         .>HAv.GA
  103074:	 24 ee 45 41 eb b9 44 41         $.EA..DA
  10307c:	 ca 7d 43 41 eb 39 42 41         .}CA.9BA
  103084:	 6e ee 40 41 5c 9b 3f 41         n.@A\.?A
  10308c:	 e1 40 3e 41 07 df 3c 41         .@>A..<A
  103094:	 ed 75 3b 41 b2 05 3a 41         .u;A..:A
  10309c:	 75 8e 38 41 4d 10 37 41         u.8AM.7A
  1030a4:	 59 8b 35 41 c1 ff 33 41         Y.5A..3A
  1030ac:	 91 6d 32 41 e9 d4 30 41         .m2A..0A
  1030b4:	 fc 35 2f 41 d6 90 2d 41         .5/A..-A
  1030bc:	 9f e5 2b 41 78 34 2a 41         ..+Ax4*A
  1030c4:	 80 7d 28 41 d7 c0 26 41         .}(A..&A
  1030cc:	 9b fe 24 41 ed 36 23 41         ..$A.6#A
  1030d4:	 01 6a 21 41 e3 97 1f 41         .j!A...A
  1030dc:	 bf c0 1d 41 bb e4 1b 41         ...A...A
  1030e4:	 f3 03 1a 41 94 1e 18 41         ...A...A
  1030ec:	 b5 34 16 41 88 46 14 41         .4.A.F.A
  1030f4:	 28 54 12 41 bd 5d 10 41         (T.A.].A
  1030fc:	 6d 63 0e 41 5c 65 0c 41         mc.A\e.A
  103104:	 ae 63 0a 41 87 5e 08 41         .c.A.^.A
  10310c:	 13 56 06 41 73 4a 04 41         .V.AsJ.A
  103114:	 ca 3b 02 41 46 2a 00 41         .;.AF*.A
  10311c:	 13 2c fc 40 6f fe f7 40         .,.@o..@
  103124:	 f1 cb f3 40 ea 94 ef 40         ...@...@
  10312c:	 a3 59 eb 40 74 1a e7 40         .Y.@t..@
  103134:	 95 d7 e2 40 62 91 de 40         ...@b..@
  10313c:	 2e 48 da 40 37 fc d5 40         .H.@7..@
  103144:	 d6 ad d1 40 4c 5d cd 40         ...@L].@
  10314c:	 f8 0a c9 40 15 b7 c4 40         ...@...@
  103154:	 04 62 c0 40 fa 0b bc 40         .b.@...@
  10315c:	 5b b5 b7 40 61 5e b3 40         [..@a^.@
  103164:	 68 07 af 40 b4 b0 aa 40         h..@...@
  10316c:	 90 5a a6 40 47 05 a2 40         .Z.@G..@
  103174:	 27 b1 9d 40 7f 5e 99 40         '..@.^.@
  10317c:	 91 0d 95 40 b2 be 90 40         ...@...@
  103184:	 1d 72 8c 40 28 28 88 40         .r.@((.@
  10318c:	 1a e1 83 40 6d 3a 7f 40         ...@m:.@
  103194:	 95 b9 76 40 31 40 6e 40         ..v@1@n@
  10319c:	 d9 ce 65 40 1b 66 5d 40         ..e@.f]@
  1031a4:	 70 06 55 40 75 b0 4c 40         p.U@u.L@
  1031ac:	 aa 64 44 40 9a 23 3c 40         .dD@.#<@
  1031b4:	 cc ed 33 40 c2 c3 2b 40         ..3@..+@
  1031bc:	 01 a6 23 40 0c 95 1b 40         ..#@...@
  1031c4:	 60 91 13 40 80 9b 0b 40         `..@...@
  1031cc:	 ea b3 03 40 2c b6 f7 3f         ...@,..?
  1031d4:	 ff 22 e8 3f 36 af d8 3f         .".?6..?
  1031dc:	 cd 5b c9 3f a6 29 ba 3f         .[.?.).?
  1031e4:	 a4 19 ab 3f b2 2c 9c 3f         ...?.,.?
  1031ec:	 a2 63 8d 3f ae 7e 7d 3f         .c.?.~}?
  1031f4:	 52 81 60 3f c6 d0 43 3f         R.`?..C?
  1031fc:	 b8 6e 27 3f 6a c7 0a 3f         .n'?j..?
  103204:	 28 ce de 3e 3a 78 b2 3e         (..>:x.>
  10320c:	 72 ce 86 3e 60 a5 37 3e         r..>`.7>
  103214:	 db 1a c6 3d f6 87 7d 3c         ...=..}<
  10321c:	 46 ec 83 bd 53 5b 12 be         F...S[..
  103224:	 0e 54 61 be bc 6e 97 be         .Ta..n..
  10322c:	 6b 7a bd be b5 cb e2 be         kz......
  103234:	 bf b0 03 bf 3b 9d 15 bf         ....;...
  10323c:	 d6 2a 27 bf fe 58 38 bf         .*'..X8.
  103244:	 3d 27 49 bf 21 95 59 bf         ='I.!.Y.
  10324c:	 47 a2 69 bf 44 4e 79 bf         G.i.DNy.
  103254:	 62 4c 84 bf c2 c0 8b bf         bL......
  10325c:	 14 04 93 bf 48 16 9a bf         ....H...
  103264:	 34 f7 a0 bf ce a6 a7 bf         4.......
  10326c:	 ff 24 ae bf b4 71 b4 bf         .$...q..
  103274:	 f8 8c ba bf b0 76 c0 bf         .....v..
  10327c:	 e4 2e c6 bf 9e b5 cb bf         ........
  103284:	 dd 0a d1 bf ba 2e d6 bf         ........
  10328c:	 2d 21 db bf 69 e2 df bf         -!..i...
  103294:	 6d 72 e4 bf 63 d1 e8 bf         mr..c...
  10329c:	 6d ff ec bf ad fc f0 bf         m.......
  1032a4:	 43 c9 f4 bf 6b 65 f8 bf         C...ke..
  1032ac:	 4e d1 fb bf 20 0d ff bf         N... ...
  1032b4:	 89 0c 01 c0 b7 7a 02 c0         .....z..
  1032bc:	 39 d1 03 c0 30 10 05 c0         9...0...
  1032c4:	 b9 37 06 c0 02 48 07 c0         .7...H..
  1032cc:	 31 41 08 c0 6c 23 09 c0         1A..l#..
  1032d4:	 dd ee 09 c0 b5 a3 0a c0         ........
  1032dc:	 20 42 0b c0 4b ca 0b c0          B..K...
  1032e4:	 68 3c 0c c0 af 98 0c c0         h<......
  1032ec:	 55 df 0c c0 88 10 0d c0         U.......
  1032f4:	 88 2c 0d c0 87 33 0d c0         .,...3..
  1032fc:	 c8 25 0d c0 82 03 0d c0         .%......
  103304:	 f3 cc 0c c0 5a 82 0c c0         ....Z...
  10330c:	 fb 23 0c c0 10 b2 0b c0         .#......
  103314:	 e4 2c 0b c0 b8 94 0a c0         .,......
  10331c:	 d1 e9 09 c0 77 2c 09 c0         ....w,..
  103324:	 ee 5c 08 c0 85 7b 07 c0         .\...{..
  10332c:	 83 88 06 c0 34 84 05 c0         ....4...
  103334:	 e3 6e 04 c0 dc 48 03 c0         .n...H..
  10333c:	 73 12 02 c0 ef cb 00 c0         s.......
  103344:	 4f eb fe bf da 1f fc bf         O.......
  10334c:	 0d 36 f9 bf a9 2e f6 bf         .6......
  103354:	 46 0a f3 bf 93 c9 ef bf         F.......
  10335c:	 2f 6d ec bf d3 f5 e8 bf         /m......
  103364:	 17 64 e5 bf c3 b8 e1 bf         .d......
  10336c:	 6f f4 dd bf d3 17 da bf         o.......
  103374:	 9e 23 d6 bf 8b 18 d2 bf         .#......
  10337c:	 38 f7 cd bf 6e c0 c9 bf         8...n...
  103384:	 cd 74 c5 bf 1e 15 c1 bf         .t......
  10338c:	 01 a2 bc bf 37 1c b8 bf         ....7...
  103394:	 6f 84 b3 bf 62 db ae bf         o...b...
  10339c:	 c9 21 aa bf 53 58 a5 bf         .!..SX..
  1033a4:	 c3 7f a0 bf c8 98 9b bf         ........
  1033ac:	 1a a4 96 bf 6a a2 91 bf         ....j...
  1033b4:	 79 94 8c bf ee 7a 87 bf         y....z..
  1033bc:	 93 56 82 bf 0d 50 7a bf         .V...Pz.
  1033c4:	 1c e0 6f bf b1 5e 65 bf         ..o..^e.
  1033cc:	 33 cd 5a bf 0d 2d 50 bf         3.Z..-P.
  1033d4:	 a6 7f 45 bf 58 c6 3a bf         ..E.X.:.
  1033dc:	 8b 02 30 bf a3 35 25 bf         ..0..5%.
  1033e4:	 fb 60 1a bf eb 85 0f bf         .`......
  1033ec:	 d0 a5 04 bf 12 84 f3 be         ........
  1033f4:	 cd b7 dd be 75 e9 c7 be         ....u...
  1033fc:	 ad 1b b2 be f5 7b 9b be         .....{..
  103404:	 fd 72 7c be bc 72 62 be         .r|..rb.
  10340c:	 44 95 48 be d5 dd 2e be         D.H.....
  103414:	 a3 4f 15 be b1 db f7 bd         .O......
  10341c:	 14 77 c5 bd 90 77 93 bd         .w...w..
  103424:	 36 c6 43 bd 62 fe c2 bc         6.C.b...
  10342c:	 03 64 16 b8 8d 76 c0 3c         .d...v.<
  103434:	 51 98 3f 3d 5f f3 8e 3d         Q.?=_..=
  10343c:	 f3 8d bd 3d af 96 eb 3d         ...=...=
  103444:	 44 84 0c 3e 41 ef 22 3e         D..>A.">
  10344c:	 e5 09 39 3e da d1 4e 3e         ..9>..N>
  103454:	 c6 44 64 3e 81 60 79 3e         .Dd>.`y>
  10345c:	 69 11 87 3e cf 44 91 3e         i..>.D.>
  103464:	 6b 49 9b 3e 43 1e a5 3e         kI.>C..>
  10346c:	 5c c2 ae 3e cf 34 b8 3e         \..>.4.>
  103474:	 b4 74 c1 3e 27 81 ca 3e         .t.>'..>
  10347c:	 62 59 d3 3e 83 fc db 3e         bY.>...>
  103484:	 ca 69 e4 3e 86 a0 ec 3e         .i.>...>
  10348c:	 03 a0 f4 3e 82 67 fc 3e         ...>.g.>
  103494:	 37 fb 01 3f 19 a6 05 3f         7..?...?
  10349c:	 12 34 09 3f e2 a4 0c 3f         .4.?...?
  1034a4:	 4b f8 0f 3f 0d 2e 13 3f         K..?...?
  1034ac:	 ef 45 16 3f bd 3f 19 3f         .E.?.?.?
  1034b4:	 42 1b 1c 3f 4d d8 1e 3f         B..?M..?
  1034bc:	 c5 76 21 3f 75 f6 23 3f         .v!?u.#?
  1034c4:	 40 57 26 3f 13 99 28 3f         @W&?..(?
  1034cc:	 c8 bb 2a 3f 53 bf 2c 3f         ..*?S.,?
  1034d4:	 9b a3 2e 3f 98 68 30 3f         ...?.h0?
  1034dc:	 46 0e 32 3f 94 94 33 3f         F.2?..3?
  1034e4:	 87 fb 34 3f 26 43 36 3f         ..4?&C6?
  1034ec:	 6b 6b 37 3f 6b 74 38 3f         kk7?kt8?
  1034f4:	 2c 5e 39 3f c8 28 3a 3f         ,^9?.(:?
  1034fc:	 49 d4 3a 3f d0 60 3b 3f         I.:?.`;?
  103504:	 78 ce 3b 3f 57 1d 3c 3f         x.;?W.<?
  10350c:	 9f 4d 3c 3f 6c 5f 3c 3f         .M<?l_<?
  103514:	 ec 52 3c 3f 4b 28 3c 3f         .R<?K(<?
  10351c:	 bb df 3b 3f 73 79 3b 3f         ..;?sy;?
  103524:	 a3 f5 3a 3f 82 54 3a 3f         ..:?.T:?
  10352c:	 59 96 39 3f 65 bb 38 3f         Y.9?e.8?
  103534:	 e4 c3 37 3f 27 b0 36 3f         ..7?'.6?
  10353c:	 6a 80 35 3f 05 35 34 3f         j.5?.54?
  103544:	 3c ce 32 3f 6b 4c 31 3f         <.2?kL1?
  10354c:	 de af 2f 3f f6 f8 2d 3f         ../?..-?
  103554:	 02 28 2c 3f 67 3d 2a 3f         .(,?g=*?
  10355c:	 82 39 28 3f af 1c 26 3f         .9(?..&?
  103564:	 52 e7 23 3f d6 99 21 3f         R.#?..!?
  10356c:	 a4 34 1f 3f 21 b8 1c 3f         .4.?!..?
  103574:	 b8 24 1a 3f da 7a 17 3f         .$.?.z.?
  10357c:	 f9 ba 14 3f 88 e5 11 3f         ...?...?
  103584:	 f5 fa 0e 3f ba fb 0b 3f         ...?...?
  10358c:	 4e e8 08 3f 2d c1 05 3f         N..?-..?
  103594:	 cd 86 02 3f 53 73 fe 3e         ...?Ss.>
  10359c:	 91 b4 f7 3e 37 d2 f0 3e         ...>7..>
  1035a4:	 60 cd e9 3e 08 a7 e2 3e         `..>...>
  1035ac:	 2c 60 db 3e e1 f9 d3 3e         ,`.>...>
  1035b4:	 24 75 cc 3e 0d d3 c4 3e         $u.>...>
  1035bc:	 a1 14 bd 3e ed 3a b5 3e         ...>.:.>
  1035c4:	 10 47 ad 3e 0c 3a a5 3e         .G.>.:.>
  1035cc:	 02 15 9d 3e 01 d9 94 3e         ...>...>
  1035d4:	 23 87 8c 3e 7b 20 84 3e         #..>{ .>
  1035dc:	 46 4c 77 3e 64 32 66 3e         FLw>d2f>
  1035e4:	 83 f5 54 3e d6 97 43 3e         ..T>..C>
  1035ec:	 92 1b 32 3e ea 82 20 3e         ..2>.. >
  1035f4:	 12 d0 0e 3e 6d 0a fa 3d         ...>m..=
  1035fc:	 25 49 d6 3d 98 8c b0 3d         %I.=...=
  103604:	 9f 0c 44 3d 7f 78 2b 3d         ..D=.x+=
  10360c:	 1d e8 12 3d 99 be f4 3c         ...=...<
  103614:	 79 c3 c3 3c 3c e6 92 3c         y..<<..<
  10361c:	 66 5c 44 3c 46 8a c6 3b         f\D<F..;
  103624:	 cf 40 25 39 aa 4b bb bb         .@%9.K..
  10362c:	 79 5d 3d bc 02 42 8e bc         y]=..B..
  103634:	 f8 85 bd bc e1 73 ec bc         .....s..
  10363c:	 92 82 0d bd 8d 99 24 bd         ......$.
  103644:	 bf 7b 3b bd f0 25 52 bd         .{;..%R.
  10364c:	 ff 94 68 bd db c5 7e bd         ..h...~.
  103654:	 ca 5a 8a bd 8d 30 95 bd         .Z...0..
  10365c:	 cc e2 9f bd 13 70 aa bd         .....p..
  103664:	 02 d7 b4 bd 37 16 bf bd         ....7...
  10366c:	 5f 2c c9 bd 26 18 d3 bd         _,..&...
  103674:	 48 d8 dc bd 8a 6b e6 bd         H....k..
  10367c:	 a8 d0 ef bd 6f 06 f9 bd         ....o...
  103684:	 e8 05 01 be cd 6f 05 be         .....o..
  10368c:	 52 c0 09 be fd f6 0d be         R.......
  103694:	 4a 13 12 be b1 14 16 be         J.......
  10369c:	 b9 fa 19 be eb c4 1d be         ........
  1036a4:	 db 72 21 be 0f 04 25 be         .r!...%.
  1036ac:	 24 78 28 be b4 ce 2b be         $x(...+.
  1036b4:	 5b 07 2f be bb 21 32 be         [./..!2.
  1036bc:	 7d 1d 35 be 49 fa 37 be         }.5.I.7.
  1036c4:	 d6 b7 3a be cc 55 3d be         ..:..U=.
  1036cc:	 ef d3 3f be f5 31 42 be         ..?..1B.
  1036d4:	 a2 6f 44 be c0 8c 46 be         .oD...F.
  1036dc:	 0d 89 48 be 65 64 4a be         ..H.edJ.
  1036e4:	 8e 1e 4c be 6b b7 4d be         ..L.k.M.
  1036ec:	 cf 2e 4f be 9e 84 50 be         ..O...P.
  1036f4:	 b7 b8 51 be 0d cb 52 be         ..Q...R.
  1036fc:	 7d bb 53 be 08 8a 54 be         }.S...T.
  103704:	 93 36 55 be 25 c1 55 be         .6U.%.U.
  10370c:	 b7 29 56 be 48 70 56 be         .)V.HpV.
  103714:	 e1 94 56 be 87 97 56 be         ..V...V.
  10371c:	 55 78 56 be 4b 37 56 be         UxV.K7V.
  103724:	 8b d4 55 be 29 50 55 be         ..U.)PU.
  10372c:	 4d aa 54 be 0c e3 53 be         M.T...S.
  103734:	 94 fa 52 be 0d f1 51 be         ..R...Q.
  10373c:	 a0 c6 50 be 8a 7b 4f be         ..P..{O.
  103744:	 eb 0f 4e be 0e 84 4c be         ..N...L.
  10374c:	 28 d8 4a be 7d 0c 49 be         (.J.}.I.
  103754:	 48 21 47 be d4 16 45 be         H!G...E.
  10375c:	 64 ed 42 be 4f a5 40 be         d.B.O.@.
  103764:	 e5 3e 3e be 71 ba 3b be         .>>.q.;.
  10376c:	 50 18 39 be d2 58 36 be         P.9..X6.
  103774:	 64 7c 33 be 5c 83 30 be         d|3.\.0.
  10377c:	 19 6e 2d be 05 3d 2a be         .n-..=*.
  103784:	 8d f0 26 be 14 89 23 be         ..&...#.
  10378c:	 0d 07 20 be dd 6a 1c be         .. ..j..
  103794:	 09 b5 18 be f7 e5 14 be         ........
  10379c:	 1f fe 10 be 01 fe 0c be         ........
  1037a4:	 15 e6 08 be e2 b6 04 be         ........
  1037ac:	 da 70 00 be 07 29 f8 bd         .p...)..
  1037b4:	 d4 44 ef bd 10 36 e6 bd         .D...6..
  1037bc:	 e0 fd dc bd 43 9d d3 bd         ....C...
  1037c4:	 61 15 ca bd 45 67 c0 bd         a...Eg..
  1037cc:	 11 94 b6 bd e8 9c ac bd         ........
  1037d4:	 e4 82 a2 bd 2b 47 98 bd         ....+G..
  1037dc:	 e7 ea 8d bd 42 6f 83 bd         ....Bo..
  1037e4:	 bd aa 71 bd dd 3c 5c bd         ..q..<\.
  1037ec:	 49 97 46 bd 53 bc 30 bd         I.F.S.0.
  1037f4:	 6f ae 1a bd ec 6f 04 bd         o....o..
  1037fc:	 8c 06 dc bc 99 58 ac bc         .....X..


STFT_Win_FixHalf_M512_D160:
  103804:	 00 00 c9 00 92 01 5b 02         ......[.
  10380c:	 24 03 ed 03 b6 04 7f 05         $.......
  103814:	 48 06 11 07 d9 07 a2 08         H.......
  10381c:	 6b 09 33 0a fb 0a c4 0b         k.3.....
  103824:	 8c 0c 54 0d 1c 0e e4 0e         ..T.....
  10382c:	 ab 0f 73 10 3a 11 01 12         ..s.:...
  103834:	 c8 12 8f 13 55 14 1c 15         ....U...
  10383c:	 e2 15 a8 16 6e 17 33 18         ....n.3.
  103844:	 f9 18 be 19 83 1a 47 1b         ......G.
  10384c:	 0c 1c d0 1c 93 1d 57 1e         ......W.
  103854:	 1a 1f dd 1f 9f 20 62 21         ..... b!
  10385c:	 24 22 e5 22 a7 23 67 24         $".".#g$
  103864:	 28 25 e8 25 a8 26 68 27         (%.%.&h'
  10386c:	 27 28 e5 28 a4 29 62 2a         '(.(.)b*
  103874:	 1f 2b dc 2b 99 2c 55 2d         .+.+.,U-
  10387c:	 11 2e cc 2e 87 2f 42 30         ...../B0
  103884:	 fc 30 b5 31 6e 32 27 33         .0.1n2'3
  10388c:	 df 33 97 34 4e 35 04 36         .3.4N5.6
  103894:	 ba 36 70 37 25 38 d9 38         .6p7%8.8
  10389c:	 8d 39 40 3a f3 3a a5 3b         .9@:.:.;
  1038a4:	 57 3c 08 3d b8 3d 68 3e         W<.=.=h>
  1038ac:	 17 3f c6 3f 74 40 21 41         .?.?t@!A
  1038b4:	 ce 41 7a 42 26 43 d1 43         .AzB&C.C
  1038bc:	 7b 44 24 45 cd 45 75 46         {D$E.EuF
  1038c4:	 1d 47 c4 47 6a 48 0f 49         .G.GjH.I
  1038cc:	 b4 49 58 4a fb 4a 9e 4b         .IXJ.J.K
  1038d4:	 40 4c e1 4c 81 4d 21 4e         @L.L.M!N
  1038dc:	 c0 4e 5e 4f fb 4f 98 50         .N^O.O.P
  1038e4:	 34 51 cf 51 69 52 03 53         4Q.QiR.S
  1038ec:	 9b 53 33 54 ca 54 60 55         .S3T.T`U
  1038f4:	 f6 55 8a 56 1e 57 b1 57         .U.V.W.W
  1038fc:	 43 58 d4 58 64 59 f4 59         CX.XdY.Y
  103904:	 82 5a 10 5b 9d 5b 29 5c         .Z.[.[)\
  10390c:	 b4 5c 3e 5d c8 5d 50 5e         .\>].]P^
  103914:	 d7 5e 5e 5f e4 5f 68 60         .^^_._h`
  10391c:	 ec 60 6f 61 f1 61 72 62         .`oa.arb
  103924:	 f2 62 71 63 ef 63 6c 64         .bqc.cld
  10392c:	 e9 64 64 65 de 65 57 66         .dde.eWf
  103934:	 d0 66 47 67 bd 67 32 68         .fGg.g2h
  10393c:	 a7 68 1a 69 8c 69 fd 69         .h.i.i.i
  103944:	 6e 6a dd 6a 4b 6b b8 6b         nj.jKk.k
  10394c:	 24 6c 8f 6c f9 6c 62 6d         $l.l.lbm
  103954:	 ca 6d 31 6e 97 6e fb 6e         .m1n.n.n
  10395c:	 5f 6f c2 6f 23 70 83 70         _o.o#p.p
  103964:	 e3 70 41 71 9e 71 fa 71         .pAq.q.q
  10396c:	 55 72 af 72 08 73 5f 73         Ur.r.s_s
  103974:	 b6 73 0b 74 60 74 b3 74         .s.t`t.t
  10397c:	 05 75 56 75 a6 75 f4 75         .uVu.u.u
  103984:	 42 76 8e 76 d9 76 23 77         Bv.v.v#w
  10398c:	 6c 77 b4 77 fb 77 40 78         lw.w.w@x
  103994:	 85 78 c8 78 0a 79 4a 79         .x.x.yJy
  10399c:	 8a 79 c9 79 06 7a 42 7a         .y.y.zBz
  1039a4:	 7d 7a b7 7a ef 7a 27 7b         }z.z.z'{
  1039ac:	 5d 7b 92 7b c6 7b f9 7b         ]{.{.{.{
  1039b4:	 2a 7c 5a 7c 89 7c b7 7c         *|Z|.|.|
  1039bc:	 e4 7c 0f 7d 3a 7d 63 7d         .|.}:}c}
  1039c4:	 8a 7d b1 7d d6 7d fb 7d         .}.}.}.}
  1039cc:	 1e 7e 3f 7e 60 7e 7f 7e         .~?~`~.~
  1039d4:	 9d 7e ba 7e d6 7e f0 7e         .~.~.~.~
  1039dc:	 0a 7f 22 7f 38 7f 4e 7f         ..".8.N.
  1039e4:	 62 7f 75 7f 87 7f 98 7f         b.u.....
  1039ec:	 a7 7f b5 7f c2 7f ce 7f         ........
  1039f4:	 d9 7f e2 7f ea 7f f1 7f         ........
  1039fc:	 f6 7f fa 7f fe 7f ff 7f         ........
  103a04:	 ff 7f ff 7f fe 7f fa 7f         ........
  103a0c:	 f6 7f f1 7f ea 7f e2 7f         ........
  103a14:	 d9 7f ce 7f c2 7f b5 7f         ........
  103a1c:	 a7 7f 98 7f 87 7f 75 7f         ......u.
  103a24:	 62 7f 4e 7f 38 7f 22 7f         b.N.8.".
  103a2c:	 0a 7f f0 7e d6 7e ba 7e         ...~.~.~
  103a34:	 9d 7e 7f 7e 60 7e 3f 7e         .~.~`~?~
  103a3c:	 1e 7e fb 7d d6 7d b1 7d         .~.}.}.}
  103a44:	 8a 7d 63 7d 3a 7d 0f 7d         .}c}:}.}
  103a4c:	 e4 7c b7 7c 89 7c 5a 7c         .|.|.|Z|
  103a54:	 2a 7c f9 7b c6 7b 92 7b         *|.{.{.{
  103a5c:	 5d 7b 27 7b ef 7a b7 7a         ]{'{.z.z
  103a64:	 7d 7a 42 7a 06 7a c9 79         }zBz.z.y
  103a6c:	 8a 79 4a 79 0a 79 c8 78         .yJy.y.x
  103a74:	 85 78 40 78 fb 77 b4 77         .x@x.w.w
  103a7c:	 6c 77 23 77 d9 76 8e 76         lw#w.v.v
  103a84:	 42 76 f4 75 a6 75 56 75         Bv.u.uVu
  103a8c:	 05 75 b3 74 60 74 0b 74         .u.t`t.t
  103a94:	 b6 73 5f 73 08 73 af 72         .s_s.s.r
  103a9c:	 55 72 fa 71 9e 71 41 71         Ur.q.qAq
  103aa4:	 e3 70 83 70 23 70 c2 6f         .p.p#p.o
  103aac:	 5f 6f fb 6e 97 6e 31 6e         _o.n.n1n
  103ab4:	 ca 6d 62 6d f9 6c 8f 6c         .mbm.l.l
  103abc:	 24 6c b8 6b 4b 6b dd 6a         $l.kKk.j
  103ac4:	 6e 6a fd 69 8c 69 1a 69         nj.i.i.i
  103acc:	 a7 68 32 68 bd 67 47 67         .h2h.gGg
  103ad4:	 d0 66 57 66 de 65 64 65         .fWf.ede
  103adc:	 e9 64 6c 64 ef 63 71 63         .dld.cqc
  103ae4:	 f2 62 72 62 f1 61 6f 61         .brb.aoa
  103aec:	 ec 60 68 60 e4 5f 5e 5f         .`h`._^_
  103af4:	 d7 5e 50 5e c8 5d 3e 5d         .^P^.]>]
  103afc:	 b4 5c 29 5c 9d 5b 10 5b         .\)\.[.[
  103b04:	 82 5a f4 59 64 59 d4 58         .Z.YdY.X
  103b0c:	 43 58 b1 57 1e 57 8a 56         CX.W.W.V
  103b14:	 f6 55 60 55 ca 54 33 54         .U`U.T3T
  103b1c:	 9b 53 03 53 69 52 cf 51         .S.SiR.Q
  103b24:	 34 51 98 50 fb 4f 5e 4f         4Q.P.O^O
  103b2c:	 c0 4e 21 4e 81 4d e1 4c         .N!N.M.L
  103b34:	 40 4c 9e 4b fb 4a 58 4a         @L.K.JXJ
  103b3c:	 b4 49 0f 49 6a 48 c4 47         .I.IjH.G
  103b44:	 1d 47 75 46 cd 45 24 45         .GuF.E$E
  103b4c:	 7b 44 d1 43 26 43 7a 42         {D.C&CzB
  103b54:	 ce 41 21 41 74 40 c6 3f         .A!At@.?
  103b5c:	 17 3f 68 3e b8 3d 08 3d         .?h>.=.=
  103b64:	 57 3c a5 3b f3 3a 40 3a         W<.;.:@:
  103b6c:	 8d 39 d9 38 25 38 70 37         .9.8%8p7
  103b74:	 ba 36 04 36 4e 35 97 34         .6.6N5.4
  103b7c:	 df 33 27 33 6e 32 b5 31         .3'3n2.1
  103b84:	 fc 30 42 30 87 2f cc 2e         .0B0./..
  103b8c:	 11 2e 55 2d 99 2c dc 2b         ..U-.,.+
  103b94:	 1f 2b 62 2a a4 29 e5 28         .+b*.).(
  103b9c:	 27 28 68 27 a8 26 e8 25         '(h'.&.%
  103ba4:	 28 25 67 24 a7 23 e5 22         (%g$.#."
  103bac:	 24 22 62 21 9f 20 dd 1f         $"b!. ..
  103bb4:	 1a 1f 57 1e 93 1d d0 1c         ..W.....
  103bbc:	 0c 1c 47 1b 83 1a be 19         ..G.....
  103bc4:	 f9 18 33 18 6e 17 a8 16         ..3.n...
  103bcc:	 e2 15 1c 15 55 14 8f 13         ....U...
  103bd4:	 c8 12 01 12 3a 11 73 10         ....:.s.
  103bdc:	 ab 0f e4 0e 1c 0e 54 0d         ......T.
  103be4:	 8c 0c c4 0b fb 0a 33 0a         ......3.
  103bec:	 6b 09 a2 08 d9 07 11 07         k.......
  103bf4:	 48 06 7f 05 b6 04 ed 03         H.......
  103bfc:	 24 03 5b 02 92 01 c9 00         $.[.....


STFT_Win_FixHalf_M256_D160:
  103c04:	 00 00 18 02 30 04 48 06         ....0.H.
  103c0c:	 5f 08 76 0a 8c 0c a1 0e         _.v.....
  103c14:	 b5 10 c8 12 da 14 ea 16         ........
  103c1c:	 f9 18 06 1b 11 1d 1a 1f         ........
  103c24:	 21 21 26 23 28 25 28 27         !!&#(%('
  103c2c:	 25 29 1f 2b 17 2d 0b 2f         %).+.-./
  103c34:	 fc 30 e9 32 d4 34 ba 36         .0.2.4.6
  103c3c:	 9d 38 7c 3a 57 3c 2d 3e         .8|:W<->
  103c44:	 00 40 ce 41 98 43 5d 45         .@.A.C]E
  103c4c:	 1d 47 d8 48 8f 4a 40 4c         .G.H.J@L
  103c54:	 ec 4d 93 4f 34 51 cf 52         .M.O4Q.R
  103c5c:	 65 54 f6 55 80 57 04 59         eT.U.W.Y
  103c64:	 82 5a fa 5b 6c 5d d7 5e         .Z.[l].^
  103c6c:	 3c 60 9a 61 f2 62 43 64         <`.a.bCd
  103c74:	 8d 65 d0 66 0b 68 40 69         .e.f.h@i
  103c7c:	 6e 6a 94 6b b3 6c ca 6d         nj.k.l.m
  103c84:	 da 6e e2 6f e3 70 dc 71         .n.o.p.q
  103c8c:	 cd 72 b6 73 97 74 70 75         .r.s.tpu
  103c94:	 42 76 0b 77 cc 77 85 78         Bv.w.w.x
  103c9c:	 35 79 dd 79 7d 7a 14 7b         5y.y}z.{
  103ca4:	 a3 7b 2a 7c a8 7c 1d 7d         .{*|.|.}
  103cac:	 8a 7d ef 7d 4a 7e 9d 7e         .}.}J~.~
  103cb4:	 e8 7e 29 7f 62 7f 92 7f         .~).b...
  103cbc:	 ba 7f d9 7f ee 7f fc 7f         ........
  103cc4:	 ff 7f ff 7f ff 7f ff 7f         ........
  103ccc:	 ff 7f ff 7f ff 7f ff 7f         ........
  103cd4:	 ff 7f ff 7f ff 7f ff 7f         ........
  103cdc:	 ff 7f ff 7f ff 7f ff 7f         ........
  103ce4:	 ff 7f ff 7f ff 7f ff 7f         ........
  103cec:	 ff 7f ff 7f ff 7f ff 7f         ........
  103cf4:	 ff 7f ff 7f ff 7f ff 7f         ........
  103cfc:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d04:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d0c:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d14:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d1c:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d24:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d2c:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d34:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d3c:	 ff 7f ff 7f ff 7f ff 7f         ........
  103d44:	 ff 7f fc 7f ee 7f d9 7f         ........
  103d4c:	 ba 7f 92 7f 62 7f 29 7f         ....b.).
  103d54:	 e8 7e 9d 7e 4a 7e ef 7d         .~.~J~.}
  103d5c:	 8a 7d 1d 7d a8 7c 2a 7c         .}.}.|*|
  103d64:	 a3 7b 14 7b 7d 7a dd 79         .{.{}z.y
  103d6c:	 35 79 85 78 cc 77 0b 77         5y.x.w.w
  103d74:	 42 76 70 75 97 74 b6 73         Bvpu.t.s
  103d7c:	 cd 72 dc 71 e3 70 e2 6f         .r.q.p.o
  103d84:	 da 6e ca 6d b3 6c 94 6b         .n.m.l.k
  103d8c:	 6e 6a 40 69 0b 68 d0 66         nj@i.h.f
  103d94:	 8d 65 43 64 f2 62 9a 61         .eCd.b.a
  103d9c:	 3c 60 d7 5e 6c 5d fa 5b         <`.^l].[
  103da4:	 82 5a 04 59 80 57 f6 55         .Z.Y.W.U
  103dac:	 65 54 cf 52 34 51 93 4f         eT.R4Q.O
  103db4:	 ec 4d 40 4c 8f 4a d8 48         .M@L.J.H
  103dbc:	 1d 47 5d 45 98 43 ce 41         .G]E.C.A
  103dc4:	 00 40 2d 3e 57 3c 7c 3a         .@->W<|:
  103dcc:	 9d 38 ba 36 d4 34 e9 32         .8.6.4.2
  103dd4:	 fc 30 0b 2f 17 2d 1f 2b         .0./.-.+
  103ddc:	 25 29 28 27 28 25 26 23         %)('(%&#
  103de4:	 21 21 1a 1f 11 1d 06 1b         !!......
  103dec:	 f9 18 ea 16 da 14 c8 12         ........
  103df4:	 b5 10 a1 0e 8c 0c 76 0a         ......v.
  103dfc:	 5f 08 48 06 30 04 18 02         _.H.0...


STFT_Win_FixHalf_M256_D80:
  103e04:	 00 00 92 01 24 03 b6 04         ....$...
  103e0c:	 48 06 d9 07 6b 09 fb 0a         H...k...
  103e14:	 8c 0c 1c 0e ab 0f 3a 11         ......:.
  103e1c:	 c8 12 55 14 e2 15 6e 17         ..U...n.
  103e24:	 f9 18 83 1a 0c 1c 93 1d         ........
  103e2c:	 1a 1f 9f 20 24 22 a7 23         ... $".#
  103e34:	 28 25 a8 26 27 28 a4 29         (%.&'(.)
  103e3c:	 1f 2b 99 2c 11 2e 87 2f         .+.,.../
  103e44:	 fc 30 6e 32 df 33 4e 35         .0n2.3N5
  103e4c:	 ba 36 25 38 8d 39 f3 3a         .6%8.9.:
  103e54:	 57 3c b8 3d 17 3f 74 40         W<.=.?t@
  103e5c:	 ce 41 26 43 7b 44 cd 45         .A&C{D.E
  103e64:	 1d 47 6a 48 b4 49 fb 4a         .GjH.I.J
  103e6c:	 40 4c 81 4d c0 4e fb 4f         @L.M.N.O
  103e74:	 34 51 69 52 9b 53 ca 54         4QiR.S.T
  103e7c:	 f6 55 1e 57 43 58 64 59         .U.WCXdY
  103e84:	 82 5a 9d 5b b4 5c c8 5d         .Z.[.\.]
  103e8c:	 d7 5e e4 5f ec 60 f1 61         .^._.`.a
  103e94:	 f2 62 ef 63 e9 64 de 65         .b.c.d.e
  103e9c:	 d0 66 bd 67 a7 68 8c 69         .f.g.h.i
  103ea4:	 6e 6a 4b 6b 24 6c f9 6c         njKk$l.l
  103eac:	 ca 6d 97 6e 5f 6f 23 70         .m.n_o#p
  103eb4:	 e3 70 9e 71 55 72 08 73         .p.qUr.s
  103ebc:	 b6 73 60 74 05 75 a6 75         .s`t.u.u
  103ec4:	 42 76 d9 76 6c 77 fb 77         Bv.vlw.w
  103ecc:	 85 78 0a 79 8a 79 06 7a         .x.y.y.z
  103ed4:	 7d 7a ef 7a 5d 7b c6 7b         }z.z]{.{
  103edc:	 2a 7c 89 7c e4 7c 3a 7d         *|.|.|:}
  103ee4:	 8a 7d d6 7d 1e 7e 60 7e         .}.}.~`~
  103eec:	 9d 7e d6 7e 0a 7f 38 7f         .~.~..8.
  103ef4:	 62 7f 87 7f a7 7f c2 7f         b.......
  103efc:	 d9 7f ea 7f f6 7f fe 7f         ........
  103f04:	 ff 7f fe 7f f6 7f ea 7f         ........
  103f0c:	 d9 7f c2 7f a7 7f 87 7f         ........
  103f14:	 62 7f 38 7f 0a 7f d6 7e         b.8....~
  103f1c:	 9d 7e 60 7e 1e 7e d6 7d         .~`~.~.}
  103f24:	 8a 7d 3a 7d e4 7c 89 7c         .}:}.|.|
  103f2c:	 2a 7c c6 7b 5d 7b ef 7a         *|.{]{.z
  103f34:	 7d 7a 06 7a 8a 79 0a 79         }z.z.y.y
  103f3c:	 85 78 fb 77 6c 77 d9 76         .x.wlw.v
  103f44:	 42 76 a6 75 05 75 60 74         Bv.u.u`t
  103f4c:	 b6 73 08 73 55 72 9e 71         .s.sUr.q
  103f54:	 e3 70 23 70 5f 6f 97 6e         .p#p_o.n
  103f5c:	 ca 6d f9 6c 24 6c 4b 6b         .m.l$lKk
  103f64:	 6e 6a 8c 69 a7 68 bd 67         nj.i.h.g
  103f6c:	 d0 66 de 65 e9 64 ef 63         .f.e.d.c
  103f74:	 f2 62 f1 61 ec 60 e4 5f         .b.a.`._
  103f7c:	 d7 5e c8 5d b4 5c 9d 5b         .^.].\.[
  103f84:	 82 5a 64 59 43 58 1e 57         .ZdYCX.W
  103f8c:	 f6 55 ca 54 9b 53 69 52         .U.T.SiR
  103f94:	 34 51 fb 4f c0 4e 81 4d         4Q.O.N.M
  103f9c:	 40 4c fb 4a b4 49 6a 48         @L.J.IjH
  103fa4:	 1d 47 cd 45 7b 44 26 43         .G.E{D&C
  103fac:	 ce 41 74 40 17 3f b8 3d         .At@.?.=
  103fb4:	 57 3c f3 3a 8d 39 25 38         W<.:.9%8
  103fbc:	 ba 36 4e 35 df 33 6e 32         .6N5.3n2
  103fc4:	 fc 30 87 2f 11 2e 99 2c         .0./...,
  103fcc:	 1f 2b a4 29 27 28 a8 26         .+.)'(.&
  103fd4:	 28 25 a7 23 24 22 9f 20         (%.#$". 
  103fdc:	 1a 1f 93 1d 0c 1c 83 1a         ........
  103fe4:	 f9 18 6e 17 e2 15 55 14         ..n...U.
  103fec:	 c8 12 3a 11 ab 0f 1c 0e         ..:.....
  103ff4:	 8c 0c fb 0a 6b 09 d9 07         ....k...
  103ffc:	 48 06 b6 04 24 03 92 01         H...$...


STFT_Win_FixHalf_M128_D80:
  104004:	 00 00 30 04 5f 08 8c 0c         ..0._...
  10400c:	 b5 10 da 14 f9 18 11 1d         ........
  104014:	 21 21 28 25 25 29 17 2d         !!(%%).-
  10401c:	 fc 30 d4 34 9d 38 57 3c         .0.4.8W<
  104024:	 00 40 98 43 1d 47 8f 4a         .@.C.G.J
  10402c:	 ec 4d 34 51 65 54 80 57         .M4QeT.W
  104034:	 82 5a 6c 5d 3c 60 f2 62         .Zl]<`.b
  10403c:	 8d 65 0b 68 6e 6a b3 6c         .e.hnj.l
  104044:	 da 6e e3 70 cd 72 97 74         .n.p.r.t
  10404c:	 42 76 cc 77 35 79 7d 7a         Bv.w5y}z
  104054:	 a3 7b a8 7c 8a 7d 4a 7e         .{.|.}J~
  10405c:	 e8 7e 62 7f ba 7f ee 7f         .~b.....
  104064:	 ff 7f ff 7f ff 7f ff 7f         ........
  10406c:	 ff 7f ff 7f ff 7f ff 7f         ........
  104074:	 ff 7f ff 7f ff 7f ff 7f         ........
  10407c:	 ff 7f ff 7f ff 7f ff 7f         ........
  104084:	 ff 7f ff 7f ff 7f ff 7f         ........
  10408c:	 ff 7f ff 7f ff 7f ff 7f         ........
  104094:	 ff 7f ff 7f ff 7f ff 7f         ........
  10409c:	 ff 7f ff 7f ff 7f ff 7f         ........
  1040a4:	 ff 7f ee 7f ba 7f 62 7f         ......b.
  1040ac:	 e8 7e 4a 7e 8a 7d a8 7c         .~J~.}.|
  1040b4:	 a3 7b 7d 7a 35 79 cc 77         .{}z5y.w
  1040bc:	 42 76 97 74 cd 72 e3 70         Bv.t.r.p
  1040c4:	 da 6e b3 6c 6e 6a 0b 68         .n.lnj.h
  1040cc:	 8d 65 f2 62 3c 60 6c 5d         .e.b<`l]
  1040d4:	 82 5a 80 57 65 54 34 51         .Z.WeT4Q
  1040dc:	 ec 4d 8f 4a 1d 47 98 43         .M.J.G.C
  1040e4:	 00 40 57 3c 9d 38 d4 34         .@W<.8.4
  1040ec:	 fc 30 17 2d 25 29 28 25         .0.-%)(%
  1040f4:	 21 21 11 1d f9 18 da 14         !!......
  1040fc:	 b5 10 8c 0c 5f 08 30 04         ...._.0.


sf_sin_tab1:
  104104:	 00 00 00 00 10 c9 00 00         ........
  10410c:	 1f 92 01 00 2d 5b 02 00         ....-[..
  104114:	 3a 24 03 00 45 ed 03 00         :$..E...
  10411c:	 4e b6 04 00 53 7f 05 00         N...S...
  104124:	 55 48 06 00 54 11 07 00         UH..T...
  10412c:	 4e da 07 00 43 a3 08 00         N...C...
  104134:	 33 6c 09 00 1d 35 0a 00         3l...5..
  10413c:	 00 fe 0a 00 dd c6 0b 00         ........
  104144:	 b3 8f 0c 00 81 58 0d 00         .....X..
  10414c:	 47 21 0e 00 03 ea 0e 00         G!......
  104154:	 b7 b2 0f 00 61 7b 10 00         ....a{..
  10415c:	 01 44 11 00 96 0c 12 00         .D......
  104164:	 21 d5 12 00 9f 9d 13 00         !.......
  10416c:	 11 66 14 00 77 2e 15 00         .f..w...
  104174:	 d0 f6 15 00 1b bf 16 00         ........
  10417c:	 58 87 17 00 87 4f 18 00         X....O..
  104184:	 a7 17 19 00 b7 df 19 00         ........
  10418c:	 b7 a7 1a 00 a7 6f 1b 00         .....o..
  104194:	 86 37 1c 00 53 ff 1c 00         .7..S...
  10419c:	 0f c7 1d 00 b8 8e 1e 00         ........
  1041a4:	 4e 56 1f 00 d1 1d 20 00         NV.... .
  1041ac:	 41 e5 20 00 9b ac 21 00         A. ...!.
  1041b4:	 e2 73 22 00 13 3b 23 00         .s"..;#.
  1041bc:	 2e 02 24 00 33 c9 24 00         ..$.3.$.
  1041c4:	 21 90 25 00 f8 56 26 00         !.%..V&.
  1041cc:	 b7 1d 27 00 5f e4 27 00         ..'._.'.
  1041d4:	 ed aa 28 00 63 71 29 00         ..(.cq).
  1041dc:	 bf 37 2a 00 01 fe 2a 00         .7*...*.
  1041e4:	 29 c4 2b 00 35 8a 2c 00         ).+.5.,.
  1041ec:	 26 50 2d 00 fb 15 2e 00         &P-.....
  1041f4:	 b4 db 2e 00 4f a1 2f 00         ....O./.
  1041fc:	 ce 66 30 00 2e 2c 31 00         .f0..,1.
  104204:	 70 f1 31 00 94 b6 32 00         p.1...2.
  10420c:	 98 7b 33 00 7c 40 34 00         .{3.|@4.
  104214:	 40 05 35 00 e4 c9 35 00         @.5...5.
  10421c:	 66 8e 36 00 c6 52 37 00         f.6..R7.
  104224:	 05 17 38 00 21 db 38 00         ..8.!.8.
  10422c:	 19 9f 39 00 ef 62 3a 00         ..9..b:.
  104234:	 a0 26 3b 00 2c ea 3b 00         .&;.,.;.
  10423c:	 94 ad 3c 00 d7 70 3d 00         ..<..p=.
  104244:	 f3 33 3e 00 e9 f6 3e 00         .3>...>.
  10424c:	 b8 b9 3f 00 60 7c 40 00         ..?.`|@.
  104254:	 e0 3e 41 00 38 01 42 00         .>A.8.B.
  10425c:	 67 c3 42 00 6d 85 43 00         g.B.m.C.
  104264:	 4a 47 44 00 fc 08 45 00         JGD...E.
  10426c:	 83 ca 45 00 e0 8b 46 00         ..E...F.
  104274:	 11 4d 47 00 16 0e 48 00         .MG...H.
  10427c:	 ef ce 48 00 9a 8f 49 00         ..H...I.
  104284:	 19 50 4a 00 69 10 4b 00         .PJ.i.K.
  10428c:	 8b d0 4b 00 7f 90 4c 00         ..K...L.
  104294:	 43 50 4d 00 d8 0f 4e 00         CPM...N.
  10429c:	 3c cf 4e 00 70 8e 4f 00         <.N.p.O.
  1042a4:	 72 4d 50 00 43 0c 51 00         rMP.C.Q.
  1042ac:	 e3 ca 51 00 4f 89 52 00         ..Q.O.R.
  1042b4:	 89 47 53 00 8f 05 54 00         .GS...T.
  1042bc:	 62 c3 54 00 00 81 55 00         b.T...U.
  1042c4:	 6a 3e 56 00 9e fb 56 00         j>V...V.
  1042cc:	 9d b8 57 00 65 75 58 00         ..W.euX.
  1042d4:	 f7 31 59 00 52 ee 59 00         .1Y.R.Y.
  1042dc:	 76 aa 5a 00 62 66 5b 00         v.Z.bf[.
  1042e4:	 15 22 5c 00 8f dd 5c 00         ."\...\.
  1042ec:	 d0 98 5d 00 d8 53 5e 00         ..]..S^.
  1042f4:	 a5 0e 5f 00 37 c9 5f 00         .._.7._.
  1042fc:	 8f 83 60 00 ab 3d 61 00         ..`..=a.
  104304:	 8b f7 61 00 2e b1 62 00         ..a...b.
  10430c:	 95 6a 63 00 be 23 64 00         .jc..#d.
  104314:	 aa dc 64 00 57 95 65 00         ..d.W.e.
  10431c:	 c6 4d 66 00 f5 05 67 00         .Mf...g.
  104324:	 e5 bd 67 00 95 75 68 00         ..g..uh.
  10432c:	 05 2d 69 00 33 e4 69 00         .-i.3.i.
  104334:	 21 9b 6a 00 cc 51 6b 00         !.j..Qk.
  10433c:	 36 08 6c 00 5c be 6c 00         6.l.\.l.
  104344:	 40 74 6d 00 e0 29 6e 00         @tm..)n.
  10434c:	 3d df 6e 00 54 94 6f 00         =.n.T.o.
  104354:	 27 49 70 00 b5 fd 70 00         'Ip...p.
  10435c:	 fd b1 71 00 ff 65 72 00         ..q..er.
  104364:	 ba 19 73 00 2f cd 73 00         ..s./.s.
  10436c:	 5c 80 74 00 41 33 75 00         \.t.A3u.
  104374:	 dd e5 75 00 31 98 76 00         ..u.1.v.
  10437c:	 3c 4a 77 00 fe fb 77 00         <Jw...w.
  104384:	 75 ad 78 00 a2 5e 79 00         u.x..^y.
  10438c:	 84 0f 7a 00 1a c0 7a 00         ..z...z.
  104394:	 65 70 7b 00 64 20 7c 00         ep{.d |.
  10439c:	 16 d0 7c 00 7c 7f 7d 00         ..|.|.}.
  1043a4:	 93 2e 7e 00 5d dd 7e 00         ..~.].~.
  1043ac:	 d9 8b 7f 00 06 3a 80 00         .....:..
  1043b4:	 e4 e7 80 00 73 95 81 00         ....s...
  1043bc:	 b1 42 82 00 9f ef 82 00         .B......
  1043c4:	 3d 9c 83 00 89 48 84 00         =....H..
  1043cc:	 84 f4 84 00 2c a0 85 00         ....,...
  1043d4:	 82 4b 86 00 86 f6 86 00         .K......
  1043dc:	 36 a1 87 00 92 4b 88 00         6....K..
  1043e4:	 9b f5 88 00 4e 9f 89 00         ....N...
  1043ec:	 ad 48 8a 00 b7 f1 8a 00         .H......
  1043f4:	 6b 9a 8b 00 c9 42 8c 00         k....B..
  1043fc:	 d0 ea 8c 00 81 92 8d 00         ........
  104404:	 da 39 8e 00 db e0 8e 00         .9......
  10440c:	 84 87 8f 00 d5 2d 90 00         .....-..
  104414:	 cd d3 90 00 6b 79 91 00         ....ky..
  10441c:	 b0 1e 92 00 9a c3 92 00         ........
  104424:	 2a 68 93 00 5f 0c 94 00         *h.._...
  10442c:	 39 b0 94 00 b7 53 95 00         9....S..
  104434:	 d9 f6 95 00 9f 99 96 00         ........
  10443c:	 07 3c 97 00 12 de 97 00         .<......
  104444:	 c0 7f 98 00 0f 21 99 00         .....!..
  10444c:	 00 c2 99 00 93 62 9a 00         .....b..
  104454:	 c6 02 9b 00 99 a2 9b 00         ........
  10445c:	 0c 42 9c 00 1f e1 9c 00         .B......
  104464:	 d1 7f 9d 00 22 1e 9e 00         ...."...
  10446c:	 12 bc 9e 00 9f 59 9f 00         .....Y..
  104474:	 cb f6 9f 00 93 93 a0 00         ........
  10447c:	 f9 2f a1 00 fb cb a1 00         ./......
  104484:	 99 67 a2 00 d3 02 a3 00         .g......
  10448c:	 a9 9d a3 00 1a 38 a4 00         .....8..
  104494:	 25 d2 a4 00 cb 6b a5 00         %....k..
  10449c:	 0a 05 a6 00 e3 9d a6 00         ........
  1044a4:	 56 36 a7 00 61 ce a7 00         V6..a...
  1044ac:	 05 66 a8 00 41 fd a8 00         .f..A...
  1044b4:	 15 94 a9 00 80 2a aa 00         .....*..
  1044bc:	 82 c0 aa 00 1b 56 ab 00         .....V..
  1044c4:	 4a eb ab 00 0f 80 ac 00         J.......
  1044cc:	 69 14 ad 00 59 a8 ad 00         i...Y...
  1044d4:	 de 3b ae 00 f7 ce ae 00         .;......
  1044dc:	 a5 61 af 00 e6 f3 af 00         .a......
  1044e4:	 bb 85 b0 00 22 17 b1 00         ...."...
  1044ec:	 1d a8 b1 00 aa 38 b2 00         .....8..
  1044f4:	 c9 c8 b2 00 7a 58 b3 00         ....zX..
  1044fc:	 bc e7 b3 00 8f 76 b4 00         .....v..
  104504:	 f3 04 b5 00 e7 92 b5 00         ........
  10450c:	 6c 20 b6 00 7f ad b6 00         l ......
  104514:	 23 3a b7 00 55 c6 b7 00         #:..U...
  10451c:	 16 52 b8 00 65 dd b8 00         .R..e...
  104524:	 42 68 b9 00 ac f2 b9 00         Bh......
  10452c:	 a4 7c ba 00 29 06 bb 00         .|..)...
  104534:	 3b 8f bb 00 d9 17 bc 00         ;.......
  10453c:	 03 a0 bc 00 b8 27 bd 00         .....'..
  104544:	 f9 ae bd 00 c5 35 be 00         .....5..
  10454c:	 1b bc be 00 fc 41 bf 00         .....A..
  104554:	 67 c7 bf 00 5c 4c c0 00         g...\L..
  10455c:	 da d0 c0 00 e1 54 c1 00         .....T..
  104564:	 70 d8 c1 00 89 5b c2 00         p....[..
  10456c:	 29 de c2 00 51 60 c3 00         )...Q`..
  104574:	 00 e2 c3 00 37 63 c4 00         ....7c..
  10457c:	 f5 e3 c4 00 39 64 c5 00         ....9d..
  104584:	 03 e4 c5 00 54 63 c6 00         ....Tc..
  10458c:	 2a e2 c6 00 85 60 c7 00         *....`..
  104594:	 65 de c7 00 ca 5b c8 00         e....[..
  10459c:	 b3 d8 c8 00 21 55 c9 00         ....!U..
  1045a4:	 12 d1 c9 00 87 4c ca 00         .....L..
  1045ac:	 7f c7 ca 00 fa 41 cb 00         .....A..
  1045b4:	 f8 bb cb 00 78 35 cc 00         ....x5..
  1045bc:	 79 ae cc 00 fd 26 cd 00         y....&..
  1045c4:	 02 9f cd 00 89 16 ce 00         ........
  1045cc:	 90 8d ce 00 17 04 cf 00         ........
  1045d4:	 1f 7a cf 00 a8 ef cf 00         .z......
  1045dc:	 af 64 d0 00 37 d9 d0 00         .d..7...
  1045e4:	 3d 4d d1 00 c2 c0 d1 00         =M......
  1045ec:	 c6 33 d2 00 49 a6 d2 00         .3..I...
  1045f4:	 49 18 d3 00 c7 89 d3 00         I.......
  1045fc:	 c3 fa d3 00 3b 6b d4 00         ....;k..
  104604:	 31 db d4 00 a4 4a d5 00         1....J..
  10460c:	 93 b9 d5 00 fe 27 d6 00         .....'..
  104614:	 e5 95 d6 00 48 03 d7 00         ....H...
  10461c:	 26 70 d7 00 7f dc d7 00         &p......
  104624:	 53 48 d8 00 a1 b3 d8 00         SH......
  10462c:	 6a 1e d9 00 ad 88 d9 00         j.......
  104634:	 6a f2 d9 00 a0 5b da 00         j....[..
  10463c:	 50 c4 da 00 79 2c db 00         P...y,..
  104644:	 1a 94 db 00 34 fb db 00         ....4...
  10464c:	 c7 61 dc 00 d1 c7 dc 00         .a......
  104654:	 53 2d dd 00 4d 92 dd 00         S-..M...
  10465c:	 be f6 dd 00 a6 5a de 00         .....Z..
  104664:	 05 be de 00 db 20 df 00         ..... ..
  10466c:	 27 83 df 00 e9 e4 df 00         '.......
  104674:	 21 46 e0 00 cf a6 e0 00         !F......
  10467c:	 f2 06 e1 00 8a 66 e1 00         .....f..
  104684:	 98 c5 e1 00 1a 24 e2 00         .....$..
  10468c:	 10 82 e2 00 7b df e2 00         ....{...
  104694:	 5a 3c e3 00 ac 98 e3 00         Z<......
  10469c:	 73 f4 e3 00 ac 4f e4 00         s....O..
  1046a4:	 59 aa e4 00 79 04 e5 00         Y...y...
  1046ac:	 0b 5e e5 00 10 b7 e5 00         .^......
  1046b4:	 88 0f e6 00 71 67 e6 00         ....qg..
  1046bc:	 cc be e6 00 99 15 e7 00         ........
  1046c4:	 d8 6b e7 00 87 c1 e7 00         .k......
  1046cc:	 a8 16 e8 00 39 6b e8 00         ....9k..
  1046d4:	 3c bf e8 00 ae 12 e9 00         <.......
  1046dc:	 91 65 e9 00 e4 b7 e9 00         .e......
  1046e4:	 a7 09 ea 00 d9 5a ea 00         .....Z..
  1046ec:	 7b ab ea 00 8c fb ea 00         {.......
  1046f4:	 0c 4b eb 00 fb 99 eb 00         .K......
  1046fc:	 58 e8 eb 00 24 36 ec 00         X...$6..
  104704:	 5e 83 ec 00 07 d0 ec 00         ^.......
  10470c:	 1d 1c ed 00 a1 67 ed 00         .....g..
  104714:	 93 b2 ed 00 f2 fc ed 00         ........
  10471c:	 be 46 ee 00 f8 8f ee 00         .F......
  104724:	 9e d8 ee 00 b0 20 ef 00         ..... ..
  10472c:	 30 68 ef 00 1b af ef 00         0h......
  104734:	 73 f5 ef 00 37 3b f0 00         s...7;..
  10473c:	 66 80 f0 00 01 c5 f0 00         f.......
  104744:	 08 09 f1 00 7a 4c f1 00         ....zL..
  10474c:	 57 8f f1 00 9f d1 f1 00         W.......
  104754:	 52 13 f2 00 70 54 f2 00         R...pT..
  10475c:	 f8 94 f2 00 eb d4 f2 00         ........
  104764:	 47 14 f3 00 0e 53 f3 00         G....S..
  10476c:	 3f 91 f3 00 d9 ce f3 00         ?.......
  104774:	 dd 0b f4 00 4b 48 f4 00         ....KH..
  10477c:	 22 84 f4 00 62 bf f4 00         "...b...
  104784:	 0b fa f4 00 1d 34 f5 00         .....4..
  10478c:	 97 6d f5 00 7b a6 f5 00         .m..{...
  104794:	 c6 de f5 00 7a 16 f6 00         ....z...
  10479c:	 97 4d f6 00 1b 84 f6 00         .M......
  1047a4:	 07 ba f6 00 5b ef f6 00         ....[...
  1047ac:	 17 24 f7 00 3a 58 f7 00         .$..:X..
  1047b4:	 c5 8b f7 00 b7 be f7 00         ........
  1047bc:	 10 f1 f7 00 d1 22 f8 00         ....."..
  1047c4:	 f8 53 f8 00 86 84 f8 00         .S......
  1047cc:	 7b b4 f8 00 d6 e3 f8 00         {.......
  1047d4:	 98 12 f9 00 c0 40 f9 00         .....@..
  1047dc:	 4e 6e f9 00 43 9b f9 00         Nn..C...
  1047e4:	 9d c7 f9 00 5e f3 f9 00         ....^...
  1047ec:	 84 1e fa 00 10 49 fa 00         .....I..
  1047f4:	 02 73 fa 00 59 9c fa 00         .s..Y...
  1047fc:	 16 c5 fa 00 37 ed fa 00         ....7...
  104804:	 be 14 fb 00 ab 3b fb 00         .....;..
  10480c:	 fc 61 fb 00 b2 87 fb 00         .a......
  104814:	 cd ac fb 00 4d d1 fb 00         ....M...
  10481c:	 31 f5 fb 00 7a 18 fc 00         1...z...
  104824:	 28 3b fc 00 3a 5d fc 00         (;..:]..
  10482c:	 b0 7e fc 00 8a 9f fc 00         .~......
  104834:	 c9 bf fc 00 6c df fc 00         ....l...
  10483c:	 73 fe fc 00 dd 1c fd 00         s.......
  104844:	 ac 3a fd 00 de 57 fd 00         .:...W..
  10484c:	 74 74 fd 00 6e 90 fd 00         tt..n...
  104854:	 cc ab fd 00 8c c6 fd 00         ........
  10485c:	 b1 e0 fd 00 38 fa fd 00         ....8...
  104864:	 24 13 fe 00 72 2b fe 00         $...r+..
  10486c:	 23 43 fe 00 38 5a fe 00         #C..8Z..
  104874:	 b0 70 fe 00 8b 86 fe 00         .p......
  10487c:	 c9 9b fe 00 69 b0 fe 00         ....i...
  104884:	 6d c4 fe 00 d4 d7 fe 00         m.......
  10488c:	 9d ea fe 00 c9 fc fe 00         ........
  104894:	 58 0e ff 00 49 1f ff 00         X...I...
  10489c:	 9d 2f ff 00 54 3f ff 00         ./..T?..
  1048a4:	 6d 4e ff 00 e9 5c ff 00         mN...\..
  1048ac:	 c7 6a ff 00 08 78 ff 00         .j...x..
  1048b4:	 ab 84 ff 00 b1 90 ff 00         ........
  1048bc:	 18 9c ff 00 e3 a6 ff 00         ........
  1048c4:	 0f b1 ff 00 9e ba ff 00         ........
  1048cc:	 8f c3 ff 00 e2 cb ff 00         ........
  1048d4:	 97 d3 ff 00 af da ff 00         ........
  1048dc:	 29 e1 ff 00 05 e7 ff 00         ).......
  1048e4:	 43 ec ff 00 e3 f0 ff 00         C.......
  1048ec:	 e6 f4 ff 00 4a f8 ff 00         ....J...
  1048f4:	 11 fb ff 00 39 fd ff 00         ....9...
  1048fc:	 c4 fe ff 00 b1 ff ff 00         ........
  104904:	 ff ff ff 00                     ....


memcmp:
  104908:    74 04             	[--sp] = {rets, r4}
  10490a:    82 f9 05 08       	if (r2 < 0x4) goto 0xa <memcmp+0x10 : 104918 >
  10490e:    90 e1 10 30       	r3 = r1 | r0
  104912:    60 ff 03 30 0b 00 	if ((r3 & 0x3) == 0) goto 0x16 <memcmp+0x26 : 10492e >
  104918:    02 51             	if (r2 == 0) goto 0x22 <memcmp+0x34 : 10493c >
  10491a:    13 07             	r3 = b[r1++=0x1] (u)
  10491c:    04 07             	r4 = b[r0++=0x1] (u)
  10491e:    fa 3f             	r2 += -0x1
  104920:    03 e8 fa 41       	if (r4 == r3) goto -0xc <memcmp+0x10 : 104918 >
  104924:    c8 1e             	r0 = r4 - r3
  104926:    54 04             	{pc, r4} = [sp++]
  104928:    fa 3c             	r2 += -0x4
  10492a:    c1 24             	r1 += 0x4
  10492c:    c0 24             	r0 += 0x4
  10492e:    82 f9 f3 09       	if (r2 < 0x4) goto -0x1a <memcmp+0x10 : 104918 >
  104932:    13 60             	r3 = [r1+0x0] 
  104934:    04 60             	r4 = [r0+0x0] 
  104936:    03 e8 f7 41       	if (r4 == r3) goto -0x12 <memcmp+0x20 : 104928 >
  10493a:    f7 8e             	goto -0x24 <memcmp+0x10 : 104918 >
  10493c:    40 20             	r0 = 0x0
  10493e:    54 04             	{pc, r4} = [sp++]


memmove:
  104940:    76 04             	[--sp] = {rets, r6-r4}
  104942:    00 ec 03 10       	if (r1 > r0) goto 0x6 <memmove+0xC : 10494c >
  104946:    93 1c             	r3 = r1 + r2
  104948:    00 ec 29 30       	if (r3 > r0) goto 0x52 <memmove+0x5E : 10499e >
  10494c:    03 16             	r3 = r0
  10494e:    82 f9 14 10       	if (r2 < 0x8) goto 0x28 <memmove+0x3A : 10497a >
  104952:    65 e1 03 10       	r5 = r1 & 0x3
  104956:    64 e1 03 30       	r4 = r3 & 0x3
  10495a:    04 46             	if (r4 == 0) goto 0xc <memmove+0x28 : 104968 >
  10495c:    a6 e0 04 40       	r6 = 0x4 - r4
  104960:    a2 1f             	r2 = r2 - r6
  104962:    16 03             	rep 0x4 r6 {
  104964:    16 07             		r6 = b[r1++=0x1] (u)
  104966:    b6 07             		b[r3++=0x1] = r6
                               	}
  104968:    5c 19             	r4 ^= r5
  10496a:    a5 a2             	r5 = r2 >> 0x2
  10496c:    84 4a             	if (r4 != 0) goto 0x14 <memmove+0x42 : 104982 >
  10496e:    15 03             	rep 0x4 r5 {
  104970:    16 05             		r6 = [r1++=0x4] 
  104972:    b6 05             		[r3++=0x4] = r6
                               	}
  104974:    f5 5c             	if (r5 != 0) goto -0x8 <memmove+0x2E : 10496e >
  104976:    62 e1 03 20       	r2 = r2 & 0x3
  10497a:    12 03             	rep 0x4 r2 {
  10497c:    12 07             		r2 = b[r1++=0x1] (u)
  10497e:    b2 07             		b[r3++=0x1] = r2
                               	}
  104980:    56 04             	{pc, r6-r4} = [sp++]
  104982:    a5 03             	rep 0x16 r5 {
  104984:    16 07             		r6 = b[r1++=0x1] (u)
  104986:    14 07             		r4 = b[r1++=0x1] (u)
  104988:    a6 f1 20 44       		r6 <= insert(r4, p:0x8, l:0x8)  #
  10498c:    14 07             			 r4 = b[r1++=0x1] (u)
  10498e:    a6 f1 20 48       		r6 <= insert(r4, p:0x10, l:0x8)  #
  104992:    14 07             			 r4 = b[r1++=0x1] (u)
  104994:    a6 e1 20 4c       		r6 <= insert(r4, p:0x18, l:0x8)
  104998:    b6 05             		[r3++=0x4] = r6
                               	}
  10499a:    f5 53             	if (r5 != 0) goto -0x1a <memmove+0x42 : 104982 >
  10499c:    f7 8c             	goto -0x28 <memmove+0x36 : 104976 >
  10499e:    83 1c             	r3 = r0 + r2
  1049a0:    91 1c             	r1 = r1 + r2
  1049a2:    82 f9 17 10       	if (r2 < 0x8) goto 0x2e <memmove+0x94 : 1049d4 >
  1049a6:    65 e1 03 10       	r5 = r1 & 0x3
  1049aa:    64 e1 03 30       	r4 = r3 & 0x3
  1049ae:    04 47             	if (r4 == 0) goto 0xe <memmove+0x7E : 1049be >
  1049b0:    22 1f             	r2 = r2 - r4
  1049b2:    46 16             	r6 = r4
  1049b4:    36 03             	rep 0x8 r6 {
  1049b6:    59 ee 1f 6f       		r6 = b[++r1=-0x1] (u)
  1049ba:    5b ee 3f 6f       		b[++r3=-0x1] = r6
                               	}
  1049be:    5c 19             	r4 ^= r5
  1049c0:    a5 a2             	r5 = r2 >> 0x2
  1049c2:    84 4e             	if (r4 != 0) goto 0x1c <memmove+0xA0 : 1049e0 >
  1049c4:    35 03             	rep 0x8 r5 {
  1049c6:    d7 ec 1e 6f       		r6 = [++r1=-0x4]
  1049ca:    d7 ec 3f 6f       		[++r3=-0x4] = r6
                               	}
  1049ce:    f5 5a             	if (r5 != 0) goto -0xc <memmove+0x84 : 1049c4 >
  1049d0:    62 e1 03 20       	r2 = r2 & 0x3
  1049d4:    32 03             	rep 0x8 r2 {
  1049d6:    59 ee 1f 6f       		r6 = b[++r1=-0x1] (u)
  1049da:    5b ee 3f 6f       		b[++r3=-0x1] = r6
                               	}
  1049de:    56 04             	{pc, r6-r4} = [sp++]
  1049e0:    f9 3f             	r1 += -0x1
  1049e2:    b5 03             	rep 0x18 r5 {
  1049e4:    1e 07             		r6 = b[r1++=-0x1] (u)
  1049e6:    66 b8             		r6 = r6 << 0x18
  1049e8:    1c 07             		r4 = b[r1++=-0x1] (u)
  1049ea:    a6 f1 20 48       		r6 <= insert(r4, p:0x10, l:0x8)  #
  1049ee:    1c 07             			 r4 = b[r1++=-0x1] (u)
  1049f0:    a6 f1 20 44       		r6 <= insert(r4, p:0x8, l:0x8)  #
  1049f4:    1c 07             			 r4 = b[r1++=-0x1] (u)
  1049f6:    46 19             		r6 |= r4
  1049f8:    d7 ec 3f 6f       		[++r3=-0x4] = r6
                               	}
  1049fc:    f5 52             	if (r5 != 0) goto -0x1c <memmove+0xA2 : 1049e2 >
  1049fe:    19 81             	r1 = r1 + 0x1
  104a00:    f7 87             	goto -0x32 <memmove+0x90 : 1049d0 >


memmem:
  104a02:    77 04             	[--sp] = {rets, r7-r4}
  104a04:    35 16             	r5 = r3
  104a06:    26 16             	r6 = r2
  104a08:    17 16             	r7 = r1
  104a0a:    04 16             	r4 = r0
  104a0c:    85 49             	if (r5 != 0) goto 0x12 <memmem+0x1E : 104a20 >
  104a0e:    04 8b             	goto 0x16 <memmem+0x24 : 104a26 >
  104a10:    40 16             	r0 = r4
  104a12:    61 16             	r1 = r6
  104a14:    52 16             	r2 = r5
  104a16:    bf ea 77 ff       	call -0x112 <memcmp : 104908 >
  104a1a:    00 45             	if (r0 == 0) goto 0xa <memmem+0x24 : 104a26 >
  104a1c:    ff 3f             	r7 += -0x1
  104a1e:    c4 21             	r4 += 0x1
  104a20:    05 e9 f6 71       	if (r7 >= r5) goto -0x14 <memmem+0xE : 104a10 >
  104a24:    44 20             	r4 = 0x0
  104a26:    40 16             	r0 = r4
  104a28:    57 04             	{pc, r7-r4} = [sp++]


memset:
  104a2a:    74 04             	[--sp] = {rets, r4}
  104a2c:    03 16             	r3 = r0
  104a2e:    02 52             	if (r2 == 0) goto 0x24 <memset+0x2A : 104a54 >
  104a30:    33 ea 03 40       	if ((r3 & 0x3) != 0) {
  104a34:    f2 f0 01 20       		r2 = r2 - 0x1  #
  104a38:    b1 07             		  b[r3++=0x1] = r1
  104a3a:    f7 99             		goto -0xe
                               	} <memset+0x4 : 104a2e >
  104a3c:    a4 a2             	r4 = r2 >> 0x2
  104a3e:    a1 e1 20 14       	r1 <= insert(r1, p:0x8, l:0x8)
  104a42:    a1 e1 40 18       	r1 <= insert(r1, p:0x10, l:0x10)
  104a46:    04 03             	rep 0x2 r4 {
  104a48:    b1 05             		[r3++=0x4] = r1
                               	}
  104a4a:    f4 5d             	if (r4 != 0) goto -0x6 <memset+0x1C : 104a46 >
  104a4c:    62 e1 03 20       	r2 = r2 & 0x3
  104a50:    02 03             	rep 0x2 r2 {
  104a52:    b1 07             		b[r3++=0x1] = r1
                               	}
  104a54:    54 04             	{pc, r4} = [sp++]


strchr:
  104a56:    11 17             	r1 = r1.b0 (u)
  104a58:    02 07             	r2 = b[r0++=0x1] (u)
  104a5a:    01 e8 01 20       	if (r2 == r1) goto 0x2 <strchr+0xA : 104a60 >
  104a5e:    f2 5c             	if (r2 != 0) goto -0x8 <strchr+0x2 : 104a58 >
  104a60:    f8 3f             	r0 += -0x1
  104a62:    92 e8 00 01       	if (r2 != r1) {
  104a66:    40 20             		r0 = 0x0
                               	}
  104a68:    80 00             	rts


strcmp:
  104a6a:    77 04             	[--sp] = {rets, r7-r4}
  104a6c:    64 e1 03 00       	r4 = r0 & 0x3
  104a70:    04 4b             	if (r4 == 0) goto 0x16 <strcmp+0x1E : 104a88 >
  104a72:    a4 e0 04 40       	r4 = 0x4 - r4
  104a76:    0a 40             	r2 = b[r0+0x0] (u)
  104a78:    22 41             	if (r2 == 0) goto 0x82 <strcmp+0x92 : 104afc >
  104a7a:    1b 40             	r3 = b[r1+0x0] (u)
  104a7c:    83 e8 3f 20       	if (r2 != r3) goto 0x7e <strcmp+0x94 : 104afe >
  104a80:    08 81             	r0 = r0 + 0x1
  104a82:    19 81             	r1 = r1 + 0x1
  104a84:    04 ea f7 ff       	if (--r4 != 0) goto -0x12 <strcmp+0xC : 104a76 >
  104a88:    90 e1 10 20       	r2 = r1 | r0
  104a8c:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <__stub_VecMinScalar_float_c_f_c+0xFEEDFF02 : fefefefe >
  104a92:    61 ff 03 20 13 00 	if ((r2 & 0x3) != 0) goto 0x26 <strcmp+0x54 : 104abe >
  104a98:    02 60             	r2 = [r0+0x0] 
  104a9a:    13 60             	r3 = [r1+0x0] 
  104a9c:    83 e8 26 20       	if (r2 != r3) goto 0x4c <strcmp+0x82 : 104aec >
  104aa0:    14 16             	r4 = r1
  104aa2:    a1 1d             	r1 = r2 + r6
  104aa4:    90 e1 13 12       	r1 = r1 & ~r2
  104aa8:    61 ff 80 13 2c 00 	if ((r1 & 0x80808080) != 0) goto 0x58 <strcmp+0x9C : 104b06 >
  104aae:    02 61             	r2 = [r0+0x4] 
  104ab0:    45 61             	r5 = [r4+0x4] 
  104ab2:    49 84             	r1 = r4 + 0x4
  104ab4:    08 84             	r0 = r0 + 0x4
  104ab6:    14 16             	r4 = r1
  104ab8:    05 e8 f3 21       	if (r2 == r5) goto -0x1a <strcmp+0x38 : 104aa2 >
  104abc:    04 97             	goto 0x2e <strcmp+0x82 : 104aec >
  104abe:    14 16             	r4 = r1
  104ac0:    02 60             	r2 = [r0+0x0] 
  104ac2:    43 07             	r3 = b[r4++=0x1] (u)
  104ac4:    45 07             	r5 = b[r4++=0x1] (u)
  104ac6:    a3 e1 20 54       	r3 <= insert(r5, p:0x8, l:0x8)
  104aca:    45 07             	r5 = b[r4++=0x1] (u)
  104acc:    a3 e1 20 58       	r3 <= insert(r5, p:0x10, l:0x8)
  104ad0:    45 07             	r5 = b[r4++=0x1] (u)
  104ad2:    a3 e1 20 5c       	r3 <= insert(r5, p:0x18, l:0x8)
  104ad6:    83 e8 09 20       	if (r2 != r3) goto 0x12 <strcmp+0x82 : 104aec >
  104ada:    a5 1d             	r5 = r2 + r6
  104adc:    90 e1 53 52       	r5 = r5 & ~r2
  104ae0:    61 ff 80 53 10 00 	if ((r5 & 0x80808080) != 0) goto 0x20 <strcmp+0x9C : 104b06 >
  104ae6:    08 84             	r0 = r0 + 0x4
  104ae8:    19 84             	r1 = r1 + 0x4
  104aea:    f7 89             	goto -0x2e <strcmp+0x54 : 104abe >
  104aec:    0a 40             	r2 = b[r0+0x0] (u)
  104aee:    02 46             	if (r2 == 0) goto 0xc <strcmp+0x92 : 104afc >
  104af0:    1c 40             	r4 = b[r1+0x0] (u)
  104af2:    84 e8 04 20       	if (r2 != r4) goto 0x8 <strcmp+0x94 : 104afe >
  104af6:    08 81             	r0 = r0 + 0x1
  104af8:    19 81             	r1 = r1 + 0x1
  104afa:    f7 98             	goto -0x10 <strcmp+0x82 : 104aec >
  104afc:    42 20             	r2 = 0x0
  104afe:    13 16             	r3 = r1
  104b00:    38 40             	r0 = b[r3+0x0] (u)
  104b02:    20 1e             	r0 = r2 - r0
  104b04:    57 04             	{pc, r7-r4} = [sp++]
  104b06:    40 20             	r0 = 0x0
  104b08:    57 04             	{pc, r7-r4} = [sp++]


strcpy:
  104b0a:    77 04             	[--sp] = {rets, r7-r4}
  104b0c:    07 16             	r7 = r0
  104b0e:    64 e1 03 00       	r4 = r0 & 0x3
  104b12:    04 47             	if (r4 == 0) goto 0xe <strcpy+0x18 : 104b22 >
  104b14:    a4 e0 04 40       	r4 = 0x4 - r4
  104b18:    12 07             	r2 = b[r1++=0x1] (u)
  104b1a:    82 07             	b[r0++=0x1] = r2
  104b1c:    12 4b             	if (r2 == 0) goto 0x56 <strcpy+0x6A : 104b74 >
  104b1e:    04 ea fb ff       	if (--r4 != 0) goto -0xa <strcpy+0xE : 104b18 >
  104b22:    90 e1 10 20       	r2 = r1 | r0
  104b26:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <__stub_VecMinScalar_float_c_f_c+0xFEEDFF02 : fefefefe >
  104b2c:    61 ff 03 20 0a 00 	if ((r2 & 0x3) != 0) goto 0x14 <strcpy+0x3C : 104b46 >
  104b32:    12 60             	r2 = [r1+0x0] 
  104b34:    a3 1d             	r3 = r2 + r6
  104b36:    90 e1 33 32       	r3 = r3 & ~r2
  104b3a:    61 ff 80 33 17 00 	if ((r3 & 0x80808080) != 0) goto 0x2e <strcpy+0x64 : 104b6e >
  104b40:    19 84             	r1 = r1 + 0x4
  104b42:    82 05             	[r0++=0x4] = r2
  104b44:    f7 96             	goto -0x14 <strcpy+0x28 : 104b32 >
  104b46:    14 16             	r4 = r1
  104b48:    42 07             	r2 = b[r4++=0x1] (u)
  104b4a:    45 07             	r5 = b[r4++=0x1] (u)
  104b4c:    a2 e1 20 54       	r2 <= insert(r5, p:0x8, l:0x8)
  104b50:    45 07             	r5 = b[r4++=0x1] (u)
  104b52:    a2 e1 20 58       	r2 <= insert(r5, p:0x10, l:0x8)
  104b56:    45 07             	r5 = b[r4++=0x1] (u)
  104b58:    a2 e1 20 5c       	r2 <= insert(r5, p:0x18, l:0x8)
  104b5c:    a5 1d             	r5 = r2 + r6
  104b5e:    90 e1 53 52       	r5 = r5 & ~r2
  104b62:    61 ff 80 53 03 00 	if ((r5 & 0x80808080) != 0) goto 0x6 <strcpy+0x64 : 104b6e >
  104b68:    82 05             	[r0++=0x4] = r2
  104b6a:    41 16             	r1 = r4
  104b6c:    f7 8c             	goto -0x28 <strcpy+0x3C : 104b46 >
  104b6e:    12 07             	r2 = b[r1++=0x1] (u)
  104b70:    82 07             	b[r0++=0x1] = r2
  104b72:    f2 5d             	if (r2 != 0) goto -0x6 <strcpy+0x64 : 104b6e >
  104b74:    70 16             	r0 = r7
  104b76:    57 04             	{pc, r7-r4} = [sp++]


strlen:
  104b78:    01 16             	r1 = r0
  104b7a:    12 07             	r2 = b[r1++=0x1] (u)
  104b7c:    f2 5e             	if (r2 != 0) goto -0x4 <strlen+0x2 : 104b7a >
  104b7e:    f9 3f             	r1 += -0x1
  104b80:    10 1e             	r0 = r1 - r0
  104b82:    80 00             	rts


strncmp:
  104b84:    74 04             	[--sp] = {rets, r4}
  104b86:    02 4c             	if (r2 == 0) goto 0x18 <strncmp+0x1C : 104ba0 >
  104b88:    a2 e0 01 20       	r2 = 0x1 - r2
  104b8c:    04 84             	goto 0x8 <strncmp+0x12 : 104b96 >
  104b8e:    02 46             	if (r2 == 0) goto 0xc <strncmp+0x18 : 104b9c >
  104b90:    83 e8 04 40       	if (r4 != r3) goto 0x8 <strncmp+0x18 : 104b9c >
  104b94:    c2 21             	r2 += 0x1
  104b96:    13 07             	r3 = b[r1++=0x1] (u)
  104b98:    04 07             	r4 = b[r0++=0x1] (u)
  104b9a:    f4 59             	if (r4 != 0) goto -0xe <strncmp+0xA : 104b8e >
  104b9c:    c8 1e             	r0 = r4 - r3
  104b9e:    54 04             	{pc, r4} = [sp++]
  104ba0:    40 20             	r0 = 0x0
  104ba2:    54 04             	{pc, r4} = [sp++]


strstr:
  104ba4:    74 04             	[--sp] = {rets, r4}
  104ba6:    0a 40             	r2 = b[r0+0x0] (u)
  104ba8:    82 4f             	if (r2 != 0) goto 0x1e <strstr+0x24 : 104bc8 >
  104baa:    19 40             	r1 = b[r1+0x0] (u)
  104bac:    01 4f             	if (r1 == 0) goto 0x1e <strstr+0x28 : 104bcc >
  104bae:    40 20             	r0 = 0x0
  104bb0:    54 04             	{pc, r4} = [sp++]
  104bb2:    42 20             	r2 = 0x0
  104bb4:    d8 ee 10 32       	r3 = b[r1+r2] (u)
  104bb8:    03 49             	if (r3 == 0) goto 0x12 <strstr+0x28 : 104bcc >
  104bba:    d8 ee 00 42       	r4 = b[r0+r2] (u)
  104bbe:    c2 21             	r2 += 0x1
  104bc0:    04 e8 f8 31       	if (r3 == r4) goto -0x10 <strstr+0x10 : 104bb4 >
  104bc4:    58 ee 01 20       	r2 = b[++r0=0x1] (u)
  104bc8:    f2 54             	if (r2 != 0) goto -0x18 <strstr+0xE : 104bb2 >
  104bca:    f7 91             	goto -0x1e <strstr+0xA : 104bae >
  104bcc:    54 04             	{pc, r4} = [sp++]


nvram_ota_tag:
  104bce:	 4f 54 41 85 66 3a 7b 63         OTA.f:{c


nvram_uart_tag:
  104bd6:	 75 61 72 74 d9 c4 05 a8         uart....


nvram_usb_tag:
  104bde:	 75 73 62 ed 63 81 67 ef         usb.c.g.


chip_reset:
  104be6:    c0 ff a0 18 1a 00 	r0 = 0x1a18a0 <__stub_VecMinScalar_float_c_f_c+0x918A4 : 1a18a0 >			  ## main.c:67:0
  104bec:    09 40             	r1 = b[r0+0x0] (u)			  ## main.c:68:15
  104bee:    31 24             	r1 |= 0x10			  ## main.c:68:15
  104bf0:    89 40             	b[r0+0x0] = r1			  ## main.c:68:15
  104bf2:    f7 9f             	goto -0x2 <chip_reset+0xC : 104bf2 >			  ## main.c:69:5


nvram_boot_state:
  104bf4:    74 04             	[--sp] = {rets, r4}			  ## boot_nvram.c:52:0
  104bf6:    c4 ff 00 88 02 00 	r4 = 0x28800 <nvram_list : 28800 >			  ## boot_nvram.c:52:0
  104bfc:    c1 ff de 4b 10 00 	r1 = 0x104bde <nvram_usb_tag : 104bde >			  ## boot_nvram.c:53:9
  104c02:    42 28             	r2 = 0x8			  ## boot_nvram.c:53:9
  104c04:    40 16             	r0 = r4			  ## boot_nvram.c:53:9
  104c06:    bf ea 7f fe       	call -0x302 <memcmp : 104908 >			  ## boot_nvram.c:53:9
  104c0a:    00 54             	if (r0 == 0) goto 0x28 <nvram_boot_state+0x40 : 104c34 >			  ## boot_nvram.c:53:9
  104c0c:    c1 ff d6 4b 10 00 	r1 = 0x104bd6 <nvram_uart_tag : 104bd6 >			  ## boot_nvram.c:56:16
  104c12:    42 28             	r2 = 0x8			  ## boot_nvram.c:56:16
  104c14:    40 16             	r0 = r4			  ## boot_nvram.c:56:16
  104c16:    bf ea 77 fe       	call -0x312 <memcmp : 104908 >			  ## boot_nvram.c:56:16
  104c1a:    00 4e             	if (r0 == 0) goto 0x1c <nvram_boot_state+0x44 : 104c38 >			  ## boot_nvram.c:56:16
  104c1c:    c1 ff ce 4b 10 00 	r1 = 0x104bce <nvram_ota_tag : 104bce >			  ## boot_nvram.c:59:16
  104c22:    42 28             	r2 = 0x8			  ## boot_nvram.c:59:16
  104c24:    40 16             	r0 = r4			  ## boot_nvram.c:59:16
  104c26:    bf ea 6f fe       	call -0x322 <memcmp : 104908 >			  ## boot_nvram.c:59:16
  104c2a:    01 16             	r1 = r0			  ## boot_nvram.c:59:16
  104c2c:    40 20             	r0 = 0x0			  ## boot_nvram.c:59:16
  104c2e:    81 49             	if (r1 != 0) goto 0x12 <nvram_boot_state+0x4E : 104c42 >			  ## boot_nvram.c:59:16
  104c30:    40 26             	r0 = 0x6
  104c32:    04 83             	goto 0x6 <nvram_boot_state+0x46 : 104c3a >
  104c34:    40 22             	r0 = 0x2
  104c36:    04 81             	goto 0x2 <nvram_boot_state+0x46 : 104c3a >
  104c38:    40 23             	r0 = 0x3
  104c3a:    42 20             	r2 = 0x0			  ## boot_nvram.c:49:5
  104c3c:    43 20             	r3 = 0x0			  ## boot_nvram.c:49:5
  104c3e:    50 ec 41 20       	d[r4+0x0] = r3_r2			  ## boot_nvram.c:49:5
  104c42:    54 04             	{pc, r4} = [sp++]			  ## boot_nvram.c:64:1


nvram_set_boot_state:
  104c44:    00 f8 0b 04       	if (r0 == 0x2) goto 0x16 <nvram_set_boot_state+0x1A : 104c5e >			  ## boot_nvram.c:66:0
  104c48:    00 f8 10 0c       	if (r0 == 0x6) goto 0x20 <nvram_set_boot_state+0x28 : 104c6c >			  ## boot_nvram.c:66:0
  104c4c:    80 f8 19 06       	if (r0 != 0x3) goto 0x32 <nvram_set_boot_state+0x3E : 104c82 >			  ## boot_nvram.c:66:0
  104c50:    c0 ff 75 61 72 74 	r0 = 0x74726175 <__stub_VecMinScalar_float_c_f_c+0x74616178 : 74726174 >			  ## boot_nvram.c:66:0
  104c56:    c1 ff d9 c4 05 a8 	r1 = 0xa805c4d9 <__stub_VecMinScalar_float_c_f_c+0xA7F4C4DC : a805c4d8 >			  ## boot_nvram.c:66:0
  104c5c:    04 8d             	goto 0x1a <nvram_set_boot_state+0x34 : 104c78 >			  ## boot_nvram.c:66:0
  104c5e:    c0 ff 75 73 62 ed 	r0 = 0xed627375 <__stub_VecMinScalar_float_c_f_c+0xED517378 : ed627374 >			  ## boot_nvram.c:66:0
  104c64:    c1 ff 63 81 67 ef 	r1 = 0xef678163 <__stub_VecMinScalar_float_c_f_c+0xEF568166 : ef678162 >			  ## boot_nvram.c:66:0
  104c6a:    04 86             	goto 0xc <nvram_set_boot_state+0x34 : 104c78 >			  ## boot_nvram.c:66:0
  104c6c:    c0 ff 4f 54 41 85 	r0 = 0x8541544f <__stub_VecMinScalar_float_c_f_c+0x85305452 : 8541544e >			  ## boot_nvram.c:66:0
  104c72:    c1 ff 66 3a 7b 63 	r1 = 0x637b3a66 <__stub_VecMinScalar_float_c_f_c+0x636A3A6A : 637b3a66 >			  ## boot_nvram.c:66:0
  104c78:    c2 ff 00 88 02 00 	r2 = 0x28800 <nvram_list : 28800 >			  ## boot_nvram.c:66:0
  104c7e:    50 ec 21 00       	d[r2+0x0] = r1_r0			  ## boot_nvram.c:66:0
  104c82:    80 00             	rts			  ## boot_nvram.c:80:1


os_code_begin:
  104c84:    c0 ff 8c bc 02 00 	r0 = 0x2bc8c <the_debug_isr_stack : 2bc8c >			  ## mask_export.c:81:0
  104c8a:    40 ea 00 00       	[r0+0x0] = 0x0			  ## mask_export.c:82:5
  104c8e:    80 00             	rts			  ## mask_export.c:83:1


local_irq_disable:
  104c90:    60 00             	cli			  ## mask_export.c:74:0
  104c92:    c0 ff 8c bc 02 00 	r0 = 0x2bc8c <the_debug_isr_stack : 2bc8c >			  ## mask_export.c:76:35
  104c98:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## mask_export.c:76:35
  104c9c:    80 00             	rts			  ## mask_export.c:77:1


local_irq_enable:
  104c9e:    c0 ff 8c bc 02 00 	r0 = 0x2bc8c <the_debug_isr_stack : 2bc8c >			  ## mask_export.c:85:0
  104ca4:    01 60             	r1 = [r0+0x0] 			  ## mask_export.c:86:9
  104ca6:    f9 3f             	r1 += -0x1			  ## mask_export.c:86:9
  104ca8:    81 60             	[r0+0x0] = r1			  ## mask_export.c:86:9
  104caa:    81 41             	if (r1 != 0) goto 0x2 <local_irq_enable+0x10 : 104cae >			  ## mask_export.c:86:9
  104cac:    61 00             	sti			  ## mask_export.c:87:9
  104cae:    80 00             	rts			  ## mask_export.c:89:1


free:
  104cb0:    c1 ff cc bc 02 00 	r1 = 0x2bccc <mask_free : 2bccc >			  ## mask_export.c:22:0
  104cb6:    11 60             	r1 = [r1+0x0] 			  ## mask_export.c:23:5
  104cb8:    d1 00             	goto r1			  ## mask_export.c:23:5


malloc:
  104cba:    c1 ff d0 bc 02 00 	r1 = 0x2bcd0 <mask_malloc : 2bcd0 >			  ## mask_export.c:26:0
  104cc0:    11 60             	r1 = [r1+0x0] 			  ## mask_export.c:27:12
  104cc2:    d1 00             	goto r1			  ## mask_export.c:27:12


mask_init:
  104cc4:    77 04             	[--sp] = {rets, r7-r4}			  ## mask_export.c:57:0
  104cc6:    25 16             	r5 = r2			  ## mask_export.c:57:0
  104cc8:    16 16             	r6 = r1			  ## mask_export.c:57:0
  104cca:    07 16             	r7 = r0			  ## mask_export.c:57:0
  104ccc:    c0 ff 8c bc 02 00 	r0 = 0x2bc8c <the_debug_isr_stack : 2bc8c >			  ## mask_export.c:82:5
  104cd2:    41 20             	r1 = 0x0			  ## mask_export.c:82:5
  104cd4:    34 d6             	r4 = r3  #			  ## mask_export.c:82:5
  104cd6:    81 60             		 [r0+0x0] = r1			  ## mask_export.c:82:5
  104cd8:    c0 ff 8c bc 02 00 	r0 = 0x2bc8c <the_debug_isr_stack : 2bc8c >			  ## mask_export.c:59:5
  104cde:    c2 ff 5c 02 00 00 	r2 = 0x25c <os_bss_size : 25c >			  ## mask_export.c:59:5
  104ce4:    bf ea a1 fe       	call -0x2be <memset : 104a2a >			  ## mask_export.c:59:5
  104ce8:    c0 ff cc bc 02 00 	r0 = 0x2bccc <mask_free : 2bccc >			  ## mask_export.c:60:15
  104cee:    87 60             	[r0+0x0] = r7			  ## mask_export.c:60:15
  104cf0:    c0 ff d0 bc 02 00 	r0 = 0x2bcd0 <mask_malloc : 2bcd0 >			  ## mask_export.c:61:17
  104cf6:    86 60             	[r0+0x0] = r6			  ## mask_export.c:61:17
  104cf8:    c0 ff d8 bc 02 00 	r0 = 0x2bcd8 <mask_stack_free : 2bcd8 >			  ## mask_export.c:62:21
  104cfe:    85 60             	[r0+0x0] = r5			  ## mask_export.c:62:21
  104d00:    c0 ff d4 bc 02 00 	r0 = 0x2bcd4 <mask_stack_malloc : 2bcd4 >			  ## mask_export.c:63:23
  104d06:    01 26             	r1 = [sp+24]			  ## mask_export.c:63:23
  104d08:    84 60             	[r0+0x0] = r4			  ## mask_export.c:63:23
  104d0a:    c0 ff dc bc 02 00 	r0 = 0x2bcdc <vPortStartFirstTask : 2bcdc >			  ## mask_export.c:64:25
  104d10:    02 25             	r2 = [sp+20]			  ## mask_export.c:64:25
  104d12:    81 60             	[r0+0x0] = r1			  ## mask_export.c:64:25
  104d14:    c0 ff e0 bc 02 00 	r0 = 0x2bce0 <mask_portSUPPRESS_TICKS_AND_SLEEP : 2bce0 >			  ## mask_export.c:65:39
  104d1a:    01 29             	r1 = [sp+36]			  ## mask_export.c:65:39
  104d1c:    82 60             	[r0+0x0] = r2			  ## mask_export.c:65:39
  104d1e:    c0 ff e4 bc 02 00 	r0 = 0x2bce4 <mask_putchar : 2bce4 >			  ## mask_export.c:67:18
  104d24:    02 2a             	r2 = [sp+40]			  ## mask_export.c:67:18
  104d26:    81 60             	[r0+0x0] = r1			  ## mask_export.c:67:18
  104d28:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## mask_export.c:68:16
  104d2e:    01 27             	r1 = [sp+28]			  ## mask_export.c:68:16
  104d30:    82 60             	[r0+0x0] = r2			  ## mask_export.c:68:16
  104d32:    00 28             	r0 = [sp+32]			  ## mask_export.c:68:16
  104d34:    c2 ff ec bc 02 00 	r2 = 0x2bcec <exception_irq_hook : 2bcec >			  ## mask_export.c:69:24
  104d3a:    a1 60             	[r2+0x0] = r1			  ## mask_export.c:69:24
  104d3c:    c1 ff f0 bc 02 00 	r1 = 0x2bcf0 <idle_hook : 2bcf0 >			  ## mask_export.c:70:15
  104d42:    90 60             	[r1+0x0] = r0			  ## mask_export.c:70:15
  104d44:    57 04             	{pc, r7-r4} = [sp++]			  ## mask_export.c:71:1


uxListRemove:
  104d46:    10 04             	[--sp] = rets			  ## list.c:218:0
  104d48:    01 16             	r1 = r0			  ## list.c:218:0
  104d4a:    51 82             	call -0xbc <local_irq_disable : 104c90 >			  ## list.c:221:5
  104d4c:    20 00             	csync			  ## list.c:221:5
  104d4e:    13 61             	r3 = [r1+0x4] 			  ## list.c:224:21
  104d50:    10 62             	r0 = [r1+0x8] 			  ## list.c:224:58
  104d52:    12 64             	r2 = [r1+0x10] 			  ## list.c:222:55
  104d54:    b0 62             	[r3+0x8] = r0			  ## list.c:224:40
  104d56:    10 62             	r0 = [r1+0x8] 			  ## list.c:225:21
  104d58:    83 61             	[r0+0x4] = r3			  ## list.c:225:40
  104d5a:    23 61             	r3 = [r2+0x4] 			  ## list.c:231:17
  104d5c:    13 e8 00 01       	if (r3 == r1) {			  ## list.c:231:17
  104d60:    a0 61             		[r2+0x4] = r0
                               	}			  ## list.c:232:25
  104d62:    44 ea 00 10       	[r1+0x10] = 0x0			  ## list.c:237:33
  104d66:    c0 eb ff 2f       	[r2+0x0] += -0x1			  ## list.c:238:30
  104d6a:    41 99             	call -0xce <local_irq_enable : 104c9e >			  ## list.c:239:5
  104d6c:    20 60             	r0 = [r2+0x0] 			  ## list.c:240:20
  104d6e:    00 04             	pc = [sp++]			  ## list.c:240:5


vListInsertEnd:
  104d70:    02 61             	r2 = [r0+0x4] 			  ## list.c:124:0
  104d72:    92 61             	[r1+0x4] = r2			  ## list.c:136:27
  104d74:    23 62             	r3 = [r2+0x8] 			  ## list.c:137:42
  104d76:    93 62             	[r1+0x8] = r3			  ## list.c:137:31
  104d78:    23 62             	r3 = [r2+0x8] 			  ## list.c:142:14
  104d7a:    b1 61             	[r3+0x4] = r1			  ## list.c:142:33
  104d7c:    a1 62             	[r2+0x8] = r1			  ## list.c:143:25
  104d7e:    90 64             	[r1+0x10] = r0			  ## list.c:146:32
  104d80:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## list.c:148:30
  104d84:    80 00             	rts			  ## list.c:151:1


prvResetNextTaskUnblockTime:
  104d86:    c0 ff f8 bd 02 00 	r0 = 0x2bdf8 <pxDelayedTaskList : 2bdf8 >			  ## tasks.c:3479:0
  104d8c:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:3482:9
  104d8e:    11 60             	r1 = [r1+0x0] 			  ## tasks.c:3482:9
  104d90:    b1 e8 00 d0       	if (r1 != 0x0) {			  ## tasks.c:3482:9
  104d94:    00 60             		r0 = [r0+0x0] 			  ## tasks.c:3493:29
  104d96:    00 63             		r0 = [r0+0xc] 			  ## tasks.c:3493:29
  104d98:    00 63             		r0 = [r0+0xc] 			  ## tasks.c:3493:29
  104d9a:    00 65             		r0 = [r0+0x14] 
                               	} else {			  ## tasks.c:3494:32
  104d9c:    10 3f             		r0 = -0x1
                               	}
  104d9e:    c1 ff ac bc 02 00 	r1 = 0x2bcac <xNextTaskUnblockTime : 2bcac >
  104da4:    90 60             	[r1+0x0] = r0
  104da6:    80 00             	rts			  ## tasks.c:3496:1


xTaskRemoveFromEventList:
  104da8:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2788:0
  104daa:    01 16             	r1 = r0			  ## tasks.c:2788:0
  104dac:    bf ea 70 ff       	call -0x120 <local_irq_disable : 104c90 >			  ## tasks.c:2805:5
  104db0:    20 00             	csync			  ## tasks.c:2805:5
  104db2:    10 63             	r0 = [r1+0xc] 			  ## tasks.c:2806:32
  104db4:    05 63             	r5 = [r0+0xc] 			  ## tasks.c:2806:32
  104db6:    85 4d             	if (r5 != 0) goto 0x1a <xTaskRemoveFromEventList+0x2A : 104dd2 >
  104db8:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  104dbe:    42 f0 f7 0a       	r2 = 0xaf7  # <alg_code_size+0xC : af6 >			  ## FreeRTOSConfig.h:181:5
  104dc2:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  104dc4:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  104dca:    c1 ff 29 6d 10 00 	r1 = 0x106d29 <$data.__1+0x21A : 106d28 >			  ## FreeRTOSConfig.h:181:5
  104dd0:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  104dd2:    04 e1 28 50       	r4 = r5 + 0x28			  ## tasks.c:2808:43
  104dd6:    40 16             	r0 = r4			  ## tasks.c:2808:12
  104dd8:    51 96             	call -0x94 <uxListRemove : 104d46 >			  ## tasks.c:2808:12
  104dda:    c0 ff a8 bc 02 00 	r0 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:2810:9
  104de0:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2810:9
  104de2:    00 47             	if (r0 == 0) goto 0xe <xTaskRemoveFromEventList+0x4A : 104df2 >			  ## tasks.c:2810:9
  104de4:    c0 ff bc bd 02 00 	r0 = 0x2bdbc <xPendingReadyList : 2bdbc >			  ## tasks.c:2816:9
  104dea:    41 16             	r1 = r4			  ## tasks.c:2816:9
  104dec:    61 81             	call -0x7e <vListInsertEnd : 104d70 >			  ## tasks.c:2816:9
  104dee:    cd 3c             	r5 += 0x3c			  ## tasks.c:2819:25
  104df0:    04 92             	goto 0x24 <xTaskRemoveFromEventList+0x6E : 104e16 >
  104df2:    5c 94             	r4 = r5 + 0x14			  ## tasks.c:2811:47
  104df4:    40 16             	r0 = r4			  ## tasks.c:2811:16
  104df6:    51 87             	call -0xb2 <uxListRemove : 104d46 >			  ## tasks.c:2811:16
  104df8:    d0 ec 5e 03       	r0 = [++r5=0x3c]			  ## tasks.c:2812:9
  104dfc:    c1 ff a0 bc 02 00 	r1 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:2812:9
  104e02:    66 e8 00 10       	[r1+0x0] |= 1 << r0			  ## tasks.c:2812:9
  104e06:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:2812:9
  104e0a:    c1 ff f4 bc 02 00 	r1 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:2812:9
  104e10:    10 18             	r0 += r1			  ## tasks.c:2812:9
  104e12:    41 16             	r1 = r4			  ## tasks.c:2812:9
  104e14:    51 8d             	call -0xa6 <vListInsertEnd : 104d70 >			  ## tasks.c:2812:9
  104e16:    bf ea 42 ff       	call -0x17c <local_irq_enable : 104c9e >			  ## tasks.c:2818:5
  104e1a:    53 60             	r3 = [r5+0x0] 			  ## tasks.c:2819:25
  104e1c:    bf ea 38 ff       	call -0x190 <local_irq_disable : 104c90 >			  ## tasks.c:2819:38
  104e20:    20 00             	csync			  ## tasks.c:2819:38
  104e22:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:2819:38
  104e28:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2819:38
  104e2a:    bf ea 38 ff       	call -0x190 <local_irq_enable : 104c9e >			  ## tasks.c:2819:38
  104e2e:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:2819:52
  104e30:    42 20             	r2 = 0x0			  ## tasks.c:2819:52
  104e32:    13 ec 00 80       	if (r3 > r0) {
  104e36:    c0 ff b4 bc 02 00 		r0 = 0x2bcb4 <xYieldPending : 2bcb4 >			  ## tasks.c:2827:23
  104e3c:    42 21             		r2 = 0x1			  ## tasks.c:2827:23
  104e3e:    82 60             		[r0+0x0] = r2
                               	}			  ## tasks.c:2827:23
  104e40:    51 82             	call -0xbc <prvResetNextTaskUnblockTime : 104d86 >			  ## tasks.c:2842:9
  104e42:    20 16             	r0 = r2			  ## tasks.c:2846:5
  104e44:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2846:5


xTaskSwitchContext:
  104e46:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2653:0
  104e48:    c0 ff a8 bc 02 00 	r0 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:2655:9
  104e4e:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:2655:9
  104e50:    c0 ff b4 bc 02 00 	r0 = 0x2bcb4 <xYieldPending : 2bcb4 >			  ## tasks.c:2655:9
  104e56:    01 44             	if (r1 == 0) goto 0x8 <xTaskSwitchContext+0x1A : 104e60 >			  ## tasks.c:2655:9
  104e58:    40 ea 01 00       	[r0+0x0] = 0x1			  ## tasks.c:2658:23
  104e5c:    40 20             	r0 = 0x0			  ## tasks.c:2658:23
  104e5e:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2711:1
  104e60:    40 ea 00 00       	[r0+0x0] = 0x0			  ## tasks.c:2661:23
  104e64:    bf ea 14 ff       	call -0x1d8 <local_irq_disable : 104c90 >			  ## tasks.c:2596:5
  104e68:    20 00             	csync			  ## tasks.c:2596:5
  104e6a:    c0 ff a0 bc 02 00 	r0 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:2598:5
  104e70:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2598:5
  104e72:    80 e1 00 00       	r0 = clz(r0)			  ## tasks.c:2598:5
  104e76:    a0 e0 1f 00       	r0 = 0x1F - r0			  ## tasks.c:2598:5
  104e7a:    e4 e1 14 00       	r4 = r0 * 0x14			  ## tasks.c:2616:5
  104e7e:    c5 ff f4 bc 02 00 	r5 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:2616:5
  104e84:    d8 ec 42 05       	r0 = [r4+r5]			  ## tasks.c:2616:5
  104e88:    80 4d             	if (r0 != 0) goto 0x1a <xTaskSwitchContext+0x5E : 104ea4 >
  104e8a:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  104e90:    42 f0 38 0a       	r2 = 0xa38  # <stack_bss_size+0x238 : a38 >			  ## FreeRTOSConfig.h:181:5
  104e94:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  104e96:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  104e9c:    c1 ff ad 6c 10 00 	r1 = 0x106cad <$data.__1+0x19E : 106cac >			  ## FreeRTOSConfig.h:181:5
  104ea2:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  104ea4:    49 1d             	r1 = r4 + r5			  ## tasks.c:2618:5
  104ea6:    10 61             	r0 = [r1+0x4] 			  ## tasks.c:2618:5
  104ea8:    00 61             	r0 = [r0+0x4] 			  ## tasks.c:2618:5
  104eaa:    1a 88             	r2 = r1 + 0x8			  ## tasks.c:2618:5
  104eac:    90 61             	[r1+0x4] = r0			  ## tasks.c:2618:5
  104eae:    10 e8 00 42       	if (r0 == r2) {			  ## tasks.c:2618:5
  104eb2:    00 61             		r0 = [r0+0x4] 			  ## tasks.c:2618:5
  104eb4:    90 61             		[r1+0x4] = r0
                               	}			  ## tasks.c:2618:5
  104eb6:    00 63             	r0 = [r0+0xc] 			  ## tasks.c:2618:5
  104eb8:    c1 ff c0 bc 02 00 	r1 = 0x2bcc0 <highCurrentTCB : 2bcc0 >			  ## tasks.c:2618:5
  104ebe:    90 60             	[r1+0x0] = r0			  ## tasks.c:2618:5
  104ec0:    bf ea ed fe       	call -0x226 <local_irq_enable : 104c9e >			  ## tasks.c:2649:5
  104ec4:    40 21             	r0 = 0x1			  ## tasks.c:2649:5
  104ec6:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2711:1


vPortYield:
  104ec8:    75 04             	[--sp] = {rets, r5, r4}			  ## port.c:310:0
  104eca:    bf ea e1 fe       	call -0x23e <local_irq_disable : 104c90 >			  ## port.c:324:5
  104ece:    20 00             	csync			  ## port.c:324:5
  104ed0:    51 9a             	call -0x8c <xTaskSwitchContext : 104e46 >			  ## port.c:326:9
  104ed2:    00 56             	if (r0 == 0) goto 0x2c <vPortYield+0x38 : 104f00 >			  ## port.c:326:9
  104ed4:    40 20             	r0 = 0x0
  104ed6:    c1 ff c0 bc 02 00 	r1 = 0x2bcc0 <highCurrentTCB : 2bcc0 >
  104edc:    c2 ff 94 bc 02 00 	r2 = 0x2bc94 <CurrentTCB : 2bc94 >
  104ee2:    c3 ff a0 e1 1b 00 	r3 = 0x1be1a0 <__stub_VecMinScalar_float_c_f_c+0xAE1A4 : 1be1a0 >
  104ee8:    04 89             	goto 0x12 <vPortYield+0x34 : 104efc >
  104eea:    d8 ec 1a 40       	r4 = [r1+r0<<2]			  ## port.c:349:30
  104eee:    d8 ec 2a 50       	r5 = [r2+r0<<2]			  ## port.c:349:13
  104ef2:    95 e8 00 04       	if (r5 != r4) {			  ## port.c:349:13
  104ef6:    00 ef 08 30       		[r3+0x0] |= 0x8
                               	}			  ## port.c:356:33
  104efa:    c0 21             	r0 += 0x1			  ## port.c:347:36
  104efc:    80 f8 f5 03       	if (r0 != 0x1) goto -0x16 <vPortYield+0x22 : 104eea >
  104f00:    35 04             	{rets, r5, r4} = [sp++]
  104f02:    67 8d             	goto -0x266 <local_irq_enable : 104c9e >


vListInitialise:
  104f04:    09 88             	r1 = r0 + 0x8			  ## list.c:87:0
  104f06:    81 61             	[r0+0x4] = r1			  ## list.c:91:21
  104f08:    42 ea ff 03       	[r0+0x8] = 0xFFFFFFFF			  ## list.c:95:33
  104f0c:    81 63             	[r0+0xc] = r1			  ## list.c:99:29
  104f0e:    81 64             	[r0+0x10] = r1			  ## list.c:100:33
  104f10:    40 ea 00 00       	[r0+0x0] = 0x0			  ## list.c:102:29
  104f14:    80 00             	rts			  ## list.c:108:1


xQueueGenericReset:
  104f16:    76 04             	[--sp] = {rets, r6-r4}			  ## queue.c:284:0
  104f18:    04 15             	r5_r4 = r1_r0			  ## queue.c:284:0
  104f1a:    84 4d             	if (r4 != 0) goto 0x1a <xQueueGenericReset+0x20 : 104f36 >			  ## queue.c:284:0
  104f1c:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  104f22:    42 f0 1f 01       	r2 = 0x11f  # <var_bss_size+0x16 : 11e >			  ## FreeRTOSConfig.h:181:5
  104f26:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  104f28:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  104f2e:    c1 ff 0e 6b 10 00 	r1 = 0x106b0e <$data.__1 : 106b0e >			  ## FreeRTOSConfig.h:181:5
  104f34:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  104f36:    bf ea ab fe       	call -0x2aa <local_irq_disable : 104c90 >			  ## queue.c:289:5
  104f3a:    20 00             	csync			  ## queue.c:289:5
  104f3c:    01 f1 40 40       	r1 = r4 + 0x40  #			  ## queue.c:289:5
  104f40:    40 6f             		 r0 = [r4+0x3c] 			  ## queue.c:291:55
  104f42:    12 60             	r2 = [r1+0x0] 			  ## queue.c:291:75
  104f44:    f0 f1 20 60       	r6 = r2 * r0  #			  ## queue.c:291:64
  104f48:    43 60             		 r3 = [r4+0x0] 			  ## queue.c:291:36
  104f4a:    36 18             	r6 += r3			  ## queue.c:291:43
  104f4c:    c6 61             	[r4+0x4] = r6			  ## queue.c:291:25
  104f4e:    4e ea 00 40       	[r4+0x38] = 0x0			  ## queue.c:292:36
  104f52:    f8 3f             	r0 += -0x1			  ## queue.c:294:71
  104f54:    20 db             	r0 *= r2  #			  ## queue.c:294:91
  104f56:    c3 62             		 [r4+0x8] = r3			  ## queue.c:293:28
  104f58:    30 18             	r0 += r3			  ## queue.c:294:49
  104f5a:    c0 63             	[r4+0xc] = r0			  ## queue.c:294:31
  104f5c:    78 3f             	r0 = 0xff			  ## queue.c:294:31
  104f5e:    98 44             	b[r1+0x4] = r0			  ## queue.c:295:26
  104f60:    98 45             	b[r1+0x5] = r0			  ## queue.c:296:26
  104f62:    48 90             	r0 = r4 + 0x10			  ## queue.c:296:26
  104f64:    05 45             	if (r5 == 0) goto 0xa <xQueueGenericReset+0x5A : 104f70 >			  ## queue.c:296:26
  104f66:    61 8e             	call -0x64 <vListInitialise : 104f04 >			  ## queue.c:315:13
  104f68:    00 e1 24 40       	r0 = r4 + 0x24			  ## queue.c:316:40
  104f6c:    61 8b             	call -0x6a <vListInitialise : 104f04 >			  ## queue.c:316:13
  104f6e:    04 86             	goto 0xc <xQueueGenericReset+0x66 : 104f7c >			  ## queue.c:316:13
  104f70:    41 64             	r1 = [r4+0x10] 			  ## queue.c:304:17
  104f72:    01 44             	if (r1 == 0) goto 0x8 <xQueueGenericReset+0x66 : 104f7c >			  ## queue.c:304:17
  104f74:    bf ea 18 ff       	call -0x1d0 <xTaskRemoveFromEventList : 104da8 >			  ## queue.c:305:21
  104f78:    00 41             	if (r0 == 0) goto 0x2 <xQueueGenericReset+0x66 : 104f7c >			  ## queue.c:305:21
  104f7a:    51 86             	call -0xb4 <vPortYield : 104ec8 >			  ## queue.c:306:21
  104f7c:    bf ea 8f fe       	call -0x2e2 <local_irq_enable : 104c9e >			  ## queue.c:319:5
  104f80:    40 21             	r0 = 0x1			  ## queue.c:323:5
  104f82:    56 04             	{pc, r6-r4} = [sp++]			  ## queue.c:323:5


xQueueGenericCreateStatic:
  104f84:    7c 04             	[--sp] = {rets, r12-r4}			  ## queue.c:330:0
  104f86:    e2 9f             	sp += -0x4			  ## queue.c:330:0
  104f88:    34 16             	r4 = r3			  ## queue.c:330:0
  104f8a:    2c 16             	r12 = r2			  ## queue.c:330:0
  104f8c:    15 16             	r5 = r1			  ## queue.c:330:0
  104f8e:    0b 16             	r11 = r0			  ## queue.c:330:0
  104f90:    ca ff e8 bc 02 00 	r10 = 0x2bce8 <mask_log_e : 2bce8 >			  ## queue.c:330:0
  104f96:    c8 ff 21 6b 10 00 	r8 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## queue.c:330:0
  104f9c:    c9 ff 28 6b 10 00 	r9 = 0x106b28 <$data.__1+0x1A : 106b28 >			  ## queue.c:330:0
  104fa2:    80 46             	if (r0 != 0) goto 0xc <xQueueGenericCreateStatic+0x2C : 104fb0 >			  ## queue.c:330:0
  104fa4:    d0 ec a0 30       	r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  104fa8:    42 e0 4d 01       	r2 = 0x14d <var_bss_size+0x44 : 14c >			  ## FreeRTOSConfig.h:181:5
  104fac:    80 15             	r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  104fae:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  104fb0:    84 46             	if (r4 != 0) goto 0xc <xQueueGenericCreateStatic+0x3A : 104fbe >
  104fb2:    d0 ec a0 30       	r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  104fb6:    42 e0 51 01       	r2 = 0x151 <var_bss_size+0x48 : 150 >			  ## FreeRTOSConfig.h:181:5
  104fba:    80 15             	r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  104fbc:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  104fbe:    85 48             	if (r5 != 0) goto 0x10 <xQueueGenericCreateStatic+0x4C : 104fd0 >
  104fc0:    bc e8 00 c0       	if (r12 != 0x0) {
  104fc4:    d0 ec a0 30       		r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  104fc8:    42 e0 55 01       		r2 = 0x155 <var_bss_size+0x4C : 154 >			  ## FreeRTOSConfig.h:181:5
  104fcc:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  104fce:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  104fd0:    05 48             	if (r5 == 0) goto 0x10 <xQueueGenericCreateStatic+0x5E : 104fe2 >
  104fd2:    3c e8 00 c0       	if (r12 == 0x0) {
  104fd6:    d0 ec a0 30       		r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  104fda:    42 e0 56 01       		r2 = 0x156 <var_bss_size+0x4E : 156 >			  ## FreeRTOSConfig.h:181:5
  104fde:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  104fe0:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  104fe2:    50 30             	r0 = 0x50			  ## queue.c:349:25
  104fe4:    80 20             	[sp] = r0			  ## queue.c:349:25
  104fe6:    00 20             	r0 = [sp]			  ## queue.c:350:9
  104fe8:    b0 e8 50 c0       	if (r0 != 0x50) {
  104fec:    d0 ec a0 30       		r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  104ff0:    42 e0 5e 01       		r2 = 0x15e <var_bss_size+0x56 : 15e >			  ## FreeRTOSConfig.h:181:5
  104ff4:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  104ff6:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  104ff8:    04 52             	if (r4 == 0) goto 0x24 <xQueueGenericCreateStatic+0x9A : 10501e >			  ## FreeRTOSConfig.h:181:5
  104ffa:    07 f1 40 40       	r7 = r4 + 0x40  #
  104ffe:    06 2b             		 r6 = [sp+44]
  105000:    40 21             	r0 = 0x1
  105002:    40 d6             	r0 = r4  #			  ## queue.c:428:9
  105004:    f8 46             		 b[r7+0x6] = r0			  ## queue.c:365:47
  105006:    b5 e8 00 00       	if (r5 != 0x0) {			  ## queue.c:365:47
  10500a:    c0 16             		r0 = r12
                               	}			  ## queue.c:428:9
  10500c:    40 d6             	r0 = r4  #			  ## queue.c:443:12
  10500e:    c0 60             		 [r4+0x0] = r0			  ## queue.c:443:12
  105010:    d0 ec 4d b3       	[r4+0x3c] = r11			  ## queue.c:441:26
  105014:    f5 60             	[r7+0x0] = r5			  ## queue.c:442:28
  105016:    41 21             	r1 = 0x1			  ## queue.c:443:12
  105018:    bf ea 7d ff       	call -0x106 <xQueueGenericReset : 104f16 >			  ## queue.c:443:12
  10501c:    fe 4c             	b[r7+0xc] = r6			  ## queue.c:447:33
  10501e:    40 16             	r0 = r4			  ## queue.c:372:5
  105020:    02 81             	sp += 0x4			  ## queue.c:372:5
  105022:    5c 04             	{pc, r12-r4} = [sp++]			  ## queue.c:372:5


prvCopyDataToQueue:
  105024:    7a 04             	[--sp] = {rets, r10-r4}			  ## queue.c:1526:0
  105026:    04 16             	r4 = r0			  ## queue.c:1526:0
  105028:    07 f1 40 40       	r7 = r4 + 0x40  #			  ## queue.c:1526:0
  10502c:    46 6e             		 r6 = [r4+0x38] 			  ## queue.c:1532:34
  10502e:    25 d6             	r5 = r2  #
  105030:    73 60             		 r3 = [r7+0x0] 			  ## queue.c:1534:18
  105032:    03 5d             	if (r3 == 0) goto 0x3a <prvCopyDataToQueue+0x4A : 10506e >
  105034:    35 58             	if (r5 == 0) goto 0xf0 <prvCopyDataToQueue+0x102 : 105126 >
  105036:    32 d6             	r2 = r3  #			  ## queue.c:1557:16
  105038:    40 63             		 r0 = [r4+0xc] 			  ## queue.c:1557:43
  10503a:    bf ea 81 fc       	call -0x6fe <memmove : 104940 >			  ## queue.c:1557:16
  10503e:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1558:43
  105040:    41 63             	r1 = [r4+0xc] 			  ## queue.c:1558:31
  105042:    11 1e             	r1 = r1 - r0			  ## queue.c:1558:31
  105044:    c1 63             	[r4+0xc] = r1			  ## queue.c:1558:31
  105046:    42 60             	r2 = [r4+0x0] 			  ## queue.c:1559:46
  105048:    91 e9 00 c2       	if (r1 < r2) {			  ## queue.c:1559:46
  10504c:    41 61             		r1 = [r4+0x4] 			  ## queue.c:1560:47
  10504e:    a0 e0 00 00       		r0 = 0x0 - r0			  ## queue.c:1558:31
  105052:    10 18             		r0 += r1			  ## queue.c:1560:54
  105054:    c0 63             		[r4+0xc] = r0
                               	}			  ## queue.c:1560:35
  105056:    40 20             	r0 = 0x0			  ## queue.c:1560:35
  105058:    41 21             	r1 = 0x1			  ## queue.c:1560:35
  10505a:    42 21             	r2 = 0x1			  ## queue.c:1565:23
  10505c:    b5 e8 02 00       	if (r5 != 0x2) {			  ## queue.c:1565:23
  105060:    42 20             		r2 = 0x0
                               	}			  ## queue.c:1565:23
  105062:    36 e8 00 00       	if (r6 == 0x0) {			  ## queue.c:1565:23
  105066:    61 16             		r1 = r6
                               	}			  ## queue.c:1566:35
  105068:    a1 19             	r1 &= r2			  ## queue.c:1565:13
  10506a:    6e 1e             	r6 = r6 - r1			  ## queue.c:1565:13
  10506c:    34 8a             	goto 0xd4 <prvCopyDataToQueue+0x11E : 105142 >
  10506e:    41 60             	r1 = [r4+0x0] 			  ## queue.c:1537:26
  105070:    40 20             	r0 = 0x0
  105072:    b1 47             	if (r1 != 0) goto 0xce <prvCopyDataToQueue+0x11E : 105142 >
  105074:    c1 d4             	r9 = 0  #
  105076:    45 61             		 r5 = [r4+0x4] 			  ## queue.c:1540:69
  105078:    25 53             	if (r5 == 0) goto 0xa6 <prvCopyDataToQueue+0xFC : 105120 >
  10507a:    bf ea 09 fe       	call -0x3ee <local_irq_disable : 104c90 >			  ## tasks.c:3603:9
  10507e:    20 00             	csync			  ## tasks.c:3603:9
  105080:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:3603:9
  105086:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:3603:9
  105088:    bf ea 09 fe       	call -0x3ee <local_irq_enable : 104c9e >			  ## tasks.c:3603:9
  10508c:    c7 ff e8 bc 02 00 	r7 = 0x2bce8 <mask_log_e : 2bce8 >			  ## tasks.c:3603:9
  105092:    c8 ff 6b 6c 10 00 	r8 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## tasks.c:3603:9
  105098:    ca ff 6c 6d 10 00 	r10 = 0x106d6c <$data.__1+0x25E : 106d6c >			  ## tasks.c:3603:9
  10509e:    02 e8 06 50       	if (r5 == r2) goto 0xc <prvCopyDataToQueue+0x8A : 1050ae >			  ## tasks.c:3603:9
  1050a2:    42 f0 13 0e       	r2 = 0xe13  # <usb_code_size+0x2D7 : e12 >			  ## FreeRTOSConfig.h:181:5
  1050a6:    73 60             		 r3 = [r7+0x0] 			  ## FreeRTOSConfig.h:181:5
  1050a8:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  1050aa:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  1050ac:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1050ae:    c5 34             	r5 += 0x14
  1050b0:    50 6f             	r0 = [r5+0x3c] 			  ## tasks.c:3605:9
  1050b2:    80 47             	if (r0 != 0) goto 0xe <prvCopyDataToQueue+0x9E : 1050c2 >			  ## tasks.c:3605:9
  1050b4:    42 f0 15 0e       	r2 = 0xe15  # <usb_code_size+0x2D9 : e14 >			  ## FreeRTOSConfig.h:181:5
  1050b8:    73 60             		 r3 = [r7+0x0] 			  ## FreeRTOSConfig.h:181:5
  1050ba:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  1050bc:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  1050be:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1050c0:    50 6f             	r0 = [r5+0x3c] 			  ## FreeRTOSConfig.h:181:5
  1050c2:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## tasks.c:3606:31
  1050c6:    d1 6f             	[r5+0x3c] = r1			  ## tasks.c:3606:31
  1050c8:    40 20             	r0 = 0x0			  ## tasks.c:3606:31
  1050ca:    91 4a             	if (r1 != 0) goto 0x54 <prvCopyDataToQueue+0xFC : 105120 >			  ## tasks.c:3606:31
  1050cc:    51 6e             	r1 = [r5+0x38] 			  ## tasks.c:3610:41
  1050ce:    52 6a             	r2 = [r5+0x28] 			  ## tasks.c:3610:20
  1050d0:    01 e8 26 20       	if (r2 == r1) goto 0x4c <prvCopyDataToQueue+0xFC : 105120 >			  ## tasks.c:3610:20
  1050d4:    bf ea dc fd       	call -0x448 <local_irq_disable : 104c90 >			  ## tasks.c:3618:17
  1050d8:    20 00             	csync			  ## tasks.c:3618:17
  1050da:    50 16             	r0 = r5			  ## tasks.c:3619:21
  1050dc:    bf ea 33 fe       	call -0x39a <uxListRemove : 104d46 >			  ## tasks.c:3619:21
  1050e0:    c1 ff f4 bc 02 00 	r1 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:3619:21
  1050e6:    c2 ff a0 bc 02 00 	r2 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:3619:21
  1050ec:    80 49             	if (r0 != 0) goto 0x12 <prvCopyDataToQueue+0xDC : 105100 >			  ## tasks.c:3619:21
  1050ee:    50 6a             	r0 = [r5+0x28] 			  ## tasks.c:3620:21
  1050f0:    e3 e1 14 00       	r3 = r0 * 0x14			  ## tasks.c:3620:21
  1050f4:    d8 ec 32 31       	r3 = [r3+r1]			  ## tasks.c:3620:21
  1050f8:    33 e8 00 00       	if (r3 == 0x0) {			  ## tasks.c:3620:21
  1050fc:    66 e8 03 20       		[r2+0x0] &= ~(1 << r0)
                               	}			  ## tasks.c:3620:21
  105100:    50 6e             	r0 = [r5+0x38] 			  ## tasks.c:3628:44
  105102:    a3 f0 08 00       	r3 = 0x8 - r0  #			  ## tasks.c:3633:17
  105106:    d0 6a             		 [r5+0x28] = r0			  ## tasks.c:3628:35
  105108:    d3 65             	[r5+0x14] = r3			  ## tasks.c:3633:17
  10510a:    66 e8 00 20       	[r2+0x0] |= 1 << r0			  ## tasks.c:3634:17
  10510e:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:3634:17
  105112:    10 18             	r0 += r1			  ## tasks.c:3634:17
  105114:    51 16             	r1 = r5			  ## tasks.c:3634:17
  105116:    bf ea 2b fe       	call -0x3aa <vListInsertEnd : 104d70 >			  ## tasks.c:3634:17
  10511a:    bf ea c0 fd       	call -0x480 <local_irq_enable : 104c9e >			  ## tasks.c:3635:17
  10511e:    40 21             	r0 = 0x1
  105120:    d0 ec 45 90       	[r4+0x4] = r9			  ## queue.c:1541:40
  105124:    04 8e             	goto 0x1c <prvCopyDataToQueue+0x11E : 105142 >			  ## queue.c:1541:40
  105126:    32 d6             	r2 = r3  #			  ## queue.c:1549:16
  105128:    40 62             		 r0 = [r4+0x8] 			  ## queue.c:1549:41
  10512a:    bf ea 09 fc       	call -0x7ee <memmove : 104940 >			  ## queue.c:1549:16
  10512e:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1550:40
  105130:    41 62             	r1 = [r4+0x8] 			  ## queue.c:1550:28
  105132:    01 18             	r1 += r0			  ## queue.c:1550:28
  105134:    c1 62             	[r4+0x8] = r1			  ## queue.c:1550:28
  105136:    42 61             	r2 = [r4+0x4] 			  ## queue.c:1551:44
  105138:    40 20             	r0 = 0x0			  ## queue.c:1551:44
  10513a:    11 e9 00 42       	if (r1 >= r2) {			  ## queue.c:1551:44
  10513e:    41 60             		r1 = [r4+0x0] 			  ## queue.c:1552:43
  105140:    c1 62             		[r4+0x8] = r1
                               	}			  ## queue.c:1552:32
  105142:    69 81             	r1 = r6 + 0x1			  ## queue.c:1580:52
  105144:    c1 6e             	[r4+0x38] = r1			  ## queue.c:1580:32
  105146:    5a 04             	{pc, r10-r4} = [sp++]			  ## queue.c:1582:5


vTaskSuspendAll:
  105148:    10 04             	[--sp] = rets			  ## tasks.c:1854:0
  10514a:    bf ea a1 fd       	call -0x4be <local_irq_disable : 104c90 >			  ## tasks.c:1860:5
  10514e:    20 00             	csync			  ## tasks.c:1860:5
  105150:    c0 ff a8 bc 02 00 	r0 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:1862:5
  105156:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:1862:5
  10515a:    00 04             	pc = [sp++]			  ## tasks.c:1866:1


vTaskSetTimeOutState:
  10515c:    74 04             	[--sp] = {rets, r4}			  ## tasks.c:2894:0
  10515e:    04 16             	r4 = r0			  ## tasks.c:2894:0
  105160:    84 4d             	if (r4 != 0) goto 0x1a <vTaskSetTimeOutState+0x20 : 10517c >			  ## tasks.c:2894:0
  105162:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105168:    42 f0 4f 0b       	r2 = 0xb4f  # <usb_code_size+0x13 : b4e >			  ## FreeRTOSConfig.h:181:5
  10516c:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  10516e:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  105174:    c1 ff 42 6d 10 00 	r1 = 0x106d42 <$data.__1+0x234 : 106d42 >			  ## FreeRTOSConfig.h:181:5
  10517a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10517c:    c0 ff bc bc 02 00 	r0 = 0x2bcbc <xNumOfOverflows : 2bcbc >			  ## tasks.c:2896:33
  105182:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2896:33
  105184:    c0 60             	[r4+0x0] = r0			  ## tasks.c:2896:31
  105186:    c0 ff b0 bc 02 00 	r0 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:2897:34
  10518c:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2897:34
  10518e:    c0 61             	[r4+0x4] = r0			  ## tasks.c:2897:32
  105190:    54 04             	{pc, r4} = [sp++]			  ## tasks.c:2898:1


xTaskCheckForTimeOut:
  105192:    78 04             	[--sp] = {rets, r8-r4}			  ## tasks.c:2902:0
  105194:    04 15             	r5_r4 = r1_r0			  ## tasks.c:2902:0
  105196:    c6 ff e8 bc 02 00 	r6 = 0x2bce8 <mask_log_e : 2bce8 >			  ## tasks.c:2902:0
  10519c:    c8 ff 6b 6c 10 00 	r8 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## tasks.c:2902:0
  1051a2:    c7 ff 57 6d 10 00 	r7 = 0x106d57 <$data.__1+0x248 : 106d56 >			  ## tasks.c:2902:0
  1051a8:    84 46             	if (r4 != 0) goto 0xc <xTaskCheckForTimeOut+0x24 : 1051b6 >			  ## tasks.c:2902:0
  1051aa:    42 f0 59 0b       	r2 = 0xb59  # <usb_code_size+0x1D : b58 >			  ## FreeRTOSConfig.h:181:5
  1051ae:    63 60             		 r3 = [r6+0x0] 			  ## FreeRTOSConfig.h:181:5
  1051b0:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  1051b2:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  1051b4:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1051b6:    85 46             	if (r5 != 0) goto 0xc <xTaskCheckForTimeOut+0x32 : 1051c4 >
  1051b8:    42 f0 5a 0b       	r2 = 0xb5a  # <usb_code_size+0x1F : b5a >			  ## FreeRTOSConfig.h:181:5
  1051bc:    63 60             		 r3 = [r6+0x0] 			  ## FreeRTOSConfig.h:181:5
  1051be:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  1051c0:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  1051c2:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1051c4:    bf ea 64 fd       	call -0x538 <local_irq_disable : 104c90 >			  ## tasks.c:2908:5
  1051c8:    20 00             	csync			  ## tasks.c:2908:5
  1051ca:    c0 ff b0 bc 02 00 	r0 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:2911:44
  1051d0:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:2911:44
  1051d2:    bf ea 5d fd       	call -0x546 <local_irq_disable : 104c90 >			  ## tasks.c:2914:13
  1051d6:    20 00             	csync			  ## tasks.c:2914:13
  1051d8:    c2 ff 94 bc 02 00 	r2 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:2914:13
  1051de:    26 60             	r6 = [r2+0x0] 			  ## tasks.c:2914:13
  1051e0:    bf ea 5d fd       	call -0x546 <local_irq_enable : 104c9e >			  ## tasks.c:2914:13
  1051e4:    50 ee 69 05       	r0 = b[r6+0x59] (u)			  ## tasks.c:2914:27
  1051e8:    00 4e             	if (r0 == 0) goto 0x1c <xTaskCheckForTimeOut+0x74 : 105206 >			  ## tasks.c:2914:13
  1051ea:    bf ea 51 fd       	call -0x55e <local_irq_disable : 104c90 >			  ## tasks.c:2917:13
  1051ee:    20 00             	csync			  ## tasks.c:2917:13
  1051f0:    22 60             	r2 = [r2+0x0] 			  ## tasks.c:2917:13
  1051f2:    bf ea 54 fd       	call -0x558 <local_irq_enable : 104c9e >			  ## tasks.c:2917:13
  1051f6:    40 20             	r0 = 0x0			  ## tasks.c:2917:42
  1051f8:    52 ee 29 05       	b[r2+0x59] = r0			  ## tasks.c:2917:42
  1051fc:    42 21             	r2 = 0x1
  1051fe:    bf ea 4e fd       	call -0x564 <local_irq_enable : 104c9e >			  ## tasks.c:2947:5
  105202:    20 16             	r0 = r2			  ## tasks.c:2949:5
  105204:    58 04             	{pc, r8-r4} = [sp++]			  ## tasks.c:2949:5
  105206:    50 60             	r0 = [r5+0x0] 			  ## tasks.c:2923:17
  105208:    42 20             	r2 = 0x0			  ## tasks.c:2923:17
  10520a:    70 f8 f8 ff       	if (r0 == -0x1) goto -0x10 <xTaskCheckForTimeOut+0x6C : 1051fe >			  ## tasks.c:2923:17
  10520e:    c1 ff bc bc 02 00 	r1 = 0x2bcbc <xNumOfOverflows : 2bcbc >			  ## tasks.c:2931:22
  105214:    16 60             	r6 = [r1+0x0] 			  ## tasks.c:2931:22
  105216:    47 60             	r7 = [r4+0x0] 			  ## tasks.c:2931:52
  105218:    41 61             	r1 = [r4+0x4] 			  ## tasks.c:2931:52
  10521a:    42 21             	r2 = 0x1			  ## tasks.c:2931:52
  10521c:    07 e8 02 60       	if (r6 == r7) goto 0x4 <xTaskCheckForTimeOut+0x92 : 105224 >			  ## tasks.c:2931:52
  105220:    01 e9 ed 31       	if (r3 >= r1) goto -0x26 <xTaskCheckForTimeOut+0x6C : 1051fe >
  105224:    39 1e             	r1 = r3 - r1			  ## tasks.c:2938:58
  105226:    81 ec ea 01       	if (r0 <= r1) goto -0x2c <xTaskCheckForTimeOut+0x6C : 1051fe >			  ## tasks.c:2938:58
  10522a:    08 1e             	r0 = r0 - r1			  ## tasks.c:2940:36
  10522c:    40 d6             	r0 = r4  #			  ## tasks.c:2941:21
  10522e:    d0 60             		 [r5+0x0] = r0			  ## tasks.c:2940:36
  105230:    41 95             	call -0xd6 <vTaskSetTimeOutState : 10515c >			  ## tasks.c:2941:21
  105232:    42 20             	r2 = 0x0
  105234:    f7 84             	goto -0x38 <xTaskCheckForTimeOut+0x6C : 1051fe >


vListInsert:
  105236:    75 04             	[--sp] = {rets, r5, r4}			  ## list.c:155:0
  105238:    14 60             	r4 = [r1+0x0] 			  ## list.c:157:57
  10523a:    74 f8 07 fe       	if (r4 == -0x1) goto 0xe <vListInsert+0x16 : 10524c >
  10523e:    0b 88             	r3 = r0 + 0x8
  105240:    32 16             	r2 = r3
  105242:    23 61             	r3 = [r2+0x4] 			  ## list.c:198:76
  105244:    35 60             	r5 = [r3+0x0] 			  ## list.c:198:84
  105246:    84 ec fb 51       	if (r5 <= r4) goto -0xa <vListInsert+0xA : 105240 >			  ## list.c:198:84
  10524a:    04 82             	goto 0x4 <vListInsert+0x1A : 105250 >			  ## list.c:198:84
  10524c:    02 64             	r2 = [r0+0x10] 			  ## list.c:174:39
  10524e:    23 61             	r3 = [r2+0x4] 
  105250:    93 61             	[r1+0x4] = r3			  ## list.c:204:27
  105252:    b1 62             	[r3+0x8] = r1			  ## list.c:205:39
  105254:    92 62             	[r1+0x8] = r2			  ## list.c:206:31
  105256:    a1 61             	[r2+0x4] = r1			  ## list.c:207:24
  105258:    90 64             	[r1+0x10] = r0			  ## list.c:211:32
  10525a:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## list.c:213:30
  10525e:    55 04             	{pc, r5, r4} = [sp++]			  ## list.c:214:1


prvAddCurrentTaskToDelayedList:
  105260:    77 04             	[--sp] = {rets, r7-r4}			  ## tasks.c:4419:0
  105262:    c2 ff b0 bc 02 00 	r2 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:4421:40
  105268:    04 d5             	r5_r4 = r1_r0  #			  ## tasks.c:4421:40
  10526a:    27 60             		 r7 = [r2+0x0] 			  ## tasks.c:4421:40
  10526c:    bf ea 10 fd       	call -0x5e0 <local_irq_disable : 104c90 >			  ## tasks.c:4431:9
  105270:    20 00             	csync			  ## tasks.c:4431:9
  105272:    c6 ff 94 bc 02 00 	r6 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:4431:9
  105278:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4431:9
  10527a:    bf ea 10 fd       	call -0x5e0 <local_irq_enable : 104c9e >			  ## tasks.c:4431:9
  10527e:    40 20             	r0 = 0x0			  ## tasks.c:4431:9
  105280:    52 ee 29 05       	b[r2+0x59] = r0			  ## tasks.c:4431:38
  105284:    bf ea 04 fd       	call -0x5f8 <local_irq_disable : 104c90 >			  ## tasks.c:4434:5
  105288:    20 00             	csync			  ## tasks.c:4434:5
  10528a:    bf ea 01 fd       	call -0x5fe <local_irq_disable : 104c90 >			  ## tasks.c:4437:24
  10528e:    20 00             	csync			  ## tasks.c:4437:24
  105290:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4437:24
  105292:    bf ea 04 fd       	call -0x5f8 <local_irq_enable : 104c9e >			  ## tasks.c:4437:24
  105296:    28 94             	r0 = r2 + 0x14			  ## tasks.c:4437:38
  105298:    bf ea 55 fd       	call -0x556 <uxListRemove : 104d46 >			  ## tasks.c:4437:9
  10529c:    80 4c             	if (r0 != 0) goto 0x18 <prvAddCurrentTaskToDelayedList+0x56 : 1052b6 >
  10529e:    bf ea f7 fc       	call -0x612 <local_irq_disable : 104c90 >			  ## tasks.c:4442:9
  1052a2:    20 00             	csync			  ## tasks.c:4442:9
  1052a4:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4442:9
  1052a6:    bf ea fa fc       	call -0x60c <local_irq_enable : 104c9e >			  ## tasks.c:4442:9
  1052aa:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:4442:9
  1052ac:    c1 ff a0 bc 02 00 	r1 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:4442:9
  1052b2:    66 e8 03 10       	[r1+0x0] &= ~(1 << r0)			  ## tasks.c:4442:9
  1052b6:    bf ea f2 fc       	call -0x61c <local_irq_enable : 104c9e >			  ## tasks.c:4446:5
  1052ba:    f4 f8 0d fe       	if (r4 != -0x1) goto 0x1a <prvAddCurrentTaskToDelayedList+0x78 : 1052d8 >			  ## tasks.c:4446:5
  1052be:    05 4c             	if (r5 == 0) goto 0x18 <prvAddCurrentTaskToDelayedList+0x78 : 1052d8 >
  1052c0:    bf ea e6 fc       	call -0x634 <local_irq_disable : 104c90 >			  ## tasks.c:4453:51
  1052c4:    20 00             	csync			  ## tasks.c:4453:51
  1052c6:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4453:51
  1052c8:    bf ea e9 fc       	call -0x62e <local_irq_enable : 104c9e >			  ## tasks.c:4453:51
  1052cc:    29 94             	r1 = r2 + 0x14			  ## tasks.c:4453:65
  1052ce:    c0 ff e4 bd 02 00 	r0 = 0x2bde4 <xSuspendedTaskList : 2bde4 >			  ## tasks.c:4453:13
  1052d4:    37 04             	{rets, r7-r4} = [sp++]			  ## tasks.c:4453:13
  1052d6:    a6 8c             	goto -0x568 <vListInsertEnd : 104d70 >			  ## tasks.c:4453:13
  1052d8:    74 18             	r4 += r7
  1052da:    bf ea d9 fc       	call -0x64e <local_irq_disable : 104c90 >			  ## tasks.c:4461:13
  1052de:    20 00             	csync			  ## tasks.c:4461:13
  1052e0:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4461:13
  1052e2:    bf ea dc fc       	call -0x648 <local_irq_enable : 104c9e >			  ## tasks.c:4461:13
  1052e6:    a4 65             	[r2+0x14] = r4			  ## tasks.c:4461:13
  1052e8:    40 21             	r0 = 0x1			  ## tasks.c:4461:13
  1052ea:    14 e9 00 07       	if (r4 >= r7) {			  ## tasks.c:4461:13
  1052ee:    40 20             		r0 = 0x0
                               	}			  ## tasks.c:4461:13
  1052f0:    80 f8 0e 02       	if (r0 != 0x1) goto 0x1c <prvAddCurrentTaskToDelayedList+0xB0 : 105310 >			  ## tasks.c:4461:13
  1052f4:    c0 ff fc bd 02 00 	r0 = 0x2bdfc <pxOverflowDelayedTaskList : 2bdfc >			  ## tasks.c:4466:29
  1052fa:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:4466:29
  1052fc:    bf ea c8 fc       	call -0x670 <local_irq_disable : 104c90 >			  ## tasks.c:4466:58
  105300:    20 00             	csync			  ## tasks.c:4466:58
  105302:    63 60             	r3 = [r6+0x0] 			  ## tasks.c:4466:58
  105304:    bf ea cb fc       	call -0x66a <local_irq_enable : 104c9e >			  ## tasks.c:4466:58
  105308:    39 94             	r1 = r3 + 0x14			  ## tasks.c:4466:72
  10530a:    20 16             	r0 = r2			  ## tasks.c:4466:17
  10530c:    37 04             	{rets, r7-r4} = [sp++]			  ## tasks.c:4466:17
  10530e:    c7 93             	goto -0xda <vListInsert : 105236 >			  ## tasks.c:4466:17
  105310:    c0 ff f8 bd 02 00 	r0 = 0x2bdf8 <pxDelayedTaskList : 2bdf8 >			  ## tasks.c:4470:29
  105316:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:4470:29
  105318:    bf ea ba fc       	call -0x68c <local_irq_disable : 104c90 >			  ## tasks.c:4470:50
  10531c:    20 00             	csync			  ## tasks.c:4470:50
  10531e:    63 60             	r3 = [r6+0x0] 			  ## tasks.c:4470:50
  105320:    bf ea bd fc       	call -0x686 <local_irq_enable : 104c9e >			  ## tasks.c:4470:50
  105324:    39 94             	r1 = r3 + 0x14			  ## tasks.c:4470:64
  105326:    20 16             	r0 = r2			  ## tasks.c:4470:17
  105328:    41 86             	call -0xf4 <vListInsert : 105236 >			  ## tasks.c:4470:17
  10532a:    c0 ff ac bc 02 00 	r0 = 0x2bcac <xNextTaskUnblockTime : 2bcac >
  105330:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:4475:35
  105332:    94 e9 00 01       	if (r4 < r1) {			  ## tasks.c:4475:35
  105336:    84 60             		[r0+0x0] = r4
                               	}			  ## tasks.c:4476:42
  105338:    57 04             	{pc, r7-r4} = [sp++]			  ## tasks.c:4514:1


vTaskPlaceOnEventList:
  10533a:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2715:0
  10533c:    14 16             	r4 = r1			  ## tasks.c:2715:0
  10533e:    05 16             	r5 = r0			  ## tasks.c:2715:0
  105340:    85 4d             	if (r5 != 0) goto 0x1a <vTaskPlaceOnEventList+0x22 : 10535c >			  ## tasks.c:2715:0
  105342:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105348:    42 f0 9c 0a       	r2 = 0xa9c  # <stack_bss_size+0x29C : a9c >			  ## FreeRTOSConfig.h:181:5
  10534c:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  10534e:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  105354:    c1 ff 13 6d 10 00 	r1 = 0x106d13 <$data.__1+0x204 : 106d12 >			  ## FreeRTOSConfig.h:181:5
  10535a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10535c:    bf ea 98 fc       	call -0x6d0 <local_irq_disable : 104c90 >			  ## tasks.c:2725:32
  105360:    20 00             	csync			  ## tasks.c:2725:32
  105362:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:2725:32
  105368:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2725:32
  10536a:    bf ea 98 fc       	call -0x6d0 <local_irq_enable : 104c9e >			  ## tasks.c:2725:32
  10536e:    01 e1 28 20       	r1 = r2 + 0x28			  ## tasks.c:2725:46
  105372:    50 16             	r0 = r5			  ## tasks.c:2725:5
  105374:    bf ea 5f ff       	call -0x142 <vListInsert : 105236 >			  ## tasks.c:2725:5
  105378:    41 21             	r1 = 0x1			  ## tasks.c:2727:5
  10537a:    40 16             	r0 = r4			  ## tasks.c:2727:5
  10537c:    35 04             	{rets, r5, r4} = [sp++]			  ## tasks.c:2727:5
  10537e:    b7 90             	goto -0x120 <prvAddCurrentTaskToDelayedList : 105260 >			  ## tasks.c:2727:5


prvUnlockQueue:
  105380:    77 04             	[--sp] = {rets, r7-r4}			  ## queue.c:1601:0
  105382:    04 16             	r4 = r0			  ## queue.c:1601:0
  105384:    bf ea 84 fc       	call -0x6f8 <local_irq_disable : 104c90 >			  ## queue.c:1608:5
  105388:    20 00             	csync			  ## queue.c:1608:5
  10538a:    05 e1 44 40       	r5 = r4 + 0x44			  ## queue.c:1608:5
  10538e:    5f 41             	r7 = b[r5+0x1] (u)			  ## queue.c:1610:35
  105390:    c6 ff b4 bc 02 00 	r6 = 0x2bcb4 <xYieldPending : 2bcb4 >			  ## queue.c:1610:35
  105396:    04 8b             	goto 0x16 <prvUnlockQueue+0x2E : 1053ae >			  ## queue.c:1610:35
  105398:    40 16             	r0 = r4			  ## queue.c:1648:21
  10539a:    d0 ec 06 12       	r1 = [++r0=0x24]			  ## queue.c:1648:21
  10539e:    01 4a             	if (r1 == 0) goto 0x14 <prvUnlockQueue+0x34 : 1053b4 >			  ## queue.c:1648:21
  1053a0:    bf ea 02 fd       	call -0x5fc <xTaskRemoveFromEventList : 104da8 >			  ## queue.c:1649:25
  1053a4:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:1649:25
  1053a8:    40 ea 01 60       		[r6+0x0] = 0x1
                               	}			  ## tasks.c:2955:19
  1053ac:    ff 3f             	r7 += -0x1			  ## queue.c:1662:13
  1053ae:    78 17             	r0 = r7.b0 (s)			  ## queue.c:1613:24
  1053b0:    00 fd f2 03       	ifs (r0 >= 0x1) goto -0x1c <prvUnlockQueue+0x18 : 105398 >			  ## queue.c:1613:24
  1053b4:    78 3f             	r0 = 0xff			  ## queue.c:1665:26
  1053b6:    d8 41             	b[r5+0x1] = r0			  ## queue.c:1665:26
  1053b8:    bf ea 71 fc       	call -0x71e <local_irq_enable : 104c9e >			  ## queue.c:1667:5
  1053bc:    bf ea 68 fc       	call -0x730 <local_irq_disable : 104c90 >			  ## queue.c:1670:5
  1053c0:    20 00             	csync			  ## queue.c:1670:5
  1053c2:    5f 40             	r7 = b[r5+0x0] (u)			  ## queue.c:1672:35
  1053c4:    04 8b             	goto 0x16 <prvUnlockQueue+0x5C : 1053dc >			  ## queue.c:1672:35
  1053c6:    40 16             	r0 = r4			  ## queue.c:1675:17
  1053c8:    d0 ec 02 11       	r1 = [++r0=0x10]			  ## queue.c:1675:17
  1053cc:    01 4a             	if (r1 == 0) goto 0x14 <prvUnlockQueue+0x62 : 1053e2 >			  ## queue.c:1675:17
  1053ce:    bf ea eb fc       	call -0x62a <xTaskRemoveFromEventList : 104da8 >			  ## queue.c:1676:21
  1053d2:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:1676:21
  1053d6:    40 ea 01 60       		[r6+0x0] = 0x1
                               	}			  ## tasks.c:2955:19
  1053da:    ff 3f             	r7 += -0x1			  ## queue.c:1682:17
  1053dc:    78 17             	r0 = r7.b0 (s)			  ## queue.c:1674:24
  1053de:    00 fd f2 03       	ifs (r0 >= 0x1) goto -0x1c <prvUnlockQueue+0x46 : 1053c6 >			  ## queue.c:1674:24
  1053e2:    78 3f             	r0 = 0xff			  ## queue.c:1688:26
  1053e4:    d8 40             	b[r5+0x0] = r0			  ## queue.c:1688:26
  1053e6:    37 04             	{rets, r7-r4} = [sp++]			  ## queue.c:1690:5
  1053e8:    26 9a             	goto -0x74c <local_irq_enable : 104c9e >			  ## queue.c:1690:5


xTaskIncrementTick:
  1053ea:    7c 04             	[--sp] = {rets, r12-r4}			  ## tasks.c:2362:0
  1053ec:    c0 ff a8 bc 02 00 	r0 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:2370:9
  1053f2:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2370:9
  1053f4:    00 47             	if (r0 == 0) goto 0xe <xTaskIncrementTick+0x1A : 105404 >			  ## tasks.c:2370:9
  1053f6:    c0 ff b8 bc 02 00 	r0 = 0x2bcb8 <uxPendedTicks : 2bcb8 >			  ## tasks.c:2491:9
  1053fc:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:2491:9
  105400:    40 20             	r0 = 0x0			  ## tasks.c:2491:9
  105402:    34 97             	goto 0xee <xTaskIncrementTick+0x108 : 1054f2 >			  ## tasks.c:2491:9
  105404:    c0 ff b0 bc 02 00 	r0 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:2373:44
  10540a:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:2373:44
  10540c:    1d 81             	r5 = r1 + 0x1			  ## tasks.c:2373:55
  10540e:    85 60             	[r0+0x0] = r5			  ## tasks.c:2377:20
  105410:    c6 ff f8 bd 02 00 	r6 = 0x2bdf8 <pxDelayedTaskList : 2bdf8 >			  ## tasks.c:2377:20
  105416:    85 5e             	if (r5 != 0) goto 0x3c <xTaskIncrementTick+0x6A : 105454 >			  ## tasks.c:2377:20
  105418:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2380:13
  10541a:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2380:13
  10541c:    00 4d             	if (r0 == 0) goto 0x1a <xTaskIncrementTick+0x4E : 105438 >			  ## tasks.c:2380:13
  10541e:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105424:    42 f0 4c 09       	r2 = 0x94c  # <stack_bss_size+0x14C : 94c >			  ## FreeRTOSConfig.h:181:5
  105428:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  10542a:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  105430:    c1 ff 9a 6c 10 00 	r1 = 0x106c9a <$data.__1+0x18C : 106c9a >			  ## FreeRTOSConfig.h:181:5
  105436:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105438:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2380:13
  10543a:    c1 ff fc bd 02 00 	r1 = 0x2bdfc <pxOverflowDelayedTaskList : 2bdfc >			  ## tasks.c:2380:13
  105440:    12 60             	r2 = [r1+0x0] 			  ## tasks.c:2380:13
  105442:    e2 60             	[r6+0x0] = r2			  ## tasks.c:2380:13
  105444:    90 60             	[r1+0x0] = r0			  ## tasks.c:2380:13
  105446:    c0 ff bc bc 02 00 	r0 = 0x2bcbc <xNumOfOverflows : 2bcbc >			  ## tasks.c:2380:13
  10544c:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:2380:13
  105450:    bf ea 99 fc       	call -0x6ce <prvResetNextTaskUnblockTime : 104d86 >			  ## tasks.c:2380:13
  105454:    ca ff ac bc 02 00 	r10 = 0x2bcac <xNextTaskUnblockTime : 2bcac >
  10545a:    d0 ec a0 00       	r0 = [r10+0x0]			  ## tasks.c:2390:32
  10545e:    c3 14             	r11 = 0			  ## tasks.c:2390:32
  105460:    c8 ff f4 bc 02 00 	r8 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:2390:32
  105466:    c9 ff 94 bc 02 00 	r9 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:2390:32
  10546c:    80 e9 31 50       	if (r5 < r0) goto 0x62 <xTaskIncrementTick+0xE8 : 1054d2 >			  ## tasks.c:2390:32
  105470:    bf ea 0e fc       	call -0x7e4 <local_irq_disable : 104c90 >			  ## tasks.c:2391:13
  105474:    20 00             	csync			  ## tasks.c:2391:13
  105476:    cc ff a0 bc 02 00 	r12 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:2391:13
  10547c:    14 82             	goto 0x44 <xTaskIncrementTick+0xD8 : 1054c2 >			  ## tasks.c:2391:13
  10547e:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2406:39
  105480:    00 63             	r0 = [r0+0xc] 			  ## tasks.c:2406:39
  105482:    07 63             	r7 = [r0+0xc] 			  ## tasks.c:2406:39
  105484:    70 65             	r0 = [r7+0x14] 			  ## tasks.c:2407:34
  105486:    80 e9 20 50       	if (r5 < r0) goto 0x40 <xTaskIncrementTick+0xE0 : 1054ca >
  10548a:    7c 94             	r4 = r7 + 0x14			  ## tasks.c:2407:34
  10548c:    40 16             	r0 = r4			  ## tasks.c:2422:28
  10548e:    bf ea 5a fc       	call -0x74c <uxListRemove : 104d46 >			  ## tasks.c:2422:28
  105492:    70 6e             	r0 = [r7+0x38] 			  ## tasks.c:2426:25
  105494:    b0 e8 00 40       	if (r0 != 0x0) {			  ## tasks.c:2426:25
  105498:    00 e1 28 70       		r0 = r7 + 0x28			  ## tasks.c:2426:25
  10549c:    bf ea 53 fc       		call -0x75a
                               	} <uxListRemove : 104d46 >			  ## tasks.c:2427:32
  1054a0:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:2434:21
  1054a2:    66 e8 00 c0       	[r12+0x0] |= 1 << r0			  ## tasks.c:2434:21
  1054a6:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:2434:21
  1054aa:    80 18             	r0 += r8			  ## tasks.c:2434:21
  1054ac:    41 16             	r1 = r4			  ## tasks.c:2434:21
  1054ae:    bf ea 5f fc       	call -0x742 <vListInsertEnd : 104d70 >			  ## tasks.c:2434:21
  1054b2:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:2446:37
  1054b4:    d0 ec 90 10       	r1 = [r9+0x0]			  ## tasks.c:2446:51
  1054b8:    11 6f             	r1 = [r1+0x3c] 			  ## tasks.c:2446:66
  1054ba:    10 e9 00 01       	if (r0 >= r1) {
  1054be:    4b e0 01 00       		r11 = 0x1
                               	} <TLB_BEGIN : 0 >			  ## tasks.c:2434:21
  1054c2:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2393:21
  1054c4:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2393:21
  1054c6:    e0 5b             	if (r0 != 0) goto -0x4a <xTaskIncrementTick+0x94 : 10547e >			  ## tasks.c:2393:21
  1054c8:    10 3f             	r0 = -0x1
  1054ca:    d0 ec a1 00       	[r10+0x0] = r0
  1054ce:    bf ea e6 fb       	call -0x834 <local_irq_enable : 104c9e >			  ## tasks.c:2463:13
  1054d2:    bf ea dd fb       	call -0x846 <local_irq_disable : 104c90 >			  ## tasks.c:2471:17
  1054d6:    20 00             	csync			  ## tasks.c:2471:17
  1054d8:    d0 ec 90 20       	r2 = [r9+0x0]			  ## tasks.c:2471:17
  1054dc:    bf ea df fb       	call -0x842 <local_irq_enable : 104c9e >			  ## tasks.c:2471:17
  1054e0:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:2471:17
  1054e2:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:2471:17
  1054e6:    d8 ec 02 18       	r1 = [r0+r8]			  ## tasks.c:2471:17
  1054ea:    40 21             	r0 = 0x1			  ## tasks.c:2471:91
  1054ec:    b1 ec 01 00       	if (r1 <= 0x1) {			  ## tasks.c:2471:91
  1054f0:    b0 16             		r0 = r11
                               	}			  ## tasks.c:2471:17
  1054f2:    c1 ff b4 bc 02 00 	r1 = 0x2bcb4 <xYieldPending : 2bcb4 >			  ## tasks.c:2503:13
  1054f8:    11 60             	r1 = [r1+0x0] 			  ## tasks.c:2503:13
  1054fa:    b1 e8 00 00       	if (r1 != 0x0) {			  ## tasks.c:2503:13
  1054fe:    40 21             		r0 = 0x1
                               	}			  ## tasks.c:2503:13
  105500:    5c 04             	{pc, r12-r4} = [sp++]			  ## tasks.c:2511:5


xTaskResumeAll:
  105502:    7a 04             	[--sp] = {rets, r10-r4}			  ## tasks.c:1924:0
  105504:    c4 ff a8 bc 02 00 	r4 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:1924:0
  10550a:    40 60             	r0 = [r4+0x0] 			  ## tasks.c:1930:5
  10550c:    80 4d             	if (r0 != 0) goto 0x1a <xTaskResumeAll+0x26 : 105528 >			  ## tasks.c:1930:5
  10550e:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105514:    42 f0 8a 07       	r2 = 0x78a  # <mem_code_size+0x92 : 78a >			  ## FreeRTOSConfig.h:181:5
  105518:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  10551a:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  105520:    c1 ff 8b 6c 10 00 	r1 = 0x106c8b <$data.__1+0x17C : 106c8a >			  ## FreeRTOSConfig.h:181:5
  105526:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105528:    c0 eb ff 4f       	[r4+0x0] += -0x1			  ## tasks.c:1940:9
  10552c:    40 60             	r0 = [r4+0x0] 			  ## tasks.c:1942:13
  10552e:    42 20             	r2 = 0x0			  ## tasks.c:1942:13
  105530:    00 44             	if (r0 == 0) goto 0x8 <xTaskResumeAll+0x38 : 10553a >			  ## tasks.c:1942:13
  105532:    bf ea b4 fb       	call -0x898 <local_irq_enable : 104c9e >			  ## tasks.c:2015:5
  105536:    20 16             	r0 = r2			  ## tasks.c:2017:5
  105538:    5a 04             	{pc, r10-r4} = [sp++]			  ## tasks.c:2017:5
  10553a:    c0 ff 90 bc 02 00 	r0 = 0x2bc90 <uxCurrentNumberOfTasks : 2bc90 >			  ## tasks.c:1943:17
  105540:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1943:17
  105542:    70 57             	if (r0 == 0) goto -0x12 <xTaskResumeAll+0x30 : 105532 >			  ## tasks.c:1943:17
  105544:    47 20             	r7 = 0x0
  105546:    c6 ff bc bd 02 00 	r6 = 0x2bdbc <xPendingReadyList : 2bdbc >
  10554c:    c8 ff b4 bc 02 00 	r8 = 0x2bcb4 <xYieldPending : 2bcb4 >
  105552:    c9 ff a0 bc 02 00 	r9 = 0x2bca0 <uxTopReadyPriority : 2bca0 >
  105558:    ca ff f4 bc 02 00 	r10 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >
  10555e:    c5 ff 94 bc 02 00 	r5 = 0x2bc94 <CurrentTCB : 2bc94 >
  105564:    04 9a             	goto 0x34 <xTaskResumeAll+0x98 : 10559a >
  105566:    60 63             	r0 = [r6+0xc] 			  ## tasks.c:1947:39
  105568:    07 63             	r7 = [r0+0xc] 			  ## tasks.c:1947:39
  10556a:    00 e1 28 70       	r0 = r7 + 0x28			  ## tasks.c:1948:50
  10556e:    bf ea ea fb       	call -0x82c <uxListRemove : 104d46 >			  ## tasks.c:1948:28
  105572:    7c 94             	r4 = r7 + 0x14			  ## tasks.c:1949:50
  105574:    40 16             	r0 = r4			  ## tasks.c:1949:28
  105576:    bf ea e6 fb       	call -0x834 <uxListRemove : 104d46 >			  ## tasks.c:1949:28
  10557a:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:1950:21
  10557c:    66 e8 00 90       	[r9+0x0] |= 1 << r0			  ## tasks.c:1950:21
  105580:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:1950:21
  105584:    a0 18             	r0 += r10			  ## tasks.c:1950:21
  105586:    41 16             	r1 = r4			  ## tasks.c:1950:21
  105588:    bf ea f2 fb       	call -0x81c <vListInsertEnd : 104d70 >			  ## tasks.c:1950:21
  10558c:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:1955:33
  10558e:    51 60             	r1 = [r5+0x0] 			  ## tasks.c:1955:47
  105590:    11 6f             	r1 = [r1+0x3c] 			  ## tasks.c:1955:62
  105592:    10 e9 00 01       	if (r0 >= r1) {			  ## tasks.c:1955:62
  105596:    40 ea 01 80       		[r8+0x0] = 0x1
                               	}			  ## tasks.c:1960:39
  10559a:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:1946:24
  10559c:    f0 44             	if (r0 != 0) goto -0x38 <xTaskResumeAll+0x64 : 105566 >			  ## tasks.c:1946:24
  10559e:    b7 e8 00 00       	if (r7 != 0x0) {
  1055a2:    bf ea f0 fb       		call -0x820
                               	} <prvResetNextTaskUnblockTime : 104d86 >			  ## tasks.c:1973:21
  1055a6:    c4 ff b8 bc 02 00 	r4 = 0x2bcb8 <uxPendedTicks : 2bcb8 >			  ## tasks.c:1973:21
  1055ac:    45 60             	r5 = [r4+0x0] 			  ## tasks.c:1981:50
  1055ae:    05 4a             	if (r5 == 0) goto 0x14 <xTaskResumeAll+0xC2 : 1055c4 >
  1055b0:    bf ea 1b ff       	call -0x1ca <xTaskIncrementTick : 1053ea >			  ## tasks.c:1985:33
  1055b4:    b0 e8 00 00       	if (r0 != 0x0) {			  ## tasks.c:1985:33
  1055b8:    40 ea 01 80       		[r8+0x0] = 0x1
                               	}			  ## tasks.c:1986:47
  1055bc:    05 ea f8 ff       	if (--r5 != 0) goto -0x10 <xTaskResumeAll+0xAE : 1055b0 >			  ## tasks.c:1986:47
  1055c0:    40 ea 00 40       	[r4+0x0] = 0x0			  ## tasks.c:1993:39
  1055c4:    d0 ec 80 00       	r0 = [r8+0x0]			  ## tasks.c:1999:21
  1055c8:    00 44             	if (r0 == 0) goto 0x8 <xTaskResumeAll+0xD0 : 1055d2 >			  ## tasks.c:1999:21
  1055ca:    bf ea 7d fc       	call -0x706 <vPortYield : 104ec8 >			  ## tasks.c:2005:21
  1055ce:    42 21             	r2 = 0x1			  ## tasks.c:2005:21
  1055d0:    d7 90             	goto -0xa0 <xTaskResumeAll+0x30 : 105532 >			  ## tasks.c:2005:21
  1055d2:    42 20             	r2 = 0x0
  1055d4:    d7 8e             	goto -0xa4 <xTaskResumeAll+0x30 : 105532 >


xQueueGenericSend:
  1055d6:    7d 04             	[--sp] = {rets, r13-r4}			  ## queue.c:699:0
  1055d8:    e2 9d             	sp += -0xc			  ## queue.c:699:0
  1055da:    27 16             	r7 = r2			  ## queue.c:699:0
  1055dc:    18 16             	r8 = r1			  ## queue.c:699:0
  1055de:    04 16             	r4 = r0			  ## queue.c:699:0
  1055e0:    35 d6             	r5 = r3  #			  ## queue.c:699:0
  1055e2:    87 22             		 [sp+8] = r7			  ## queue.c:699:0
  1055e4:    cb ff e8 bc 02 00 	r11 = 0x2bce8 <mask_log_e : 2bce8 >			  ## queue.c:699:0
  1055ea:    c9 ff 21 6b 10 00 	r9 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## queue.c:699:0
  1055f0:    ca ff 42 6b 10 00 	r10 = 0x106b42 <$data.__1+0x34 : 106b42 >			  ## queue.c:699:0
  1055f6:    84 47             	if (r4 != 0) goto 0xe <xQueueGenericSend+0x30 : 105606 >			  ## queue.c:699:0
  1055f8:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  1055fc:    42 e0 c0 02       	r2 = 0x2c0 <os_bss_size+0x64 : 2c0 >			  ## FreeRTOSConfig.h:181:5
  105600:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  105602:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  105604:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105606:    06 e1 40 40       	r6 = r4 + 0x40
  10560a:    88 f8 09 00       	if (r8 != 0x0) goto 0x12 <xQueueGenericSend+0x4A : 105620 >
  10560e:    60 60             	r0 = [r6+0x0] 			  ## queue.c:705:5
  105610:    00 47             	if (r0 == 0) goto 0xe <xQueueGenericSend+0x4A : 105620 >			  ## queue.c:705:5
  105612:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  105616:    42 e0 c1 02       	r2 = 0x2c1 <os_bss_size+0x64 : 2c0 >			  ## FreeRTOSConfig.h:181:5
  10561a:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  10561c:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  10561e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105620:    85 f8 0a 04       	if (r5 != 0x2) goto 0x14 <xQueueGenericSend+0x62 : 105638 >
  105624:    40 6f             	r0 = [r4+0x3c] 			  ## queue.c:706:5
  105626:    00 f8 07 02       	if (r0 == 0x1) goto 0xe <xQueueGenericSend+0x62 : 105638 >			  ## queue.c:706:5
  10562a:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  10562e:    42 e0 c2 02       	r2 = 0x2c2 <os_bss_size+0x66 : 2c2 >			  ## FreeRTOSConfig.h:181:5
  105632:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  105634:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  105636:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105638:    c0 ff 98 bc 02 00 	r0 = 0x2bc98 <xSchedulerRunning : 2bc98 >			  ## tasks.c:3522:9
  10563e:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3522:9
  105640:    00 4d             	if (r0 == 0) goto 0x1a <xQueueGenericSend+0x86 : 10565c >			  ## tasks.c:3522:9
  105642:    c0 ff a8 bc 02 00 	r0 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:3525:13
  105648:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3525:13
  10564a:    00 48             	if (r0 == 0) goto 0x10 <xQueueGenericSend+0x86 : 10565c >			  ## tasks.c:3525:13
  10564c:    07 47             	if (r7 == 0) goto 0xe <xQueueGenericSend+0x86 : 10565c >
  10564e:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  105652:    42 e0 c5 02       	r2 = 0x2c5 <os_bss_size+0x68 : 2c4 >			  ## FreeRTOSConfig.h:181:5
  105656:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  105658:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  10565a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10565c:    f8 e8 00 90       	r9 = sp + 0
  105660:    0d e1 10 40       	r13 = r4 + 0x10
  105664:    c2 14             	r10 = 0
  105666:    cb ff bc bc 02 00 	r11 = 0x2bcbc <xNumOfOverflows : 2bcbc >
  10566c:    cc ff b0 bc 02 00 	r12 = 0x2bcb0 <xTickCount : 2bcb0 >
  105672:    47 20             	r7 = 0x0
  105674:    14 9c             	goto 0x78 <xQueueGenericSend+0x118 : 1056ee >
  105676:    87 48             	if (r7 != 0) goto 0x10 <xQueueGenericSend+0xB2 : 105688 >
  105678:    d0 ec b0 00       	r0 = [r11+0x0]			  ## tasks.c:2896:33
  10567c:    80 20             	[sp] = r0			  ## tasks.c:2896:31
  10567e:    d0 ec c0 00       	r0 = [r12+0x0]			  ## tasks.c:2897:34
  105682:    d0 ec 95 00       	[r9+0x4] = r0			  ## tasks.c:2897:32
  105686:    47 21             	r7 = 0x1
  105688:    bf ea 09 fb       	call -0x9ee <local_irq_enable : 104c9e >			  ## queue.c:812:9
  10568c:    bf ea 5c fd       	call -0x548 <vTaskSuspendAll : 105148 >			  ## queue.c:817:9
  105690:    bf ea fe fa       	call -0xa04 <local_irq_disable : 104c90 >			  ## queue.c:818:9
  105694:    20 00             	csync			  ## queue.c:818:9
  105696:    68 44             	r0 = b[r6+0x4] (u)			  ## queue.c:818:9
  105698:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:818:9
  10569c:    52 ee 64 a0       		b[r6+0x4] = r10
                               	}			  ## queue.c:818:9
  1056a0:    68 45             	r0 = b[r6+0x5] (u)			  ## queue.c:818:9
  1056a2:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:818:9
  1056a6:    52 ee 65 a0       		b[r6+0x5] = r10
                               	}			  ## queue.c:818:9
  1056aa:    bf ea f8 fa       	call -0xa10 <local_irq_enable : 104c9e >			  ## queue.c:818:9
  1056ae:    88 80             	r0 = sp + 0			  ## queue.c:818:9
  1056b0:    89 88             	r1 = sp + 8
  1056b2:    bf ea 6e fd       	call -0x524 <xTaskCheckForTimeOut : 105192 >			  ## queue.c:821:13
  1056b6:    90 49             	if (r0 != 0) goto 0x52 <xQueueGenericSend+0x134 : 10570a >			  ## queue.c:821:13
  1056b8:    bf ea ea fa       	call -0xa2c <local_irq_disable : 104c90 >			  ## queue.c:1731:5
  1056bc:    20 00             	csync			  ## queue.c:1731:5
  1056be:    50 ec 48 23       	r3_r2 = d[r4+0x38]			  ## queue.c:1733:22
  1056c2:    bf ea ec fa       	call -0xa28 <local_irq_enable : 104c9e >			  ## queue.c:1739:5
  1056c6:    83 e8 0d 20       	if (r2 != r3) goto 0x1a <xQueueGenericSend+0x10E : 1056e4 >			  ## queue.c:822:17
  1056ca:    d0 d6             	r0 = r13  #			  ## queue.c:824:17
  1056cc:    01 22             		 r1 = [sp+8]			  ## queue.c:824:72
  1056ce:    bf ea 34 fe       	call -0x398 <vTaskPlaceOnEventList : 10533a >			  ## queue.c:824:17
  1056d2:    40 16             	r0 = r4			  ## queue.c:831:17
  1056d4:    bf ea 54 fe       	call -0x358 <prvUnlockQueue : 105380 >			  ## queue.c:831:17
  1056d8:    bf ea 13 ff       	call -0x1da <xTaskResumeAll : 105502 >			  ## queue.c:838:21
  1056dc:    80 48             	if (r0 != 0) goto 0x10 <xQueueGenericSend+0x118 : 1056ee >			  ## queue.c:838:21
  1056de:    bf ea f3 fb       	call -0x81a <vPortYield : 104ec8 >			  ## queue.c:839:21
  1056e2:    04 85             	goto 0xa <xQueueGenericSend+0x118 : 1056ee >			  ## queue.c:839:21
  1056e4:    40 16             	r0 = r4			  ## queue.c:843:17
  1056e6:    bf ea 4b fe       	call -0x36a <prvUnlockQueue : 105380 >			  ## queue.c:843:17
  1056ea:    bf ea 0a ff       	call -0x1ec <xTaskResumeAll : 105502 >			  ## queue.c:844:24
  1056ee:    bf ea cf fa       	call -0xa62 <local_irq_disable : 104c90 >			  ## queue.c:718:9
  1056f2:    20 00             	csync			  ## queue.c:718:9
  1056f4:    40 6e             	r0 = [r4+0x38] 			  ## queue.c:724:27
  1056f6:    05 f8 0f 04       	if (r5 == 0x2) goto 0x1e <xQueueGenericSend+0x142 : 105718 >			  ## queue.c:724:27
  1056fa:    41 6f             	r1 = [r4+0x3c] 			  ## queue.c:724:56
  1056fc:    81 e9 0c 00       	if (r0 < r1) goto 0x18 <xQueueGenericSend+0x142 : 105718 >			  ## queue.c:724:56
  105700:    00 22             	r0 = [sp+8]			  ## queue.c:792:21
  105702:    d0 59             	if (r0 != 0) goto -0x8e <xQueueGenericSend+0xA0 : 105676 >			  ## queue.c:792:21
  105704:    bf ea cb fa       	call -0xa6a <local_irq_enable : 104c9e >			  ## queue.c:795:21
  105708:    04 85             	goto 0xa <xQueueGenericSend+0x13E : 105714 >
  10570a:    40 16             	r0 = r4			  ## queue.c:848:13
  10570c:    bf ea 38 fe       	call -0x390 <prvUnlockQueue : 105380 >			  ## queue.c:848:13
  105710:    bf ea f7 fe       	call -0x212 <xTaskResumeAll : 105502 >			  ## queue.c:849:20
  105714:    40 20             	r0 = 0x0
  105716:    04 93             	goto 0x26 <xQueueGenericSend+0x168 : 10573e >
  105718:    40 16             	r0 = r4			  ## queue.c:726:34
  10571a:    81 16             	r1 = r8			  ## queue.c:726:34
  10571c:    52 16             	r2 = r5			  ## queue.c:726:34
  10571e:    bf ea 81 fc       	call -0x6fe <prvCopyDataToQueue : 105024 >			  ## queue.c:726:34
  105722:    d0 ec 46 12       	r1 = [++r4=0x24]			  ## queue.c:767:25
  105726:    b1 e8 00 40       	if (r1 != 0x0) {
  10572a:    40 16             		r0 = r4			  ## queue.c:768:29
  10572c:    bf ea 3c fb       		call -0x988
                               	} <xTaskRemoveFromEventList : 104da8 >			  ## queue.c:768:29
  105730:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:768:29
  105734:    bf ea c8 fb       		call -0x870
                               	} <vPortYield : 104ec8 >			  ## queue.c:768:29
  105738:    bf ea b1 fa       	call -0xa9e <local_irq_enable : 104c9e >			  ## queue.c:789:17
  10573c:    40 21             	r0 = 0x1			  ## queue.c:789:17
  10573e:    02 83             	sp += 0xc
  105740:    5d 04             	{pc, r13-r4} = [sp++]			  ## queue.c:855:1


prvCopyDataFromQueue:
  105742:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1587:0
  105744:    d0 ec 00 24       	r2 = [r0+0x40]			  ## queue.c:1588:18
  105748:    02 4c             	if (r2 == 0) goto 0x18 <prvCopyDataFromQueue+0x20 : 105762 >			  ## queue.c:1588:18
  10574a:    03 63             	r3 = [r0+0xc] 			  ## queue.c:1589:31
  10574c:    23 18             	r3 += r2			  ## queue.c:1589:31
  10574e:    83 63             	[r0+0xc] = r3			  ## queue.c:1589:31
  105750:    04 61             	r4 = [r0+0x4] 			  ## queue.c:1590:47
  105752:    13 e9 00 44       	if (r3 >= r4) {			  ## queue.c:1590:47
  105756:    03 60             		r3 = [r0+0x0] 			  ## queue.c:1591:46
  105758:    83 63             		[r0+0xc] = r3
                               	}			  ## queue.c:1591:35
  10575a:    10 16             	r0 = r1			  ## queue.c:1595:16
  10575c:    31 16             	r1 = r3			  ## queue.c:1595:16
  10575e:    bf ea ef f8       	call -0xe22 <memmove : 104940 >			  ## queue.c:1595:16
  105762:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1597:1


prvIsQueueEmpty:
  105764:    10 04             	[--sp] = rets			  ## queue.c:1695:0
  105766:    01 16             	r1 = r0			  ## queue.c:1695:0
  105768:    bf ea 92 fa       	call -0xadc <local_irq_disable : 104c90 >			  ## queue.c:1698:5
  10576c:    20 00             	csync			  ## queue.c:1698:5
  10576e:    10 6e             	r0 = [r1+0x38] 			  ## queue.c:1700:22
  105770:    42 21             	r2 = 0x1			  ## queue.c:1700:40
  105772:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:1700:40
  105776:    42 20             		r2 = 0x0
                               	}			  ## queue.c:1700:40
  105778:    bf ea 91 fa       	call -0xade <local_irq_enable : 104c9e >			  ## queue.c:1706:5
  10577c:    20 16             	r0 = r2			  ## queue.c:1708:5
  10577e:    00 04             	pc = [sp++]			  ## queue.c:1708:5


xQueueGenericReceive:
  105780:    7f 04             	[--sp] = {rets, r15-r4}			  ## queue.c:1125:0
  105782:    e2 9d             	sp += -0xc			  ## queue.c:1125:0
  105784:    3b d6             	r11 = r3  #			  ## queue.c:1125:0
  105786:    82 22             		 [sp+8] = r2			  ## queue.c:1125:0
  105788:    1a 16             	r10 = r1			  ## queue.c:1125:0
  10578a:    04 16             	r4 = r0			  ## queue.c:1125:0
  10578c:    c5 ff e8 bc 02 00 	r5 = 0x2bce8 <mask_log_e : 2bce8 >			  ## queue.c:1125:0
  105792:    c9 ff 21 6b 10 00 	r9 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## queue.c:1125:0
  105798:    c7 ff 86 6b 10 00 	r7 = 0x106b86 <$data.__1+0x78 : 106b86 >			  ## queue.c:1125:0
  10579e:    84 46             	if (r4 != 0) goto 0xc <xQueueGenericReceive+0x2C : 1057ac >			  ## queue.c:1125:0
  1057a0:    42 f0 6b 04       	r2 = 0x46b  # <ROM_RAM_SIZE+0x14A : 46a >			  ## FreeRTOSConfig.h:181:5
  1057a4:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  1057a6:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  1057a8:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  1057aa:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1057ac:    06 e1 40 40       	r6 = r4 + 0x40
  1057b0:    8a f8 08 00       	if (r10 != 0x0) goto 0x10 <xQueueGenericReceive+0x44 : 1057c4 >
  1057b4:    60 60             	r0 = [r6+0x0] 			  ## queue.c:1132:5
  1057b6:    00 46             	if (r0 == 0) goto 0xc <xQueueGenericReceive+0x44 : 1057c4 >			  ## queue.c:1132:5
  1057b8:    42 f0 6c 04       	r2 = 0x46c  # <ROM_RAM_SIZE+0x14C : 46c >			  ## FreeRTOSConfig.h:181:5
  1057bc:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  1057be:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  1057c0:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  1057c2:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1057c4:    8d 80             	r5 = sp + 0
  1057c6:    0c e1 24 40       	r12 = r4 + 0x24
  1057ca:    c0 14             	r8 = 0
  1057cc:    cd ff bc bc 02 00 	r13 = 0x2bcbc <xNumOfOverflows : 2bcbc >
  1057d2:    ce ff b0 bc 02 00 	r14 = 0x2bcb0 <xTickCount : 2bcb0 >
  1057d8:    c7 14             	r15 = 0
  1057da:    54 97             	goto 0x16e <xQueueGenericReceive+0x1CA : 10594a >
  1057dc:    00 22             	r0 = [sp+8]			  ## queue.c:1210:21
  1057de:    00 f8 c6 00       	if (r0 == 0x0) goto 0x18c <xQueueGenericReceive+0x1EE : 10596e >
  1057e2:    8f f8 08 00       	if (r15 != 0x0) goto 0x10 <xQueueGenericReceive+0x76 : 1057f6 >
  1057e6:    d0 ec d0 00       	r0 = [r13+0x0]			  ## tasks.c:2896:33
  1057ea:    80 20             	[sp] = r0			  ## tasks.c:2896:31
  1057ec:    d0 ec e0 00       	r0 = [r14+0x0]			  ## tasks.c:2897:34
  1057f0:    4f f0 01 00       	r15 = 0x1  # <TLB_BEGIN : 0 >			  ## tasks.c:2897:34
  1057f4:    d0 61             		 [r5+0x4] = r0			  ## tasks.c:2897:32
  1057f6:    bf ea 52 fa       	call -0xb5c <local_irq_enable : 104c9e >			  ## queue.c:1227:9
  1057fa:    bf ea a5 fc       	call -0x6b6 <vTaskSuspendAll : 105148 >			  ## queue.c:1232:9
  1057fe:    bf ea 47 fa       	call -0xb72 <local_irq_disable : 104c90 >			  ## queue.c:1233:9
  105802:    20 00             	csync			  ## queue.c:1233:9
  105804:    68 44             	r0 = b[r6+0x4] (u)			  ## queue.c:1233:9
  105806:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:1233:9
  10580a:    52 ee 64 80       		b[r6+0x4] = r8
                               	}			  ## queue.c:1233:9
  10580e:    68 45             	r0 = b[r6+0x5] (u)			  ## queue.c:1233:9
  105810:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:1233:9
  105814:    52 ee 65 80       		b[r6+0x5] = r8
                               	}			  ## queue.c:1233:9
  105818:    bf ea 41 fa       	call -0xb7e <local_irq_enable : 104c9e >			  ## queue.c:1233:9
  10581c:    88 80             	r0 = sp + 0			  ## queue.c:1233:9
  10581e:    89 88             	r1 = sp + 8
  105820:    bf ea b7 fc       	call -0x692 <xTaskCheckForTimeOut : 105192 >			  ## queue.c:1236:13
  105824:    00 4a             	if (r0 == 0) goto 0x14 <xQueueGenericReceive+0xBA : 10583a >
  105826:    40 16             	r0 = r4			  ## queue.c:1267:13
  105828:    bf ea aa fd       	call -0x4ac <prvUnlockQueue : 105380 >			  ## queue.c:1267:13
  10582c:    bf ea 69 fe       	call -0x32e <xTaskResumeAll : 105502 >			  ## queue.c:1268:20
  105830:    40 16             	r0 = r4			  ## queue.c:1270:17
  105832:    41 98             	call -0xd0 <prvIsQueueEmpty : 105764 >			  ## queue.c:1270:17
  105834:    00 f8 89 00       	if (r0 == 0x0) goto 0x112 <xQueueGenericReceive+0x1CA : 10594a >			  ## queue.c:1270:17
  105838:    44 9c             	goto 0x138 <xQueueGenericReceive+0x1F2 : 105972 >			  ## queue.c:1270:17
  10583a:    40 16             	r0 = r4			  ## queue.c:1237:17
  10583c:    41 93             	call -0xda <prvIsQueueEmpty : 105764 >			  ## queue.c:1237:17
  10583e:    10 5f             	if (r0 == 0) goto 0x7e <xQueueGenericReceive+0x13E : 1058be >			  ## queue.c:1237:17
  105840:    40 60             	r0 = [r4+0x0] 			  ## queue.c:1242:34
  105842:    b0 57             	if (r0 != 0) goto 0xee <xQueueGenericReceive+0x1B2 : 105932 >			  ## queue.c:1242:34
  105844:    d0 ec 44 90       	r9 = [r4+0x4]			  ## queue.c:1245:68
  105848:    bf ea 22 fa       	call -0xbbc <local_irq_disable : 104c90 >			  ## tasks.c:3542:5
  10584c:    20 00             	csync			  ## tasks.c:3542:5
  10584e:    09 f8 6e 00       	if (r9 == 0x0) goto 0xdc <xQueueGenericReceive+0x1AE : 10592e >			  ## tasks.c:3542:5
  105852:    d0 ec 9c 23       	r2 = [r9+0x3c]			  ## tasks.c:3551:20
  105856:    bf ea 1b fa       	call -0xbca <local_irq_disable : 104c90 >			  ## tasks.c:3551:33
  10585a:    20 00             	csync			  ## tasks.c:3551:33
  10585c:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:3551:33
  105862:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:3551:33
  105864:    bf ea 1b fa       	call -0xbca <local_irq_enable : 104c9e >			  ## tasks.c:3551:33
  105868:    30 6f             	r0 = [r3+0x3c] 			  ## tasks.c:3551:47
  10586a:    00 e9 60 20       	if (r2 >= r0) goto 0xc0 <xQueueGenericReceive+0x1AE : 10592e >			  ## tasks.c:3551:47
  10586e:    d0 ec 98 02       	r0 = [r9+0x28]			  ## tasks.c:3555:18
  105872:    c3 ff 94 bc 02 00 	r3 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:3555:18
  105878:    80 fd 0b 00       	ifs (r0 < 0x0) goto 0x16 <xQueueGenericReceive+0x112 : 105892 >			  ## tasks.c:3555:18
  10587c:    bf ea 08 fa       	call -0xbf0 <local_irq_disable : 104c90 >			  ## tasks.c:3556:17
  105880:    20 00             	csync			  ## tasks.c:3556:17
  105882:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3556:17
  105884:    bf ea 0b fa       	call -0xbea <local_irq_enable : 104c9e >			  ## tasks.c:3556:17
  105888:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:3556:17
  10588a:    a0 e0 08 00       	r0 = 0x8 - r0			  ## tasks.c:3556:17
  10588e:    d0 ec 99 02       	[r9+0x28] = r0			  ## tasks.c:3556:17
  105892:    d0 ec 9c 03       	r0 = [r9+0x3c]			  ## tasks.c:3563:17
  105896:    d0 ec 94 12       	r1 = [r9+0x24]			  ## tasks.c:3563:17
  10589a:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:3563:17
  10589e:    c2 ff f4 bc 02 00 	r2 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:3563:17
  1058a4:    20 18             	r0 += r2			  ## tasks.c:3563:17
  1058a6:    00 e8 10 10       	if (r1 == r0) goto 0x20 <xQueueGenericReceive+0x14A : 1058ca >			  ## tasks.c:3563:17
  1058aa:    bf ea f1 f9       	call -0xc1e <local_irq_disable : 104c90 >			  ## tasks.c:3575:37
  1058ae:    20 00             	csync			  ## tasks.c:3575:37
  1058b0:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3575:37
  1058b2:    bf ea f4 f9       	call -0xc18 <local_irq_enable : 104c9e >			  ## tasks.c:3575:37
  1058b6:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:3575:51
  1058b8:    d0 ec 9d 03       	[r9+0x3c] = r0			  ## tasks.c:3575:35
  1058bc:    14 98             	goto 0x70 <xQueueGenericReceive+0x1AE : 10592e >			  ## tasks.c:3575:35
  1058be:    40 16             	r0 = r4			  ## queue.c:1263:17
  1058c0:    bf ea 5e fd       	call -0x544 <prvUnlockQueue : 105380 >			  ## queue.c:1263:17
  1058c4:    bf ea 1d fe       	call -0x3c6 <xTaskResumeAll : 105502 >			  ## queue.c:1264:24
  1058c8:    24 80             	goto 0x80 <xQueueGenericReceive+0x1CA : 10594a >			  ## queue.c:1264:24
  1058ca:    b7 16             	r7 = r11
  1058cc:    0b e1 14 90       	r11 = r9 + 0x14			  ## tasks.c:3563:17
  1058d0:    b0 16             	r0 = r11			  ## tasks.c:3564:21
  1058d2:    bf ea 38 fa       	call -0xb90 <uxListRemove : 104d46 >			  ## tasks.c:3564:21
  1058d6:    80 50             	if (r0 != 0) goto 0x20 <xQueueGenericReceive+0x178 : 1058f8 >			  ## tasks.c:3564:21
  1058d8:    d0 ec 9c 03       	r0 = [r9+0x3c]			  ## tasks.c:3565:21
  1058dc:    e1 e1 14 00       	r1 = r0 * 0x14			  ## tasks.c:3565:21
  1058e0:    c2 ff f4 bc 02 00 	r2 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:3565:21
  1058e6:    d8 ec 12 12       	r1 = [r1+r2]			  ## tasks.c:3565:21
  1058ea:    31 e8 00 40       	if (r1 == 0x0) {			  ## tasks.c:3565:21
  1058ee:    c1 ff a0 bc 02 00 		r1 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:3565:21
  1058f4:    66 e8 03 10       		[r1+0x0] &= ~(1 << r0)
                               	}			  ## tasks.c:3565:21
  1058f8:    bf ea ca f9       	call -0xc6c <local_irq_disable : 104c90 >			  ## tasks.c:3571:37
  1058fc:    20 00             	csync			  ## tasks.c:3571:37
  1058fe:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:3571:37
  105904:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:3571:37
  105906:    bf ea ca f9       	call -0xc6c <local_irq_enable : 104c9e >			  ## tasks.c:3571:37
  10590a:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:3571:51
  10590c:    d0 ec 9d 03       	[r9+0x3c] = r0			  ## tasks.c:3571:35
  105910:    c1 ff a0 bc 02 00 	r1 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:3572:17
  105916:    66 e8 00 10       	[r1+0x0] |= 1 << r0			  ## tasks.c:3572:17
  10591a:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:3572:17
  10591e:    c1 ff f4 bc 02 00 	r1 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:3572:17
  105924:    10 18             	r0 += r1			  ## tasks.c:3572:17
  105926:    b1 16             	r1 = r11			  ## tasks.c:3572:17
  105928:    bf ea 22 fa       	call -0xbbc <vListInsertEnd : 104d70 >			  ## tasks.c:3572:17
  10592c:    7b 16             	r11 = r7
  10592e:    bf ea b6 f9       	call -0xc94 <local_irq_enable : 104c9e >			  ## tasks.c:3585:5
  105932:    c0 d6             	r0 = r12  #			  ## queue.c:1254:17
  105934:    01 22             		 r1 = [sp+8]			  ## queue.c:1254:75
  105936:    bf ea 00 fd       	call -0x600 <vTaskPlaceOnEventList : 10533a >			  ## queue.c:1254:17
  10593a:    40 16             	r0 = r4			  ## queue.c:1255:17
  10593c:    bf ea 20 fd       	call -0x5c0 <prvUnlockQueue : 105380 >			  ## queue.c:1255:17
  105940:    bf ea df fd       	call -0x442 <xTaskResumeAll : 105502 >			  ## queue.c:1256:21
  105944:    80 42             	if (r0 != 0) goto 0x4 <xQueueGenericReceive+0x1CA : 10594a >			  ## queue.c:1256:21
  105946:    bf ea bf fa       	call -0xa82 <vPortYield : 104ec8 >			  ## queue.c:1257:21
  10594a:    bf ea a1 f9       	call -0xcbe <local_irq_disable : 104c90 >			  ## queue.c:1146:9
  10594e:    20 00             	csync			  ## queue.c:1146:9
  105950:    47 6e             	r7 = [r4+0x38] 			  ## queue.c:1148:60
  105952:    07 f8 43 01       	if (r7 == 0x0) goto -0x17a <xQueueGenericReceive+0x5C : 1057dc >			  ## queue.c:1152:17
  105956:    40 d6             	r0 = r4  #			  ## queue.c:1157:17
  105958:    45 63             		 r5 = [r4+0xc] 			  ## queue.c:1155:53
  10595a:    a1 16             	r1 = r10			  ## queue.c:1157:17
  10595c:    bf ea f1 fe       	call -0x21e <prvCopyDataFromQueue : 105742 >			  ## queue.c:1157:17
  105960:    0b f8 09 00       	if (r11 == 0x0) goto 0x12 <xQueueGenericReceive+0x1F6 : 105976 >			  ## queue.c:1157:17
  105964:    c5 63             	[r4+0xc] = r5			  ## queue.c:1191:43
  105966:    40 69             	r0 = [r4+0x24] 			  ## queue.c:1195:25
  105968:    10 4e             	if (r0 == 0) goto 0x5c <xQueueGenericReceive+0x246 : 1059c6 >			  ## queue.c:1195:25
  10596a:    c0 16             	r0 = r12			  ## queue.c:1196:29
  10596c:    14 86             	goto 0x4c <xQueueGenericReceive+0x23A : 1059ba >			  ## queue.c:1196:29
  10596e:    bf ea 96 f9       	call -0xcd4 <local_irq_enable : 104c9e >			  ## queue.c:1213:21
  105972:    40 20             	r0 = 0x0
  105974:    14 8b             	goto 0x56 <xQueueGenericReceive+0x24C : 1059cc >
  105976:    30 e1 ff 7f       	r0 = r7 + -0x1			  ## queue.c:1163:68
  10597a:    c0 6e             	[r4+0x38] = r0			  ## queue.c:1163:48
  10597c:    40 60             	r0 = [r4+0x0] 			  ## queue.c:1167:38
  10597e:    80 59             	if (r0 != 0) goto 0x32 <xQueueGenericReceive+0x232 : 1059b2 >			  ## queue.c:1167:38
  105980:    bf ea 86 f9       	call -0xcf4 <local_irq_disable : 104c90 >			  ## tasks.c:3967:9
  105984:    20 00             	csync			  ## tasks.c:3967:9
  105986:    c3 ff 94 bc 02 00 	r3 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:3967:9
  10598c:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3967:9
  10598e:    bf ea 86 f9       	call -0xcf4 <local_irq_enable : 104c9e >			  ## tasks.c:3967:9
  105992:    02 48             	if (r2 == 0) goto 0x10 <xQueueGenericReceive+0x224 : 1059a4 >			  ## tasks.c:3967:9
  105994:    bf ea 7c f9       	call -0xd08 <local_irq_disable : 104c90 >			  ## tasks.c:3968:10
  105998:    20 00             	csync			  ## tasks.c:3968:10
  10599a:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3968:10
  10599c:    bf ea 7f f9       	call -0xd02 <local_irq_enable : 104c9e >			  ## tasks.c:3968:10
  1059a0:    d4 eb 01 20       	[r2+0x50] += 0x1			  ## tasks.c:3968:38
  1059a4:    bf ea 74 f9       	call -0xd18 <local_irq_disable : 104c90 >			  ## tasks.c:3971:12
  1059a8:    20 00             	csync			  ## tasks.c:3971:12
  1059aa:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3971:12
  1059ac:    bf ea 77 f9       	call -0xd12 <local_irq_enable : 104c9e >			  ## tasks.c:3971:12
  1059b0:    c2 61             	[r4+0x4] = r2			  ## queue.c:1170:52
  1059b2:    d0 ec 42 01       	r0 = [++r4=0x10]			  ## queue.c:1177:25
  1059b6:    00 47             	if (r0 == 0) goto 0xe <xQueueGenericReceive+0x246 : 1059c6 >
  1059b8:    40 16             	r0 = r4			  ## queue.c:1178:29
  1059ba:    bf ea f5 f9       	call -0xc16 <xTaskRemoveFromEventList : 104da8 >
  1059be:    b0 e8 00 00       	if (r0 != 0x0) {
  1059c2:    bf ea 81 fa       		call -0xafe
                               	} <vPortYield : 104ec8 >
  1059c6:    bf ea 6a f9       	call -0xd2c <local_irq_enable : 104c9e >			  ## queue.c:1207:17
  1059ca:    40 21             	r0 = 0x1			  ## queue.c:1207:17
  1059cc:    02 83             	sp += 0xc
  1059ce:    5f 04             	{pc, r15-r4} = [sp++]			  ## queue.c:1278:1


xQueueGenericSendFromISR:
  1059d0:    7b 04             	[--sp] = {rets, r11-r4}			  ## queue.c:859:0
  1059d2:    36 16             	r6 = r3			  ## queue.c:859:0
  1059d4:    28 16             	r8 = r2			  ## queue.c:859:0
  1059d6:    17 16             	r7 = r1			  ## queue.c:859:0
  1059d8:    05 16             	r5 = r0			  ## queue.c:859:0
  1059da:    c4 ff e8 bc 02 00 	r4 = 0x2bce8 <mask_log_e : 2bce8 >			  ## queue.c:859:0
  1059e0:    c9 ff 21 6b 10 00 	r9 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## queue.c:859:0
  1059e6:    cb ff bf 6b 10 00 	r11 = 0x106bbf <$data.__1+0xB0 : 106bbe >			  ## queue.c:859:0
  1059ec:    85 46             	if (r5 != 0) goto 0xc <xQueueGenericSendFromISR+0x2A : 1059fa >			  ## queue.c:859:0
  1059ee:    42 f0 60 03       	r2 = 0x360  # <ROM_RAM_SIZE+0x40 : 360 >			  ## FreeRTOSConfig.h:181:5
  1059f2:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  1059f4:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  1059f6:    b1 16             	r1 = r11			  ## FreeRTOSConfig.h:181:5
  1059f8:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1059fa:    0a e1 40 50       	r10 = r5 + 0x40
  1059fe:    87 49             	if (r7 != 0) goto 0x12 <xQueueGenericSendFromISR+0x42 : 105a12 >
  105a00:    d0 ec a0 00       	r0 = [r10+0x0]			  ## queue.c:865:5
  105a04:    00 46             	if (r0 == 0) goto 0xc <xQueueGenericSendFromISR+0x42 : 105a12 >			  ## queue.c:865:5
  105a06:    42 f0 61 03       	r2 = 0x361  # <ROM_RAM_SIZE+0x40 : 360 >			  ## FreeRTOSConfig.h:181:5
  105a0a:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  105a0c:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  105a0e:    b1 16             	r1 = r11			  ## FreeRTOSConfig.h:181:5
  105a10:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105a12:    86 f8 09 04       	if (r6 != 0x2) goto 0x12 <xQueueGenericSendFromISR+0x58 : 105a28 >
  105a16:    50 6f             	r0 = [r5+0x3c] 			  ## queue.c:866:5
  105a18:    00 f8 06 02       	if (r0 == 0x1) goto 0xc <xQueueGenericSendFromISR+0x58 : 105a28 >			  ## queue.c:866:5
  105a1c:    42 f0 62 03       	r2 = 0x362  # <ROM_RAM_SIZE+0x42 : 362 >			  ## FreeRTOSConfig.h:181:5
  105a20:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  105a22:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  105a24:    b1 16             	r1 = r11			  ## FreeRTOSConfig.h:181:5
  105a26:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105a28:    bf ea 32 f9       	call -0xd9c <local_irq_disable : 104c90 >			  ## queue.c:889:5
  105a2c:    20 00             	csync			  ## queue.c:889:5
  105a2e:    50 6e             	r0 = [r5+0x38] 			  ## queue.c:893:23
  105a30:    06 f8 04 04       	if (r6 == 0x2) goto 0x8 <xQueueGenericSendFromISR+0x6C : 105a3c >			  ## queue.c:893:23
  105a34:    51 6f             	r1 = [r5+0x3c] 			  ## queue.c:893:52
  105a36:    44 20             	r4 = 0x0			  ## queue.c:893:52
  105a38:    01 e9 1b 00       	if (r0 >= r1) goto 0x36 <xQueueGenericSendFromISR+0xA2 : 105a72 >			  ## queue.c:893:52
  105a3c:    50 ee a5 40       	r4 = b[r10+0x5] (u)			  ## queue.c:894:45
  105a40:    50 16             	r0 = r5			  ## queue.c:903:20
  105a42:    71 16             	r1 = r7			  ## queue.c:903:20
  105a44:    62 16             	r2 = r6			  ## queue.c:903:20
  105a46:    bf ea ed fa       	call -0xa26 <prvCopyDataToQueue : 105024 >			  ## queue.c:903:20
  105a4a:    14 f8 05 fe       	if (r4 == 0xff) goto 0xa <xQueueGenericSendFromISR+0x88 : 105a58 >			  ## queue.c:903:20
  105a4e:    48 81             	r0 = r4 + 0x1			  ## queue.c:967:53
  105a50:    52 ee a5 00       	b[r10+0x5] = r0			  ## queue.c:967:34
  105a54:    44 21             	r4 = 0x1			  ## queue.c:967:34
  105a56:    04 8d             	goto 0x1a <xQueueGenericSendFromISR+0xA2 : 105a72 >			  ## queue.c:967:34
  105a58:    d0 ec 56 02       	r0 = [++r5=0x24]			  ## queue.c:945:25
  105a5c:    44 21             	r4 = 0x1
  105a5e:    00 49             	if (r0 == 0) goto 0x12 <xQueueGenericSendFromISR+0xA2 : 105a72 >
  105a60:    50 16             	r0 = r5			  ## queue.c:947:29
  105a62:    bf ea a1 f9       	call -0xcbe <xTaskRemoveFromEventList : 104da8 >			  ## queue.c:947:29
  105a66:    08 f8 04 00       	if (r8 == 0x0) goto 0x8 <xQueueGenericSendFromISR+0xA2 : 105a72 >			  ## queue.c:947:29
  105a6a:    b0 e8 00 00       	if (r0 != 0x0) {
  105a6e:    d0 ec 81 40       		[r8+0x0] = r4
                               	}			  ## queue.c:951:60
  105a72:    bf ea 14 f9       	call -0xdd8 <local_irq_enable : 104c9e >			  ## queue.c:978:5
  105a76:    40 16             	r0 = r4			  ## queue.c:980:5
  105a78:    5b 04             	{pc, r11-r4} = [sp++]			  ## queue.c:980:5


xQueueReceiveFromISR:
  105a7a:    7b 04             	[--sp] = {rets, r11-r4}			  ## queue.c:1282:0
  105a7c:    28 16             	r8 = r2			  ## queue.c:1282:0
  105a7e:    1b 16             	r11 = r1			  ## queue.c:1282:0
  105a80:    05 16             	r5 = r0			  ## queue.c:1282:0
  105a82:    c4 ff e8 bc 02 00 	r4 = 0x2bce8 <mask_log_e : 2bce8 >			  ## queue.c:1282:0
  105a88:    c9 ff 21 6b 10 00 	r9 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## queue.c:1282:0
  105a8e:    ca ff ea 6b 10 00 	r10 = 0x106bea <$data.__1+0xDC : 106bea >			  ## queue.c:1282:0
  105a94:    85 46             	if (r5 != 0) goto 0xc <xQueueReceiveFromISR+0x28 : 105aa2 >			  ## queue.c:1282:0
  105a96:    42 f0 07 05       	r2 = 0x507  # <ROM_RAM_SIZE+0x1E6 : 506 >			  ## FreeRTOSConfig.h:181:5
  105a9a:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  105a9c:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  105a9e:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  105aa0:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105aa2:    07 e1 40 50       	r7 = r5 + 0x40
  105aa6:    8b f8 08 00       	if (r11 != 0x0) goto 0x10 <xQueueReceiveFromISR+0x40 : 105aba >
  105aaa:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1288:5
  105aac:    00 46             	if (r0 == 0) goto 0xc <xQueueReceiveFromISR+0x40 : 105aba >			  ## queue.c:1288:5
  105aae:    42 f0 08 05       	r2 = 0x508  # <ROM_RAM_SIZE+0x1E8 : 508 >			  ## FreeRTOSConfig.h:181:5
  105ab2:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  105ab4:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  105ab6:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  105ab8:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105aba:    56 6e             	r6 = [r5+0x38] 			  ## queue.c:1308:56
  105abc:    06 4e             	if (r6 == 0) goto 0x1c <xQueueReceiveFromISR+0x60 : 105ada >
  105abe:    50 d6             	r0 = r5  #			  ## queue.c:1316:13
  105ac0:    7c 44             		 r4 = b[r7+0x4] (u)			  ## queue.c:1312:45
  105ac2:    b1 16             	r1 = r11			  ## queue.c:1316:13
  105ac4:    bf ea 3d fe       	call -0x386 <prvCopyDataFromQueue : 105742 >			  ## queue.c:1316:13
  105ac8:    30 e1 ff 6f       	r0 = r6 + -0x1			  ## queue.c:1317:60
  105acc:    d0 6e             	[r5+0x38] = r0			  ## queue.c:1317:40
  105ace:    14 f8 06 fe       	if (r4 == 0xff) goto 0xc <xQueueReceiveFromISR+0x64 : 105ade >			  ## queue.c:1317:40
  105ad2:    48 81             	r0 = r4 + 0x1			  ## queue.c:1342:53
  105ad4:    f8 44             	b[r7+0x4] = r0			  ## queue.c:1342:34
  105ad6:    44 21             	r4 = 0x1			  ## queue.c:1342:34
  105ad8:    04 8f             	goto 0x1e <xQueueReceiveFromISR+0x7E : 105af8 >			  ## queue.c:1342:34
  105ada:    44 20             	r4 = 0x0
  105adc:    04 8d             	goto 0x1a <xQueueReceiveFromISR+0x7E : 105af8 >
  105ade:    d0 ec 52 01       	r0 = [++r5=0x10]			  ## queue.c:1324:21
  105ae2:    44 21             	r4 = 0x1
  105ae4:    00 49             	if (r0 == 0) goto 0x12 <xQueueReceiveFromISR+0x7E : 105af8 >
  105ae6:    50 16             	r0 = r5			  ## queue.c:1325:25
  105ae8:    bf ea 5e f9       	call -0xd44 <xTaskRemoveFromEventList : 104da8 >			  ## queue.c:1325:25
  105aec:    08 f8 04 00       	if (r8 == 0x0) goto 0x8 <xQueueReceiveFromISR+0x7E : 105af8 >			  ## queue.c:1325:25
  105af0:    b0 e8 00 00       	if (r0 != 0x0) {
  105af4:    d0 ec 81 40       		[r8+0x0] = r4
                               	}			  ## queue.c:1329:56
  105af8:    40 16             	r0 = r4			  ## queue.c:1353:5
  105afa:    5b 04             	{pc, r11-r4} = [sp++]			  ## queue.c:1353:5


uxQueueMessagesWaiting:
  105afc:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1409:0
  105afe:    04 16             	r4 = r0			  ## queue.c:1409:0
  105b00:    84 4d             	if (r4 != 0) goto 0x1a <uxQueueMessagesWaiting+0x20 : 105b1c >			  ## queue.c:1409:0
  105b02:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105b08:    42 f0 84 05       	r2 = 0x584  # <ROM_RAM_SIZE+0x264 : 584 >			  ## FreeRTOSConfig.h:181:5
  105b0c:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  105b0e:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  105b14:    c1 ff ff 6b 10 00 	r1 = 0x106bff <$data.__1+0xF0 : 106bfe >			  ## FreeRTOSConfig.h:181:5
  105b1a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105b1c:    bf ea b8 f8       	call -0xe90 <local_irq_disable : 104c90 >			  ## queue.c:1414:5
  105b20:    20 00             	csync			  ## queue.c:1414:5
  105b22:    42 6e             	r2 = [r4+0x38] 			  ## queue.c:1416:42
  105b24:    bf ea bb f8       	call -0xe8a <local_irq_enable : 104c9e >			  ## queue.c:1418:5
  105b28:    20 16             	r0 = r2			  ## queue.c:1420:5
  105b2a:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1420:5


uxQueueSpacesAvailable:
  105b2c:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1425:0
  105b2e:    04 16             	r4 = r0			  ## queue.c:1425:0
  105b30:    84 4d             	if (r4 != 0) goto 0x1a <uxQueueSpacesAvailable+0x20 : 105b4c >			  ## queue.c:1425:0
  105b32:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105b38:    42 f0 96 05       	r2 = 0x596  # <ROM_RAM_SIZE+0x276 : 596 >			  ## FreeRTOSConfig.h:181:5
  105b3c:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  105b3e:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  105b44:    c1 ff 16 6c 10 00 	r1 = 0x106c16 <$data.__1+0x108 : 106c16 >			  ## FreeRTOSConfig.h:181:5
  105b4a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105b4c:    bf ea a0 f8       	call -0xec0 <local_irq_disable : 104c90 >			  ## queue.c:1432:5
  105b50:    20 00             	csync			  ## queue.c:1432:5
  105b52:    40 6f             	r0 = [r4+0x3c] 			  ## queue.c:1434:29
  105b54:    41 6e             	r1 = [r4+0x38] 			  ## queue.c:1434:49
  105b56:    0a 1e             	r2 = r0 - r1			  ## queue.c:1434:38
  105b58:    bf ea a1 f8       	call -0xebe <local_irq_enable : 104c9e >			  ## queue.c:1436:5
  105b5c:    20 16             	r0 = r2			  ## queue.c:1438:5
  105b5e:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1438:5


uxQueueMessagesWaitingFromISR:
  105b60:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1443:0
  105b62:    04 16             	r4 = r0			  ## queue.c:1443:0
  105b64:    84 4d             	if (r4 != 0) goto 0x1a <uxQueueMessagesWaitingFromISR+0x20 : 105b80 >			  ## queue.c:1443:0
  105b66:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105b6c:    42 f0 a6 05       	r2 = 0x5a6  # <ROM_RAM_SIZE+0x286 : 5a6 >			  ## FreeRTOSConfig.h:181:5
  105b70:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  105b72:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  105b78:    c1 ff 2d 6c 10 00 	r1 = 0x106c2d <$data.__1+0x11E : 106c2c >			  ## FreeRTOSConfig.h:181:5
  105b7e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105b80:    40 6e             	r0 = [r4+0x38] 			  ## queue.c:1448:38
  105b82:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1450:5


vQueueDelete:
  105b84:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1455:0
  105b86:    04 16             	r4 = r0			  ## queue.c:1455:0
  105b88:    84 4d             	if (r4 != 0) goto 0x1a <vQueueDelete+0x20 : 105ba4 >			  ## queue.c:1455:0
  105b8a:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105b90:    42 f0 b2 05       	r2 = 0x5b2  # <ROM_RAM_SIZE+0x292 : 5b2 >			  ## FreeRTOSConfig.h:181:5
  105b94:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  105b96:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  105b9c:    c1 ff 4b 6c 10 00 	r1 = 0x106c4b <$data.__1+0x13C : 106c4a >			  ## FreeRTOSConfig.h:181:5
  105ba2:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105ba4:    40 20             	r0 = 0x0			  ## queue.c:1461:26
  105ba6:    52 ee 4c 04       	b[r4+0x4c] = r0			  ## queue.c:1461:26
  105baa:    50 ee 46 04       	r0 = b[r4+0x46] (u)			  ## queue.c:1479:22
  105bae:    80 46             	if (r0 != 0) goto 0xc <vQueueDelete+0x38 : 105bbc >			  ## queue.c:1479:22
  105bb0:    c0 ff cc bc 02 00 	r0 = 0x2bccc <mask_free : 2bccc >			  ## mask_export.c:23:5
  105bb6:    40 d6             	r0 = r4  #			  ## mask_export.c:23:5
  105bb8:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:23:5
  105bba:    c1 00             	call r1			  ## mask_export.c:23:5
  105bbc:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1492:1


xTaskCreate:
  105bbe:    7c 04             	[--sp] = {rets, r12-r4}			  ## tasks.c:720:0
  105bc0:    c4 ff d4 bc 02 00 	r4 = 0x2bcd4 <mask_stack_malloc : 2bcd4 >			  ## mask_export.c:32:12
  105bc6:    39 d6             	r9 = r3  #			  ## mask_export.c:32:12
  105bc8:    44 60             		 r4 = [r4+0x0] 			  ## mask_export.c:32:12
  105bca:    2b 16             	r11 = r2
  105bcc:    15 16             	r5 = r1
  105bce:    08 16             	r8 = r0
  105bd0:    26 a2             	r6 = r2 << 0x2			  ## tasks.c:752:78
  105bd2:    60 16             	r0 = r6			  ## mask_export.c:32:12
  105bd4:    c4 00             	call r4			  ## mask_export.c:32:12
  105bd6:    07 16             	r7 = r0			  ## mask_export.c:32:12
  105bd8:    4a e0 ff ff       	r10 = -0x1 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEF0002 : fffffffffffffffe >
  105bdc:    07 f8 c6 00       	if (r7 == 0x0) goto 0x18c <xTaskCreate+0x1AE : 105d6c >
  105be0:    c0 ff d0 bc 02 00 	r0 = 0x2bcd0 <mask_malloc : 2bcd0 >			  ## mask_export.c:27:12
  105be6:    01 60             	r1 = [r0+0x0] 			  ## mask_export.c:27:12
  105be8:    50 3c             	r0 = 0x5c			  ## mask_export.c:27:12
  105bea:    c1 00             	call r1			  ## mask_export.c:27:12
  105bec:    04 16             	r4 = r0			  ## mask_export.c:27:12
  105bee:    34 41             	if (r4 == 0) goto 0xc2 <xTaskCreate+0xF4 : 105cb2 >			  ## tasks.c:758:17
  105bf0:    d4 e9 2c c0       	r12 = [sp+44]
  105bf4:    0a f1 10 40       	r10 = r4 + 0x10  #
  105bf8:    03 2a             		 r3 = [sp+40]
  105bfa:    d0 ec a1 73       	[r10+0x30] = r7			  ## tasks.c:760:35
  105bfe:    42 20             	r2 = 0x0			  ## tasks.c:760:35
  105c00:    01 e1 50 40       	r1 = r4 + 0x50			  ## tasks.c:760:35
  105c04:    76 d8             	r6 += r7  #			  ## tasks.c:760:35
  105c06:    9a 48             		 b[r1+0x8] = r2			  ## tasks.c:777:45
  105c08:    d0 ec 45 b0       	[r4+0x4] = r11			  ## tasks.c:830:30
  105c0c:    fe 3c             	r6 += -0x4			  ## tasks.c:831:42
  105c0e:    76 e1 03 60       	r6 = r6 & 0xFFFFFFFC			  ## tasks.c:832:79
  105c12:    02 fc 08 16       	if (r2 > 0xb) goto 0x10 <xTaskCreate+0x68 : 105c26 >
  105c16:    d8 ee 50 72       	r7 = b[r5+r2] (u)			  ## tasks.c:852:37
  105c1a:    c0 1c             	r0 = r4 + r2			  ## tasks.c:852:35
  105c1c:    8f 48             	b[r0+0x8] = r7			  ## tasks.c:852:35
  105c1e:    d8 ee 50 02       	r0 = b[r5+r2] (u)			  ## tasks.c:857:13
  105c22:    c2 21             	r2 += 0x1			  ## tasks.c:851:75
  105c24:    f0 56             	if (r0 != 0) goto -0x14 <xTaskCreate+0x54 : 105c12 >
  105c26:    45 20             	r5 = 0x0
  105c28:    52 ee a3 50       	b[r10+0x3] = r5			  ## tasks.c:865:57
  105c2c:    33 e9 07 00       	if (r3 >= 0x7) {
  105c30:    43 27             		r3 = 0x7
                               	}			  ## tasks.c:869:9
  105c32:    a0 f0 08 30       	r0 = 0x8 - r3  #			  ## tasks.c:891:5
  105c36:    c3 6f             		 [r4+0x3c] = r3			  ## tasks.c:875:26
  105c38:    d0 ec ad 33       	[r10+0x3c] = r3			  ## tasks.c:878:34
  105c3c:    95 60             	[r1+0x0] = r5			  ## tasks.c:879:33
  105c3e:    c5 69             	[r4+0x24] = r5			  ## list.c:114:25
  105c40:    c5 6e             	[r4+0x38] = r5			  ## list.c:114:25
  105c42:    c4 68             	[r4+0x20] = r4			  ## tasks.c:888:5
  105c44:    30 f1 b4 6f       	r0 = r6 + -0x4c  #			  ## tasks.c:888:5
  105c48:    c0 6a             		 [r4+0x28] = r0			  ## tasks.c:891:5
  105c4a:    c4 6d             	[r4+0x34] = r4			  ## tasks.c:892:5
  105c4c:    95 61             	[r1+0x4] = r5			  ## tasks.c:902:29
  105c4e:    9d 49             	b[r1+0x9] = r5			  ## tasks.c:947:34
  105c50:    d0 ec 0d 90       	[r0+0xc] = r9			  ## port.c:156:12
  105c54:    85 62             	[r0+0x8] = r5			  ## port.c:158:12
  105c56:    85 61             	[r0+0x4] = r5			  ## port.c:159:12
  105c58:    d0 ec 01 80       	[r0+0x0] = r8			  ## port.c:162:12
  105c5c:    c0 60             	[r4+0x0] = r0			  ## tasks.c:961:32
  105c5e:    bc e8 00 00       	if (r12 != 0x0) {
  105c62:    d0 ec c1 40       		[r12+0x0] = r4
                               	}			  ## tasks.c:968:24
  105c66:    bf ea 13 f8       	call -0xfda <local_irq_disable : 104c90 >			  ## tasks.c:979:5
  105c6a:    20 00             	csync			  ## tasks.c:979:5
  105c6c:    c3 ff 90 bc 02 00 	r3 = 0x2bc90 <uxCurrentNumberOfTasks : 2bc90 >			  ## tasks.c:979:5
  105c72:    c0 eb 01 30       	[r3+0x0] += 0x1			  ## tasks.c:981:31
  105c76:    bf ea 0b f8       	call -0xfea <local_irq_disable : 104c90 >			  ## tasks.c:982:13
  105c7a:    20 00             	csync			  ## tasks.c:982:13
  105c7c:    c6 ff 94 bc 02 00 	r6 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:982:13
  105c82:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:982:13
  105c84:    bf ea 0b f8       	call -0xfea <local_irq_enable : 104c9e >			  ## tasks.c:982:13
  105c88:    c5 ff f4 bc 02 00 	r5 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:982:13
  105c8e:    c7 ff 98 bc 02 00 	r7 = 0x2bc98 <xSchedulerRunning : 2bc98 >			  ## tasks.c:982:13
  105c94:    02 55             	if (r2 == 0) goto 0x2a <xTaskCreate+0x102 : 105cc0 >			  ## tasks.c:982:13
  105c96:    70 60             	r0 = [r7+0x0] 			  ## tasks.c:999:17
  105c98:    a0 43             	if (r0 != 0) goto 0x86 <xTaskCreate+0x162 : 105d20 >			  ## tasks.c:999:17
  105c9a:    bf ea f9 f7       	call -0x100e <local_irq_disable : 104c90 >			  ## tasks.c:1000:21
  105c9e:    20 00             	csync			  ## tasks.c:1000:21
  105ca0:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:1000:21
  105ca2:    bf ea fc f7       	call -0x1008 <local_irq_enable : 104c9e >			  ## tasks.c:1000:21
  105ca6:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1000:59
  105ca8:    21 6f             	r1 = [r2+0x3c] 			  ## tasks.c:1000:35
  105caa:    91 ec 00 00       	if (r1 <= r0) {			  ## tasks.c:1000:35
  105cae:    e4 60             		[r6+0x0] = r4
                               	}			  ## tasks.c:1001:43
  105cb0:    14 97             	goto 0x6e <xTaskCreate+0x162 : 105d20 >			  ## tasks.c:1001:43
  105cb2:    c0 ff d8 bc 02 00 	r0 = 0x2bcd8 <mask_stack_free : 2bcd8 >			  ## mask_export.c:36:5
  105cb8:    70 d6             	r0 = r7  #			  ## mask_export.c:36:5
  105cba:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:36:5
  105cbc:    c1 00             	call r1			  ## mask_export.c:36:5
  105cbe:    24 96             	goto 0xac <xTaskCreate+0x1AE : 105d6c >			  ## mask_export.c:36:5
  105cc0:    e4 60             	[r6+0x0] = r4			  ## tasks.c:985:35
  105cc2:    30 60             	r0 = [r3+0x0] 			  ## tasks.c:987:17
  105cc4:    80 f8 2c 02       	if (r0 != 0x1) goto 0x58 <xTaskCreate+0x162 : 105d20 >			  ## tasks.c:987:17
  105cc8:    42 20             	r2 = 0x0
  105cca:    04 84             	goto 0x8 <xTaskCreate+0x116 : 105cd4 >
  105ccc:    28 1d             	r0 = r2 + r5			  ## tasks.c:3200:9
  105cce:    bf ea 19 f9       	call -0xdce <vListInitialise : 104f04 >			  ## tasks.c:3200:9
  105cd2:    c2 34             	r2 += 0x14			  ## tasks.c:3199:5
  105cd4:    92 f8 fa 41       	if (r2 != 0xa0) goto -0xc <xTaskCreate+0x10E : 105ccc >
  105cd8:    c8 ff 94 bd 02 00 	r8 = 0x2bd94 <xDelayedTaskList1 : 2bd94 >			  ## tasks.c:3203:5
  105cde:    80 16             	r0 = r8			  ## tasks.c:3203:5
  105ce0:    bf ea 10 f9       	call -0xde0 <vListInitialise : 104f04 >			  ## tasks.c:3203:5
  105ce4:    c3 ff a8 bd 02 00 	r3 = 0x2bda8 <xDelayedTaskList2 : 2bda8 >			  ## tasks.c:3204:5
  105cea:    30 16             	r0 = r3			  ## tasks.c:3204:5
  105cec:    bf ea 0a f9       	call -0xdec <vListInitialise : 104f04 >			  ## tasks.c:3204:5
  105cf0:    c0 ff bc bd 02 00 	r0 = 0x2bdbc <xPendingReadyList : 2bdbc >			  ## tasks.c:3205:5
  105cf6:    bf ea 05 f9       	call -0xdf6 <vListInitialise : 104f04 >			  ## tasks.c:3205:5
  105cfa:    c0 ff d0 bd 02 00 	r0 = 0x2bdd0 <xTasksWaitingTermination : 2bdd0 >			  ## tasks.c:3209:9
  105d00:    bf ea 00 f9       	call -0xe00 <vListInitialise : 104f04 >			  ## tasks.c:3209:9
  105d04:    c0 ff e4 bd 02 00 	r0 = 0x2bde4 <xSuspendedTaskList : 2bde4 >			  ## tasks.c:3215:9
  105d0a:    bf ea fb f8       	call -0xe0a <vListInitialise : 104f04 >			  ## tasks.c:3215:9
  105d0e:    c0 ff f8 bd 02 00 	r0 = 0x2bdf8 <pxDelayedTaskList : 2bdf8 >			  ## tasks.c:3221:23
  105d14:    d0 ec 01 80       	[r0+0x0] = r8			  ## tasks.c:3221:23
  105d18:    c0 ff fc bd 02 00 	r0 = 0x2bdfc <pxOverflowDelayedTaskList : 2bdfc >			  ## tasks.c:3222:31
  105d1e:    83 60             	[r0+0x0] = r3			  ## tasks.c:3222:31
  105d20:    c0 ff 9c bc 02 00 	r0 = 0x2bc9c <uxTaskNumber : 2bc9c >			  ## tasks.c:1010:21
  105d26:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:1010:21
  105d28:    c1 21             	r1 += 0x1			  ## tasks.c:1010:21
  105d2a:    81 60             	[r0+0x0] = r1			  ## tasks.c:1010:21
  105d2c:    d0 ec a5 13       	[r10+0x34] = r1			  ## tasks.c:1015:35
  105d30:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1020:9
  105d32:    c1 ff a0 bc 02 00 	r1 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:1020:9
  105d38:    66 e8 00 10       	[r1+0x0] |= 1 << r0			  ## tasks.c:1020:9
  105d3c:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:1020:9
  105d40:    50 18             	r0 += r5			  ## tasks.c:1020:9
  105d42:    49 94             	r1 = r4 + 0x14			  ## tasks.c:1020:9
  105d44:    bf ea 14 f8       	call -0xfd8 <vListInsertEnd : 104d70 >			  ## tasks.c:1020:9
  105d48:    bf ea a9 f7       	call -0x10ae <local_irq_enable : 104c9e >			  ## tasks.c:1028:5
  105d4c:    4a f0 01 00       	r10 = 0x1  # <TLB_BEGIN : 0 >			  ## tasks.c:1028:5
  105d50:    70 60             		 r0 = [r7+0x0] 			  ## tasks.c:1032:9
  105d52:    00 4c             	if (r0 == 0) goto 0x18 <xTaskCreate+0x1AE : 105d6c >			  ## tasks.c:1032:9
  105d54:    bf ea 9c f7       	call -0x10c8 <local_irq_disable : 104c90 >			  ## tasks.c:1035:13
  105d58:    20 00             	csync			  ## tasks.c:1035:13
  105d5a:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:1035:13
  105d5c:    bf ea 9f f7       	call -0x10c2 <local_irq_enable : 104c9e >			  ## tasks.c:1035:13
  105d60:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1035:50
  105d62:    21 6f             	r1 = [r2+0x3c] 			  ## tasks.c:1035:27
  105d64:    00 e9 02 10       	if (r1 >= r0) goto 0x4 <xTaskCreate+0x1AE : 105d6c >			  ## tasks.c:1035:27
  105d68:    bf ea ae f8       	call -0xea4 <vPortYield : 104ec8 >			  ## tasks.c:1036:13
  105d6c:    a0 16             	r0 = r10			  ## tasks.c:787:5
  105d6e:    5c 04             	{pc, r12-r4} = [sp++]			  ## tasks.c:787:5


prvDeleteTCB:
  105d70:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:3431:0
  105d72:    04 16             	r4 = r0			  ## tasks.c:3431:0
  105d74:    50 ee 48 05       	r0 = b[r4+0x58] (u)			  ## tasks.c:3456:20
  105d78:    00 f8 1e 04       	if (r0 == 0x2) goto 0x3c <prvDeleteTCB+0x48 : 105db8 >			  ## tasks.c:3456:20
  105d7c:    c5 ff cc bc 02 00 	r5 = 0x2bccc <mask_free : 2bccc >
  105d82:    00 f8 08 02       	if (r0 == 0x1) goto 0x10 <prvDeleteTCB+0x26 : 105d96 >
  105d86:    80 4b             	if (r0 != 0) goto 0x16 <prvDeleteTCB+0x2E : 105d9e >
  105d88:    c0 ff d8 bc 02 00 	r0 = 0x2bcd8 <mask_stack_free : 2bcd8 >			  ## mask_export.c:36:5
  105d8e:    01 60             	r1 = [r0+0x0] 			  ## mask_export.c:36:5
  105d90:    d0 ec 40 04       	r0 = [r4+0x40]			  ## tasks.c:3459:35
  105d94:    c1 00             	call r1			  ## mask_export.c:36:5
  105d96:    40 d6             	r0 = r4  #
  105d98:    51 60             		 r1 = [r5+0x0] 
  105d9a:    35 04             	{rets, r5, r4} = [sp++]
  105d9c:    d1 00             	goto r1
  105d9e:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105da4:    42 f0 8c 0d       	r2 = 0xd8c  # <usb_code_size+0x251 : d8c >			  ## FreeRTOSConfig.h:181:5
  105da8:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  105daa:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  105db0:    c1 ff 7e 6c 10 00 	r1 = 0x106c7e <$data.__1+0x170 : 106c7e >			  ## FreeRTOSConfig.h:181:5
  105db6:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105db8:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:3473:1


vTaskDelete:
  105dba:    76 04             	[--sp] = {rets, r6-r4}			  ## tasks.c:1050:0
  105dbc:    04 16             	r4 = r0			  ## tasks.c:1050:0
  105dbe:    bf ea 67 f7       	call -0x1132 <local_irq_disable : 104c90 >			  ## tasks.c:1053:5
  105dc2:    20 00             	csync			  ## tasks.c:1053:5
  105dc4:    c6 ff 94 bc 02 00 	r6 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:1053:5
  105dca:    84 46             	if (r4 != 0) goto 0xc <vTaskDelete+0x1E : 105dd8 >			  ## tasks.c:1053:5
  105dcc:    bf ea 60 f7       	call -0x1140 <local_irq_disable : 104c90 >			  ## tasks.c:1057:17
  105dd0:    20 00             	csync			  ## tasks.c:1057:17
  105dd2:    64 60             	r4 = [r6+0x0] 			  ## tasks.c:1057:17
  105dd4:    bf ea 63 f7       	call -0x113a <local_irq_enable : 104c9e >			  ## tasks.c:1057:17
  105dd8:    4d 94             	r5 = r4 + 0x14			  ## tasks.c:1068:35
  105dda:    50 16             	r0 = r5			  ## tasks.c:1068:13
  105ddc:    bf ea b3 f7       	call -0x109a <uxListRemove : 104d46 >			  ## tasks.c:1068:13
  105de0:    80 4f             	if (r0 != 0) goto 0x1e <vTaskDelete+0x46 : 105e00 >			  ## tasks.c:1068:13
  105de2:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1069:13
  105de4:    e1 e1 14 00       	r1 = r0 * 0x14			  ## tasks.c:1069:13
  105de8:    c2 ff f4 bc 02 00 	r2 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:1069:13
  105dee:    d8 ec 12 12       	r1 = [r1+r2]			  ## tasks.c:1069:13
  105df2:    31 e8 00 40       	if (r1 == 0x0) {			  ## tasks.c:1069:13
  105df6:    c1 ff a0 bc 02 00 		r1 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:1069:13
  105dfc:    66 e8 03 10       		[r1+0x0] &= ~(1 << r0)
                               	}			  ## tasks.c:1069:13
  105e00:    40 6e             	r0 = [r4+0x38] 			  ## tasks.c:1074:13
  105e02:    b0 e8 00 40       	if (r0 != 0x0) {			  ## tasks.c:1074:13
  105e06:    00 e1 28 40       		r0 = r4 + 0x28			  ## tasks.c:1074:13
  105e0a:    bf ea 9c f7       		call -0x10c8
                               	} <uxListRemove : 104d46 >			  ## tasks.c:1075:20
  105e0e:    c0 ff 9c bc 02 00 	r0 = 0x2bc9c <uxTaskNumber : 2bc9c >			  ## tasks.c:1084:21
  105e14:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:1084:21
  105e18:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:1088:22
  105e1a:    00 e8 0a 40       	if (r4 == r0) goto 0x14 <vTaskDelete+0x78 : 105e32 >			  ## tasks.c:1088:22
  105e1e:    c0 ff 90 bc 02 00 	r0 = 0x2bc90 <uxCurrentNumberOfTasks : 2bc90 >			  ## tasks.c:1112:13
  105e24:    c0 eb ff 0f       	[r0+0x0] += -0x1			  ## tasks.c:1112:13
  105e28:    40 16             	r0 = r4			  ## tasks.c:1113:13
  105e2a:    51 82             	call -0xbc <prvDeleteTCB : 105d70 >			  ## tasks.c:1113:13
  105e2c:    bf ea ab f7       	call -0x10aa <prvResetNextTaskUnblockTime : 104d86 >			  ## tasks.c:1117:13
  105e30:    04 8b             	goto 0x16 <vTaskDelete+0x8E : 105e48 >			  ## tasks.c:1117:13
  105e32:    c0 ff d0 bd 02 00 	r0 = 0x2bdd0 <xTasksWaitingTermination : 2bdd0 >			  ## tasks.c:1098:13
  105e38:    51 16             	r1 = r5			  ## tasks.c:1098:13
  105e3a:    bf ea 99 f7       	call -0x10ce <vListInsertEnd : 104d70 >			  ## tasks.c:1098:13
  105e3e:    c0 ff a4 bc 02 00 	r0 = 0x2bca4 <uxDeletedTasksWaitingCleanUp : 2bca4 >			  ## tasks.c:1103:13
  105e44:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:1103:13
  105e48:    c0 ff 98 bc 02 00 	r0 = 0x2bc98 <xSchedulerRunning : 2bc98 >			  ## tasks.c:1125:9
  105e4e:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1125:9
  105e50:    00 57             	if (r0 == 0) goto 0x2e <vTaskDelete+0xC6 : 105e80 >			  ## tasks.c:1125:9
  105e52:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:1127:22
  105e54:    80 e8 14 40       	if (r4 != r0) goto 0x28 <vTaskDelete+0xC6 : 105e80 >			  ## tasks.c:1127:22
  105e58:    c0 ff a8 bc 02 00 	r0 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:1132:13
  105e5e:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1132:13
  105e60:    00 4d             	if (r0 == 0) goto 0x1a <vTaskDelete+0xC2 : 105e7c >			  ## tasks.c:1132:13
  105e62:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105e68:    42 f0 6c 04       	r2 = 0x46c  # <ROM_RAM_SIZE+0x14C : 46c >			  ## FreeRTOSConfig.h:181:5
  105e6c:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  105e6e:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  105e74:    c1 ff 72 6c 10 00 	r1 = 0x106c72 <$data.__1+0x164 : 106c72 >			  ## FreeRTOSConfig.h:181:5
  105e7a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105e7c:    bf ea 24 f8       	call -0xfb8 <vPortYield : 104ec8 >			  ## tasks.c:1133:13
  105e80:    36 04             	{rets, r6-r4} = [sp++]			  ## tasks.c:1138:5
  105e82:    ff ea 0c f7       	goto -0x11e8 <local_irq_enable : 104c9e >			  ## tasks.c:1138:5


prvGetExpectedIdleTime:
  105e86:    10 04             	[--sp] = rets			  ## tasks.c:1872:0
  105e88:    c0 ff a0 bc 02 00 	r0 = 0x2bca0 <uxTopReadyPriority : 2bca0 >			  ## tasks.c:1895:13
  105e8e:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:1895:13
  105e90:    bf ea fe f6       	call -0x1204 <local_irq_disable : 104c90 >			  ## tasks.c:1901:9
  105e94:    20 00             	csync			  ## tasks.c:1901:9
  105e96:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:1901:9
  105e9c:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:1901:9
  105e9e:    bf ea fe f6       	call -0x1204 <local_irq_enable : 104c9e >			  ## tasks.c:1901:9
  105ea2:    c0 ff f4 bc 02 00 	r0 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:1903:16
  105ea8:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1903:16
  105eaa:    20 d9             	r0 |= r2  #			  ## tasks.c:1901:9
  105eac:    31 6f             		 r1 = [r3+0x3c] 			  ## tasks.c:1901:23
  105eae:    b8 20             	r0 &= 0xfffffffe			  ## tasks.c:1901:9
  105eb0:    01 19             	r1 |= r0			  ## tasks.c:1901:9
  105eb2:    40 20             	r0 = 0x0			  ## tasks.c:1901:9
  105eb4:    81 49             	if (r1 != 0) goto 0x12 <prvGetExpectedIdleTime+0x42 : 105ec8 >			  ## tasks.c:1901:9
  105eb6:    c0 ff ac bc 02 00 	r0 = 0x2bcac <xNextTaskUnblockTime : 2bcac >			  ## tasks.c:1914:19
  105ebc:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1914:19
  105ebe:    c1 ff b0 bc 02 00 	r1 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:1914:42
  105ec4:    11 60             	r1 = [r1+0x0] 			  ## tasks.c:1914:42
  105ec6:    08 1e             	r0 = r0 - r1			  ## tasks.c:1914:40
  105ec8:    00 04             	pc = [sp++]			  ## tasks.c:1917:5


prvIdleTask:
  105eca:    c7 ff a4 bc 02 00 	r7 = 0x2bca4 <uxDeletedTasksWaitingCleanUp : 2bca4 >			  ## tasks.c:3005:0
  105ed0:    ce ff f4 bc 02 00 	r14 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:3005:0
  105ed6:    cf ff f0 bc 02 00 	r15 = 0x2bcf0 <idle_hook : 2bcf0 >			  ## tasks.c:3005:0
  105edc:    ca ff ac bc 02 00 	r10 = 0x2bcac <xNextTaskUnblockTime : 2bcac >			  ## tasks.c:3005:0
  105ee2:    cb ff b0 bc 02 00 	r11 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:3005:0
  105ee8:    cc ff e8 bc 02 00 	r12 = 0x2bce8 <mask_log_e : 2bce8 >			  ## tasks.c:3005:0
  105eee:    c8 ff 6b 6c 10 00 	r8 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## tasks.c:3005:0
  105ef4:    c9 ff dc 6c 10 00 	r9 = 0x106cdc <$data.__1+0x1CE : 106cdc >			  ## tasks.c:3005:0
  105efa:    cd ff e0 bc 02 00 	r13 = 0x2bce0 <mask_portSUPPRESS_TICKS_AND_SLEEP : 2bce0 >			  ## tasks.c:3005:0
  105f00:    c4 ff d0 bd 02 00 	r4 = 0x2bdd0 <xTasksWaitingTermination : 2bdd0 >			  ## tasks.c:3005:0
  105f06:    c5 ff 90 bc 02 00 	r5 = 0x2bc90 <uxCurrentNumberOfTasks : 2bc90 >			  ## tasks.c:3005:0
  105f0c:    70 60             	r0 = [r7+0x0] 			  ## tasks.c:3239:16
  105f0e:    00 58             	if (r0 == 0) goto 0x30 <prvIdleTask+0x76 : 105f40 >			  ## tasks.c:3239:9
  105f10:    bf ea 1a f9       	call -0xdcc <vTaskSuspendAll : 105148 >			  ## tasks.c:3240:13
  105f14:    40 60             	r0 = [r4+0x0] 			  ## tasks.c:3242:32
  105f16:    00 51             	if (r0 == 0) goto 0x22 <prvIdleTask+0x70 : 105f3a >			  ## tasks.c:3242:32
  105f18:    bf ea ba f6       	call -0x128c <local_irq_disable : 104c90 >			  ## tasks.c:3249:17
  105f1c:    20 00             	csync			  ## tasks.c:3249:17
  105f1e:    40 63             	r0 = [r4+0xc] 			  ## tasks.c:3251:39
  105f20:    06 63             	r6 = [r0+0xc] 			  ## tasks.c:3251:39
  105f22:    68 94             	r0 = r6 + 0x14			  ## tasks.c:3253:50
  105f24:    bf ea 0f f7       	call -0x11e2 <uxListRemove : 104d46 >			  ## tasks.c:3253:28
  105f28:    c0 eb ff 5f       	[r5+0x0] += -0x1			  ## tasks.c:3254:21
  105f2c:    c0 eb ff 7f       	[r7+0x0] += -0x1			  ## tasks.c:3255:21
  105f30:    bf ea b5 f6       	call -0x1296 <local_irq_enable : 104c9e >			  ## tasks.c:3257:17
  105f34:    60 16             	r0 = r6			  ## tasks.c:3259:17
  105f36:    bf ea 1b ff       	call -0x1ca <prvDeleteTCB : 105d70 >			  ## tasks.c:3259:17
  105f3a:    bf ea e2 fa       	call -0xa3c <xTaskResumeAll : 105502 >
  105f3e:    f7 86             	goto -0x34 <prvIdleTask+0x42 : 105f0c >
  105f40:    d0 ec e0 00       	r0 = [r14+0x0]			  ## tasks.c:3050:17
  105f44:    30 e9 02 00       	if (r0 >= 0x2) {			  ## tasks.c:3050:17
  105f48:    bf ea be f7       		call -0x1084
                               	} <vPortYield : 104ec8 >			  ## tasks.c:3051:17
  105f4c:    d0 ec f0 00       	r0 = [r15+0x0]			  ## main.c:252:9
  105f50:    b0 e8 00 00       	if (r0 != 0x0) {			  ## main.c:252:9
  105f54:    c0 00             		call r0
                               	}			  ## main.c:253:9
  105f56:    01 00             	idle			  ## main.c:255:5
  105f58:    41 96             	call -0xd4 <prvGetExpectedIdleTime : 105e86 >			  ## tasks.c:3083:33
  105f5a:    80 f9 d7 05       	if (r0 < 0x2) goto -0x52 <prvIdleTask+0x42 : 105f0c >
  105f5e:    bf ea f3 f8       	call -0xe1a <vTaskSuspendAll : 105148 >			  ## tasks.c:3086:17
  105f62:    d0 ec a0 00       	r0 = [r10+0x0]			  ## tasks.c:3091:21
  105f66:    d0 ec b0 10       	r1 = [r11+0x0]			  ## tasks.c:3091:21
  105f6a:    90 e9 00 c1       	if (r0 < r1) {			  ## tasks.c:3091:21
  105f6e:    d0 ec c0 30       		r3 = [r12+0x0]			  ## FreeRTOSConfig.h:181:5
  105f72:    42 e0 13 0c       		r2 = 0xc13 <usb_code_size+0xD7 : c12 >			  ## FreeRTOSConfig.h:181:5
  105f76:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  105f78:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  105f7a:    41 85             	call -0xf6 <prvGetExpectedIdleTime : 105e86 >			  ## tasks.c:3092:41
  105f7c:    80 f9 dd 05       	if (r0 < 0x2) goto -0x46 <prvIdleTask+0x70 : 105f3a >
  105f80:    d0 ec d0 10       	r1 = [r13+0x0]			  ## tasks.c:3096:25
  105f84:    c1 00             	call r1			  ## tasks.c:3096:25
  105f86:    e7 99             	goto -0x4e <prvIdleTask+0x70 : 105f3a >


xTaskGetTickCount:
  105f88:    c0 ff b0 bc 02 00 	r0 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:2022:0
  105f8e:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2028:18
  105f90:    80 00             	rts			  ## tasks.c:2032:5


pcTaskGetName:
  105f92:    74 04             	[--sp] = {rets, r4}			  ## tasks.c:2076:0
  105f94:    04 16             	r4 = r0			  ## tasks.c:2076:0
  105f96:    84 49             	if (r4 != 0) goto 0x12 <pcTaskGetName+0x18 : 105faa >			  ## tasks.c:2076:0
  105f98:    bf ea 7a f6       	call -0x130c <local_irq_disable : 104c90 >			  ## tasks.c:2081:13
  105f9c:    20 00             	csync			  ## tasks.c:2081:13
  105f9e:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:2081:13
  105fa4:    04 60             	r4 = [r0+0x0] 			  ## tasks.c:2081:13
  105fa6:    bf ea 7a f6       	call -0x130c <local_irq_enable : 104c9e >			  ## tasks.c:2081:13
  105faa:    84 4d             	if (r4 != 0) goto 0x1a <pcTaskGetName+0x34 : 105fc6 >
  105fac:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  105fb2:    42 f0 22 08       	r2 = 0x822  # <stack_bss_size+0x22 : 822 >			  ## FreeRTOSConfig.h:181:5
  105fb6:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  105fb8:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  105fbe:    c1 ff e8 6c 10 00 	r1 = 0x106ce8 <$data.__1+0x1DA : 106ce8 >			  ## FreeRTOSConfig.h:181:5
  105fc4:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  105fc6:    48 88             	r0 = r4 + 0x8			  ## tasks.c:2083:14
  105fc8:    54 04             	{pc, r4} = [sp++]			  ## tasks.c:2083:5


prvSearchForNameWithinSingleList:
  105fca:    79 04             	[--sp] = {rets, r9-r4}			  ## tasks.c:2090:0
  105fcc:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2097:9
  105fce:    12 42             	if (r2 == 0) goto 0x44 <prvSearchForNameWithinSingleList+0x4A : 106014 >			  ## tasks.c:2097:9
  105fd0:    02 61             	r2 = [r0+0x4] 			  ## tasks.c:2098:9
  105fd2:    23 61             	r3 = [r2+0x4] 			  ## tasks.c:2098:9
  105fd4:    0c 88             	r4 = r0 + 0x8			  ## tasks.c:2098:9
  105fd6:    08 f1 04 00       	r8 = r0 + 0x4  #			  ## tasks.c:2098:9
  105fda:    83 61             		 [r0+0x4] = r3			  ## tasks.c:2098:9
  105fdc:    13 e8 00 44       	if (r3 == r4) {			  ## tasks.c:2098:9
  105fe0:    33 61             		r3 = [r3+0x4] 			  ## tasks.c:2098:9
  105fe2:    83 61             		[r0+0x4] = r3
                               	}			  ## tasks.c:2098:9
  105fe4:    d0 ec 3c 90       	r9 = [r3+0xc]			  ## tasks.c:2098:9
  105fe8:    33 61             	r3 = [r3+0x4] 			  ## tasks.c:2101:13
  105fea:    83 61             	[r0+0x4] = r3			  ## tasks.c:2101:13
  105fec:    13 e8 00 44       	if (r3 == r4) {			  ## tasks.c:2101:13
  105ff0:    03 63             		r3 = [r0+0xc] 			  ## tasks.c:2101:13
  105ff2:    d0 ec 81 30       		[r8+0x0] = r3
                               	}			  ## tasks.c:2101:13
  105ff6:    32 63             	r2 = [r3+0xc] 			  ## tasks.c:2101:13
  105ff8:    47 20             	r7 = 0x0
  105ffa:    07 fc 09 16       	if (r7 > 0xb) goto 0x12 <prvSearchForNameWithinSingleList+0x46 : 106010 >
  105ffe:    d8 ee 10 67       	r6 = b[r1+r7] (u)			  ## tasks.c:2108:34
  106002:    ad 1d             	r5 = r2 + r7			  ## tasks.c:2106:29
  106004:    5d 48             	r5 = b[r5+0x8] (u)			  ## tasks.c:2106:29
  106006:    86 e8 03 50       	if (r5 != r6) goto 0x6 <prvSearchForNameWithinSingleList+0x46 : 106010 >			  ## tasks.c:2106:29
  10600a:    c7 21             	r7 += 0x1			  ## tasks.c:2105:83
  10600c:    f5 56             	if (r5 != 0) goto -0x14 <prvSearchForNameWithinSingleList+0x30 : 105ffa >
  10600e:    04 83             	goto 0x6 <prvSearchForNameWithinSingleList+0x4C : 106016 >
  106010:    89 e8 ea 21       	if (r2 != r9) goto -0x2c <prvSearchForNameWithinSingleList+0x1E : 105fe8 >
  106014:    42 20             	r2 = 0x0
  106016:    20 16             	r0 = r2			  ## tasks.c:2131:5
  106018:    59 04             	{pc, r9-r4} = [sp++]			  ## tasks.c:2131:5


xTaskGetHandle:
  10601a:    77 04             	[--sp] = {rets, r7-r4}			  ## tasks.c:2140:0
  10601c:    04 16             	r4 = r0			  ## tasks.c:2140:0
  10601e:    bf ea ab f5       	call -0x14aa <strlen : 104b78 >			  ## tasks.c:2145:5
  106022:    80 f9 0d 18       	if (r0 < 0xc) goto 0x1a <xTaskGetHandle+0x26 : 106040 >			  ## tasks.c:2145:5
  106026:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  10602c:    42 f0 61 08       	r2 = 0x861  # <stack_bss_size+0x60 : 860 >			  ## FreeRTOSConfig.h:181:5
  106030:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  106032:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  106038:    c1 ff f6 6c 10 00 	r1 = 0x106cf6 <$data.__1+0x1E8 : 106cf6 >			  ## FreeRTOSConfig.h:181:5
  10603e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  106040:    bf ea 82 f8       	call -0xefc <vTaskSuspendAll : 105148 >			  ## tasks.c:2147:5
  106044:    60 2c             	r0 = 0x8c			  ## tasks.c:2147:5
  106046:    c6 ff f4 bc 02 00 	r6 = 0x2bcf4 <pxReadyTasksLists : 2bcf4 >			  ## tasks.c:2147:5
  10604c:    07 16             	r7 = r0
  10604e:    f0 1d             	r0 = r7 + r6			  ## tasks.c:2152:21
  106050:    41 16             	r1 = r4			  ## tasks.c:2152:21
  106052:    51 9b             	call -0x8a <prvSearchForNameWithinSingleList : 105fca >			  ## tasks.c:2152:21
  106054:    05 16             	r5 = r0			  ## tasks.c:2152:21
  106056:    85 43             	if (r5 != 0) goto 0x6 <xTaskGetHandle+0x44 : 10605e >
  106058:    30 e1 ec 7f       	r0 = r7 + -0x14			  ## tasks.c:2154:17
  10605c:    f7 57             	if (r7 != 0) goto -0x12 <xTaskGetHandle+0x32 : 10604c >			  ## tasks.c:2154:17
  10605e:    85 59             	if (r5 != 0) goto 0x32 <xTaskGetHandle+0x78 : 106092 >
  106060:    c0 ff f8 bd 02 00 	r0 = 0x2bdf8 <pxDelayedTaskList : 2bdf8 >			  ## tasks.c:2163:65
  106066:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2163:65
  106068:    51 90             	call -0xa0 <prvSearchForNameWithinSingleList : 105fca >			  ## tasks.c:2163:21
  10606a:    05 16             	r5 = r0			  ## tasks.c:2163:21
  10606c:    85 52             	if (r5 != 0) goto 0x24 <xTaskGetHandle+0x78 : 106092 >
  10606e:    c0 ff fc bd 02 00 	r0 = 0x2bdfc <pxOverflowDelayedTaskList : 2bdfc >			  ## tasks.c:2167:65
  106074:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2167:65
  106076:    51 89             	call -0xae <prvSearchForNameWithinSingleList : 105fca >			  ## tasks.c:2167:21
  106078:    05 16             	r5 = r0			  ## tasks.c:2167:21
  10607a:    85 4b             	if (r5 != 0) goto 0x16 <xTaskGetHandle+0x78 : 106092 >
  10607c:    c0 ff e4 bd 02 00 	r0 = 0x2bde4 <xSuspendedTaskList : 2bde4 >			  ## tasks.c:2174:25
  106082:    51 83             	call -0xba <prvSearchForNameWithinSingleList : 105fca >			  ## tasks.c:2174:25
  106084:    05 16             	r5 = r0			  ## tasks.c:2174:25
  106086:    85 45             	if (r5 != 0) goto 0xa <xTaskGetHandle+0x78 : 106092 >
  106088:    c0 ff d0 bd 02 00 	r0 = 0x2bdd0 <xTasksWaitingTermination : 2bdd0 >			  ## tasks.c:2183:25
  10608e:    41 9d             	call -0xc6 <prvSearchForNameWithinSingleList : 105fca >			  ## tasks.c:2183:25
  106090:    05 16             	r5 = r0			  ## tasks.c:2183:25
  106092:    bf ea 36 fa       	call -0xb94 <xTaskResumeAll : 105502 >			  ## tasks.c:2188:12
  106096:    50 16             	r0 = r5			  ## tasks.c:2190:5
  106098:    57 04             	{pc, r7-r4} = [sp++]			  ## tasks.c:2190:5


vTaskStepTick:
  10609a:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2284:0
  10609c:    c5 ff b0 bc 02 00 	r5 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:2284:0
  1060a2:    51 60             	r1 = [r5+0x0] 			  ## tasks.c:2288:5
  1060a4:    c2 ff ac bc 02 00 	r2 = 0x2bcac <xNextTaskUnblockTime : 2bcac >			  ## tasks.c:2288:5
  1060aa:    04 d6             	r4 = r0  #			  ## tasks.c:2288:5
  1060ac:    22 60             		 r2 = [r2+0x0] 			  ## tasks.c:2288:5
  1060ae:    10 1d             	r0 = r1 + r4			  ## tasks.c:2288:5
  1060b0:    82 ec 0d 00       	if (r0 <= r2) goto 0x1a <vTaskStepTick+0x34 : 1060ce >			  ## tasks.c:2288:5
  1060b4:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  1060ba:    42 f0 f0 08       	r2 = 0x8f0  # <stack_bss_size+0xF0 : 8f0 >			  ## FreeRTOSConfig.h:181:5
  1060be:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  1060c0:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  1060c6:    c1 ff 05 6d 10 00 	r1 = 0x106d05 <$data.__1+0x1F6 : 106d04 >			  ## FreeRTOSConfig.h:181:5
  1060cc:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1060ce:    68 e8 00 54       	[r5+0x0] += r4			  ## tasks.c:2289:16
  1060d2:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2291:1


vTaskSetApplicationTaskTag:
  1060d4:    10 04             	[--sp] = rets			  ## tasks.c:2518:0
  1060d6:    12 16             	r2 = r1			  ## tasks.c:2518:0
  1060d8:    03 16             	r3 = r0			  ## tasks.c:2518:0
  1060da:    83 49             	if (r3 != 0) goto 0x12 <vTaskSetApplicationTaskTag+0x1A : 1060ee >			  ## tasks.c:2518:0
  1060dc:    bf ea d8 f5       	call -0x1450 <local_irq_disable : 104c90 >			  ## tasks.c:2524:26
  1060e0:    20 00             	csync			  ## tasks.c:2524:26
  1060e2:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:2524:26
  1060e8:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:2524:26
  1060ea:    bf ea d8 f5       	call -0x1450 <local_irq_enable : 104c9e >			  ## tasks.c:2524:26
  1060ee:    bf ea cf f5       	call -0x1462 <local_irq_disable : 104c90 >			  ## tasks.c:2531:5
  1060f2:    20 00             	csync			  ## tasks.c:2531:5
  1060f4:    d0 ec 35 25       	[r3+0x54] = r2			  ## tasks.c:2532:21
  1060f8:    88 04             	{rets} = [sp++]			  ## tasks.c:2533:5
  1060fa:    ff ea d0 f5       	goto -0x1460 <local_irq_enable : 104c9e >			  ## tasks.c:2533:5


xTaskGetApplicationTaskTag:
  1060fe:    10 04             	[--sp] = rets			  ## tasks.c:2542:0
  106100:    02 16             	r2 = r0			  ## tasks.c:2542:0
  106102:    82 49             	if (r2 != 0) goto 0x12 <xTaskGetApplicationTaskTag+0x18 : 106116 >			  ## tasks.c:2542:0
  106104:    bf ea c4 f5       	call -0x1478 <local_irq_disable : 104c90 >			  ## tasks.c:2548:26
  106108:    20 00             	csync			  ## tasks.c:2548:26
  10610a:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:2548:26
  106110:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2548:26
  106112:    bf ea c4 f5       	call -0x1478 <local_irq_enable : 104c9e >			  ## tasks.c:2548:26
  106116:    bf ea bb f5       	call -0x148a <local_irq_disable : 104c90 >			  ## tasks.c:2555:5
  10611a:    20 00             	csync			  ## tasks.c:2555:5
  10611c:    d0 ec 24 25       	r2 = [r2+0x54]			  ## tasks.c:2557:25
  106120:    bf ea bd f5       	call -0x1486 <local_irq_enable : 104c9e >			  ## tasks.c:2559:5
  106124:    20 16             	r0 = r2			  ## tasks.c:2561:5
  106126:    00 04             	pc = [sp++]			  ## tasks.c:2561:5


eTaskConfirmSleepModeStatus:
  106128:    c0 ff bc bd 02 00 	r0 = 0x2bdbc <xPendingReadyList : 2bdbc >			  ## tasks.c:3115:0
  10612e:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3120:9
  106130:    80 45             	if (r0 != 0) goto 0xa <eTaskConfirmSleepModeStatus+0x14 : 10613c >			  ## tasks.c:3120:9
  106132:    c0 ff b4 bc 02 00 	r0 = 0x2bcb4 <xYieldPending : 2bcb4 >			  ## tasks.c:3123:16
  106138:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3123:16
  10613a:    00 42             	if (r0 == 0) goto 0x4 <eTaskConfirmSleepModeStatus+0x18 : 106140 >			  ## tasks.c:3123:16
  10613c:    40 20             	r0 = 0x0			  ## tasks.c:3138:5
  10613e:    80 00             	rts			  ## tasks.c:3138:5
  106140:    c0 ff e4 bd 02 00 	r0 = 0x2bde4 <xSuspendedTaskList : 2bde4 >			  ## tasks.c:3131:13
  106146:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:3131:13
  106148:    c0 ff 90 bc 02 00 	r0 = 0x2bc90 <uxCurrentNumberOfTasks : 2bc90 >			  ## tasks.c:3131:62
  10614e:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3131:62
  106150:    32 e1 ff 0f       	r2 = r0 + -0x1			  ## tasks.c:3131:85
  106154:    40 22             	r0 = 0x2			  ## tasks.c:3131:13
  106156:    91 e8 00 02       	if (r1 != r2) {
  10615a:    40 21             		r0 = 0x1
                               	}			  ## tasks.c:3131:13
  10615c:    80 00             	rts			  ## tasks.c:3131:13


xTaskGetCurrentTaskHandle:
  10615e:    10 04             	[--sp] = rets			  ## tasks.c:3502:0
  106160:    bf ea 96 f5       	call -0x14d4 <local_irq_disable : 104c90 >			  ## tasks.c:3508:15
  106164:    20 00             	csync			  ## tasks.c:3508:15
  106166:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## tasks.c:3508:15
  10616c:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:3508:15
  10616e:    bf ea 96 f5       	call -0x14d4 <local_irq_enable : 104c9e >			  ## tasks.c:3508:15
  106172:    20 16             	r0 = r2			  ## tasks.c:3510:5
  106174:    00 04             	pc = [sp++]			  ## tasks.c:3510:5


os_init:
  106176:    c0 ff 00 be 02 00 	r0 = 0x2be00 <head : 2be00 >			  ## os_api.c:125:0
  10617c:    80 60             	[r0+0x0] = r0			  ## list.h:188:16
  10617e:    80 61             	[r0+0x4] = r0			  ## list.h:189:16
  106180:    80 00             	rts			  ## os_api.c:128:5


os_get_curr_tcb_var:
  106182:    c2 ff 94 bc 02 00 	r2 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## os_api.c:132:0
  106188:    82 60             	[r0+0x0] = r2			  ## os_api.c:136:17
  10618a:    c0 ff c0 bc 02 00 	r0 = 0x2bcc0 <highCurrentTCB : 2bcc0 >			  ## os_api.c:137:14
  106190:    90 60             	[r1+0x0] = r0			  ## os_api.c:137:14
  106192:    80 00             	rts			  ## os_api.c:138:1


xPortStartScheduler:
  106194:    10 04             	[--sp] = rets			  ## port.c:267:0
  106196:    c0 ff 94 bc 02 00 	r0 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## port.c:272:9
  10619c:    00 60             	r0 = [r0+0x0] 			  ## port.c:272:9
  10619e:    00 4a             	if (r0 == 0) goto 0x14 <xPortStartScheduler+0x20 : 1061b4 >			  ## port.c:272:9
  1061a0:    c0 ff c8 bc 02 00 	r0 = 0x2bcc8 <uxCriticalNesting : 2bcc8 >			  ## port.c:283:31
  1061a6:    40 ea 00 00       	[r0+0x0] = 0x0			  ## port.c:283:31
  1061aa:    c0 ff dc bc 02 00 	r0 = 0x2bcdc <vPortStartFirstTask : 2bcdc >			  ## port.c:287:9
  1061b0:    00 60             	r0 = [r0+0x0] 			  ## port.c:287:9
  1061b2:    c0 00             	call r0			  ## port.c:287:9
  1061b4:    40 20             	r0 = 0x0			  ## port.c:298:5
  1061b6:    00 04             	pc = [sp++]			  ## port.c:298:5


os_start:
  1061b8:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:141:0
  1061ba:    e2 9e             	sp += -0x8			  ## os_api.c:141:0
  1061bc:    c0 ff c4 bc 02 00 	r0 = 0x2bcc4 <xIdleTaskHandle : 2bcc4 >			  ## tasks.c:1776:23
  1061c2:    42 f0 00 01       	r2 = 0x100  # <ISR_SIZE : 100 >			  ## tasks.c:1776:23
  1061c6:    80 21             		 [sp+4] = r0			  ## tasks.c:1776:23
  1061c8:    44 20             	r4 = 0x0			  ## tasks.c:1776:23
  1061ca:    c0 ff ca 5e 10 00 	r0 = 0x105eca <prvIdleTask : 105eca >			  ## tasks.c:1776:23
  1061d0:    c1 ff c3 6c 10 00 	r1 = 0x106cc3 <$data.__1+0x1B4 : 106cc2 >			  ## tasks.c:1776:23
  1061d6:    43 20             	r3 = 0x0			  ## tasks.c:1776:23
  1061d8:    84 20             	[sp] = r4			  ## tasks.c:1776:23
  1061da:    bf ea f0 fc       	call -0x620 <xTaskCreate : 105bbe >			  ## tasks.c:1776:23
  1061de:    70 f8 17 fe       	if (r0 == -0x1) goto 0x2e <os_start+0x58 : 106210 >			  ## tasks.c:1795:9
  1061e2:    80 f8 22 02       	if (r0 != 0x1) goto 0x44 <os_start+0x72 : 10622a >
  1061e6:    c0 ff ac bc 02 00 	r0 = 0x2bcac <xNextTaskUnblockTime : 2bcac >			  ## tasks.c:1811:30
  1061ec:    40 ea ff 03       	[r0+0x0] = 0xFFFFFFFF			  ## tasks.c:1811:30
  1061f0:    c0 ff 98 bc 02 00 	r0 = 0x2bc98 <xSchedulerRunning : 2bc98 >			  ## tasks.c:1812:27
  1061f6:    40 ea 01 00       	[r0+0x0] = 0x1			  ## tasks.c:1812:27
  1061fa:    c0 ff b0 bc 02 00 	r0 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## tasks.c:1813:20
  106200:    41 20             	r1 = 0x0			  ## tasks.c:1813:20
  106202:    81 60             	[r0+0x0] = r1			  ## tasks.c:1813:20
  106204:    c0 ff a8 bc 02 00 	r0 = 0x2bca8 <uxSchedulerSuspended : 2bca8 >			  ## tasks.c:1814:30
  10620a:    81 60             	[r0+0x0] = r1			  ## tasks.c:1814:30
  10620c:    61 83             	call -0x7a <xPortStartScheduler : 106194 >			  ## tasks.c:1824:13
  10620e:    04 8d             	goto 0x1a <os_start+0x72 : 10622a >			  ## tasks.c:1824:13
  106210:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  106216:    42 f0 2a 07       	r2 = 0x72a  # <mem_code_size+0x32 : 72a >			  ## FreeRTOSConfig.h:181:5
  10621a:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  10621c:    c0 ff 6b 6c 10 00 	r0 = 0x106c6b <$data.__1+0x15C : 106c6a >			  ## FreeRTOSConfig.h:181:5
  106222:    c1 ff c8 6c 10 00 	r1 = 0x106cc8 <$data.__1+0x1BA : 106cc8 >			  ## FreeRTOSConfig.h:181:5
  106228:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10622a:    02 82             	sp += 0x8
  10622c:    54 04             	{pc, r4} = [sp++]			  ## os_api.c:143:1


os_task_create:
  10622e:    77 04             	[--sp] = {rets, r7-r4}			  ## os_api.c:151:0
  106230:    e2 9d             	sp += -0xc			  ## os_api.c:151:0
  106232:    14 d6             	r4 = r1  #			  ## os_api.c:151:0
  106234:    01 29             		 r1 = [sp+36]			  ## os_api.c:151:0
  106236:    8d 88             	r5 = sp + 8			  ## os_api.c:151:0
  106238:    b3 d7             	r3 = r3.l (u)  #			  ## os_api.c:156:11
  10623a:    85 21             		 [sp+4] = r5			  ## os_api.c:156:11
  10623c:    32 d6             	r2 = r3  #			  ## os_api.c:156:11
  10623e:    82 20             		 [sp] = r2			  ## os_api.c:156:11
  106240:    43 16             	r3 = r4			  ## os_api.c:156:11
  106242:    bf ea bc fc       	call -0x688 <xTaskCreate : 105bbe >			  ## os_api.c:156:11
  106246:    04 16             	r4 = r0			  ## os_api.c:156:11
  106248:    84 f8 25 02       	if (r4 != 0x1) goto 0x4a <os_task_create+0x68 : 106296 >
  10624c:    06 28             	r6 = [sp+32]
  10624e:    44 20             	r4 = 0x0
  106250:    16 42             	if (r6 == 0) goto 0x44 <os_task_create+0x68 : 106296 >
  106252:    c0 ff d0 bc 02 00 	r0 = 0x2bcd0 <mask_malloc : 2bcd0 >			  ## mask_export.c:27:12
  106258:    00 f1 5c 60       	r0 = r6 + 0x5c  #			  ## os_api.c:162:66
  10625c:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:27:12
  10625e:    c1 00             	call r1			  ## mask_export.c:27:12
  106260:    05 d6             	r5 = r0  #			  ## mask_export.c:27:12
  106262:    01 22             		 r1 = [sp+8]			  ## os_api.c:163:20
  106264:    47 25             	r7 = 0x5			  ## os_api.c:164:9
  106266:    40 24             	r0 = 0x4			  ## os_api.c:164:9
  106268:    f4 f1 61 00       	r0 = r6 / r0 (s)  #			  ## os_api.c:164:9
  10626c:    d1 62             		 [r5+0x8] = r1			  ## os_api.c:163:18
  10626e:    02 f1 5c 50       	r2 = r5 + 0x5c  #			  ## os_api.c:164:9
  106272:    87 20             		 [sp] = r7			  ## os_api.c:164:9
  106274:    5b 8c             	r3 = r5 + 0xc			  ## os_api.c:164:9
  106276:    41 24             	r1 = 0x4			  ## os_api.c:164:9
  106278:    bf ea 84 f6       	call -0x12f8 <xQueueGenericCreateStatic : 104f84 >			  ## os_api.c:164:9
  10627c:    bf ea 08 f5       	call -0x15f0 <local_irq_disable : 104c90 >			  ## os_api.c:46:5
  106280:    20 00             	csync			  ## os_api.c:46:5
  106282:    c0 ff 00 be 02 00 	r0 = 0x2be00 <head : 2be00 >			  ## list.h:219:33
  106288:    01 60             	r1 = [r0+0x0] 			  ## list.h:219:33
  10628a:    95 61             	[r1+0x4] = r5			  ## list.h:137:16
  10628c:    d1 60             	[r5+0x0] = r1			  ## list.h:138:16
  10628e:    d0 61             	[r5+0x4] = r0			  ## list.h:139:16
  106290:    85 60             	[r0+0x0] = r5			  ## list.h:140:16
  106292:    bf ea 04 f5       	call -0x15f8 <local_irq_enable : 104c9e >			  ## os_api.c:50:5
  106296:    40 16             	r0 = r4			  ## os_api.c:169:1
  106298:    02 83             	sp += 0xc			  ## os_api.c:169:1
  10629a:    57 04             	{pc, r7-r4} = [sp++]			  ## os_api.c:169:1


os_current_task_rom:
  10629c:    10 04             	[--sp] = rets			  ## os_api.c:173:0
  10629e:    bf ea f7 f4       	call -0x1612 <local_irq_disable : 104c90 >			  ## os_api.c:174:5
  1062a2:    20 00             	csync			  ## os_api.c:174:5
  1062a4:    bf ea 5b ff       	call -0x14a <xTaskGetCurrentTaskHandle : 10615e >			  ## os_api.c:175:25
  1062a8:    bf ea 73 fe       	call -0x31a <pcTaskGetName : 105f92 >			  ## os_api.c:176:24
  1062ac:    02 16             	r2 = r0			  ## os_api.c:176:24
  1062ae:    bf ea f6 f4       	call -0x1614 <local_irq_enable : 104c9e >			  ## os_api.c:179:5
  1062b2:    20 16             	r0 = r2			  ## os_api.c:180:5
  1062b4:    00 04             	pc = [sp++]			  ## os_api.c:180:5


os_time_dly:
  1062b6:    10 04             	[--sp] = rets			  ## os_api.c:185:0
  1062b8:    02 16             	r2 = r0			  ## os_api.c:185:0
  1062ba:    02 49             	if (r2 == 0) goto 0x12 <os_time_dly+0x18 : 1062ce >			  ## os_api.c:185:0
  1062bc:    bf ea 44 f7       	call -0x1178 <vTaskSuspendAll : 105148 >			  ## tasks.c:1234:9
  1062c0:    41 20             	r1 = 0x0			  ## tasks.c:1245:13
  1062c2:    20 16             	r0 = r2			  ## tasks.c:1245:13
  1062c4:    bf ea cc f7       	call -0x1068 <prvAddCurrentTaskToDelayedList : 105260 >			  ## tasks.c:1245:13
  1062c8:    bf ea 1b f9       	call -0xdca <xTaskResumeAll : 105502 >			  ## tasks.c:1247:27
  1062cc:    80 42             	if (r0 != 0) goto 0x4 <os_time_dly+0x1C : 1062d2 >
  1062ce:    bf ea fb f5       	call -0x140a <vPortYield : 104ec8 >			  ## tasks.c:1256:9
  1062d2:    00 04             	pc = [sp++]			  ## os_api.c:187:1


os_time_get:
  1062d4:    c0 ff b0 bc 02 00 	r0 = 0x2bcb0 <xTickCount : 2bcb0 >			  ## os_api.c:191:0
  1062da:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2028:18
  1062dc:    80 00             	rts			  ## os_api.c:193:5


get_taskq:
  1062de:    10 04             	[--sp] = rets			  ## os_api.c:54:0
  1062e0:    01 16             	r1 = r0			  ## os_api.c:54:0
  1062e2:    bf ea d5 f4       	call -0x1656 <local_irq_disable : 104c90 >			  ## os_api.c:57:5
  1062e6:    c0 ff 00 be 02 00 	r0 = 0x2be00 <head : 2be00 >			  ## os_api.c:57:5
  1062ec:    20 00             	csync			  ## os_api.c:57:5
  1062ee:    02 16             	r2 = r0			  ## os_api.c:57:5
  1062f0:    22 60             	r2 = [r2+0x0] 
  1062f2:    00 e8 07 20       	if (r2 == r0) goto 0xe <get_taskq+0x26 : 106304 >			  ## os_api.c:58:5
  1062f6:    23 62             	r3 = [r2+0x8] 			  ## os_api.c:59:16
  1062f8:    81 e8 fa 31       	if (r3 != r1) goto -0xc <get_taskq+0x12 : 1062f0 >			  ## os_api.c:59:16
  1062fc:    bf ea cf f4       	call -0x1662 <local_irq_enable : 104c9e >			  ## os_api.c:60:13
  106300:    28 8c             	r0 = r2 + 0xc			  ## os_api.c:61:32
  106302:    00 04             	pc = [sp++]			  ## os_api.c:67:1
  106304:    bf ea cb f4       	call -0x166a <local_irq_enable : 104c9e >			  ## os_api.c:64:5
  106308:    40 20             	r0 = 0x0
  10630a:    00 04             	pc = [sp++]			  ## os_api.c:67:1


free_taskq:
  10630c:    10 04             	[--sp] = rets			  ## os_api.c:70:0
  10630e:    01 16             	r1 = r0			  ## os_api.c:70:0
  106310:    bf ea be f4       	call -0x1684 <local_irq_disable : 104c90 >			  ## os_api.c:73:5
  106314:    c0 ff 00 be 02 00 	r0 = 0x2be00 <head : 2be00 >			  ## os_api.c:73:5
  10631a:    20 00             	csync			  ## os_api.c:73:5
  10631c:    02 16             	r2 = r0			  ## os_api.c:73:5
  10631e:    22 60             	r2 = [r2+0x0] 
  106320:    00 e8 12 20       	if (r2 == r0) goto 0x24 <free_taskq+0x3C : 106348 >			  ## os_api.c:74:5
  106324:    23 62             	r3 = [r2+0x8] 			  ## os_api.c:75:16
  106326:    81 e8 fa 31       	if (r3 != r1) goto -0xc <free_taskq+0x12 : 10631e >			  ## os_api.c:75:16
  10632a:    50 ec 20 00       	r1_r0 = d[r2+0x0]			  ## list.h:171:36
  10632e:    81 61             	[r0+0x4] = r1			  ## list.h:159:16
  106330:    90 60             	[r1+0x0] = r0			  ## list.h:160:16
  106332:    a2 60             	[r2+0x0] = r2			  ## list.h:172:17
  106334:    a2 61             	[r2+0x4] = r2			  ## list.h:173:17
  106336:    bf ea b2 f4       	call -0x169c <local_irq_enable : 104c9e >			  ## os_api.c:77:13
  10633a:    c0 ff cc bc 02 00 	r0 = 0x2bccc <mask_free : 2bccc >			  ## mask_export.c:23:5
  106340:    20 d6             	r0 = r2  #			  ## mask_export.c:23:5
  106342:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:23:5
  106344:    88 04             	{rets} = [sp++]			  ## mask_export.c:23:5
  106346:    d1 00             	goto r1			  ## mask_export.c:23:5
  106348:    88 04             	{rets} = [sp++]			  ## os_api.c:82:5
  10634a:    ff ea a8 f4       	goto -0x16b0 <local_irq_enable : 104c9e >			  ## os_api.c:82:5


os_task_del_req:
  10634e:    76 04             	[--sp] = {rets, r6-r4}			  ## os_api.c:197:0
  106350:    06 16             	r6 = r0			  ## os_api.c:197:0
  106352:    06 f8 03 02       	if (r6 == 0x1) goto 0x6 <os_task_del_req+0xE : 10635c >			  ## os_api.c:197:0
  106356:    bf ea 60 fe       	call -0x340 <xTaskGetHandle : 10601a >			  ## os_api.c:206:16
  10635a:    04 82             	goto 0x4 <os_task_del_req+0x12 : 106360 >			  ## os_api.c:206:16
  10635c:    bf ea ff fe       	call -0x202 <xTaskGetCurrentTaskHandle : 10615e >			  ## os_api.c:204:16
  106360:    04 16             	r4 = r0
  106362:    04 4e             	if (r4 == 0) goto 0x1c <os_task_del_req+0x32 : 106380 >
  106364:    bf ea cb fe       	call -0x26a <xTaskGetApplicationTaskTag : 1060fe >			  ## os_api.c:209:15
  106368:    05 16             	r5 = r0			  ## os_api.c:209:15
  10636a:    05 f8 0b 04       	if (r5 == 0x2) goto 0x16 <os_task_del_req+0x36 : 106384 >
  10636e:    06 f8 14 02       	if (r6 == 0x1) goto 0x28 <os_task_del_req+0x4C : 10639a >
  106372:    b5 e8 01 80       	if (r5 != 0x1) {
  106376:    41 21             		r1 = 0x1			  ## os_api.c:222:13
  106378:    40 16             		r0 = r4			  ## os_api.c:222:13
  10637a:    bf ea ab fe       		call -0x2aa
                               	} <vTaskSetApplicationTaskTag : 1060d4 >			  ## os_api.c:222:13
  10637e:    04 8d             	goto 0x1a <os_task_del_req+0x4C : 10639a >			  ## os_api.c:222:13
  106380:    45 20             	r5 = 0x0
  106382:    04 8b             	goto 0x16 <os_task_del_req+0x4C : 10639a >
  106384:    40 16             	r0 = r4			  ## os_api.c:211:21
  106386:    51 8b             	call -0xaa <get_taskq : 1062de >			  ## os_api.c:211:21
  106388:    00 44             	if (r0 == 0) goto 0x8 <os_task_del_req+0x44 : 106392 >
  10638a:    bf ea fb fb       	call -0x80a <vQueueDelete : 105b84 >			  ## os_api.c:213:17
  10638e:    40 16             	r0 = r4			  ## os_api.c:214:17
  106390:    51 9d             	call -0x86 <free_taskq : 10630c >			  ## os_api.c:214:17
  106392:    40 16             	r0 = r4			  ## os_api.c:217:13
  106394:    bf ea 11 fd       	call -0x5de <vTaskDelete : 105dba >			  ## os_api.c:217:13
  106398:    45 2e             	r5 = 0xe			  ## os_api.c:217:13
  10639a:    50 16             	r0 = r5			  ## os_api.c:226:1
  10639c:    56 04             	{pc, r6-r4} = [sp++]			  ## os_api.c:226:1


os_task_del_res:
  10639e:    10 04             	[--sp] = rets			  ## os_api.c:229:0
  1063a0:    bf ea dd fe       	call -0x246 <xTaskGetCurrentTaskHandle : 10615e >			  ## os_api.c:234:12
  1063a4:    41 22             	r1 = 0x2			  ## os_api.c:235:5
  1063a6:    bf ea 95 fe       	call -0x2d6 <vTaskSetApplicationTaskTag : 1060d4 >			  ## os_api.c:235:5
  1063aa:    10 3f             	r0 = -0x1			  ## os_api.c:236:5
  1063ac:    41 84             	call -0xf8 <os_time_dly : 1062b6 >			  ## os_api.c:236:5
  1063ae:    40 20             	r0 = 0x0			  ## os_api.c:238:5
  1063b0:    00 04             	pc = [sp++]			  ## os_api.c:238:5


os_task_del:
  1063b2:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:242:0
  1063b4:    bf ea 31 fe       	call -0x39e <xTaskGetHandle : 10601a >			  ## os_api.c:248:12
  1063b8:    04 16             	r4 = r0			  ## os_api.c:248:12
  1063ba:    04 4b             	if (r4 == 0) goto 0x16 <os_task_del+0x20 : 1063d2 >
  1063bc:    41 90             	call -0xe0 <get_taskq : 1062de >			  ## os_api.c:250:17
  1063be:    05 16             	r5 = r0			  ## os_api.c:250:17
  1063c0:    40 16             	r0 = r4			  ## os_api.c:251:9
  1063c2:    bf ea fa fc       	call -0x60c <vTaskDelete : 105dba >			  ## os_api.c:251:9
  1063c6:    05 45             	if (r5 == 0) goto 0xa <os_task_del+0x20 : 1063d2 >			  ## os_api.c:251:9
  1063c8:    50 16             	r0 = r5			  ## os_api.c:253:13
  1063ca:    bf ea db fb       	call -0x84a <vQueueDelete : 105b84 >			  ## os_api.c:253:13
  1063ce:    40 16             	r0 = r4			  ## os_api.c:254:13
  1063d0:    41 9d             	call -0xc6 <free_taskq : 10630c >			  ## os_api.c:254:13
  1063d2:    40 20             	r0 = 0x0			  ## os_api.c:257:5
  1063d4:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:257:5


os_sem_post:
  1063d6:    78 04             	[--sp] = {rets, r8-r4}			  ## os_api.c:578:0
  1063d8:    64 e0 00 1b       	r1 = icfg			  ## cpu.h:73:5
  1063dc:    04 16             	r4 = r0
  1063de:    60 ff ff 10 35 00 	if ((r1 & 0xFF) == 0) goto 0x6a <os_sem_post+0x78 : 10644e >			  ## os_api.c:581:9
  1063e4:    c5 ff e8 bc 02 00 	r5 = 0x2bce8 <mask_log_e : 2bce8 >
  1063ea:    c8 ff 21 6b 10 00 	r8 = 0x106b21 <$data.__1+0x12 : 106b20 >
  1063f0:    c6 ff d8 6b 10 00 	r6 = 0x106bd8 <$data.__1+0xCA : 106bd8 >
  1063f6:    84 46             	if (r4 != 0) goto 0xc <os_sem_post+0x2E : 106404 >
  1063f8:    42 f0 e4 03       	r2 = 0x3e4  # <ROM_RAM_SIZE+0xC4 : 3e4 >			  ## FreeRTOSConfig.h:181:5
  1063fc:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  1063fe:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  106400:    61 16             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  106402:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  106404:    07 e1 40 40       	r7 = r4 + 0x40
  106408:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1000:5
  10640a:    00 46             	if (r0 == 0) goto 0xc <os_sem_post+0x42 : 106418 >			  ## queue.c:1000:5
  10640c:    42 f0 e8 03       	r2 = 0x3e8  # <ROM_RAM_SIZE+0xC8 : 3e8 >			  ## FreeRTOSConfig.h:181:5
  106410:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  106412:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  106414:    61 16             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  106416:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  106418:    40 60             	r0 = [r4+0x0] 			  ## queue.c:1005:5
  10641a:    80 48             	if (r0 != 0) goto 0x10 <os_sem_post+0x56 : 10642c >			  ## queue.c:1005:5
  10641c:    40 61             	r0 = [r4+0x4] 			  ## queue.c:1005:5
  10641e:    00 46             	if (r0 == 0) goto 0xc <os_sem_post+0x56 : 10642c >			  ## queue.c:1005:5
  106420:    42 f0 ed 03       	r2 = 0x3ed  # <ROM_RAM_SIZE+0xCC : 3ec >			  ## FreeRTOSConfig.h:181:5
  106424:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  106426:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  106428:    61 16             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  10642a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10642c:    bf ea 30 f4       	call -0x17a0 <local_irq_disable : 104c90 >			  ## queue.c:1023:5
  106430:    20 00             	csync			  ## queue.c:1023:5
  106432:    50 ec 48 03       	r1_r0 = d[r4+0x38]			  ## queue.c:1027:56
  106436:    45 20             	r5 = 0x0
  106438:    01 e9 16 00       	if (r0 >= r1) goto 0x2c <os_sem_post+0x92 : 106468 >
  10643c:    79 45             	r1 = b[r7+0x5] (u)			  ## queue.c:1033:45
  10643e:    c0 21             	r0 += 0x1			  ## queue.c:1043:60
  106440:    c0 6e             	[r4+0x38] = r0			  ## queue.c:1043:40
  106442:    11 f8 0a fe       	if (r1 == 0xff) goto 0x14 <os_sem_post+0x84 : 10645a >			  ## queue.c:1043:40
  106446:    18 81             	r0 = r1 + 0x1			  ## queue.c:1107:53
  106448:    f8 45             	b[r7+0x5] = r0			  ## queue.c:1107:34
  10644a:    45 21             	r5 = 0x1			  ## queue.c:1107:34
  10644c:    04 8d             	goto 0x1a <os_sem_post+0x92 : 106468 >			  ## queue.c:1107:34
  10644e:    41 20             	r1 = 0x0			  ## os_api.c:585:15
  106450:    82 14             	r3_r2 = 0			  ## os_api.c:585:15
  106452:    bf ea c0 f8       	call -0xe80 <xQueueGenericSend : 1055d6 >			  ## os_api.c:585:15
  106456:    05 16             	r5 = r0			  ## os_api.c:585:15
  106458:    04 8b             	goto 0x16 <os_sem_post+0x9A : 106470 >
  10645a:    d0 ec 46 02       	r0 = [++r4=0x24]			  ## queue.c:1085:25
  10645e:    45 21             	r5 = 0x1
  106460:    00 43             	if (r0 == 0) goto 0x6 <os_sem_post+0x92 : 106468 >
  106462:    40 16             	r0 = r4			  ## queue.c:1087:29
  106464:    bf ea a0 f4       	call -0x16c0 <xTaskRemoveFromEventList : 104da8 >			  ## queue.c:1087:29
  106468:    bf ea 19 f4       	call -0x17ce <local_irq_enable : 104c9e >			  ## queue.c:1118:5
  10646c:    bf ea 2c f5       	call -0x15a8 <vPortYield : 104ec8 >			  ## os_api.c:583:9
  106470:    40 20             	r0 = 0x0			  ## os_api.c:588:12
  106472:    b5 e8 01 00       	if (r5 != 0x1) {			  ## os_api.c:588:12
  106476:    10 32             		r0 = -0xe
                               	}			  ## os_api.c:588:12
  106478:    58 04             	{pc, r8-r4} = [sp++]			  ## os_api.c:588:5


__os_taskq_pend:
  10647a:    7a 04             	[--sp] = {rets, r10-r4}			  ## os_api.c:266:0
  10647c:    e2 9f             	sp += -0x4			  ## os_api.c:266:0
  10647e:    29 16             	r9 = r2			  ## os_api.c:266:0
  106480:    05 16             	r5 = r0			  ## os_api.c:266:0
  106482:    bf ea 6c fe       	call -0x328 <xTaskGetCurrentTaskHandle : 10615e >			  ## os_api.c:270:25
  106486:    07 16             	r7 = r0			  ## os_api.c:270:25
  106488:    04 83             	goto 0x6 <__os_taskq_pend+0x16 : 106490 >
  10648a:    40 22             	r0 = 0x2			  ## os_api.c:276:9
  10648c:    bf ea 13 ff       	call -0x1da <os_time_dly : 1062b6 >			  ## os_api.c:276:9
  106490:    70 16             	r0 = r7			  ## os_api.c:273:17
  106492:    bf ea 24 ff       	call -0x1b8 <get_taskq : 1062de >			  ## os_api.c:273:17
  106496:    06 16             	r6 = r0			  ## os_api.c:273:17
  106498:    76 58             	if (r6 == 0) goto -0x10 <__os_taskq_pend+0x10 : 10648a >			  ## os_api.c:275:9
  10649a:    0a e1 04 50       	r10 = r5 + 0x4
  10649e:    08 e1 10 50       	r8 = r5 + 0x10
  1064a2:    34 81             	goto 0xc2 <__os_taskq_pend+0xEC : 106566 >
  1064a4:    bf ea f4 f3       	call -0x1818 <local_irq_disable : 104c90 >			  ## os_api.c:292:9
  1064a8:    20 00             	csync			  ## os_api.c:292:9
  1064aa:    60 16             	r0 = r6			  ## os_api.c:294:13
  1064ac:    bf ea 26 fb       	call -0x9b4 <uxQueueMessagesWaiting : 105afc >			  ## os_api.c:294:13
  1064b0:    10 58             	if (r0 == 0) goto 0x70 <__os_taskq_pend+0xA8 : 106522 >			  ## os_api.c:294:13
  1064b2:    89 80             	r1 = sp + 0
  1064b4:    42 20             	r2 = 0x0			  ## os_api.c:299:15
  1064b6:    44 20             	r4 = 0x0			  ## os_api.c:299:15
  1064b8:    60 16             	r0 = r6			  ## os_api.c:299:15
  1064ba:    bf ea de fa       	call -0xa44 <xQueueReceiveFromISR : 105a7a >			  ## os_api.c:299:15
  1064be:    a7 d6             	r7 = r10  #			  ## os_api.c:305:34
  1064c0:    00 20             		 r0 = [sp]			  ## os_api.c:303:24
  1064c2:    81 a8             	r1 = r0 >> 0x8			  ## os_api.c:303:24
  1064c4:    d1 60             	[r5+0x0] = r1			  ## os_api.c:303:17
  1064c6:    04 88             	goto 0x10 <__os_taskq_pend+0x5E : 1064d8 >			  ## os_api.c:303:17
  1064c8:    42 20             	r2 = 0x0			  ## os_api.c:306:19
  1064ca:    60 15             	r1_r0 = r7_r6			  ## os_api.c:306:19
  1064cc:    bf ea d5 fa       	call -0xa56 <xQueueReceiveFromISR : 105a7a >			  ## os_api.c:306:19
  1064d0:    dc e9 00 00       	r0 = b[sp] (u)			  ## os_api.c:306:19
  1064d4:    c7 24             	r7 += 0x4			  ## os_api.c:305:9
  1064d6:    c4 21             	r4 += 0x1			  ## os_api.c:305:41
  1064d8:    00 17             	r0 = r0.b0 (u)			  ## os_api.c:305:34
  1064da:    80 ed f5 41       	ifs (r4 < r0) goto -0x16 <__os_taskq_pend+0x4E : 1064c8 >			  ## os_api.c:305:9
  1064de:    bf ea de f3       	call -0x1844 <local_irq_enable : 104c9e >			  ## os_api.c:310:9
  1064e2:    50 60             	r0 = [r5+0x0] 			  ## os_api.c:312:14
  1064e4:    60 e1 70 08       	r0 = r0 & 0xF00000			  ## os_api.c:312:22
  1064e8:    21 ff 40 09 45 00 	if (r0 != 0x300000) goto 0x8a <__os_taskq_pend+0xFE : 106578 >			  ## os_api.c:312:22
  1064ee:    50 62             	r0 = [r5+0x8] 			  ## os_api.c:88:19
  1064f0:    04 17             	r4 = r0.b0 (u)			  ## os_api.c:88:27
  1064f2:    4f 81             	r7 = r4 + 0x1			  ## os_api.c:92:18
  1064f4:    41 16             	r1 = r4			  ## os_api.c:91:9
  1064f6:    30 ea 80 0f       	if ((r0 & 0x100) != 0) {			  ## os_api.c:91:9
  1064fa:    71 16             		r1 = r7
                               	}			  ## os_api.c:91:9
  1064fc:    dc e9 00 20       	r2 = b[sp] (u)			  ## os_api.c:315:32
  106500:    b3 e1 84 04       	r3 = uextra(r0, p:0x9, l:0x1)			  ## os_api.c:94:9
  106504:    33 21             	r3 |= 0x2			  ## os_api.c:94:9
  106506:    31 18             	r1 += r3			  ## os_api.c:100:26
  106508:    c2 21             	r2 += 0x1			  ## os_api.c:315:37
  10650a:    02 e9 2c 10       	if (r1 >= r2) goto 0x58 <__os_taskq_pend+0xEC : 106566 >			  ## os_api.c:315:37
  10650e:    01 17             	r1 = r0.b0 (u)			  ## os_api.c:101:13
  106510:    01 f8 0a 04       	if (r1 == 0x2) goto 0x14 <__os_taskq_pend+0xAE : 106528 >			  ## os_api.c:101:13
  106514:    81 f8 10 02       	if (r1 != 0x1) goto 0x20 <__os_taskq_pend+0xBE : 106538 >
  106518:    50 63             	r0 = [r5+0xc] 			  ## os_api.c:102:43
  10651a:    d0 ec a0 10       	r1 = [r10+0x0]			  ## os_api.c:102:34
  10651e:    c1 00             	call r1			  ## os_api.c:102:19
  106520:    04 92             	goto 0x24 <__os_taskq_pend+0xCC : 106546 >
  106522:    bf ea bc f3       	call -0x1888 <local_irq_enable : 104c9e >			  ## os_api.c:295:13
  106526:    04 9f             	goto 0x3e <__os_taskq_pend+0xEC : 106566 >			  ## os_api.c:295:13
  106528:    50 e8 06 52       	if ((r0 & 0x400) != 0) goto 0xc <__os_taskq_pend+0xBE : 106538 >
  10652c:    50 ec 5c 00       	r1_r0 = d[r5+0xc]			  ## os_api.c:104:57
  106530:    d0 ec a0 20       	r2 = [r10+0x0]			  ## os_api.c:104:39
  106534:    c2 00             	call r2			  ## os_api.c:104:19
  106536:    04 87             	goto 0xe <__os_taskq_pend+0xCC : 106546 >
  106538:    31 f1 ff 4f       	r1 = r4 + -0x1  #			  ## os_api.c:106:72
  10653c:    50 63             		 r0 = [r5+0xc] 			  ## os_api.c:106:55
  10653e:    d0 ec a0 30       	r3 = [r10+0x0]			  ## os_api.c:106:46
  106542:    82 16             	r2 = r8			  ## os_api.c:106:19
  106544:    c3 00             	call r3			  ## os_api.c:106:19
  106546:    51 62             	r1 = [r5+0x8] 			  ## os_api.c:108:13
  106548:    31 ea 80 df       	if ((r1 & 0x100) != 0) {			  ## os_api.c:108:13
  10654c:    59 8c             		r1 = r5 + 0xc			  ## os_api.c:110:21
  10654e:    d8 ec 1a 14       		r1 = [r1+r4<<2]			  ## os_api.c:110:21
  106552:    90 60             		[r1+0x0] = r0			  ## os_api.c:110:39
  106554:    51 62             		r1 = [r5+0x8] 
                               	} else {			  ## os_api.c:110:39
  106556:    47 16             		r7 = r4
                               	}			  ## os_api.c:110:39
  106558:    51 e8 05 48       	if ((r1 & 0x200) == 0) goto 0xa <__os_taskq_pend+0xEC : 106566 >			  ## os_api.c:110:39
  10655c:    58 8c             	r0 = r5 + 0xc			  ## os_api.c:114:35
  10655e:    d8 ec 0a 07       	r0 = [r0+r7<<2]			  ## os_api.c:114:35
  106562:    bf ea 38 ff       	call -0x190 <os_sem_post : 1063d6 >			  ## os_api.c:114:13
  106566:    89 80             	r1 = sp + 0
  106568:    43 21             	r3 = 0x1			  ## os_api.c:287:15
  10656a:    60 16             	r0 = r6			  ## os_api.c:287:15
  10656c:    92 16             	r2 = r9			  ## os_api.c:287:15
  10656e:    bf ea 07 f9       	call -0xdf2 <xQueueGenericReceive : 105780 >			  ## os_api.c:287:15
  106572:    c0 58             	if (r0 != 0) goto -0xd0 <__os_taskq_pend+0x2A : 1064a4 >
  106574:    40 36             	r0 = 0x16
  106576:    04 81             	goto 0x2 <__os_taskq_pend+0x100 : 10657a >
  106578:    40 2d             	r0 = 0xd
  10657a:    02 81             	sp += 0x4
  10657c:    5a 04             	{pc, r10-r4} = [sp++]			  ## os_api.c:319:1


os_taskq_pend:
  10657e:    12 3f             	r2 = -0x1			  ## os_api.c:322:0
  106580:    10 16             	r0 = r1			  ## os_api.c:323:12
  106582:    b7 9b             	goto -0x10a <__os_taskq_pend : 10647a >			  ## os_api.c:323:12


os_task_pend:
  106584:    12 3f             	r2 = -0x1			  ## os_api.c:327:0
  106586:    10 16             	r0 = r1			  ## os_api.c:328:12
  106588:    b7 98             	goto -0x110 <__os_taskq_pend : 10647a >			  ## os_api.c:328:12


__os_taskq_post:
  10658a:    77 04             	[--sp] = {rets, r7-r4}			  ## os_api.c:332:0
  10658c:    e2 9e             	sp += -0x8			  ## os_api.c:332:0
  10658e:    34 16             	r4 = r3			  ## os_api.c:332:0
  106590:    25 16             	r5 = r2			  ## os_api.c:332:0
  106592:    17 16             	r7 = r1			  ## os_api.c:332:0
  106594:    bf ea 41 fd       	call -0x57e <xTaskGetHandle : 10601a >			  ## os_api.c:339:12
  106598:    01 16             	r1 = r0			  ## os_api.c:339:12
  10659a:    01 56             	if (r1 == 0) goto 0x2c <__os_taskq_post+0x3E : 1065c8 >
  10659c:    bf ea 78 f3       	call -0x1910 <local_irq_disable : 104c90 >			  ## os_api.c:345:5
  1065a0:    20 00             	csync			  ## os_api.c:345:5
  1065a2:    10 16             	r0 = r1			  ## os_api.c:346:13
  1065a4:    bf ea 9b fe       	call -0x2ca <get_taskq : 1062de >			  ## os_api.c:346:13
  1065a8:    06 16             	r6 = r0			  ## os_api.c:346:13
  1065aa:    06 50             	if (r6 == 0) goto 0x20 <__os_taskq_post+0x42 : 1065cc >
  1065ac:    50 17             	r0 = r5.b0 (u)			  ## os_api.c:351:15
  1065ae:    a0 e1 60 74       	r0 <= insert(r7, p:0x8, l:0x18)			  ## os_api.c:352:15
  1065b2:    60 d6             	r0 = r6  #			  ## os_api.c:355:9
  1065b4:    80 21             		 [sp+4] = r0			  ## os_api.c:352:15
  1065b6:    bf ea b9 fa       	call -0xa8e <uxQueueSpacesAvailable : 105b2c >			  ## os_api.c:355:9
  1065ba:    59 81             	r1 = r5 + 0x1			  ## os_api.c:355:46
  1065bc:    01 e9 0a 00       	if (r0 >= r1) goto 0x14 <__os_taskq_post+0x4A : 1065d4 >			  ## os_api.c:355:9
  1065c0:    bf ea 6d f3       	call -0x1926 <local_irq_enable : 104c9e >			  ## os_api.c:356:9
  1065c4:    40 35             	r0 = 0x15			  ## os_api.c:356:9
  1065c6:    04 9d             	goto 0x3a <__os_taskq_post+0x78 : 106602 >			  ## os_api.c:356:9
  1065c8:    40 2e             	r0 = 0xe
  1065ca:    04 9b             	goto 0x36 <__os_taskq_post+0x78 : 106602 >
  1065cc:    bf ea 67 f3       	call -0x1932 <local_irq_enable : 104c9e >			  ## os_api.c:348:9
  1065d0:    40 24             	r0 = 0x4			  ## os_api.c:348:9
  1065d2:    04 97             	goto 0x2e <__os_taskq_post+0x78 : 106602 >			  ## os_api.c:348:9
  1065d4:    89 84             	r1 = sp + 4
  1065d6:    8a 80             	r2 = sp + 0
  1065d8:    43 20             	r3 = 0x0			  ## os_api.c:361:11
  1065da:    47 20             	r7 = 0x0			  ## os_api.c:361:11
  1065dc:    60 16             	r0 = r6			  ## os_api.c:361:11
  1065de:    bf ea f7 f9       	call -0xc12 <xQueueGenericSendFromISR : 1059d0 >			  ## os_api.c:361:11
  1065e2:    04 88             	goto 0x10 <__os_taskq_post+0x6A : 1065f4 >
  1065e4:    8a 80             	r2 = sp + 0
  1065e6:    43 20             	r3 = 0x0			  ## os_api.c:363:15
  1065e8:    60 16             	r0 = r6			  ## os_api.c:363:15
  1065ea:    41 16             	r1 = r4			  ## os_api.c:363:15
  1065ec:    bf ea f0 f9       	call -0xc20 <xQueueGenericSendFromISR : 1059d0 >			  ## os_api.c:363:15
  1065f0:    c4 24             	r4 += 0x4			  ## os_api.c:362:5
  1065f2:    c7 21             	r7 += 0x1			  ## os_api.c:362:32
  1065f4:    85 ed f6 71       	ifs (r7 < r5) goto -0x14 <__os_taskq_post+0x5A : 1065e4 >			  ## os_api.c:362:5
  1065f8:    bf ea 51 f3       	call -0x195e <local_irq_enable : 104c9e >			  ## os_api.c:366:5
  1065fc:    bf ea 64 f4       	call -0x1738 <vPortYield : 104ec8 >			  ## os_api.c:368:5
  106600:    40 20             	r0 = 0x0			  ## os_api.c:368:5
  106602:    02 82             	sp += 0x8
  106604:    57 04             	{pc, r7-r4} = [sp++]			  ## os_api.c:371:1


os_taskq_post:
  106606:    62 04             	[--sp] = {r3, r2}			  ## os_api.c:374:0
  106608:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:374:0
  10660a:    e2 97             	sp += -0x24			  ## os_api.c:374:0
  10660c:    14 16             	r4 = r1			  ## os_api.c:374:0
  10660e:    a9 8c             	r1 = sp + 44			  ## os_api.c:374:0
  106610:    81 20             	[sp] = r1			  ## os_api.c:378:5
  106612:    41 20             	r1 = 0x0
  106614:    04 88             	goto 0x10 <os_taskq_post+0x20 : 106626 >
  106616:    02 20             	r2 = [sp]			  ## os_api.c:380:19
  106618:    2b 84             	r3 = r2 + 0x4			  ## os_api.c:380:19
  10661a:    83 20             	[sp] = r3			  ## os_api.c:380:19
  10661c:    22 60             	r2 = [r2+0x0] 			  ## os_api.c:380:19
  10661e:    8b 84             	r3 = sp + 4			  ## os_api.c:380:19
  106620:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## os_api.c:380:17
  106624:    c1 21             	r1 += 0x1			  ## os_api.c:379:32
  106626:    84 ed f6 11       	ifs (r1 < r4) goto -0x14 <os_taskq_post+0x10 : 106616 >			  ## os_api.c:379:5
  10662a:    8b 84             	r3 = sp + 4
  10662c:    60 e0 80 18       	r1 = 0x400000			  ## os_api.c:383:12
  106630:    42 16             	r2 = r4			  ## os_api.c:383:12
  106632:    51 8b             	call -0xaa <__os_taskq_post : 10658a >			  ## os_api.c:383:12
  106634:    02 89             	sp += 0x24
  106636:    34 04             	{rets, r4} = [sp++]			  ## os_api.c:383:5
  106638:    02 82             	sp += 0x8			  ## os_api.c:383:5
  10663a:    80 00             	rts			  ## os_api.c:383:5


os_taskq_post_type:
  10663c:    d7 86             	goto -0xb4 <__os_taskq_post : 10658a >			  ## os_api.c:387:0


os_taskq_flush:
  10663e:    7b 04             	[--sp] = {rets, r11-r4}			  ## os_api.c:392:0
  106640:    e2 93             	sp += -0x34			  ## os_api.c:392:0
  106642:    bf ea 25 f3       	call -0x19b6 <local_irq_disable : 104c90 >			  ## os_api.c:399:5
  106646:    20 00             	csync			  ## os_api.c:399:5
  106648:    bf ea 89 fd       	call -0x4ee <xTaskGetCurrentTaskHandle : 10615e >			  ## os_api.c:400:12
  10664c:    20 53             	if (r0 == 0) goto 0xa6 <os_taskq_flush+0xB6 : 1066f4 >
  10664e:    bf ea 46 fe       	call -0x374 <get_taskq : 1062de >			  ## os_api.c:405:13
  106652:    04 16             	r4 = r0			  ## os_api.c:405:13
  106654:    24 4b             	if (r4 == 0) goto 0x96 <os_taskq_flush+0xAE : 1066ec >
  106656:    bf ea 51 fa       	call -0xb5e <uxQueueMessagesWaiting : 105afc >			  ## os_api.c:412:20
  10665a:    05 16             	r5 = r0			  ## os_api.c:412:20
  10665c:    f8 e8 04 b0       	r11 = sp + 4
  106660:    49 e0 f2 ff       	r9 = -0xe <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFF6 : fffffffffffffff2 >
  106664:    ca ff e8 bc 02 00 	r10 = 0x2bce8 <mask_log_e : 2bce8 >
  10666a:    c8 ff 84 6d 10 00 	r8 = 0x106d84 <$data.__1+0x276 : 106d84 >
  106670:    14 9c             	goto 0x78 <os_taskq_flush+0xAC : 1066ea >
  106672:    89 80             	r1 = sp + 0
  106674:    82 14             	r3_r2 = 0			  ## os_api.c:415:9
  106676:    46 20             	r6 = 0x0			  ## os_api.c:415:9
  106678:    40 16             	r0 = r4			  ## os_api.c:415:9
  10667a:    bf ea 81 f8       	call -0xefe <xQueueGenericReceive : 105780 >			  ## os_api.c:415:9
  10667e:    8f 84             	r7 = sp + 4
  106680:    04 87             	goto 0xe <os_taskq_flush+0x52 : 106690 >
  106682:    82 14             	r3_r2 = 0			  ## os_api.c:417:13
  106684:    40 16             	r0 = r4			  ## os_api.c:417:13
  106686:    71 16             	r1 = r7			  ## os_api.c:417:13
  106688:    bf ea 7a f8       	call -0xf0c <xQueueGenericReceive : 105780 >			  ## os_api.c:417:13
  10668c:    c7 24             	r7 += 0x4			  ## os_api.c:416:9
  10668e:    c6 21             	r6 += 0x1			  ## os_api.c:416:65
  106690:    00 20             	r0 = [sp]			  ## os_api.c:416:34
  106692:    02 17             	r2 = r0.b0 (u)			  ## os_api.c:416:34
  106694:    06 fc 02 16       	if (r6 > 0xb) goto 0x4 <os_taskq_flush+0x5E : 10669c >			  ## os_api.c:416:34
  106698:    82 ed f3 61       	ifs (r6 < r2) goto -0x1a <os_taskq_flush+0x44 : 106682 >
  10669c:    02 ee 06 50       	ifs (r5 > r2) goto 0xc <os_taskq_flush+0x6E : 1066ac >
  1066a0:    d0 ec a0 30       	r3 = [r10+0x0]			  ## os_api.c:419:9
  1066a4:    80 16             	r0 = r8			  ## os_api.c:419:9
  1066a6:    51 16             	r1 = r5			  ## os_api.c:419:9
  1066a8:    c3 00             	call r3			  ## os_api.c:419:9
  1066aa:    00 20             	r0 = [sp]			  ## os_api.c:419:9
  1066ac:    01 17             	r1 = r0.b0 (u)			  ## os_api.c:420:26
  1066ae:    32 e1 ff 5f       	r2 = r5 + -0x1			  ## os_api.c:420:31
  1066b2:    60 e1 70 04       	r0 = r0 & 0xF0000000			  ## os_api.c:422:24
  1066b6:    2d 1e             	r5 = r2 - r1			  ## os_api.c:420:18
  1066b8:    21 ff 40 05 16 00 	if (r0 != 0x30000000) goto 0x2c <os_taskq_flush+0xAC : 1066ea >
  1066be:    d0 ec b4 10       	r1 = [r11+0x4]			  ## os_api.c:423:27
  1066c2:    10 17             	r0 = r1.b0 (u)			  ## os_api.c:423:35
  1066c4:    51 e8 09 40       	if ((r1 & 0x100) == 0) goto 0x12 <os_taskq_flush+0x9C : 1066da >
  1066c8:    89 84             	r1 = sp + 4
  1066ca:    c1 28             	r1 += 0x8			  ## os_api.c:427:25
  1066cc:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## os_api.c:427:25
  1066d0:    d0 ec 11 90       	[r1+0x0] = r9			  ## os_api.c:427:43
  1066d4:    d0 ec b4 10       	r1 = [r11+0x4]			  ## os_api.c:427:43
  1066d8:    c0 21             	r0 += 0x1			  ## os_api.c:426:24
  1066da:    51 e8 06 48       	if ((r1 & 0x200) == 0) goto 0xc <os_taskq_flush+0xAC : 1066ea >
  1066de:    89 84             	r1 = sp + 4
  1066e0:    c1 28             	r1 += 0x8			  ## os_api.c:431:39
  1066e2:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## os_api.c:431:39
  1066e6:    bf ea 76 fe       	call -0x314 <os_sem_post : 1063d6 >			  ## os_api.c:431:17
  1066ea:    e5 43             	if (r5 != 0) goto -0x7a <os_taskq_flush+0x34 : 106672 >
  1066ec:    bf ea d7 f2       	call -0x1a52 <local_irq_enable : 104c9e >
  1066f0:    40 20             	r0 = 0x0
  1066f2:    04 83             	goto 0x6 <os_taskq_flush+0xBC : 1066fa >
  1066f4:    bf ea d3 f2       	call -0x1a5a <local_irq_enable : 104c9e >			  ## os_api.c:402:9
  1066f8:    10 2a             	r0 = -0x16
  1066fa:    02 8d             	sp += 0x34
  1066fc:    5b 04             	{pc, r11-r4} = [sp++]			  ## os_api.c:439:1


task_queue_post_event:
  1066fe:    13 16             	r3 = r1			  ## os_api.c:446:0
  106700:    60 e0 00 19       	r1 = 0x200000			  ## os_api.c:447:12
  106704:    a7 82             	goto -0x17c <__os_taskq_post : 10658a >			  ## os_api.c:447:12


os_taskq_post_msg:
  106706:    62 04             	[--sp] = {r3, r2}			  ## os_api.c:451:0
  106708:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:451:0
  10670a:    e2 97             	sp += -0x24			  ## os_api.c:451:0
  10670c:    14 16             	r4 = r1			  ## os_api.c:451:0
  10670e:    a9 8c             	r1 = sp + 44			  ## os_api.c:451:0
  106710:    81 20             	[sp] = r1			  ## os_api.c:455:5
  106712:    41 20             	r1 = 0x0
  106714:    04 88             	goto 0x10 <os_taskq_post_msg+0x20 : 106726 >
  106716:    02 20             	r2 = [sp]			  ## os_api.c:457:19
  106718:    2b 84             	r3 = r2 + 0x4			  ## os_api.c:457:19
  10671a:    83 20             	[sp] = r3			  ## os_api.c:457:19
  10671c:    22 60             	r2 = [r2+0x0] 			  ## os_api.c:457:19
  10671e:    8b 84             	r3 = sp + 4			  ## os_api.c:457:19
  106720:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## os_api.c:457:17
  106724:    c1 21             	r1 += 0x1			  ## os_api.c:456:32
  106726:    84 ed f6 11       	ifs (r1 < r4) goto -0x14 <os_taskq_post_msg+0x10 : 106716 >			  ## os_api.c:456:5
  10672a:    8b 84             	r3 = sp + 4
  10672c:    60 e0 80 19       	r1 = 0x100000			  ## os_api.c:461:12
  106730:    42 16             	r2 = r4			  ## os_api.c:461:12
  106732:    bf ea 2a ff       	call -0x1ac <__os_taskq_post : 10658a >			  ## os_api.c:461:12
  106736:    02 89             	sp += 0x24
  106738:    34 04             	{rets, r4} = [sp++]			  ## os_api.c:461:5
  10673a:    02 82             	sp += 0x8			  ## os_api.c:461:5
  10673c:    80 00             	rts			  ## os_api.c:461:5


os_taskq_post_event:
  10673e:    62 04             	[--sp] = {r3, r2}			  ## os_api.c:465:0
  106740:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:465:0
  106742:    e2 97             	sp += -0x24			  ## os_api.c:465:0
  106744:    14 16             	r4 = r1			  ## os_api.c:465:0
  106746:    a9 8c             	r1 = sp + 44			  ## os_api.c:465:0
  106748:    81 20             	[sp] = r1			  ## os_api.c:469:5
  10674a:    41 20             	r1 = 0x0
  10674c:    04 88             	goto 0x10 <os_taskq_post_event+0x20 : 10675e >
  10674e:    02 20             	r2 = [sp]			  ## os_api.c:471:19
  106750:    2b 84             	r3 = r2 + 0x4			  ## os_api.c:471:19
  106752:    83 20             	[sp] = r3			  ## os_api.c:471:19
  106754:    22 60             	r2 = [r2+0x0] 			  ## os_api.c:471:19
  106756:    8b 84             	r3 = sp + 4			  ## os_api.c:471:19
  106758:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## os_api.c:471:17
  10675c:    c1 21             	r1 += 0x1			  ## os_api.c:470:32
  10675e:    84 ed f6 11       	ifs (r1 < r4) goto -0x14 <os_taskq_post_event+0x10 : 10674e >			  ## os_api.c:470:5
  106762:    8b 84             	r3 = sp + 4
  106764:    60 e0 00 19       	r1 = 0x200000			  ## os_api.c:475:12
  106768:    42 16             	r2 = r4			  ## os_api.c:475:12
  10676a:    bf ea 0e ff       	call -0x1e4 <__os_taskq_post : 10658a >			  ## os_api.c:475:12
  10676e:    02 89             	sp += 0x24
  106770:    34 04             	{rets, r4} = [sp++]			  ## os_api.c:475:5
  106772:    02 82             	sp += 0x8			  ## os_api.c:475:5
  106774:    80 00             	rts			  ## os_api.c:475:5


os_taskq_accept:
  106776:    42 20             	r2 = 0x0			  ## os_api.c:479:0
  106778:    10 16             	r0 = r1			  ## os_api.c:480:12
  10677a:    37 9f             	goto -0x302 <__os_taskq_pend : 10647a >			  ## os_api.c:480:12


os_taskq_del:
  10677c:    7c 04             	[--sp] = {rets, r12-r4}			  ## os_api.c:485:0
  10677e:    e2 93             	sp += -0x34			  ## os_api.c:485:0
  106780:    1c 16             	r12 = r1			  ## os_api.c:485:0
  106782:    bf ea 4a fc       	call -0x76c <xTaskGetHandle : 10601a >			  ## os_api.c:494:12
  106786:    01 16             	r1 = r0			  ## os_api.c:494:12
  106788:    bf ea 82 f2       	call -0x1afc <local_irq_disable : 104c90 >			  ## os_api.c:496:5
  10678c:    20 00             	csync			  ## os_api.c:496:5
  10678e:    10 16             	r0 = r1			  ## os_api.c:497:13
  106790:    bf ea a5 fd       	call -0x4b6 <get_taskq : 1062de >			  ## os_api.c:497:13
  106794:    05 16             	r5 = r0			  ## os_api.c:497:13
  106796:    25 59             	if (r5 == 0) goto 0xb2 <os_taskq_del+0xCE : 10684a >
  106798:    bf ea b0 f9       	call -0xca0 <uxQueueMessagesWaiting : 105afc >			  ## os_api.c:504:20
  10679c:    07 16             	r7 = r0			  ## os_api.c:504:20
  10679e:    69 e1 70 c8       	r9 = r12 & 0xF00000
  1067a2:    f8 e8 04 a0       	r10 = sp + 4
  1067a6:    48 e0 17 00       	r8 = 0x17 <TLB_BEGIN+0x16 : 16 >
  1067aa:    4b e0 f2 ff       	r11 = -0xe <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFF6 : fffffffffffffff2 >
  1067ae:    24 89             	goto 0x92 <os_taskq_del+0xC6 : 106842 >
  1067b0:    89 80             	r1 = sp + 0
  1067b2:    82 14             	r3_r2 = 0			  ## os_api.c:509:9
  1067b4:    44 20             	r4 = 0x0			  ## os_api.c:509:9
  1067b6:    50 16             	r0 = r5			  ## os_api.c:509:9
  1067b8:    bf ea e2 f7       	call -0x103c <xQueueGenericReceive : 105780 >			  ## os_api.c:509:9
  1067bc:    8e 84             	r6 = sp + 4
  1067be:    04 87             	goto 0xe <os_taskq_del+0x52 : 1067ce >
  1067c0:    82 14             	r3_r2 = 0			  ## os_api.c:511:13
  1067c2:    50 16             	r0 = r5			  ## os_api.c:511:13
  1067c4:    61 16             	r1 = r6			  ## os_api.c:511:13
  1067c6:    bf ea db f7       	call -0x104a <xQueueGenericReceive : 105780 >			  ## os_api.c:511:13
  1067ca:    c6 24             	r6 += 0x4			  ## os_api.c:510:9
  1067cc:    c4 21             	r4 += 0x1			  ## os_api.c:510:65
  1067ce:    00 20             	r0 = [sp]			  ## os_api.c:510:34
  1067d0:    01 17             	r1 = r0.b0 (u)			  ## os_api.c:510:34
  1067d2:    04 fc 02 16       	if (r4 > 0xb) goto 0x4 <os_taskq_del+0x5E : 1067da >			  ## os_api.c:510:34
  1067d6:    81 ed f3 41       	ifs (r4 < r1) goto -0x1a <os_taskq_del+0x44 : 1067c0 >
  1067da:    32 e1 ff 7f       	r2 = r7 + -0x1			  ## os_api.c:513:31
  1067de:    80 a8             	r0 = r0 >> 0x8			  ## os_api.c:515:18
  1067e0:    2f 1e             	r7 = r2 - r1			  ## os_api.c:513:18
  1067e2:    0c e8 14 00       	if (r0 == r12) goto 0x28 <os_taskq_del+0x92 : 10680e >
  1067e6:    89 80             	r1 = sp + 0
  1067e8:    82 14             	r3_r2 = 0			  ## os_api.c:530:13
  1067ea:    44 20             	r4 = 0x0			  ## os_api.c:530:13
  1067ec:    50 16             	r0 = r5			  ## os_api.c:530:13
  1067ee:    bf ea f2 f6       	call -0x121c <xQueueGenericSend : 1055d6 >			  ## os_api.c:530:13
  1067f2:    8e 84             	r6 = sp + 4
  1067f4:    04 87             	goto 0xe <os_taskq_del+0x88 : 106804 >
  1067f6:    82 14             	r3_r2 = 0			  ## os_api.c:532:17
  1067f8:    50 16             	r0 = r5			  ## os_api.c:532:17
  1067fa:    61 16             	r1 = r6			  ## os_api.c:532:17
  1067fc:    bf ea eb f6       	call -0x122a <xQueueGenericSend : 1055d6 >			  ## os_api.c:532:17
  106800:    c6 24             	r6 += 0x4			  ## os_api.c:531:13
  106802:    c4 21             	r4 += 0x1			  ## os_api.c:531:45
  106804:    dc e9 00 00       	r0 = b[sp] (u)			  ## os_api.c:531:38
  106808:    80 ed f5 41       	ifs (r4 < r0) goto -0x16 <os_taskq_del+0x7A : 1067f6 >			  ## os_api.c:531:38
  10680c:    04 9a             	goto 0x34 <os_taskq_del+0xC6 : 106842 >			  ## os_api.c:531:38
  10680e:    c0 14             	r8 = 0
  106810:    21 ff 40 99 16 00 	if (r9 != 0x300000) goto 0x2c <os_taskq_del+0xC6 : 106842 >
  106816:    d0 ec a4 10       	r1 = [r10+0x4]			  ## os_api.c:517:31
  10681a:    10 17             	r0 = r1.b0 (u)			  ## os_api.c:517:39
  10681c:    51 e8 09 40       	if ((r1 & 0x100) == 0) goto 0x12 <os_taskq_del+0xB6 : 106832 >
  106820:    89 84             	r1 = sp + 4
  106822:    c1 28             	r1 += 0x8			  ## os_api.c:521:29
  106824:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## os_api.c:521:29
  106828:    d0 ec 11 b0       	[r1+0x0] = r11			  ## os_api.c:521:47
  10682c:    d0 ec a4 10       	r1 = [r10+0x4]			  ## os_api.c:521:47
  106830:    c0 21             	r0 += 0x1			  ## os_api.c:520:28
  106832:    51 e8 06 48       	if ((r1 & 0x200) == 0) goto 0xc <os_taskq_del+0xC6 : 106842 >
  106836:    89 84             	r1 = sp + 4
  106838:    c1 28             	r1 += 0x8			  ## os_api.c:525:43
  10683a:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## os_api.c:525:43
  10683e:    bf ea ca fd       	call -0x46c <os_sem_post : 1063d6 >			  ## os_api.c:525:21
  106842:    d7 56             	if (r7 != 0) goto -0x94 <os_taskq_del+0x34 : 1067b0 >
  106844:    bf ea 2b f2       	call -0x1baa <local_irq_enable : 104c9e >			  ## os_api.c:538:5
  106848:    04 84             	goto 0x8 <os_taskq_del+0xD6 : 106852 >			  ## os_api.c:538:5
  10684a:    bf ea 28 f2       	call -0x1bb0 <local_irq_enable : 104c9e >			  ## os_api.c:499:9
  10684e:    48 e0 18 00       	r8 = 0x18 <TLB_BEGIN+0x18 : 18 >			  ## os_api.c:499:9
  106852:    80 16             	r0 = r8			  ## os_api.c:541:1
  106854:    02 8d             	sp += 0x34			  ## os_api.c:541:1
  106856:    5c 04             	{pc, r12-r4} = [sp++]			  ## os_api.c:541:1


os_taskq_del_type:
  106858:    c7 91             	goto -0xde <os_taskq_del : 10677c >			  ## os_api.c:544:0


os_sem_create:
  10685a:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:549:0
  10685c:    e2 9f             	sp += -0x4			  ## os_api.c:549:0
  10685e:    14 16             	r4 = r1			  ## os_api.c:549:0
  106860:    05 16             	r5 = r0			  ## os_api.c:549:0
  106862:    a4 f9 0d 00       	if (r4 < 0x100) goto 0x1a <os_sem_create+0x26 : 106880 >			  ## os_api.c:549:0
  106866:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  10686c:    42 f0 8f 02       	r2 = 0x28f  # <os_bss_size+0x32 : 28e >			  ## FreeRTOSConfig.h:181:5
  106870:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  106872:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  106878:    c1 ff 9b 6b 10 00 	r1 = 0x106b9b <$data.__1+0x8C : 106b9a >			  ## FreeRTOSConfig.h:181:5
  10687e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  106880:    43 22             	r3 = 0x2			  ## queue.c:657:15
  106882:    78 3f             	r0 = 0xff			  ## queue.c:657:15
  106884:    41 20             	r1 = 0x0			  ## queue.c:657:15
  106886:    42 20             	r2 = 0x0			  ## queue.c:657:15
  106888:    53 d6             	r3 = r5  #			  ## queue.c:657:15
  10688a:    83 20             		 [sp] = r3			  ## queue.c:657:15
  10688c:    bf ea 7a f3       	call -0x190c <xQueueGenericCreateStatic : 104f84 >			  ## queue.c:657:15
  106890:    b0 e8 00 00       	if (r0 != 0x0) {
  106894:    84 6e             		[r0+0x38] = r4
                               	}			  ## queue.c:660:50
  106896:    40 20             	r0 = 0x0			  ## os_api.c:552:5
  106898:    02 81             	sp += 0x4
  10689a:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:552:5


os_sem_del:
  10689c:    10 04             	[--sp] = rets			  ## os_api.c:556:0
  10689e:    bf ea 71 f9       	call -0xd1e <vQueueDelete : 105b84 >			  ## os_api.c:557:5
  1068a2:    40 20             	r0 = 0x0			  ## os_api.c:559:5
  1068a4:    00 04             	pc = [sp++]			  ## os_api.c:559:5


os_sem_pend:
  1068a6:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:563:0
  1068a8:    64 e0 00 2b       	r2 = icfg			  ## cpu.h:73:5
  1068ac:    44 23             	r4 = 0x3
  1068ae:    61 ff ff 20 0c 00 	if ((r2 & 0xFF) != 0) goto 0x18 <os_sem_pend+0x26 : 1068cc >
  1068b4:    12 3f             	r2 = -0x1			  ## os_api.c:569:9
  1068b6:    b1 e8 00 00       	if (r1 != 0x0) {
  1068ba:    12 16             		r2 = r1
                               	}			  ## os_api.c:569:9
  1068bc:    41 20             	r1 = 0x0			  ## os_api.c:572:11
  1068be:    43 20             	r3 = 0x0			  ## os_api.c:572:11
  1068c0:    44 20             	r4 = 0x0			  ## os_api.c:572:11
  1068c2:    bf ea 5d f7       	call -0x1146 <xQueueGenericReceive : 105780 >			  ## os_api.c:572:11
  1068c6:    b0 e8 01 00       	if (r0 != 0x1) {
  1068ca:    44 2b             		r4 = 0xb
                               	}			  ## os_api.c:574:12
  1068cc:    40 16             	r0 = r4			  ## os_api.c:575:1
  1068ce:    54 04             	{pc, r4} = [sp++]			  ## os_api.c:575:1


os_sem_set:
  1068d0:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:592:0
  1068d2:    14 16             	r4 = r1			  ## os_api.c:592:0
  1068d4:    05 16             	r5 = r0			  ## os_api.c:592:0
  1068d6:    85 4d             	if (r5 != 0) goto 0x1a <os_sem_set+0x22 : 1068f2 >			  ## os_api.c:592:0
  1068d8:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  1068de:    42 f0 b9 08       	r2 = 0x8b9  # <stack_bss_size+0xB8 : 8b8 >			  ## FreeRTOSConfig.h:181:5
  1068e2:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  1068e4:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  1068ea:    c1 ff 58 6c 10 00 	r1 = 0x106c58 <$data.__1+0x14A : 106c58 >			  ## FreeRTOSConfig.h:181:5
  1068f0:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1068f2:    bf ea cd f1       	call -0x1c66 <local_irq_disable : 104c90 >			  ## queue.c:2235:5
  1068f6:    20 00             	csync			  ## queue.c:2235:5
  1068f8:    d4 6e             	[r5+0x38] = r4			  ## queue.c:2237:49
  1068fa:    bf ea d0 f1       	call -0x1c60 <local_irq_enable : 104c9e >			  ## queue.c:2239:5
  1068fe:    40 20             	r0 = 0x0			  ## os_api.c:597:5
  106900:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:597:5


os_sem_valid:
  106902:    50 ee 0c 14       	r1 = b[r0+0x4c] (u)			  ## os_api.c:601:0
  106906:    40 21             	r0 = 0x1			  ## os_api.c:604:17
  106908:    b1 e8 02 00       	if (r1 != 0x2) {
  10690c:    40 20             		r0 = 0x0
                               	}			  ## os_api.c:604:17
  10690e:    80 00             	rts			  ## os_api.c:604:5


os_sem_query:
  106910:    10 04             	[--sp] = rets			  ## os_api.c:608:0
  106912:    64 e0 00 1b       	r1 = icfg			  ## cpu.h:73:5
  106916:    60 ff ff 10 03 00 	if ((r1 & 0xFF) == 0) goto 0x6 <os_sem_query+0x12 : 106922 >			  ## os_api.c:610:9
  10691c:    bf ea 20 f9       	call -0xdc0 <uxQueueMessagesWaitingFromISR : 105b60 >			  ## os_api.c:611:15
  106920:    00 04             	pc = [sp++]			  ## os_api.c:615:5
  106922:    bf ea eb f8       	call -0xe2a <uxQueueMessagesWaiting : 105afc >			  ## os_api.c:613:15
  106926:    00 04             	pc = [sp++]			  ## os_api.c:615:5


os_mutex_create:
  106928:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:619:0
  10692a:    e2 9f             	sp += -0x4			  ## os_api.c:619:0
  10692c:    03 16             	r3 = r0			  ## os_api.c:619:0
  10692e:    40 21             	r0 = 0x1			  ## queue.c:515:30
  106930:    80 20             	[sp] = r0			  ## queue.c:515:30
  106932:    41 20             	r1 = 0x0			  ## queue.c:515:30
  106934:    42 20             	r2 = 0x0			  ## queue.c:515:30
  106936:    44 20             	r4 = 0x0			  ## queue.c:515:30
  106938:    bf ea 24 f3       	call -0x19b8 <xQueueGenericCreateStatic : 104f84 >			  ## queue.c:515:30
  10693c:    00 48             	if (r0 == 0) goto 0x10 <os_mutex_create+0x26 : 10694e >
  10693e:    42 20             	r2 = 0x0			  ## queue.c:471:33
  106940:    43 20             	r3 = 0x0			  ## queue.c:471:33
  106942:    50 ec 01 20       	d[r0+0x0] = r3_r2			  ## queue.c:471:33
  106946:    84 63             	[r0+0xc] = r4			  ## queue.c:474:44
  106948:    41 20             	r1 = 0x0			  ## queue.c:479:16
  10694a:    bf ea 44 f6       	call -0x1378 <xQueueGenericSend : 1055d6 >			  ## queue.c:479:16
  10694e:    40 20             	r0 = 0x0			  ## os_api.c:622:5
  106950:    02 81             	sp += 0x4			  ## os_api.c:622:5
  106952:    54 04             	{pc, r4} = [sp++]			  ## os_api.c:622:5


os_mutex_del:
  106954:    10 04             	[--sp] = rets			  ## os_api.c:626:0
  106956:    bf ea 15 f9       	call -0xdd6 <vQueueDelete : 105b84 >			  ## os_api.c:627:5
  10695a:    40 20             	r0 = 0x0			  ## os_api.c:629:5
  10695c:    00 04             	pc = [sp++]			  ## os_api.c:629:5


cpu_irq_disabled:
  10695e:    64 e0 00 0b       	r0 = icfg			  ## cpu.h:78:0
  106962:    61 e1 40 0f       	r1 = r0 & 0x300			  ## cpu.h:81:18
  106966:    40 21             	r0 = 0x1			  ## cpu.h:81:27
  106968:    31 e8 00 03       	if (r1 == 0x300) {
  10696c:    40 20             		r0 = 0x0
                               	}			  ## cpu.h:81:27
  10696e:    80 00             	rts			  ## cpu.h:81:5


os_mutex_pend:
  106970:    76 04             	[--sp] = {rets, r6-r4}			  ## os_api.c:633:0
  106972:    13 16             	r3 = r1			  ## os_api.c:633:0
  106974:    04 16             	r4 = r0			  ## os_api.c:633:0
  106976:    64 e0 00 0b       	r0 = icfg			  ## cpu.h:73:5
  10697a:    42 23             	r2 = 0x3
  10697c:    61 ff ff 00 35 00 	if ((r0 & 0xFF) != 0) goto 0x6a <os_mutex_pend+0x7C : 1069ec >
  106982:    71 8d             	call -0x26 <cpu_irq_disabled : 10695e >			  ## os_api.c:636:25
  106984:    90 53             	if (r0 != 0) goto 0x66 <os_mutex_pend+0x7C : 1069ec >			  ## os_api.c:636:25
  106986:    15 3f             	r5 = -0x1			  ## os_api.c:640:9
  106988:    b3 e8 00 00       	if (r3 != 0x0) {
  10698c:    35 16             		r5 = r3
                               	}			  ## os_api.c:640:9
  10698e:    84 4d             	if (r4 != 0) goto 0x1a <os_mutex_pend+0x3A : 1069aa >
  106990:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  106996:    42 f0 65 02       	r2 = 0x265  # <os_bss_size+0x8 : 264 >			  ## FreeRTOSConfig.h:181:5
  10699a:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  10699c:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  1069a2:    c1 ff 6d 6b 10 00 	r1 = 0x106b6d <$data.__1+0x5E : 106b6c >			  ## FreeRTOSConfig.h:181:5
  1069a8:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1069aa:    bf ea 71 f1       	call -0x1d1e <local_irq_disable : 104c90 >			  ## queue.c:620:5
  1069ae:    20 00             	csync			  ## queue.c:620:5
  1069b0:    43 61             	r3 = [r4+0x4] 			  ## queue.c:622:18
  1069b2:    bf ea d4 fb       	call -0x858 <xTaskGetCurrentTaskHandle : 10615e >			  ## queue.c:622:44
  1069b6:    00 e8 0f 30       	if (r3 == r0) goto 0x1e <os_mutex_pend+0x68 : 1069d8 >			  ## queue.c:622:44
  1069ba:    bf ea 70 f1       	call -0x1d20 <local_irq_enable : 104c9e >			  ## queue.c:626:9
  1069be:    41 20             	r1 = 0x0			  ## queue.c:628:19
  1069c0:    43 20             	r3 = 0x0			  ## queue.c:628:19
  1069c2:    46 20             	r6 = 0x0			  ## queue.c:628:19
  1069c4:    40 16             	r0 = r4			  ## queue.c:628:19
  1069c6:    52 16             	r2 = r5			  ## queue.c:628:19
  1069c8:    bf ea da f6       	call -0x124c <xQueueGenericReceive : 105780 >			  ## queue.c:628:19
  1069cc:    01 16             	r1 = r0			  ## queue.c:628:19
  1069ce:    bf ea 5f f1       	call -0x1d42 <local_irq_disable : 104c90 >			  ## queue.c:630:9
  1069d2:    20 00             	csync			  ## queue.c:630:9
  1069d4:    81 42             	if (r1 != 0) goto 0x4 <os_mutex_pend+0x6A : 1069da >			  ## queue.c:630:9
  1069d6:    04 84             	goto 0x8 <os_mutex_pend+0x70 : 1069e0 >			  ## queue.c:630:9
  1069d8:    41 21             	r1 = 0x1
  1069da:    c3 eb 01 40       	[r4+0xc] += 0x1
  1069de:    16 16             	r6 = r1
  1069e0:    42 20             	r2 = 0x0			  ## os_api.c:645:12
  1069e2:    b6 e8 01 00       	if (r6 != 0x1) {			  ## os_api.c:645:12
  1069e6:    42 2b             		r2 = 0xb
                               	}			  ## os_api.c:645:12
  1069e8:    bf ea 59 f1       	call -0x1d4e <local_irq_enable : 104c9e >			  ## queue.c:640:5
  1069ec:    20 16             	r0 = r2			  ## os_api.c:646:1
  1069ee:    56 04             	{pc, r6-r4} = [sp++]			  ## os_api.c:646:1


os_mutex_post:
  1069f0:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:649:0
  1069f2:    04 16             	r4 = r0			  ## os_api.c:649:0
  1069f4:    64 e0 00 0b       	r0 = icfg			  ## cpu.h:73:5
  1069f8:    45 23             	r5 = 0x3
  1069fa:    61 ff ff 00 29 00 	if ((r0 & 0xFF) != 0) goto 0x52 <os_mutex_post+0x62 : 106a52 >
  106a00:    51 8e             	call -0xa4 <cpu_irq_disabled : 10695e >			  ## os_api.c:652:25
  106a02:    90 47             	if (r0 != 0) goto 0x4e <os_mutex_post+0x62 : 106a52 >			  ## os_api.c:652:25
  106a04:    84 4d             	if (r4 != 0) goto 0x1a <os_mutex_post+0x30 : 106a20 >
  106a06:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  106a0c:    42 f0 2e 02       	r2 = 0x22e  # <var_bss_size+0x126 : 22e >			  ## FreeRTOSConfig.h:181:5
  106a10:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  106a12:    c0 ff 21 6b 10 00 	r0 = 0x106b21 <$data.__1+0x12 : 106b20 >			  ## FreeRTOSConfig.h:181:5
  106a18:    c1 ff 54 6b 10 00 	r1 = 0x106b54 <$data.__1+0x46 : 106b54 >			  ## FreeRTOSConfig.h:181:5
  106a1e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  106a20:    bf ea 36 f1       	call -0x1d94 <local_irq_disable : 104c90 >			  ## queue.c:560:5
  106a24:    20 00             	csync			  ## queue.c:560:5
  106a26:    43 61             	r3 = [r4+0x4] 			  ## queue.c:568:18
  106a28:    bf ea 99 fb       	call -0x8ce <xTaskGetCurrentTaskHandle : 10615e >			  ## queue.c:568:44
  106a2c:    00 e8 04 30       	if (r3 == r0) goto 0x8 <os_mutex_post+0x48 : 106a38 >			  ## queue.c:568:44
  106a30:    bf ea 35 f1       	call -0x1d96 <local_irq_enable : 104c9e >			  ## queue.c:595:9
  106a34:    45 20             	r5 = 0x0			  ## queue.c:595:9
  106a36:    04 8d             	goto 0x1a <os_mutex_post+0x62 : 106a52 >			  ## queue.c:595:9
  106a38:    40 63             	r0 = [r4+0xc] 			  ## queue.c:576:42
  106a3a:    32 e1 ff 0f       	r2 = r0 + -0x1			  ## queue.c:576:42
  106a3e:    c2 63             	[r4+0xc] = r2			  ## queue.c:576:42
  106a40:    bf ea 2d f1       	call -0x1da6 <local_irq_enable : 104c9e >			  ## queue.c:582:13
  106a44:    45 20             	r5 = 0x0			  ## queue.c:582:13
  106a46:    82 45             	if (r2 != 0) goto 0xa <os_mutex_post+0x62 : 106a52 >			  ## queue.c:582:13
  106a48:    41 20             	r1 = 0x0			  ## queue.c:583:20
  106a4a:    82 14             	r3_r2 = 0			  ## queue.c:583:20
  106a4c:    40 16             	r0 = r4			  ## queue.c:583:20
  106a4e:    bf ea c2 f5       	call -0x147c <xQueueGenericSend : 1055d6 >			  ## queue.c:583:20
  106a52:    50 16             	r0 = r5			  ## os_api.c:660:1
  106a54:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:660:1


os_mutex_valid:
  106a56:    50 ee 0c 04       	r0 = b[r0+0x4c] (u)			  ## os_api.c:662:0
  106a5a:    b0 e8 01 00       	if (r0 != 0x1) {
  106a5e:    40 20             		r0 = 0x0
                               	}			  ## os_api.c:664:17
  106a60:    80 00             	rts			  ## os_api.c:664:5


pxPortInitialiseStack:
  106a62:    e8 34             	r0 += -0x4c			  ## port.c:144:0
  106a64:    82 63             	[r0+0xc] = r2			  ## port.c:156:12
  106a66:    42 20             	r2 = 0x0			  ## port.c:156:12
  106a68:    82 62             	[r0+0x8] = r2			  ## port.c:158:12
  106a6a:    20 eb 06 00       	[r0+] = {r2, r1}			  ## port.c:159:12
  106a6e:    80 00             	rts			  ## port.c:168:5


vPortEndScheduler:
  106a70:    10 04             	[--sp] = rets			  ## port.c:303:0
  106a72:    c0 ff c8 bc 02 00 	r0 = 0x2bcc8 <uxCriticalNesting : 2bcc8 >			  ## port.c:306:5
  106a78:    00 60             	r0 = [r0+0x0] 			  ## port.c:306:5
  106a7a:    00 ff e8 03 0d 00 	if (r0 == 0x3e8) goto 0x1a <vPortEndScheduler+0x2A : 106a9a >			  ## port.c:306:5
  106a80:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  106a86:    42 f0 32 01       	r2 = 0x132  # <var_bss_size+0x2A : 132 >			  ## FreeRTOSConfig.h:181:5
  106a8a:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  106a8c:    c0 ff c0 6d 10 00 	r0 = 0x106dc0 <$data.__1+0x2B2 : 106dc0 >			  ## FreeRTOSConfig.h:181:5
  106a92:    c1 ff ae 6d 10 00 	r1 = 0x106dae <$data.__1+0x2A0 : 106dae >			  ## FreeRTOSConfig.h:181:5
  106a98:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  106a9a:    00 04             	pc = [sp++]			  ## port.c:307:1


vPortExitCritical:
  106a9c:    74 04             	[--sp] = {rets, r4}			  ## port.c:377:0
  106a9e:    c4 ff c8 bc 02 00 	r4 = 0x2bcc8 <uxCriticalNesting : 2bcc8 >			  ## port.c:377:0
  106aa4:    40 60             	r0 = [r4+0x0] 			  ## port.c:378:5
  106aa6:    80 4e             	if (r0 != 0) goto 0x1c <vPortExitCritical+0x28 : 106ac4 >			  ## port.c:378:5
  106aa8:    c0 ff e8 bc 02 00 	r0 = 0x2bce8 <mask_log_e : 2bce8 >			  ## FreeRTOSConfig.h:181:5
  106aae:    42 f0 7a 01       	r2 = 0x17a  # <var_bss_size+0x72 : 17a >			  ## FreeRTOSConfig.h:181:5
  106ab2:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  106ab4:    c0 ff c0 6d 10 00 	r0 = 0x106dc0 <$data.__1+0x2B2 : 106dc0 >			  ## FreeRTOSConfig.h:181:5
  106aba:    c1 ff c7 6d 10 00 	r1 = 0x106dc7 <$data.__1+0x2B8 : 106dc6 >			  ## FreeRTOSConfig.h:181:5
  106ac0:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  106ac2:    40 60             	r0 = [r4+0x0] 
  106ac4:    f8 3f             	r0 += -0x1			  ## port.c:379:22
  106ac6:    c0 60             	[r4+0x0] = r0			  ## port.c:379:22
  106ac8:    30 e8 00 00       	if (r0 == 0x0) {			  ## port.c:379:22
  106acc:    bf ea e7 f0       		call -0x1e32
                               	} <local_irq_enable : 104c9e >			  ## port.c:381:9
  106ad0:    54 04             	{pc, r4} = [sp++]			  ## port.c:383:1


OS_ClrPending:
  106ad2:    c0 ff c0 bc 02 00 	r0 = 0x2bcc0 <highCurrentTCB : 2bcc0 >			  ## port.c:390:0
  106ad8:    00 60             	r0 = [r0+0x0] 			  ## port.c:392:29
  106ada:    c1 ff 94 bc 02 00 	r1 = 0x2bc94 <CurrentTCB : 2bc94 >			  ## port.c:392:27
  106ae0:    90 60             	[r1+0x0] = r0			  ## port.c:392:27
  106ae2:    c0 ff a4 e1 1b 00 	r0 = 0x1be1a4 <__stub_VecMinScalar_float_c_f_c+0xAE1A8 : 1be1a4 >			  ## port.c:393:25
  106ae8:    40 ea 08 00       	[r0+0x0] = 0x8			  ## port.c:393:25
  106aec:    80 00             	rts			  ## port.c:395:1


vTickISR:
  106aee:    e9 04             	[--sp] = {psr, rets, reti}			  ## port.c:454:0
  106af0:    60 04             	[--sp] = {r3-r0}			  ## port.c:456:25
  106af2:    c0 ff ec e0 1b 00 	r0 = 0x1be0ec <__stub_VecMinScalar_float_c_f_c+0xAE0F0 : 1be0ec >			  ## port.c:456:25
  106af8:    00 ef 40 00       	[r0+0x0] |= 0x40			  ## port.c:456:25
  106afc:    bf ea 75 f4       	call -0x1716 <xTaskIncrementTick : 1053ea >			  ## port.c:464:13
  106b00:    b0 e8 00 00       	if (r0 != 0x0) {			  ## port.c:464:13
  106b04:    bf ea e0 f1       		call -0x1c40
                               	} <vPortYield : 104ec8 >			  ## port.c:466:13
  106b08:    40 04             	{r3-r0} = [sp++]			  ## port.c:471:1
  106b0a:    a9 04             	{psr, rets, reti} = [sp++]			  ## port.c:471:1
  106b0c:    81 00             	rti			  ## port.c:471:1


$data.__1:
  106b0e:	 78 51 75 65 75 65 47 65         xQueueGe
  106b16:	 6e 65 72 69 63 52 65 73         nericRes
  106b1e:	 65 74 00 25 73 20 25 64         et.%s %d
  106b26:	 0a 00 78 51 75 65 75 65         ..xQueue
  106b2e:	 47 65 6e 65 72 69 63 43         GenericC
  106b36:	 72 65 61 74 65 53 74 61         reateSta
  106b3e:	 74 69 63 00 78 51 75 65         tic.xQue
  106b46:	 75 65 47 65 6e 65 72 69         ueGeneri
  106b4e:	 63 53 65 6e 64 00 78 51         cSend.xQ
  106b56:	 75 65 75 65 47 69 76 65         ueueGive
  106b5e:	 4d 75 74 65 78 52 65 63         MutexRec
  106b66:	 75 72 73 69 76 65 00 78         ursive.x
  106b6e:	 51 75 65 75 65 54 61 6b         QueueTak
  106b76:	 65 4d 75 74 65 78 52 65         eMutexRe
  106b7e:	 63 75 72 73 69 76 65 00         cursive.
  106b86:	 78 51 75 65 75 65 47 65         xQueueGe
  106b8e:	 6e 65 72 69 63 52 65 63         nericRec
  106b96:	 65 69 76 65 00 78 51 75         eive.xQu
  106b9e:	 65 75 65 43 72 65 61 74         eueCreat
  106ba6:	 65 43 6f 75 6e 74 69 6e         eCountin
  106bae:	 67 53 65 6d 61 70 68 6f         gSemapho
  106bb6:	 72 65 53 74 61 74 69 63         reStatic
  106bbe:	 00 78 51 75 65 75 65 47         .xQueueG
  106bc6:	 65 6e 65 72 69 63 53 65         enericSe
  106bce:	 6e 64 46 72 6f 6d 49 53         ndFromIS
  106bd6:	 52 00 78 51 75 65 75 65         R.xQueue
  106bde:	 47 69 76 65 46 72 6f 6d         GiveFrom
  106be6:	 49 53 52 00 78 51 75 65         ISR.xQue
  106bee:	 75 65 52 65 63 65 69 76         ueReceiv
  106bf6:	 65 46 72 6f 6d 49 53 52         eFromISR
  106bfe:	 00 75 78 51 75 65 75 65         .uxQueue
  106c06:	 4d 65 73 73 61 67 65 73         Messages
  106c0e:	 57 61 69 74 69 6e 67 00         Waiting.
  106c16:	 75 78 51 75 65 75 65 53         uxQueueS
  106c1e:	 70 61 63 65 73 41 76 61         pacesAva
  106c26:	 69 6c 61 62 6c 65 00 75         ilable.u
  106c2e:	 78 51 75 65 75 65 4d 65         xQueueMe
  106c36:	 73 73 61 67 65 73 57 61         ssagesWa
  106c3e:	 69 74 69 6e 67 46 72 6f         itingFro
  106c46:	 6d 49 53 52 00 76 51 75         mISR.vQu
  106c4e:	 65 75 65 44 65 6c 65 74         eueDelet
  106c56:	 65 00 75 78 51 75 65 75         e.uxQueu
  106c5e:	 65 4d 65 73 73 61 67 65         eMessage
  106c66:	 73 53 65 74 00 25 73 20         sSet.%s 
  106c6e:	 25 64 0a 00 76 54 61 73         %d..vTas
  106c76:	 6b 44 65 6c 65 74 65 00         kDelete.
  106c7e:	 70 72 76 44 65 6c 65 74         prvDelet
  106c86:	 65 54 43 42 00 78 54 61         eTCB.xTa
  106c8e:	 73 6b 52 65 73 75 6d 65         skResume
  106c96:	 41 6c 6c 00 78 54 61 73         All.xTas
  106c9e:	 6b 49 6e 63 72 65 6d 65         kIncreme
  106ca6:	 6e 74 54 69 63 6b 00 76         ntTick.v
  106cae:	 54 61 73 6b 46 69 6e 64         TaskFind
  106cb6:	 48 69 67 68 74 65 73 74         Hightest
  106cbe:	 54 61 73 6b 00 49 44 4c         Task.IDL
  106cc6:	 45 00 76 54 61 73 6b 53         E.vTaskS
  106cce:	 74 61 72 74 53 63 68 65         tartSche
  106cd6:	 64 75 6c 65 72 00 70 72         duler.pr
  106cde:	 76 49 64 6c 65 54 61 73         vIdleTas
  106ce6:	 6b 00 70 63 54 61 73 6b         k.pcTask
  106cee:	 47 65 74 4e 61 6d 65 00         GetName.
  106cf6:	 78 54 61 73 6b 47 65 74         xTaskGet
  106cfe:	 48 61 6e 64 6c 65 00 76         Handle.v
  106d06:	 54 61 73 6b 53 74 65 70         TaskStep
  106d0e:	 54 69 63 6b 00 76 54 61         Tick.vTa
  106d16:	 73 6b 50 6c 61 63 65 4f         skPlaceO
  106d1e:	 6e 45 76 65 6e 74 4c 69         nEventLi
  106d26:	 73 74 00 78 54 61 73 6b         st.xTask
  106d2e:	 52 65 6d 6f 76 65 46 72         RemoveFr
  106d36:	 6f 6d 45 76 65 6e 74 4c         omEventL
  106d3e:	 69 73 74 00 76 54 61 73         ist.vTas
  106d46:	 6b 53 65 74 54 69 6d 65         kSetTime
  106d4e:	 4f 75 74 53 74 61 74 65         OutState
  106d56:	 00 78 54 61 73 6b 43 68         .xTaskCh
  106d5e:	 65 63 6b 46 6f 72 54 69         eckForTi
  106d66:	 6d 65 4f 75 74 00 78 54         meOut.xT
  106d6e:	 61 73 6b 50 72 69 6f 72         askPrior
  106d76:	 69 74 79 44 69 73 69 6e         ityDisin
  106d7e:	 68 65 72 69 74 00 41 53         herit.AS
  106d86:	 53 45 52 54 3a 20 6d 65         SERT: me
  106d8e:	 73 73 61 67 65 73 20 3e         ssages >
  106d96:	 3d 20 68 65 61 64 2e 61         = head.a
  106d9e:	 72 67 63 20 2b 20 31 20         rgc + 1 
  106da6:	 25 64 2c 20 25 64 0a 00         %d, %d..
  106dae:	 76 50 6f 72 74 45 6e 64         vPortEnd
  106db6:	 53 63 68 65 64 75 6c 65         Schedule
  106dbe:	 72 00 25 73 20 25 64 0a         r.%s %d.
  106dc6:	 00 76 50 6f 72 74 45 78         .vPortEx
  106dce:	 69 74 43 72 69 74 69 63         itCritic
  106dd6:	 61 6c 00                        al.


os_code_end:
  106dd9:    00 76             	r0 = [r0+-0x28] 


pmalloc_init:
  106dda:    76 04             	[--sp] = {rets, r6-r4}			  ## pmalloc.c:73:0
  106ddc:    15 16             	r5 = r1			  ## pmalloc.c:73:0
  106dde:    06 16             	r6 = r0			  ## pmalloc.c:73:0
  106de0:    c4 ff 08 be 02 00 	r4 = 0x2be08 <physics_mem : 2be08 >			  ## pmalloc.c:73:0
  106de6:    41 20             	r1 = 0x0			  ## pmalloc.c:75:5
  106de8:    72 2c             	r2 = 0xcc			  ## pmalloc.c:75:5
  106dea:    40 16             	r0 = r4			  ## pmalloc.c:75:5
  106dec:    bf ea 1d ee       	call -0x23c6 <memset : 104a2a >			  ## pmalloc.c:75:5
  106df0:    00 e1 7f 60       	r0 = r6 + 0x7f			  ## pmalloc.c:76:30
  106df4:    71 e1 7f 00       	r1 = r0 & 0xFFFFFF80			  ## pmalloc.c:76:30
  106df8:    42 16             	r2 = r4			  ## pmalloc.c:76:23
  106dfa:    d0 ec 2b 1b       	[++r2=0xb8] = r1			  ## pmalloc.c:76:23
  106dfe:    73 e1 7f 50       	r3 = r5 & 0xFFFFFF80			  ## pmalloc.c:77:34
  106e02:    39 de             	r1 = r3 - r1  #			  ## pmalloc.c:78:40
  106e04:    a3 61             		 [r2+0x4] = r3			  ## pmalloc.c:77:21
  106e06:    a1 62             	[r2+0x8] = r1			  ## pmalloc.c:78:22
  106e08:    91 a7             	r1 = r1 >> 0x7			  ## pmalloc.c:79:48
  106e0a:    a9 69             	h[r2+0x12] = r1			  ## pmalloc.c:79:29
  106e0c:    80 a7             	r0 = r0 >> 0x7			  ## pmalloc.c:84:70
  106e0e:    a8 66             	h[r2+0xc] = r0			  ## pmalloc.c:84:29
  106e10:    d1 a7             	r1 = r5 >> 0x7			  ## pmalloc.c:85:66
  106e12:    80 d7             	r0 = r0.l (u)  #			  ## pmalloc.c:90:18
  106e14:    a9 67             		 h[r2+0xe] = r1			  ## pmalloc.c:85:27
  106e16:    04 93             	goto 0x26 <pmalloc_init+0x64 : 106e3e >
  106e18:    81 a5             	r1 = r0 >> 0x5			  ## pmalloc.c:91:27
  106e1a:    12 a2             	r2 = r1 << 0x2			  ## pmalloc.c:91:9
  106e1c:    42 18             	r2 += r4			  ## pmalloc.c:91:9
  106e1e:    63 e1 1f 00       	r3 = r0 & 0x1F			  ## pmalloc.c:91:42
  106e22:    66 e8 00 23       	[r2+0x0] |= 1 << r3			  ## pmalloc.c:91:39
  106e26:    82 aa             	r2 = r0 >> 0xa			  ## pmalloc.c:92:9
  106e28:    22 a2             	r2 = r2 << 0x2			  ## pmalloc.c:92:41
  106e2a:    42 18             	r2 += r4			  ## pmalloc.c:92:41
  106e2c:    02 e1 b0 20       	r2 = r2 + 0xb0			  ## pmalloc.c:92:9
  106e30:    61 e1 1f 10       	r1 = r1 & 0x1F			  ## pmalloc.c:92:56
  106e34:    66 e8 00 21       	[r2+0x0] |= 1 << r1			  ## pmalloc.c:92:53
  106e38:    50 ed 46 1c       	r1 = h[r4+0xc6] (u)			  ## pmalloc.c:92:53
  106e3c:    c0 21             	r0 += 0x1			  ## pmalloc.c:90:71
  106e3e:    91 17             	r1 = r1.l (u)			  ## pmalloc.c:90:47
  106e40:    81 e9 ea 01       	if (r0 < r1) goto -0x2c <pmalloc_init+0x3E : 106e18 >			  ## pmalloc.c:90:5
  106e44:    56 04             	{pc, r6-r4} = [sp++]			  ## pmalloc.c:100:1


pmm_get_var:
  106e46:    c0 ff 08 be 02 00 	r0 = 0x2be08 <physics_mem : 2be08 >			  ## pmalloc.c:103:0
  106e4c:    80 00             	rts			  ## pmalloc.c:104:5


pmalloc_get_unused_pages:
  106e4e:    c0 ff 08 be 02 00 	r0 = 0x2be08 <physics_mem : 2be08 >			  ## pmalloc.c:136:0
  106e54:    50 ed 08 1c       	r1 = h[r0+0xc8] (u)			  ## pmalloc.c:137:38
  106e58:    50 ed 0a 0c       	r0 = h[r0+0xca] (u)			  ## pmalloc.c:137:12
  106e5c:    08 1e             	r0 = r0 - r1			  ## pmalloc.c:137:36
  106e5e:    80 00             	rts			  ## pmalloc.c:137:5


pmalloc:
  106e60:    75 04             	[--sp] = {rets, r5, r4}			  ## pmalloc.c:169:0
  106e62:    c0 ff 08 be 02 00 	r0 = 0x2be08 <physics_mem : 2be08 >			  ## pmalloc.c:169:0
  106e68:    d0 ec 00 1b       	r1 = [r0+0xb0]			  ## pmalloc.c:171:14
  106e6c:    d0 ec 04 3b       	r3 = [r0+0xb4]			  ## pmalloc.c:172:14
  106e70:    90 e1 30 21       	r2 = r3 | r1			  ## pmalloc.c:173:19
  106e74:    12 4a             	if (r2 == 0) goto 0x54 <pmalloc+0x6A : 106eca >
  106e76:    b3 e8 00 50       	if (r3 != 0x0) {
  106e7a:    4a 3f             		r2 = 0x3f
  106e7c:    31 16             		r1 = r3
                               	} else {			  ## pmalloc.c:180:13
  106e7e:    42 3f             		r2 = 0x1f
                               	}
  106e80:    80 e1 00 11       	r1 = clz(r1)			  ## pmalloc.c:143:5
  106e84:    29 1e             	r1 = r2 - r1			  ## pmalloc.c:187:29
  106e86:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## pmalloc.c:191:9
  106e8a:    80 e1 00 22       	r2 = clz(r2)			  ## pmalloc.c:143:5
  106e8e:    d8 ec 0a 31       	r3 = [r0+r1<<2]			  ## pmalloc.c:194:34
  106e92:    a2 e0 1f 20       	r2 = 0x1F - r2			  ## pmalloc.c:191:9
  106e96:    94 e1 33 42       	r4 = r3 & ~(1 << r2)			  ## pmalloc.c:194:34
  106e9a:    15 3f             	r5 = -0x1			  ## pmalloc.c:194:37
  106e9c:    94 e1 51 52       	r5 = r5 ^ (1 << r2)			  ## pmalloc.c:194:37
  106ea0:    d8 ec 0b 41       	[r0+r1<<2] = r4			  ## pmalloc.c:194:34
  106ea4:    53 fb 09 00       	if ((r3 & r5) != 0) goto 0x12 <pmalloc+0x5A : 106eba >			  ## pmalloc.c:194:34
  106ea8:    93 a5             	r3 = r1 >> 0x5			  ## pmalloc.c:196:13
  106eaa:    33 a2             	r3 = r3 << 0x2			  ## pmalloc.c:196:40
  106eac:    03 18             	r3 += r0			  ## pmalloc.c:196:40
  106eae:    03 e1 b0 30       	r3 = r3 + 0xb0			  ## pmalloc.c:196:13
  106eb2:    64 e1 1f 10       	r4 = r1 & 0x1F			  ## pmalloc.c:196:56
  106eb6:    66 e8 03 34       	[r3+0x0] &= ~(1 << r4)			  ## pmalloc.c:196:52
  106eba:    50 ed 08 3c       	r3 = h[r0+0xc8] (u)			  ## pmalloc.c:198:31
  106ebe:    c3 21             	r3 += 0x1			  ## pmalloc.c:198:31
  106ec0:    50 ed 09 3c       	h[r0+0xc8] = r3			  ## pmalloc.c:198:31
  106ec4:    10 a5             	r0 = r1 << 0x5			  ## pmalloc.c:205:24
  106ec6:    20 18             	r0 += r2			  ## pmalloc.c:205:35
  106ec8:    04 83             	goto 0x6 <pmalloc+0x70 : 106ed0 >			  ## pmalloc.c:205:35
  106eca:    c0 ff ff ff 00 00 	r0 = 0xffff <os_code_size+0xDEA9 : fffe >
  106ed0:    80 17             	r0 = r0.l (u)			  ## pmalloc.c:210:1
  106ed2:    55 04             	{pc, r5, r4} = [sp++]			  ## pmalloc.c:210:1


get_physic_address:
  106ed4:    c1 ff 08 be 02 00 	r1 = 0x2be08 <physics_mem : 2be08 >			  ## pmalloc.c:213:0
  106eda:    50 ed 14 2c       	r2 = h[r1+0xc4] (u)			  ## pmalloc.c:214:29
  106ede:    d0 ec 18 1b       	r1 = [r1+0xb8]			  ## pmalloc.c:214:80
  106ee2:    80 1e             	r0 = r0 - r2			  ## pmalloc.c:214:27
  106ee4:    00 a7             	r0 = r0 << 0x7			  ## pmalloc.c:214:54
  106ee6:    10 18             	r0 += r1			  ## pmalloc.c:214:66
  106ee8:    80 00             	rts			  ## pmalloc.c:214:5


pfree:
  106eea:    78 04             	[--sp] = {rets, r8-r4}			  ## pmalloc.c:222:0
  106eec:    04 16             	r4 = r0			  ## pmalloc.c:222:0
  106eee:    c7 a5             	r7 = r4 >> 0x5			  ## pmalloc.c:223:5
  106ef0:    c5 ff 08 be 02 00 	r5 = 0x2be08 <physics_mem : 2be08 >			  ## pmalloc.c:223:5
  106ef6:    d8 ec 5a 07       	r0 = [r5+r7<<2]			  ## pmalloc.c:223:5
  106efa:    61 e1 1f 40       	r1 = r4 & 0x1F			  ## pmalloc.c:223:5
  106efe:    42 21             	r2 = 0x1			  ## pmalloc.c:223:5
  106f00:    c8 e1 20 61       	r6 = r2 << r1			  ## pmalloc.c:223:5
  106f04:    c8 ff e8 bc 02 00 	r8 = 0x2bce8 <mask_log_e : 2bce8 >			  ## pmalloc.c:223:5
  106f0a:    60 fa 08 00       	if ((r0 & r6) == 0) goto 0x10 <pfree+0x34 : 106f1e >			  ## pmalloc.c:223:5
  106f0e:    d0 ec 80 10       	r1 = [r8+0x0]			  ## pmalloc.c:223:5
  106f12:    c0 ff c0 73 10 00 	r0 = 0x1073c0 <$data.__2 : 1073c0 >			  ## pmalloc.c:223:5
  106f18:    c1 00             	call r1			  ## pmalloc.c:223:5
  106f1a:    d8 ec 5a 07       	r0 = [r5+r7<<2]			  ## pmalloc.c:223:5
  106f1e:    60 19             	r0 |= r6			  ## pmalloc.c:224:38
  106f20:    d8 ec 5b 07       	[r5+r7<<2] = r0			  ## pmalloc.c:224:38
  106f24:    c0 a8             	r0 = r4 >> 0x8			  ## pmalloc.c:225:5
  106f26:    60 e1 fc 00       	r0 = r0 & 0xFC			  ## pmalloc.c:225:40
  106f2a:    50 18             	r0 += r5			  ## pmalloc.c:225:40
  106f2c:    00 e1 b0 00       	r0 = r0 + 0xb0			  ## pmalloc.c:225:5
  106f30:    61 e1 1f 70       	r1 = r7 & 0x1F			  ## pmalloc.c:225:55
  106f34:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## pmalloc.c:225:52
  106f38:    50 ed 58 0c       	r0 = h[r5+0xc8] (u)			  ## pmalloc.c:226:5
  106f3c:    80 48             	if (r0 != 0) goto 0x10 <pfree+0x64 : 106f4e >			  ## pmalloc.c:226:5
  106f3e:    d0 ec 80 10       	r1 = [r8+0x0]			  ## pmalloc.c:226:5
  106f42:    c0 ff 0d 74 10 00 	r0 = 0x10740d <$data.__2+0x4C : 10740c >			  ## pmalloc.c:226:5
  106f48:    c1 00             	call r1			  ## pmalloc.c:226:5
  106f4a:    50 ed 58 0c       	r0 = h[r5+0xc8] (u)			  ## pmalloc.c:226:5
  106f4e:    f8 3f             	r0 += -0x1			  ## pmalloc.c:227:27
  106f50:    50 ed 59 0c       	h[r5+0xc8] = r0			  ## pmalloc.c:227:27
  106f54:    58 04             	{pc, r8-r4} = [sp++]			  ## pmalloc.c:230:1


vmm_init_:
  106f56:    76 04             	[--sp] = {rets, r6-r4}			  ## vmalloc.c:74:0
  106f58:    14 16             	r4 = r1			  ## vmalloc.c:74:0
  106f5a:    05 16             	r5 = r0			  ## vmalloc.c:74:0
  106f5c:    c6 ff 00 04 1b 00 	r6 = 0x1b0400 <__stub_VecMinScalar_float_c_f_c+0xA0404 : 1b0400 >			  ## vmalloc.c:74:0
  106f62:    48 dd             	r0 = r4 + r5  #			  ## vmalloc.c:60:38
  106f64:    e5 61             		 [r6+0x4] = r5			  ## vmalloc.c:59:22
  106f66:    f8 3f             	r0 += -0x1			  ## vmalloc.c:60:45
  106f68:    e0 62             	[r6+0x8] = r0			  ## vmalloc.c:60:22
  106f6a:    00 ef 10 60       	[r6+0x0] |= 0x10			  ## vmalloc.c:62:5
  106f6e:    41 20             	r1 = 0x0			  ## vmalloc.c:63:5
  106f70:    50 16             	r0 = r5			  ## vmalloc.c:63:5
  106f72:    42 16             	r2 = r4			  ## vmalloc.c:63:5
  106f74:    bf ea 59 ed       	call -0x254e <memset : 104a2a >			  ## vmalloc.c:63:5
  106f78:    c0 ef 10 60       	[r6+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:64:5
  106f7c:    00 ef 01 60       	[r6+0x0] |= 0x1			  ## vmalloc.c:66:5
  106f80:    c0 ff d4 be 02 00 	r0 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:87:21
  106f86:    85 60             	[r0+0x0] = r5			  ## vmalloc.c:79:24
  106f88:    41 ea 00 09       	[r0+0x4] = 0x200000			  ## vmalloc.c:84:21
  106f8c:    c1 a1             	r1 = r4 >> 0x1			  ## vmalloc.c:81:28
  106f8e:    12 a7             	r2 = r1 << 0x7			  ## vmalloc.c:82:32
  106f90:    e2 f0 00 29       	r2 = r2 + 0x200000  #			  ## vmalloc.c:86:35
  106f94:    82 63             		 [r0+0xc] = r2			  ## vmalloc.c:85:21
  106f96:    82 62             	[r0+0x8] = r2			  ## vmalloc.c:86:21
  106f98:    89 69             	h[r0+0x12] = r1			  ## vmalloc.c:87:21
  106f9a:    56 04             	{pc, r6-r4} = [sp++]			  ## vmalloc.c:93:1


vmm_get_var:
  106f9c:    c0 ff d4 be 02 00 	r0 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:96:0
  106fa2:    80 00             	rts			  ## vmalloc.c:97:5


vmalloc_:
  106fa4:    7f 04             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:122:0
  106fa6:    e2 9f             	sp += -0x4			  ## vmalloc.c:122:0
  106fa8:    02 e1 7f 10       	r2 = r1 + 0x7f			  ## vmalloc.c:123:22
  106fac:    a4 a7             	r4 = r2 >> 0x7			  ## vmalloc.c:123:22
  106fae:    ca ff e8 bc 02 00 	r10 = 0x2bce8 <mask_log_e : 2bce8 >
  106fb4:    04 51             	if (r4 == 0) goto 0x22 <vmalloc_+0x34 : 106fd8 >
  106fb6:    c6 ff 08 be 02 00 	r6 = 0x2be08 <physics_mem : 2be08 >
  106fbc:    50 ed 68 2c       	r2 = h[r6+0xc8] (u)			  ## pmalloc.c:137:38
  106fc0:    50 ed 6a 1c       	r1 = h[r6+0xca] (u)			  ## pmalloc.c:137:12
  106fc4:    91 1e             	r1 = r1 - r2			  ## pmalloc.c:137:36
  106fc6:    04 e9 0f 10       	if (r1 >= r4) goto 0x1e <vmalloc_+0x44 : 106fe8 >			  ## pmalloc.c:137:36
  106fca:    d0 ec a0 10       	r1 = [r10+0x0]			  ## vmalloc.c:134:9
  106fce:    c0 ff 49 74 10 00 	r0 = 0x107449 <$data.__2+0x88 : 107448 >			  ## vmalloc.c:134:9
  106fd4:    c1 00             	call r1			  ## vmalloc.c:134:9
  106fd6:    04 86             	goto 0xc <vmalloc_+0x40 : 106fe4 >			  ## vmalloc.c:134:9
  106fd8:    d0 ec a0 20       	r2 = [r10+0x0]			  ## vmalloc.c:130:9
  106fdc:    c0 ff 31 74 10 00 	r0 = 0x107431 <$data.__2+0x70 : 107430 >			  ## vmalloc.c:130:9
  106fe2:    c2 00             	call r2			  ## vmalloc.c:130:9
  106fe4:    10 3f             	r0 = -0x1
  106fe6:    34 96             	goto 0xec <vmalloc_+0x130 : 1070d4 >
  106fe8:    cb ff d4 be 02 00 	r11 = 0x2bed4 <v_mems : 2bed4 >
  106fee:    d0 ec b4 10       	r1 = [r11+0x4]			  ## vmalloc.c:124:41
  106ff2:    08 de             	r0 = r0 - r1  #			  ## vmalloc.c:124:32
  106ff4:    80 20             		 [sp] = r0
  106ff6:    85 a7             	r5 = r0 >> 0x7			  ## vmalloc.c:124:48
  106ff8:    57 a1             	r7 = r5 << 0x1			  ## vmalloc.c:137:14
  106ffa:    cc ff 00 04 1b 00 	r12 = 0x1b0400 <__stub_VecMinScalar_float_c_f_c+0xA0404 : 1b0400 >			  ## vmalloc.c:137:14
  107000:    cd ff ff ff 00 00 	r13 = 0xffff <os_code_size+0xDEA9 : fffe >			  ## vmalloc.c:137:14
  107006:    4e e0 ff 1f       	r14 = 0x1fff <usb_code_size+0x14C3 : 1ffe >			  ## vmalloc.c:137:14
  10700a:    4f e0 ff ff       	r15 = -0x1 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEF0002 : fffffffffffffffe >			  ## vmalloc.c:137:14
  10700e:    c9 ff 70 74 10 00 	r9 = 0x107470 <$data.__2+0xB0 : 107470 >			  ## vmalloc.c:137:14
  107014:    24 9d             	goto 0xba <vmalloc_+0x12C : 1070d0 >			  ## vmalloc.c:137:14
  107016:    d0 ec b0 00       	r0 = [r11+0x0]			  ## vmalloc.c:139:9
  10701a:    8a 1d             	r2 = r0 + r7			  ## vmalloc.c:139:9
  10701c:    28 41             	r0 = b[r2+0x1] (u)			  ## vmalloc.c:139:9
  10701e:    30 ea 20 c0       	if ((r0 & 0x20) != 0) {			  ## vmalloc.c:139:9
  107022:    d0 ec a0 30       		r3 = [r10+0x0]			  ## vmalloc.c:139:9
  107026:    90 16             		r0 = r9			  ## vmalloc.c:139:9
  107028:    51 16             		r1 = r5			  ## vmalloc.c:139:9
  10702a:    c3 00             		call r3
                               	}			  ## vmalloc.c:139:9
  10702c:    00 ef 10 c0       	[r12+0x0] |= 0x10			  ## vmalloc.c:140:9
  107030:    d0 ec 60 0b       	r0 = [r6+0xb0]			  ## pmalloc.c:171:14
  107034:    d0 ec 64 2b       	r2 = [r6+0xb4]			  ## pmalloc.c:172:14
  107038:    90 e1 20 30       	r3 = r2 | r0			  ## pmalloc.c:173:19
  10703c:    d1 16             	r1 = r13
  10703e:    13 48             	if (r3 == 0) goto 0x50 <vmalloc_+0xEC : 107090 >
  107040:    b2 e8 00 50       	if (r2 != 0x0) {
  107044:    49 3f             		r1 = 0x3f
  107046:    20 16             		r0 = r2
                               	} else {			  ## pmalloc.c:180:13
  107048:    41 3f             		r1 = 0x1f
                               	}
  10704a:    80 e1 00 00       	r0 = clz(r0)			  ## pmalloc.c:143:5
  10704e:    10 1e             	r0 = r1 - r0			  ## pmalloc.c:187:29
  107050:    d8 ec 6a 10       	r1 = [r6+r0<<2]			  ## pmalloc.c:191:9
  107054:    80 e1 00 11       	r1 = clz(r1)			  ## pmalloc.c:143:5
  107058:    d8 ec 6a 20       	r2 = [r6+r0<<2]			  ## pmalloc.c:194:34
  10705c:    a1 e0 1f 10       	r1 = 0x1F - r1			  ## pmalloc.c:191:9
  107060:    94 e1 23 31       	r3 = r2 & ~(1 << r1)			  ## pmalloc.c:194:34
  107064:    94 e1 f1 81       	r8 = r15 ^ (1 << r1)			  ## pmalloc.c:194:37
  107068:    d8 ec 6b 30       	[r6+r0<<2] = r3			  ## pmalloc.c:194:34
  10706c:    82 fb 09 00       	if ((r2 & r8) != 0) goto 0x12 <vmalloc_+0xDE : 107082 >			  ## pmalloc.c:194:34
  107070:    82 a5             	r2 = r0 >> 0x5			  ## pmalloc.c:196:13
  107072:    22 a2             	r2 = r2 << 0x2			  ## pmalloc.c:196:40
  107074:    62 18             	r2 += r6			  ## pmalloc.c:196:40
  107076:    02 e1 b0 20       	r2 = r2 + 0xb0			  ## pmalloc.c:196:13
  10707a:    63 e1 1f 00       	r3 = r0 & 0x1F			  ## pmalloc.c:196:56
  10707e:    66 e8 03 23       	[r2+0x0] &= ~(1 << r3)			  ## pmalloc.c:196:52
  107082:    50 ed 68 2c       	r2 = h[r6+0xc8] (u)			  ## pmalloc.c:198:31
  107086:    c2 21             	r2 += 0x1			  ## pmalloc.c:198:31
  107088:    50 ed 69 2c       	h[r6+0xc8] = r2			  ## pmalloc.c:198:31
  10708c:    00 a5             	r0 = r0 << 0x5			  ## pmalloc.c:205:24
  10708e:    01 18             	r1 += r0			  ## pmalloc.c:205:35
  107090:    d0 ec b0 00       	r0 = [r11+0x0]			  ## vmalloc.c:141:16
  107094:    70 18             	r0 += r7			  ## vmalloc.c:141:47
  107096:    90 f1 12 1e       	r1 = r1 & r14  #			  ## vmalloc.c:141:47
  10709a:    0a 41             		 r2 = b[r0+0x1] (u)			  ## vmalloc.c:141:47
  10709c:    0b 40             	r3 = b[r0+0x0] (u)			  ## vmalloc.c:141:47
  10709e:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## vmalloc.c:141:47
  1070a2:    89 40             		 b[r0+0x0] = r1			  ## vmalloc.c:141:47
  1070a4:    62 e1 60 3c       	r2 = r3 & 0xE000			  ## vmalloc.c:141:47
  1070a8:    21 19             	r1 |= r2			  ## vmalloc.c:141:47
  1070aa:    91 a8             	r1 = r1 >> 0x8			  ## vmalloc.c:141:47
  1070ac:    89 41             	b[r0+0x1] = r1			  ## vmalloc.c:141:47
  1070ae:    d0 ec b0 00       	r0 = [r11+0x0]			  ## vmalloc.c:142:16
  1070b2:    70 18             	r0 += r7			  ## vmalloc.c:142:47
  1070b4:    09 41             	r1 = b[r0+0x1] (u)			  ## vmalloc.c:142:47
  1070b6:    0a 40             	r2 = b[r0+0x0] (u)			  ## vmalloc.c:142:47
  1070b8:    a2 e1 60 14       	r2 <= insert(r1, p:0x8, l:0x18)			  ## vmalloc.c:142:47
  1070bc:    41 f1 00 2d       	r1 = r2 | 0x2000  #			  ## vmalloc.c:142:47
  1070c0:    8a 40             		 b[r0+0x0] = r2			  ## vmalloc.c:142:47
  1070c2:    91 a8             	r1 = r1 >> 0x8			  ## vmalloc.c:142:47
  1070c4:    89 41             	b[r0+0x1] = r1			  ## vmalloc.c:142:47
  1070c6:    c0 ef 10 c0       	[r12+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:144:9
  1070ca:    fc 3f             	r4 += -0x1			  ## vmalloc.c:137:5
  1070cc:    c7 22             	r7 += 0x2			  ## vmalloc.c:137:5
  1070ce:    c5 21             	r5 += 0x1			  ## vmalloc.c:143:18
  1070d0:    d4 42             	if (r4 != 0) goto -0xbc <vmalloc_+0x72 : 107016 >
  1070d2:    00 20             	r0 = [sp]
  1070d4:    02 81             	sp += 0x4
  1070d6:    5f 04             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:148:1


vfree_:
  1070d8:    7f 04             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:151:0
  1070da:    ce ff d4 be 02 00 	r14 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:151:0
  1070e0:    d0 ec e4 20       	r2 = [r14+0x4]			  ## vmalloc.c:153:41
  1070e4:    80 1e             	r0 = r0 - r2			  ## vmalloc.c:153:32
  1070e6:    87 a7             	r7 = r0 >> 0x7			  ## vmalloc.c:153:48
  1070e8:    00 e1 7f 10       	r0 = r1 + 0x7f			  ## vmalloc.c:152:22
  1070ec:    84 a7             	r4 = r0 >> 0x7			  ## vmalloc.c:152:22
  1070ee:    4a e0 01 00       	r10 = 0x1 <TLB_BEGIN : 0 >
  1070f2:    cf ff 08 be 02 00 	r15 = 0x2be08 <physics_mem : 2be08 >
  1070f8:    cb ff e8 bc 02 00 	r11 = 0x2bce8 <mask_log_e : 2bce8 >
  1070fe:    cc ff 00 04 1b 00 	r12 = 0x1b0400 <__stub_VecMinScalar_float_c_f_c+0xA0404 : 1b0400 >
  107104:    cd ff ff df 00 00 	r13 = 0xdfff <os_code_size+0xBEA9 : dffe >
  10710a:    24 8c             	goto 0x98 <vfree_+0xCC : 1071a4 >
  10710c:    d0 ec e0 00       	r0 = [r14+0x0]			  ## vmalloc.c:157:20
  107110:    76 a1             	r6 = r7 << 0x1			  ## vmalloc.c:157:43
  107112:    60 18             	r0 += r6			  ## vmalloc.c:157:43
  107114:    09 41             	r1 = b[r0+0x1] (u)			  ## vmalloc.c:157:43
  107116:    08 40             	r0 = b[r0+0x0] (u)			  ## vmalloc.c:157:43
  107118:    a0 e1 20 14       	r0 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:157:43
  10711c:    50 e8 40 68       	if ((r0 & 0x2000) == 0) goto 0x80 <vfree_+0xC8 : 1071a0 >			  ## vmalloc.c:157:43
  107120:    b5 e1 a0 02       	r5 = uextra(r0, p:0x5, l:0x8)			  ## pmalloc.c:223:5
  107124:    d8 ec fa 15       	r1 = [r15+r5<<2]			  ## pmalloc.c:223:5
  107128:    62 e1 1f 00       	r2 = r0 & 0x1F			  ## pmalloc.c:223:5
  10712c:    c8 e1 a0 92       	r9 = r10 << r2			  ## pmalloc.c:223:5
  107130:    78 e1 60 0c       	r8 = r0 & 0xFFFF1FFF			  ## vmalloc.c:159:49
  107134:    91 fa 08 00       	if ((r1 & r9) == 0) goto 0x10 <vfree_+0x70 : 107148 >			  ## vmalloc.c:159:49
  107138:    d0 ec b0 10       	r1 = [r11+0x0]			  ## pmalloc.c:223:5
  10713c:    c0 ff c0 73 10 00 	r0 = 0x1073c0 <$data.__2 : 1073c0 >			  ## pmalloc.c:223:5
  107142:    c1 00             	call r1			  ## pmalloc.c:223:5
  107144:    d8 ec fa 15       	r1 = [r15+r5<<2]			  ## pmalloc.c:223:5
  107148:    90 e1 10 09       	r0 = r1 | r9			  ## pmalloc.c:224:38
  10714c:    d8 ec fb 05       	[r15+r5<<2] = r0			  ## pmalloc.c:224:38
  107150:    60 e1 7c 8c       	r0 = r8 & 0xFC00			  ## pmalloc.c:225:40
  107154:    80 a8             	r0 = r0 >> 0x8			  ## pmalloc.c:225:5
  107156:    f0 18             	r0 += r15			  ## pmalloc.c:225:5
  107158:    00 e1 b0 00       	r0 = r0 + 0xb0			  ## pmalloc.c:225:5
  10715c:    71 e1 e0 50       	r1 = r5 & 0xFFFFFF1F			  ## pmalloc.c:225:55
  107160:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## pmalloc.c:225:52
  107164:    50 ed f8 0c       	r0 = h[r15+0xc8] (u)			  ## pmalloc.c:226:5
  107168:    80 48             	if (r0 != 0) goto 0x10 <vfree_+0xA2 : 10717a >			  ## pmalloc.c:226:5
  10716a:    d0 ec b0 10       	r1 = [r11+0x0]			  ## pmalloc.c:226:5
  10716e:    c0 ff 0d 74 10 00 	r0 = 0x10740d <$data.__2+0x4C : 10740c >			  ## pmalloc.c:226:5
  107174:    c1 00             	call r1			  ## pmalloc.c:226:5
  107176:    50 ed f8 0c       	r0 = h[r15+0xc8] (u)			  ## pmalloc.c:226:5
  10717a:    f8 3f             	r0 += -0x1			  ## pmalloc.c:227:27
  10717c:    50 ed f9 0c       	h[r15+0xc8] = r0			  ## pmalloc.c:227:27
  107180:    00 ef 10 c0       	[r12+0x0] |= 0x10			  ## vmalloc.c:160:13
  107184:    d0 ec e0 00       	r0 = [r14+0x0]			  ## vmalloc.c:161:20
  107188:    60 18             	r0 += r6			  ## vmalloc.c:161:51
  10718a:    09 41             	r1 = b[r0+0x1] (u)			  ## vmalloc.c:161:51
  10718c:    0a 40             	r2 = b[r0+0x0] (u)			  ## vmalloc.c:161:51
  10718e:    a2 e1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:161:51
  107192:    90 e1 22 1d       	r1 = r2 & r13			  ## vmalloc.c:161:51
  107196:    89 40             	b[r0+0x0] = r1			  ## vmalloc.c:161:51
  107198:    91 a8             	r1 = r1 >> 0x8			  ## vmalloc.c:161:51
  10719a:    89 41             	b[r0+0x1] = r1			  ## vmalloc.c:161:51
  10719c:    c0 ef 10 c0       	[r12+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:162:13
  1071a0:    fc 3f             	r4 += -0x1			  ## vmalloc.c:155:5
  1071a2:    c7 21             	r7 += 0x1			  ## vmalloc.c:155:69
  1071a4:    d4 53             	if (r4 != 0) goto -0x9a <vfree_+0x34 : 10710c >
  1071a6:    5f 04             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:165:1


vmalloc_v2:
  1071a8:    7b 04             	[--sp] = {rets, r11-r4}			  ## vmalloc.c:167:0
  1071aa:    02 e1 7f 10       	r2 = r1 + 0x7f			  ## vmalloc.c:168:22
  1071ae:    a2 a7             	r2 = r2 >> 0x7			  ## vmalloc.c:168:22
  1071b0:    c3 ff e8 bc 02 00 	r3 = 0x2bce8 <mask_log_e : 2bce8 >
  1071b6:    02 51             	if (r2 == 0) goto 0x22 <vmalloc_v2+0x32 : 1071da >			  ## vmalloc.c:173:9
  1071b8:    cb ff 08 be 02 00 	r11 = 0x2be08 <physics_mem : 2be08 >
  1071be:    50 ed b8 4c       	r4 = h[r11+0xc8] (u)			  ## pmalloc.c:137:38
  1071c2:    50 ed ba 5c       	r5 = h[r11+0xca] (u)			  ## pmalloc.c:137:12
  1071c6:    54 1f             	r4 = r5 - r4			  ## pmalloc.c:137:36
  1071c8:    02 e9 0e 40       	if (r4 >= r2) goto 0x1c <vmalloc_v2+0x40 : 1071e8 >			  ## pmalloc.c:137:36
  1071cc:    31 60             	r1 = [r3+0x0] 			  ## vmalloc.c:180:9
  1071ce:    c0 ff ae 74 10 00 	r0 = 0x1074ae <$data.__2+0xEE : 1074ae >			  ## vmalloc.c:180:9
  1071d4:    c1 00             	call r1			  ## vmalloc.c:180:9
  1071d6:    10 3f             	r0 = -0x1
  1071d8:    5b 04             	{pc, r11-r4} = [sp++]			  ## vmalloc.c:196:1
  1071da:    32 60             	r2 = [r3+0x0] 			  ## vmalloc.c:175:9
  1071dc:    c0 ff 31 74 10 00 	r0 = 0x107431 <$data.__2+0x70 : 107430 >			  ## vmalloc.c:175:9
  1071e2:    c2 00             	call r2			  ## vmalloc.c:175:9
  1071e4:    10 3f             	r0 = -0x1
  1071e6:    5b 04             	{pc, r11-r4} = [sp++]			  ## vmalloc.c:196:1
  1071e8:    c3 ff d4 be 02 00 	r3 = 0x2bed4 <v_mems : 2bed4 >
  1071ee:    03 eb 18 00       	{r4, r3} = [r3+]			  ## vmalloc.c:169:41
  1071f2:    04 1f             	r4 = r0 - r4			  ## vmalloc.c:169:32
  1071f4:    c4 a7             	r4 = r4 >> 0x7			  ## vmalloc.c:169:48
  1071f6:    c8 ff 00 04 1b 00 	r8 = 0x1b0400 <__stub_VecMinScalar_float_c_f_c+0xA0404 : 1b0400 >
  1071fc:    00 ef 10 80       	[r8+0x0] |= 0x10			  ## vmalloc.c:186:5
  107200:    44 a1             	r4 = r4 << 0x1			  ## vmalloc.c:184:18
  107202:    34 18             	r4 += r3			  ## vmalloc.c:184:18
  107204:    ca ff ff ff 00 00 	r10 = 0xffff <os_code_size+0xDEA9 : fffe >
  10720a:    49 e0 ff ff       	r9 = -0x1 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEF0002 : fffffffffffffffe >
  10720e:    14 95             	goto 0x6a <vmalloc_v2+0xD2 : 10727a >
  107210:    d0 ec b0 6b       	r6 = [r11+0xb0]			  ## pmalloc.c:171:14
  107214:    d0 ec b4 3b       	r3 = [r11+0xb4]			  ## pmalloc.c:172:14
  107218:    90 e1 30 56       	r5 = r3 | r6			  ## pmalloc.c:173:19
  10721c:    a7 16             	r7 = r10
  10721e:    15 48             	if (r5 == 0) goto 0x50 <vmalloc_v2+0xC8 : 107270 >
  107220:    b3 e8 00 50       	if (r3 != 0x0) {
  107224:    4f 3f             		r7 = 0x3f
  107226:    36 16             		r6 = r3
                               	} else {			  ## pmalloc.c:180:13
  107228:    47 3f             		r7 = 0x1f
                               	}
  10722a:    80 e1 00 36       	r3 = clz(r6)			  ## pmalloc.c:143:5
  10722e:    ff 1e             	r7 = r7 - r3			  ## pmalloc.c:187:29
  107230:    d8 ec ba 37       	r3 = [r11+r7<<2]			  ## pmalloc.c:191:9
  107234:    80 e1 00 33       	r3 = clz(r3)			  ## pmalloc.c:143:5
  107238:    d8 ec ba 57       	r5 = [r11+r7<<2]			  ## pmalloc.c:194:34
  10723c:    a3 e0 1f 30       	r3 = 0x1F - r3			  ## pmalloc.c:191:9
  107240:    94 e1 53 63       	r6 = r5 & ~(1 << r3)			  ## pmalloc.c:194:34
  107244:    94 e1 91 13       	r1 = r9 ^ (1 << r3)			  ## pmalloc.c:194:37
  107248:    d8 ec bb 67       	[r11+r7<<2] = r6			  ## pmalloc.c:194:34
  10724c:    15 fb 09 00       	if ((r5 & r1) != 0) goto 0x12 <vmalloc_v2+0xBA : 107262 >			  ## pmalloc.c:194:34
  107250:    f1 a5             	r1 = r7 >> 0x5			  ## pmalloc.c:196:13
  107252:    11 a2             	r1 = r1 << 0x2			  ## pmalloc.c:196:40
  107254:    b1 18             	r1 += r11			  ## pmalloc.c:196:40
  107256:    01 e1 b0 10       	r1 = r1 + 0xb0			  ## pmalloc.c:196:13
  10725a:    65 e1 1f 70       	r5 = r7 & 0x1F			  ## pmalloc.c:196:56
  10725e:    66 e8 03 15       	[r1+0x0] &= ~(1 << r5)			  ## pmalloc.c:196:52
  107262:    50 ed b8 1c       	r1 = h[r11+0xc8] (u)			  ## pmalloc.c:198:31
  107266:    c1 21             	r1 += 0x1			  ## pmalloc.c:198:31
  107268:    50 ed b9 1c       	h[r11+0xc8] = r1			  ## pmalloc.c:198:31
  10726c:    71 a5             	r1 = r7 << 0x5			  ## pmalloc.c:205:24
  10726e:    3f 1c             	r7 = r3 + r1			  ## pmalloc.c:205:35
  107270:    41 e1 00 7d       	r1 = r7 | 0x2000			  ## vmalloc.c:191:28
  107274:    c9 60             	h[r4+0x0] = r1			  ## vmalloc.c:191:16
  107276:    fa 3f             	r2 += -0x1			  ## vmalloc.c:187:5
  107278:    c4 22             	r4 += 0x2			  ## vmalloc.c:192:14
  10727a:    e2 4a             	if (r2 != 0) goto -0x6c <vmalloc_v2+0x68 : 107210 >
  10727c:    c0 ef 10 80       	[r8+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:194:5
  107280:    5b 04             	{pc, r11-r4} = [sp++]			  ## vmalloc.c:196:1


vfree_v2:
  107282:    7f 04             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:199:0
  107284:    c2 ff d4 be 02 00 	r2 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:201:41
  10728a:    50 ec 20 20       	r3_r2 = d[r2+0x0]			  ## vmalloc.c:201:41
  10728e:    c8 ff 00 04 1b 00 	r8 = 0x1b0400 <__stub_VecMinScalar_float_c_f_c+0xA0404 : 1b0400 >			  ## vmalloc.c:201:41
  107294:    00 ef 10 80       	[r8+0x0] |= 0x10			  ## vmalloc.c:206:5
  107298:    88 1e             	r0 = r0 - r3			  ## vmalloc.c:201:32
  10729a:    80 a7             	r0 = r0 >> 0x7			  ## vmalloc.c:204:18
  10729c:    00 a1             	r0 = r0 << 0x1			  ## vmalloc.c:201:48
  10729e:    b4 e0 20 f0       	r15 = r2 + r0			  ## vmalloc.c:204:18
  1072a2:    00 e1 7f 10       	r0 = r1 + 0x7f			  ## vmalloc.c:200:22
  1072a6:    86 a7             	r6 = r0 >> 0x7			  ## vmalloc.c:200:22
  1072a8:    4b e0 01 00       	r11 = 0x1 <TLB_BEGIN : 0 >
  1072ac:    ce ff 08 be 02 00 	r14 = 0x2be08 <physics_mem : 2be08 >
  1072b2:    cc ff e8 bc 02 00 	r12 = 0x2bce8 <mask_log_e : 2bce8 >
  1072b8:    c9 ff 0d 74 10 00 	r9 = 0x10740d <$data.__2+0x4C : 10740c >
  1072be:    c5 14             	r13 = 0
  1072c0:    ca ff c0 73 10 00 	r10 = 0x1073c0 <$data.__2 : 1073c0 >
  1072c6:    14 92             	goto 0x64 <vfree_v2+0xAA : 10732c >
  1072c8:    50 ed f0 10       	r1 = h[r15+0x0] (u)			  ## vmalloc.c:209:13
  1072cc:    51 e8 2d 68       	if ((r1 & 0x2000) == 0) goto 0x5a <vfree_v2+0xA8 : 10732a >
  1072d0:    b4 e1 a0 12       	r4 = uextra(r1, p:0x5, l:0x8)			  ## pmalloc.c:223:5
  1072d4:    d8 ec ea 04       	r0 = [r14+r4<<2]			  ## pmalloc.c:223:5
  1072d8:    62 e1 1f 10       	r2 = r1 & 0x1F			  ## pmalloc.c:223:5
  1072dc:    c8 e1 b0 72       	r7 = r11 << r2			  ## pmalloc.c:223:5
  1072e0:    75 e1 60 1c       	r5 = r1 & 0xFFFF1FFF			  ## vmalloc.c:212:26
  1072e4:    70 fa 06 00       	if ((r0 & r7) == 0) goto 0xc <vfree_v2+0x72 : 1072f4 >			  ## vmalloc.c:212:26
  1072e8:    d0 ec c0 10       	r1 = [r12+0x0]			  ## pmalloc.c:223:5
  1072ec:    a0 16             	r0 = r10			  ## pmalloc.c:223:5
  1072ee:    c1 00             	call r1			  ## pmalloc.c:223:5
  1072f0:    d8 ec ea 04       	r0 = [r14+r4<<2]			  ## pmalloc.c:223:5
  1072f4:    70 19             	r0 |= r7			  ## pmalloc.c:224:38
  1072f6:    d8 ec eb 04       	[r14+r4<<2] = r0			  ## pmalloc.c:224:38
  1072fa:    60 e1 7c 5c       	r0 = r5 & 0xFC00			  ## pmalloc.c:225:40
  1072fe:    80 a8             	r0 = r0 >> 0x8			  ## pmalloc.c:225:5
  107300:    e0 18             	r0 += r14			  ## pmalloc.c:225:5
  107302:    00 e1 b0 00       	r0 = r0 + 0xb0			  ## pmalloc.c:225:5
  107306:    71 e1 e0 40       	r1 = r4 & 0xFFFFFF1F			  ## pmalloc.c:225:55
  10730a:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## pmalloc.c:225:52
  10730e:    50 ed e8 0c       	r0 = h[r14+0xc8] (u)			  ## pmalloc.c:226:5
  107312:    80 46             	if (r0 != 0) goto 0xc <vfree_v2+0x9E : 107320 >			  ## pmalloc.c:226:5
  107314:    d0 ec c0 10       	r1 = [r12+0x0]			  ## pmalloc.c:226:5
  107318:    90 16             	r0 = r9			  ## pmalloc.c:226:5
  10731a:    c1 00             	call r1			  ## pmalloc.c:226:5
  10731c:    50 ed e8 0c       	r0 = h[r14+0xc8] (u)			  ## pmalloc.c:226:5
  107320:    f8 3f             	r0 += -0x1			  ## pmalloc.c:227:27
  107322:    50 ed e9 0c       	h[r14+0xc8] = r0			  ## pmalloc.c:227:27
  107326:    d0 ed f3 d0       	h[r15++=0x2] = r13			  ## vmalloc.c:213:20
  10732a:    fe 3f             	r6 += -0x1			  ## vmalloc.c:207:5
  10732c:    e6 4d             	if (r6 != 0) goto -0x66 <vfree_v2+0x46 : 1072c8 >
  10732e:    c0 ef 10 80       	[r8+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:217:5
  107332:    5f 04             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:218:1


vcopy_:
  107334:    75 04             	[--sp] = {rets, r5, r4}			  ## vmalloc.c:221:0
  107336:    c3 ff d4 be 02 00 	r3 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:222:44
  10733c:    03 eb 18 00       	{r4, r3} = [r3+]			  ## vmalloc.c:222:44
  107340:    c5 ff 00 04 1b 00 	r5 = 0x1b0400 <__stub_VecMinScalar_float_c_f_c+0xA0404 : 1b0400 >
  107346:    00 ef 10 50       	[r5+0x0] |= 0x10			  ## vmalloc.c:232:5
  10734a:    11 1f             	r1 = r1 - r4			  ## vmalloc.c:223:35
  10734c:    91 a7             	r1 = r1 >> 0x7			  ## vmalloc.c:228:18
  10734e:    11 a1             	r1 = r1 << 0x1			  ## vmalloc.c:223:51
  107350:    31 18             	r1 += r3			  ## vmalloc.c:228:18
  107352:    00 1f             	r0 = r0 - r4			  ## vmalloc.c:222:35
  107354:    80 a7             	r0 = r0 >> 0x7			  ## vmalloc.c:227:18
  107356:    00 a1             	r0 = r0 << 0x1			  ## vmalloc.c:222:51
  107358:    30 18             	r0 += r3			  ## vmalloc.c:227:18
  10735a:    da 3f             	r2 += 0x7f			  ## vmalloc.c:225:17
  10735c:    a2 a7             	r2 = r2 >> 0x7			  ## vmalloc.c:225:17
  10735e:    43 20             	r3 = 0x0
  107360:    32 03             	rep 0x8 r2 {			  ## vmalloc.c:233:5
  107362:    d0 ed 10 40       		r4 = h[r1++=0x0] (u)			  ## vmalloc.c:233:5
  107366:    84 06             		h[r0++=0x2] = r4			  ## vmalloc.c:233:5
  107368:    93 06             		h[r1++=0x2] = r3
                               	}			  ## vmalloc.c:233:5
  10736a:    f2 5a             	if (r2 != 0) goto -0xc <vcopy_+0x2C : 107360 >			  ## vmalloc.c:233:5
  10736c:    c0 ef 10 50       	[r5+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:244:5
  107370:    55 04             	{pc, r5, r4} = [sp++]			  ## vmalloc.c:245:1


vmem_get_phy_adr:
  107372:    c1 ff d4 be 02 00 	r1 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:249:0
  107378:    01 eb 06 00       	{r2, r1} = [r1+]			  ## vmalloc.c:250:71
  10737c:    80 1e             	r0 = r0 - r2			  ## vmalloc.c:250:62
  10737e:    80 a7             	r0 = r0 >> 0x7			  ## vmalloc.c:250:91
  107380:    00 a1             	r0 = r0 << 0x1			  ## vmalloc.c:250:78
  107382:    10 18             	r0 += r1			  ## vmalloc.c:250:91
  107384:    43 f0 ff 1f       	r3 = 0x1fff  # <usb_code_size+0x14C3 : 1ffe >			  ## vmalloc.c:250:31
  107388:    09 41             		 r1 = b[r0+0x1] (u)			  ## vmalloc.c:250:91
  10738a:    08 40             	r0 = b[r0+0x0] (u)			  ## vmalloc.c:250:91
  10738c:    a0 e1 20 14       	r0 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:250:91
  107390:    c1 ff 08 be 02 00 	r1 = 0x2be08 <physics_mem : 2be08 >			  ## pmalloc.c:214:80
  107396:    50 ed 14 2c       	r2 = h[r1+0xc4] (u)			  ## pmalloc.c:214:29
  10739a:    d0 ec 18 1b       	r1 = [r1+0xb8]			  ## pmalloc.c:214:80
  10739e:    b0 19             	r0 &= r3			  ## vmalloc.c:250:31
  1073a0:    80 1e             	r0 = r0 - r2			  ## pmalloc.c:214:27
  1073a2:    00 a7             	r0 = r0 << 0x7			  ## pmalloc.c:214:54
  1073a4:    10 18             	r0 += r1			  ## pmalloc.c:214:66
  1073a6:    80 00             	rts			  ## vmalloc.c:250:5


vmem_start:
  1073a8:    c0 ff d4 be 02 00 	r0 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:254:0
  1073ae:    00 61             	r0 = [r0+0x4] 			  ## vmalloc.c:255:28
  1073b0:    e0 e0 70 0c       	r0 = r0 + 0xF000			  ## vmalloc.c:255:34
  1073b4:    80 00             	rts			  ## vmalloc.c:255:5


vmem_end:
  1073b6:    c0 ff d4 be 02 00 	r0 = 0x2bed4 <v_mems : 2bed4 >			  ## vmalloc.c:259:0
  1073bc:    00 62             	r0 = [r0+0x8] 			  ## vmalloc.c:260:27
  1073be:    80 00             	rts			  ## vmalloc.c:260:5


$data.__2:
  1073c0:	 41 53 53 45 52 54 3a 20         ASSERT: 
  1073c8:	 28 70 68 79 73 69 63 73         (physics
  1073d0:	 5f 6d 65 6d 2e 6d 61 70         _mem.map
  1073d8:	 5b 70 61 67 65 20 2f 20         [page / 
  1073e0:	 42 49 54 5f 53 49 5a 45         BIT_SIZE
  1073e8:	 5d 20 26 20 42 49 54 28         ] & BIT(
  1073f0:	 70 61 67 65 20 26 20 42         page & B
  1073f8:	 49 54 5f 53 49 5a 45 5f         IT_SIZE_
  107400:	 4d 41 53 4b 29 29 20 3d         MASK)) =
  107408:	 3d 20 30 20 00 41 53 53         = 0 .ASS
  107410:	 45 52 54 3a 20 70 68 79         ERT: phy
  107418:	 73 69 63 73 5f 6d 65 6d         sics_mem
  107420:	 2e 75 73 65 64 5f 70 61         .used_pa
  107428:	 67 65 73 20 3e 20 30 20         ges > 0 
  107430:	 00 76 6d 61 6c 6c 6f 63         .vmalloc
  107438:	 20 6e 6f 74 20 70 61 67          not pag
  107440:	 65 20 3a 20 30 78 25 78         e : 0x%x
  107448:	 00 41 53 53 45 52 54 3a         .ASSERT:
  107450:	 20 30 20 52 6f 6d 20 4e          0 Rom N
  107458:	 6f 20 65 6e 6f 75 67 68         o enough
  107460:	 20 70 68 79 73 69 63 73          physics
  107468:	 20 6d 65 6d 6f 72 79 00          memory.
  107470:	 41 53 53 45 52 54 3a 20         ASSERT: 
  107478:	 76 5f 6d 65 6d 73 2e 6d         v_mems.m
  107480:	 6d 75 5f 74 6c 62 5f 74         mu_tlb_t
  107488:	 61 67 5b 70 61 67 65 5f         ag[page_
  107490:	 61 64 64 72 5d 2e 70 61         addr].pa
  107498:	 67 65 5f 65 6e 20 3d 3d         ge_en ==
  1074a0:	 20 30 20 25 64 20 2f 20          0 %d / 
  1074a8:	 30 78 25 78 20 00 41 53         0x%x .AS
  1074b0:	 53 45 52 54 3a 20 30 20         SERT: 0 
  1074b8:	 4e 6f 20 65 6e 6f 75 67         No enoug
  1074c0:	 68 20 70 68 79 73 69 63         h physic
  1074c8:	 73 20 6d 65 6d 6f 72 79         s memory
  1074d0:	 00                              .


sMassDescriptor:
  1074d1:	 09 04 00 00 02 08 06 50         .......P
  1074d9:	 00 07 05 81 02 40 00 01         .....@..
  1074e1:	 07 05 01 02 40 00 01            ....@..


SCSIInquiryData:
  1074e8:	 00 80 02 02 20 00 00 00         .... ...
  1074f0:	 42 52 33 34 20 20 20 20         BR34    
  1074f8:	 55 42 4f 4f 54 31 2e 30         UBOOT1.0
  107500:	 30 20 20 20 20 20 20 20         0       
  107508:	 31 2e 30 30                     1.00


scsi_mode_sense:
  10750c:	 03 00 00 00                     ....


sDeviceDescriptor:
  107510:	 12 01 10 01 00 00 00 40         .......@
  107518:	 4a 4c 42 34 00 03 01 02         JLB4....
  107520:	 00 01                           ..


MANUFACTURE_STR:
  107522:	 1c 03 42 00 52 00 33 00         ..B.R.3.
  10752a:	 34 00 55 00 42 00 4f 00         4.U.B.O.
  107532:	 4f 00 54 00 31 00 2e 00         O.T.1...
  10753a:	 30 00 30 00                     0.0.


sConfigDescriptor:
  10753e:	 09 02 20 00 01 01 00 80         .. .....
  107546:	 c8 00                           ..


usb_clr_intr_rxe:
  107548:    c1 ff 24 4a 1e 00 	r1 = 0x1e4a24 <__stub_VecMinScalar_float_c_f_c+0xD4A28 : 1e4a24 >			  ## usb_phy.c:168:0
  10754e:    12 60             	r2 = [r1+0x0] 			  ## usb_phy.c:170:33
  107550:    13 61             	r3 = [r1+0x4] 			  ## usb_phy.c:170:58
  107552:    b0 e8 ff 9f       	if (r0 != -0x1) {			  ## usb_phy.c:170:58
  107556:    33 a8             		r3 = r3 << 0x8			  ## usb_phy.c:170:68
  107558:    32 19             		r2 |= r3			  ## usb_phy.c:170:43
  10755a:    94 e1 23 00       		r0 = r2 & ~(1 << r0)
                               	} else {			  ## usb_phy.c:174:18
  10755e:    40 20             		r0 = 0x0
                               	}
  107560:    02 17             	r2 = r0.b0 (u)			  ## usb_phy.c:176:37
  107562:    92 60             	[r1+0x0] = r2			  ## usb_phy.c:176:26
  107564:    80 a8             	r0 = r0 >> 0x8			  ## usb_phy.c:177:37
  107566:    90 61             	[r1+0x4] = r0			  ## usb_phy.c:177:26
  107568:    80 00             	rts			  ## usb_phy.c:179:1


usb_clr_intr_txe:
  10756a:    c1 ff 1c 4a 1e 00 	r1 = 0x1e4a1c <__stub_VecMinScalar_float_c_f_c+0xD4A20 : 1e4a1c >			  ## usb_phy.c:146:0
  107570:    12 60             	r2 = [r1+0x0] 			  ## usb_phy.c:148:33
  107572:    13 61             	r3 = [r1+0x4] 			  ## usb_phy.c:148:58
  107574:    b0 e8 ff 9f       	if (r0 != -0x1) {			  ## usb_phy.c:148:58
  107578:    33 a8             		r3 = r3 << 0x8			  ## usb_phy.c:148:68
  10757a:    32 19             		r2 |= r3			  ## usb_phy.c:148:43
  10757c:    94 e1 23 00       		r0 = r2 & ~(1 << r0)
                               	} else {			  ## usb_phy.c:152:18
  107580:    40 20             		r0 = 0x0
                               	}
  107582:    02 17             	r2 = r0.b0 (u)			  ## usb_phy.c:154:37
  107584:    92 60             	[r1+0x0] = r2			  ## usb_phy.c:154:26
  107586:    80 a8             	r0 = r0 >> 0x8			  ## usb_phy.c:155:37
  107588:    90 61             	[r1+0x4] = r0			  ## usb_phy.c:155:26
  10758a:    80 00             	rts			  ## usb_phy.c:157:1


usb_read_rxcsr:
  10758c:    c0 ff 50 4b 1e 00 	r0 = 0x1e4b50 <__stub_VecMinScalar_float_c_f_c+0xD4B54 : 1e4b50 >			  ## usb_phy.c:215:0
  107592:    01 60             	r1 = [r0+0x0] 			  ## usb_phy.c:220:29
  107594:    11 d7             	r1 = r1.b0 (u)  #			  ## usb_phy.c:220:37
  107596:    00 61             		 r0 = [r0+0x4] 			  ## usb_phy.c:220:62
  107598:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:220:71
  10759a:    80 17             	r0 = r0.l (u)			  ## usb_phy.c:220:71
  10759c:    10 19             	r0 |= r1			  ## usb_phy.c:220:45
  10759e:    80 00             	rts			  ## usb_phy.c:222:5


usb_g_bulk_read:
  1075a0:    7b 04             	[--sp] = {rets, r11-r4}			  ## usb_phy.c:405:0
  1075a2:    14 16             	r4 = r1			  ## usb_phy.c:405:0
  1075a4:    07 16             	r7 = r0			  ## usb_phy.c:405:0
  1075a6:    14 59             	if (r4 == 0) goto 0x72 <usb_g_bulk_read+0x7A : 10761a >			  ## usb_phy.c:405:0
  1075a8:    c0 ff 50 94 02 00 	r0 = 0x29450 <ep_raddr : 29450 >			  ## usb_phy.c:405:0
  1075ae:    d0 ec 00 80       	r8 = [r0+0x0]			  ## usb_phy.c:405:0
  1075b2:    4a e0 01 00       	r10 = 0x1 <TLB_BEGIN : 0 >			  ## usb_phy.c:405:0
  1075b6:    32 e8 00 00       	if (r2 == 0x0) {			  ## usb_phy.c:405:0
  1075ba:    2a 16             		r10 = r2
                               	}			  ## usb_phy.c:405:0
  1075bc:    c1 14             	r9 = 0			  ## usb_phy.c:405:0
  1075be:    cb ff 50 4b 1e 00 	r11 = 0x1e4b50 <__stub_VecMinScalar_float_c_f_c+0xD4B54 : 1e4b50 >			  ## usb_phy.c:405:0
  1075c4:    d0 ec b0 00       	r0 = [r11+0x0]			  ## usb_phy.c:309:18
  1075c8:    50 e8 23 00       	if ((r0 & 0x1) == 0) goto 0x46 <usb_g_bulk_read+0x72 : 107612 >			  ## usb_phy.c:309:18
  1075cc:    d0 ec b8 00       	r0 = [r11+0x8]			  ## usb_phy.c:310:28
  1075d0:    d0 ec bc 10       	r1 = [r11+0xc]			  ## usb_phy.c:310:50
  1075d4:    11 a8             	r1 = r1 << 0x8			  ## usb_phy.c:310:60
  1075d6:    90 e1 10 50       	r5 = r1 | r0			  ## usb_phy.c:310:38
  1075da:    05 5b             	if (r5 == 0) goto 0x36 <usb_g_bulk_read+0x72 : 107612 >
  1075dc:    61 97             	call -0x52 <usb_read_rxcsr : 10758c >			  ## usb_phy.c:330:21
  1075de:    06 16             	r6 = r0			  ## usb_phy.c:330:21
  1075e0:    b7 e8 00 c0       	if (r7 != 0x0) {
  1075e4:    70 16             		r0 = r7			  ## usb_phy.c:344:13
  1075e6:    81 16             		r1 = r8			  ## usb_phy.c:344:13
  1075e8:    52 16             		r2 = r5			  ## usb_phy.c:344:13
  1075ea:    bf ea a9 e9       		call -0x2cae
                               	} <memmove : 104940 >			  ## usb_phy.c:344:13
  1075ee:    60 e1 8b 60       	r0 = r6 & 0x8B			  ## usb_phy.c:210:28
  1075f2:    30 24             	r0 |= 0x10			  ## usb_phy.c:210:28
  1075f4:    d0 ec b1 00       	[r11+0x0] = r0			  ## usb_phy.c:210:20
  1075f8:    e0 a9             	r0 = r6 >> 0x9			  ## usb_phy.c:211:28
  1075fa:    00 a1             	r0 = r0 << 0x1			  ## usb_phy.c:211:28
  1075fc:    59 18             	r9 += r5			  ## usb_phy.c:348:14
  1075fe:    4c 1f             	r4 = r4 - r5			  ## usb_phy.c:347:13
  107600:    79 1d             	r1 = r7 + r5			  ## usb_phy.c:350:17
  107602:    d0 ec b5 00       	[r11+0x4] = r0			  ## usb_phy.c:211:20
  107606:    37 e8 00 00       	if (r7 == 0x0) {			  ## usb_phy.c:211:20
  10760a:    71 16             		r1 = r7
                               	}			  ## usb_phy.c:349:13
  10760c:    40 21             	r0 = 0x1
  10760e:    17 16             	r7 = r1
  107610:    04 81             	goto 0x2 <usb_g_bulk_read+0x74 : 107614 >
  107612:    a0 16             	r0 = r10
  107614:    04 43             	if (r4 == 0) goto 0x6 <usb_g_bulk_read+0x7C : 10761c >
  107616:    e0 56             	if (r0 != 0) goto -0x54 <usb_g_bulk_read+0x24 : 1075c4 >
  107618:    04 81             	goto 0x2 <usb_g_bulk_read+0x7C : 10761c >
  10761a:    c1 14             	r9 = 0
  10761c:    90 16             	r0 = r9			  ## usb_phy.c:406:5
  10761e:    5b 04             	{pc, r11-r4} = [sp++]			  ## usb_phy.c:406:5


rbc_get_length:
  107620:    c0 ff f4 93 02 00 	r0 = 0x293f4 <cbw : 293f4 >			  ## msd_upgrade.c:51:0
  107626:    50 ee 05 11       	r1 = b[r0+0x15] (u)			  ## msd_upgrade.c:63:12
  10762a:    50 ee 06 01       	r0 = b[r0+0x16] (u)			  ## msd_upgrade.c:63:12
  10762e:    a0 e1 20 14       	r0 <= insert(r1, p:0x8, l:0x8)			  ## msd_upgrade.c:63:12
  107632:    80 00             	rts			  ## msd_upgrade.c:63:5


msd_usb2mcu:
  107634:    42 21             	r2 = 0x1			  ## msd.c:135:0
  107636:    d7 94             	goto -0x98 <usb_g_bulk_read : 1075a0 >			  ## msd.c:136:12


usb_read_txcsr:
  107638:    c0 ff 44 4b 1e 00 	r0 = 0x1e4b44 <__stub_VecMinScalar_float_c_f_c+0xD4B48 : 1e4b44 >			  ## usb_phy.c:196:0
  10763e:    01 60             	r1 = [r0+0x0] 			  ## usb_phy.c:201:22
  107640:    00 61             	r0 = [r0+0x4] 			  ## usb_phy.c:201:42
  107642:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:201:50
  107644:    10 19             	r0 |= r1			  ## usb_phy.c:201:30
  107646:    80 00             	rts			  ## usb_phy.c:203:5


msd_mcu2usb:
  107648:    7a 04             	[--sp] = {rets, r10-r4}			  ## msd.c:139:0
  10764a:    c2 ff 40 94 02 00 	r2 = 0x29440 <ep_taddr : 29440 >			  ## msd.c:139:0
  107650:    d0 ec 20 a0       	r10 = [r2+0x0]			  ## msd.c:139:0
  107654:    18 16             	r8 = r1			  ## msd.c:139:0
  107656:    06 16             	r6 = r0			  ## msd.c:139:0
  107658:    c4 ff 44 4b 1e 00 	r4 = 0x1e4b44 <__stub_VecMinScalar_float_c_f_c+0xD4B48 : 1e4b44 >			  ## msd.c:139:0
  10765e:    c9 ff 0c 18 1e 00 	r9 = 0x1e180c <__stub_VecMinScalar_float_c_f_c+0xD1810 : 1e180c >			  ## msd.c:139:0
  107664:    85 16             	r5 = r8			  ## msd.c:139:0
  107666:    04 84             	goto 0x8 <msd_mcu2usb+0x28 : 107670 >			  ## msd.c:139:0
  107668:    81 19             	r1 &= r0			  ## usb_phy.c:191:28
  10766a:    c1 60             	[r4+0x0] = r1			  ## usb_phy.c:191:20
  10766c:    80 a8             	r0 = r0 >> 0x8			  ## usb_phy.c:192:28
  10766e:    c0 61             	[r4+0x4] = r0			  ## usb_phy.c:192:20
  107670:    71 83             	call -0x3a <usb_read_txcsr : 107638 >			  ## usb_phy.c:373:21
  107672:    50 e8 08 72       	if ((r0 & 0x4000) != 0) goto 0x10 <msd_mcu2usb+0x3E : 107686 >
  107676:    79 3a             	r1 = 0xfa
  107678:    50 e8 f6 13       	if ((r0 & 0x4) != 0) goto -0x14 <msd_mcu2usb+0x20 : 107668 >
  10767c:    79 3c             	r1 = 0xfc
  10767e:    50 e8 f3 0b       	if ((r0 & 0x2) != 0) goto -0x1a <msd_mcu2usb+0x20 : 107668 >
  107682:    50 e8 f5 03       	if ((r0 & 0x1) != 0) goto -0x16 <msd_mcu2usb+0x28 : 107670 >
  107686:    57 16             	r7 = r5			  ## usb_phy.c:392:24
  107688:    35 e9 40 00       	if (r5 >= 0x40) {			  ## usb_phy.c:392:24
  10768c:    57 20             		r7 = 0x40
                               	}			  ## usb_phy.c:392:24
  10768e:    b6 e8 00 c0       	if (r6 != 0x0) {
  107692:    a0 16             		r0 = r10			  ## usb_phy.c:394:13
  107694:    61 16             		r1 = r6			  ## usb_phy.c:394:13
  107696:    72 16             		r2 = r7			  ## usb_phy.c:394:13
  107698:    bf ea 52 e9       		call -0x2d5c
                               	} <memmove : 104940 >			  ## usb_phy.c:394:13
  10769c:    d0 ec 91 70       	[r9+0x0] = r7			  ## usb_phy.c:360:11
  1076a0:    61 8b             	call -0x6a <usb_read_txcsr : 107638 >			  ## usb_phy.c:361:17
  1076a2:    61 e1 fe 00       	r1 = r0 & 0xFE			  ## usb_phy.c:191:28
  1076a6:    31 20             	r1 |= 0x1			  ## usb_phy.c:191:28
  1076a8:    c1 60             	[r4+0x0] = r1			  ## usb_phy.c:191:20
  1076aa:    81 a8             	r1 = r0 >> 0x8			  ## usb_phy.c:192:28
  1076ac:    dd 1f             	r5 = r5 - r7			  ## usb_phy.c:397:13
  1076ae:    e8 1d             	r0 = r6 + r7			  ## usb_phy.c:399:17
  1076b0:    c1 61             	[r4+0x4] = r1			  ## usb_phy.c:192:20
  1076b2:    36 e8 00 00       	if (r6 == 0x0) {			  ## usb_phy.c:192:20
  1076b6:    60 16             		r0 = r6
                               	}			  ## usb_phy.c:398:13
  1076b8:    06 16             	r6 = r0
  1076ba:    e5 5a             	if (r5 != 0) goto -0x4c <msd_mcu2usb+0x28 : 107670 >
  1076bc:    80 16             	r0 = r8			  ## msd.c:140:5
  1076be:    5a 04             	{pc, r10-r4} = [sp++]			  ## msd.c:140:5


stall_inep:
  1076c0:    10 04             	[--sp] = rets			  ## msd.c:174:0
  1076c2:    c0 ff 44 4b 1e 00 	r0 = 0x1e4b44 <__stub_VecMinScalar_float_c_f_c+0xD4B48 : 1e4b44 >			  ## msd.c:174:0
  1076c8:    40 ea 10 00       	[r0+0x0] = 0x10			  ## usb_phy.c:191:20
  1076cc:    41 ea 00 00       	[r0+0x4] = 0x0			  ## usb_phy.c:192:20
  1076d0:    51 93             	call -0x9a <usb_read_txcsr : 107638 >			  ## msd.c:183:14
  1076d2:    50 e8 fd 23       	if ((r0 & 0x10) != 0) goto -0x6 <stall_inep+0x10 : 1076d0 >			  ## msd.c:183:13
  1076d6:    00 04             	pc = [sp++]			  ## msd.c:187:1


unknow:
  1076d8:    10 04             	[--sp] = rets			  ## msd.c:202:0
  1076da:    00 4c             	if (r0 == 0) goto 0x18 <unknow+0x1C : 1076f4 >			  ## msd.c:203:9
  1076dc:    c0 ff 50 4b 1e 00 	r0 = 0x1e4b50 <__stub_VecMinScalar_float_c_f_c+0xD4B54 : 1e4b50 >
  1076e2:    40 ea 20 00       	[r0+0x0] = 0x20			  ## usb_phy.c:210:20
  1076e6:    41 ea 00 00       	[r0+0x4] = 0x0			  ## usb_phy.c:211:20
  1076ea:    bf ea 4f ff       	call -0x162 <usb_read_rxcsr : 10758c >			  ## msd.c:196:14
  1076ee:    50 e8 fc 2b       	if ((r0 & 0x20) != 0) goto -0x8 <unknow+0x12 : 1076ea >			  ## msd.c:196:14
  1076f2:    04 81             	goto 0x2 <unknow+0x1E : 1076f6 >			  ## msd.c:196:14
  1076f4:    71 85             	call -0x36 <stall_inep : 1076c0 >			  ## msd.c:206:9
  1076f6:    c0 ff 13 94 02 00 	r0 = 0x29413 <cbw+0x1E : 29412 >			  ## msd.c:210:20
  1076fc:    41 20             	r1 = 0x0			  ## msd.c:210:20
  1076fe:    89 4b             	b[r0+0xb] = r1			  ## msd.c:209:25
  107700:    89 4a             	b[r0+0xa] = r1			  ## msd.c:209:25
  107702:    89 49             	b[r0+0x9] = r1			  ## msd.c:209:25
  107704:    89 48             	b[r0+0x8] = r1			  ## msd.c:209:25
  107706:    41 21             	r1 = 0x1			  ## msd.c:209:25
  107708:    89 4c             	b[r0+0xc] = r1			  ## msd.c:210:20
  10770a:    c0 ff 20 94 02 00 	r0 = 0x29420 <msd_status.0 : 29420 >			  ## msd.c:211:23
  107710:    41 22             	r1 = 0x2			  ## msd.c:211:23
  107712:    89 40             	b[r0+0x0] = r1			  ## msd.c:211:23
  107714:    00 04             	pc = [sp++]			  ## msd.c:212:1


usb_slave_mode:
  107716:    e2 94             	sp += -0x30			  ## usb_device.c:15:0
  107718:    c0 ff ac 94 02 00 	r0 = 0x294ac <usb_interrupt_rx : 294ac >			  ## usb_onchip.c:89:5
  10771e:    c4 14             	r12 = 0			  ## usb_onchip.c:89:5
  107720:    10 86             	rep 0x4 0x7 {			  ## usb_onchip.c:89:5
  107722:    d8 ec 05 c0       		[r0++=0x4] = r12
                               	}			  ## usb_onchip.c:89:5
  107726:    c0 ff 90 94 02 00 	r0 = 0x29490 <usb_interrupt_tx : 29490 >			  ## usb_onchip.c:90:5
  10772c:    10 86             	rep 0x4 0x7 {			  ## usb_onchip.c:90:5
  10772e:    d8 ec 05 c0       		[r0++=0x4] = r12
                               	}			  ## usb_onchip.c:90:5
  107732:    c1 ff e2 7c 10 00 	r1 = 0x107ce2 <usb_device_isr : 107ce2 >			  ## usb_onchip.c:93:5
  107738:    40 29             	r0 = 0x9			  ## usb_onchip.c:93:5
  10773a:    42 21             	r2 = 0x1			  ## usb_onchip.c:93:5
  10773c:    80 ea fa 29       	call 0x53f4 <HWI_Install : 10cb34 >			  ## usb_onchip.c:93:5
  107740:    c0 ff 00 54 1e 00 	r0 = 0x1e5400 <__stub_VecMinScalar_float_c_f_c+0xD5404 : 1e5400 >			  ## usb_onchip.c:93:5
  107746:    c0 ef 80 0d       	[r0+0x0] &= 0xFFFFEFFF			  ## usb_onchip.c:95:21
  10774a:    00 ef 00 0d       	[r0+0x0] |= 0x2000			  ## usb_onchip.c:96:21
  10774e:    41 e0 ca bf       	r1 = -0x4036 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEBFCE : ffffffffffffbfca >			  ## usb_onchip.c:97:18
  107752:    c4 ff 00 18 1e 00 	r4 = 0x1e1800 <__stub_VecMinScalar_float_c_f_c+0xD1804 : 1e1800 >			  ## usb_onchip.c:97:18
  107758:    64 e8 02 41       	[r4+0x0] &= r1			  ## usb_onchip.c:97:18
  10775c:    d0 ec 45 c0       	[r4+0x4] = r12			  ## usb_onchip.c:98:18
  107760:    00 ef 01 40       	[r4+0x0] |= 0x1			  ## usb_onchip.c:100:18
  107764:    c0 ef 40 00       	[r0+0x0] &= 0xFFFFFFBF			  ## usb_onchip.c:102:5
  107768:    00 ef 80 00       	[r0+0x0] |= 0x80			  ## usb_onchip.c:103:5
  10776c:    00 ef 10 00       	[r0+0x0] |= 0x10			  ## usb_onchip.c:105:5
  107770:    c0 ef 20 00       	[r0+0x0] &= 0xFFFFFFDF			  ## usb_onchip.c:106:5
  107774:    00 ef 34 40       	[r4+0x0] |= 0x34			  ## usb_onchip.c:108:18
  107778:    40 24             	r0 = 0x4			  ## usb_phy.c:133:27
  10777a:    c5 ff 04 4a 1e 00 	r5 = 0x1e4a04 <__stub_VecMinScalar_float_c_f_c+0xD4A08 : 1e4a04 >
  107780:    d0 6a             	[r5+0x28] = r0			  ## usb_phy.c:133:27
  107782:    10 3f             	r0 = -0x1			  ## usb_onchip.c:111:5
  107784:    bf ea e0 fe       	call -0x240 <usb_clr_intr_rxe : 107548 >			  ## usb_onchip.c:111:5
  107788:    10 3f             	r0 = -0x1			  ## usb_onchip.c:112:5
  10778a:    bf ea ee fe       	call -0x224 <usb_clr_intr_txe : 10756a >			  ## usb_onchip.c:112:5
  10778e:    40 ea 40 50       	[r5+0x0] = 0x40			  ## usb_phy.c:36:23
  107792:    00 ef 00 4e       	[r4+0x0] |= 0x800			  ## usb_onchip.c:121:18
  107796:    c0 ff 40 90 02 00 	r0 = 0x29040 <ep0_dma_buffer : 29040 >			  ## usb_phy.c:289:25
  10779c:    c0 67             	[r4+0x1c] = r0			  ## usb_phy.c:289:25
  10779e:    c1 ff 3c 94 02 00 	r1 = 0x2943c <ep0_addr : 2943c >			  ## usb_phy.c:290:18
  1077a4:    90 60             	[r1+0x0] = r0			  ## usb_phy.c:290:18
  1077a6:    c0 ff 80 90 02 00 	r0 = 0x29080 <ep1_dma_buffer : 29080 >
  1077ac:    c0 68             	[r4+0x20] = r0			  ## usb_phy.c:276:12
  1077ae:    c1 ff 40 94 02 00 	r1 = 0x29440 <ep_taddr : 29440 >			  ## usb_phy.c:277:22
  1077b4:    90 60             	[r1+0x0] = r0			  ## usb_phy.c:277:22
  1077b6:    d0 20             	r0 += 0x40			  ## usb_phy.c:277:22
  1077b8:    4a f0 53 00       	r10 = 0x53  # <TLB_BEGIN+0x52 : 52 >
  1077bc:    c0 69             		 [r4+0x24] = r0			  ## usb_phy.c:295:12
  1077be:    c1 ff 50 94 02 00 	r1 = 0x29450 <ep_raddr : 29450 >			  ## usb_phy.c:296:22
  1077c4:    4e f0 42 00       	r14 = 0x42  # <TLB_BEGIN+0x42 : 42 >			  ## usb_phy.c:296:22
  1077c8:    90 60             		 [r1+0x0] = r0			  ## usb_phy.c:296:22
  1077ca:    a8 80             	r0 = sp + 32			  ## usb_phy.c:296:22
  1077cc:    4f f0 55 00       	r15 = 0x55  # <TLB_BEGIN+0x54 : 54 >
  1077d0:    80 22             		 [sp+8] = r0
  1077d2:    88 8e             	r0 = sp + 14
  1077d4:    80 21             	[sp+4] = r0
  1077d6:    c0 21             	r0 += 0x1
  1077d8:    80 20             	[sp] = r0
  1077da:    c4 ff f4 93 02 00 	r4 = 0x293f4 <cbw : 293f4 >
  1077e0:    c9 ff 55 53 42 43 	r9 = 0x43425355 <__stub_VecMinScalar_float_c_f_c+0x43315358 : 43425354 >
  1077e6:    cb ff 13 94 02 00 	r11 = 0x29413 <cbw+0x1E : 29412 >
  1077ec:    c8 ff 24 94 02 00 	r8 = 0x29424 <hook_usb_scsi : 29424 >
  1077f2:    cd ff 20 94 02 00 	r13 = 0x29420 <msd_status.0 : 29420 >
  1077f8:    c7 ff 21 94 02 00 	r7 = 0x29421 <msd_status.0 : 29420 >
  1077fe:    c6 ff 22 94 02 00 	r6 = 0x29422 <msd_status.2 : 29422 >
  107804:    80 ea 41 2c       	call 0x5882 <wdt_clr : 10d08a >			  ## usb_device.c:23:9
  107808:    52 ee 43 c0       	b[r4+0x3] = r12			  ## msd.c:144:23
  10780c:    52 ee 42 c0       	b[r4+0x2] = r12			  ## msd.c:144:23
  107810:    52 ee 41 c0       	b[r4+0x1] = r12			  ## msd.c:144:23
  107814:    52 ee 40 c0       	b[r4+0x0] = r12			  ## msd.c:144:23
  107818:    41 3f             	r1 = 0x1f			  ## msd.c:145:18
  10781a:    42 20             	r2 = 0x0			  ## msd.c:145:18
  10781c:    40 16             	r0 = r4			  ## msd.c:145:18
  10781e:    bf ea bf fe       	call -0x282 <usb_g_bulk_read : 1075a0 >			  ## msd.c:145:18
  107822:    4a 43             	r2 = b[r4+0x3] (u)			  ## msd.c:149:13
  107824:    4b 42             	r3 = b[r4+0x2] (u)			  ## msd.c:149:13
  107826:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## msd.c:149:13
  10782a:    4d 41             		 r5 = b[r4+0x1] (u)			  ## msd.c:149:13
  10782c:    49 40             	r1 = b[r4+0x0] (u)			  ## msd.c:149:13
  10782e:    a1 e1 20 54       	r1 <= insert(r5, p:0x8, l:0x8)			  ## msd.c:149:13
  107832:    a1 e1 40 38       	r1 <= insert(r3, p:0x10, l:0x10)			  ## msd.c:149:13
  107836:    70 46             	if (r0 == 0) goto -0x34 <usb_slave_mode+0xEE : 107804 >			  ## msd.c:146:9
  107838:    89 e8 e4 11       	if (r1 != r9) goto -0x38 <usb_slave_mode+0xEE : 107804 >
  10783c:    00 e1 04 b0       	r0 = r11 + 0x4
  107840:    49 84             	r1 = r4 + 0x4			  ## msd.c:155:23
  107842:    10 83             	rep 0x4 0x4 {			  ## msd.c:155:17
  107844:    12 07             		r2 = b[r1++=0x1] (u)			  ## msd.c:155:17
  107846:    82 07             		b[r0++=0x1] = r2
                               	}			  ## msd.c:155:17
  107848:    00 e1 08 b0       	r0 = r11 + 0x8			  ## msd.c:155:17
  10784c:    49 88             	r1 = r4 + 0x8			  ## msd.c:156:31
  10784e:    10 83             	rep 0x4 0x4 {			  ## msd.c:156:25
  107850:    12 07             		r2 = b[r1++=0x1] (u)			  ## msd.c:156:25
  107852:    82 07             		b[r0++=0x1] = r2
                               	}			  ## msd.c:156:25
  107854:    d0 ec 80 20       	r2 = [r8+0x0]			  ## msd_upgrade.c:135:9
  107858:    02 45             	if (r2 == 0) goto 0xa <usb_slave_mode+0x14E : 107864 >			  ## msd_upgrade.c:135:9
  10785a:    a9 80             	r1 = sp + 32
  10785c:    40 16             	r0 = r4			  ## msd_upgrade.c:135:26
  10785e:    c2 00             	call r2			  ## msd_upgrade.c:135:26
  107860:    80 f8 d6 00       	if (r0 != 0x0) goto 0x1ac <usb_slave_mode+0x2FA : 107a10 >			  ## msd_upgrade.c:135:26
  107864:    48 4f             	r0 = b[r4+0xf] (u)			  ## msd_upgrade.c:139:18
  107866:    10 f8 29 fa       	if (r0 == 0xfd) goto 0x52 <usb_slave_mode+0x1A6 : 1078bc >			  ## msd_upgrade.c:139:5
  10786a:    90 f8 4e f6       	if (r0 != 0xfb) goto 0x9c <usb_slave_mode+0x1F4 : 10790a >
  10786e:    50 ee 40 01       	r0 = b[r4+0x10] (u)			  ## msd_upgrade.c:143:22
  107872:    00 f8 99 10       	if (r0 == 0x8) goto 0x132 <usb_slave_mode+0x292 : 1079a8 >			  ## msd_upgrade.c:143:9
  107876:    80 f8 91 0c       	if (r0 != 0x6) goto 0x122 <usb_slave_mode+0x286 : 10799c >
  10787a:    48 91             	r0 = r4 + 0x11
  10787c:    09 43             	r1 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
  10787e:    0a 42             	r2 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
  107880:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
  107884:    0b 41             		 r3 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
  107886:    08 40             	r0 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
  107888:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  10788c:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  107890:    70 e0 00 70       	r7 = rev8(r0)			  ## msd_upgrade.c:46:12
  107894:    bf ea c4 fe       	call -0x278 <rbc_get_length : 107620 >			  ## msd_upgrade.c:82:11
  107898:    06 16             	r6 = r0			  ## msd_upgrade.c:82:11
  10789a:    70 16             	r0 = r7			  ## msd_upgrade.c:85:5
  10789c:    61 16             	r1 = r6			  ## msd_upgrade.c:85:5
  10789e:    bf ea c9 fe       	call -0x26e <msd_usb2mcu : 107634 >			  ## msd_upgrade.c:85:5
  1078a2:    e1 17             	r1 = r6.l (u)			  ## msd_upgrade.c:86:5
  1078a4:    c6 ff 22 94 02 00 	r6 = 0x29422 <msd_status.2 : 29422 >			  ## msd_upgrade.c:86:5
  1078aa:    70 16             	r0 = r7			  ## msd_upgrade.c:86:5
  1078ac:    c7 ff 21 94 02 00 	r7 = 0x29421 <msd_status.0 : 29420 >			  ## msd_upgrade.c:86:5
  1078b2:    80 ea 4e 2c       	call 0x589c <CrcDecode : 10d152 >			  ## msd_upgrade.c:86:5
  1078b6:    d0 ec 81 c0       	[r8+0x0] = r12			  ## msd_upgrade.c:146:27
  1078ba:    54 8a             	goto 0x154 <usb_slave_mode+0x2FA : 107a10 >			  ## msd_upgrade.c:146:27
  1078bc:    50 ee 40 01       	r0 = b[r4+0x10] (u)			  ## msd_upgrade.c:158:22
  1078c0:    80 f8 6c 0e       	if (r0 != 0x7) goto 0xd8 <usb_slave_mode+0x286 : 10799c >			  ## msd_upgrade.c:158:22
  1078c4:    48 91             	r0 = r4 + 0x11
  1078c6:    09 43             	r1 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
  1078c8:    0a 42             	r2 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
  1078ca:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
  1078ce:    0b 41             		 r3 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
  1078d0:    08 40             	r0 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
  1078d2:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  1078d6:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  1078da:    70 e0 00 60       	r6 = rev8(r0)			  ## msd_upgrade.c:46:12
  1078de:    bf ea 9f fe       	call -0x2c2 <rbc_get_length : 107620 >			  ## msd_upgrade.c:95:11
  1078e2:    07 16             	r7 = r0			  ## msd_upgrade.c:95:11
  1078e4:    f5 17             	r5 = r7.l (u)			  ## msd_upgrade.c:97:5
  1078e6:    60 16             	r0 = r6			  ## msd_upgrade.c:97:5
  1078e8:    51 16             	r1 = r5			  ## msd_upgrade.c:97:5
  1078ea:    80 ea 32 2c       	call 0x5864 <CrcDecode : 10d152 >			  ## msd_upgrade.c:97:5
  1078ee:    60 15             	r1_r0 = r7_r6			  ## msd_upgrade.c:98:5
  1078f0:    c7 ff 21 94 02 00 	r7 = 0x29421 <msd_status.0 : 29420 >			  ## msd_upgrade.c:98:5
  1078f6:    bf ea a7 fe       	call -0x2b2 <msd_mcu2usb : 107648 >			  ## msd_upgrade.c:98:5
  1078fa:    60 16             	r0 = r6			  ## msd_upgrade.c:99:5
  1078fc:    c6 ff 22 94 02 00 	r6 = 0x29422 <msd_status.2 : 29422 >			  ## msd_upgrade.c:99:5
  107902:    51 16             	r1 = r5			  ## msd_upgrade.c:99:5
  107904:    80 ea 25 2c       	call 0x584a <CrcDecode : 10d152 >			  ## msd_upgrade.c:99:5
  107908:    44 83             	goto 0x106 <usb_slave_mode+0x2FA : 107a10 >			  ## msd_upgrade.c:99:5
  10790a:    00 f8 8e 00       	if (r0 == 0x0) goto 0x11c <usb_slave_mode+0x314 : 107a2a >			  ## msd.c:286:9
  10790e:    00 f8 93 06       	if (r0 == 0x3) goto 0x126 <usb_slave_mode+0x322 : 107a38 >
  107912:    00 f8 cc 5e       	if (r0 == 0x2f) goto 0x198 <usb_slave_mode+0x398 : 107aae >
  107916:    00 f8 c4 34       	if (r0 == 0x1a) goto 0x188 <usb_slave_mode+0x38C : 107aa2 >
  10791a:    00 f8 d3 3c       	if (r0 == 0x1e) goto 0x1a6 <usb_slave_mode+0x3AE : 107ac4 >
  10791e:    00 f8 7a 46       	if (r0 == 0x23) goto 0xf4 <usb_slave_mode+0x300 : 107a16 >
  107922:    00 f8 78 4a       	if (r0 == 0x25) goto 0xf0 <usb_slave_mode+0x300 : 107a16 >
  107926:    00 f8 76 50       	if (r0 == 0x28) goto 0xec <usb_slave_mode+0x300 : 107a16 >
  10792a:    80 f8 37 24       	if (r0 != 0x12) goto 0x6e <usb_slave_mode+0x286 : 10799c >
  10792e:    50 ee bb 00       	r0 = b[r11+0xb] (u)			  ## msd.c:162:15
  107932:    50 ee ba 10       	r1 = b[r11+0xa] (u)			  ## msd.c:162:15
  107936:    50 ee b9 20       	r2 = b[r11+0x9] (u)			  ## msd.c:162:15
  10793a:    50 ee b8 70       	r7 = b[r11+0x8] (u)			  ## msd.c:162:15
  10793e:    a1 e1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:162:15
  107942:    a7 e1 20 24       	r7 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:162:15
  107946:    a7 e1 40 18       	r7 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:162:15
  10794a:    37 e9 24 00       	if (r7 >= 0x24) {			  ## msd.c:162:15
  10794e:    4f 24             		r7 = 0x24
                               	}			  ## msd.c:162:15
  107950:    c0 ff e8 74 10 00 	r0 = 0x1074e8 <SCSIInquiryData : 1074e8 >			  ## msd.c:164:5
  107956:    71 16             	r1 = r7			  ## msd.c:164:5
  107958:    bf ea 76 fe       	call -0x314 <msd_mcu2usb : 107648 >			  ## msd.c:164:5
  10795c:    50 ee bb 00       	r0 = b[r11+0xb] (u)			  ## msd.c:165:25
  107960:    50 ee ba 10       	r1 = b[r11+0xa] (u)			  ## msd.c:165:25
  107964:    50 ee b9 20       	r2 = b[r11+0x9] (u)			  ## msd.c:165:25
  107968:    50 ee b8 30       	r3 = b[r11+0x8] (u)			  ## msd.c:165:25
  10796c:    a1 e1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:165:25
  107970:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:165:25
  107974:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:165:25
  107978:    b8 1f             	r0 = r3 - r7			  ## msd.c:165:25
  10797a:    52 ee b8 00       	b[r11+0x8] = r0			  ## msd.c:165:25
  10797e:    81 b8             	r1 = r0 >> 0x18			  ## msd.c:165:25
  107980:    52 ee bb 10       	b[r11+0xb] = r1			  ## msd.c:165:25
  107984:    81 b0             	r1 = r0 >> 0x10			  ## msd.c:165:25
  107986:    52 ee ba 10       	b[r11+0xa] = r1			  ## msd.c:165:25
  10798a:    80 a8             	r0 = r0 >> 0x8			  ## msd.c:165:25
  10798c:    52 ee b9 00       	b[r11+0x9] = r0			  ## msd.c:165:25
  107990:    52 ee bc c0       	b[r11+0xc] = r12			  ## msd.c:166:20
  107994:    c7 ff 21 94 02 00 	r7 = 0x29421 <msd_status.0 : 29420 >			  ## msd.c:166:20
  10799a:    64 80             	goto 0x180 <usb_slave_mode+0x406 : 107b1c >
  10799c:    48 4c             	r0 = b[r4+0xc] (u)			  ## msd.c:311:26
  10799e:    80 a7             	r0 = r0 >> 0x7			  ## msd.c:311:20
  1079a0:    38 20             	r0 ^= 0x1			  ## msd.c:311:20
  1079a2:    bf ea 99 fe       	call -0x2ce <unknow : 1076d8 >			  ## msd.c:311:13
  1079a6:    54 9a             	goto 0x174 <usb_slave_mode+0x406 : 107b1c >			  ## msd.c:311:13
  1079a8:    48 91             	r0 = r4 + 0x11
  1079aa:    50 ee 01 e0       	r14 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
  1079ae:    0b 40             	r3 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
  1079b0:    0d 43             	r5 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
  1079b2:    0e 42             	r6 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
  1079b4:    bf ea 34 fe       	call -0x398 <rbc_get_length : 107620 >			  ## msd_upgrade.c:109:15
  1079b8:    01 16             	r1 = r0			  ## msd_upgrade.c:109:15
  1079ba:    c0 ff 28 94 02 00 	r0 = 0x29428 <arg_list : 29428 >
  1079c0:    cf ff 48 76 10 00 	r15 = 0x107648 <msd_mcu2usb : 107648 >			  ## msd_upgrade.c:110:26
  1079c6:    d0 ec 01 f0       	[r0+0x0] = r15			  ## msd_upgrade.c:110:26
  1079ca:    c2 ff 34 76 10 00 	r2 = 0x107634 <msd_usb2mcu : 107634 >			  ## msd_upgrade.c:111:26
  1079d0:    4f f0 55 00       	r15 = 0x55  # <TLB_BEGIN+0x54 : 54 >			  ## msd_upgrade.c:111:26
  1079d4:    82 61             		 [r0+0x4] = r2			  ## msd_upgrade.c:111:26
  1079d6:    d0 ec 09 80       	[r0+0x8] = r8			  ## msd_upgrade.c:112:20
  1079da:    a6 f1 20 54       	r6 <= insert(r5, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
  1079de:    81 63             		 [r0+0xc] = r1			  ## msd_upgrade.c:113:21
  1079e0:    d0 ec 01 c1       	[r0+0x10] = r12			  ## msd_upgrade.c:114:23
  1079e4:    a3 e1 20 e4       	r3 <= insert(r14, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  1079e8:    4e e0 42 00       	r14 = 0x42 <TLB_BEGIN+0x42 : 42 >			  ## msd_upgrade.c:43:5
  1079ec:    a3 e1 40 68       	r3 <= insert(r6, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  1079f0:    c6 ff 22 94 02 00 	r6 = 0x29422 <msd_status.2 : 29422 >
  1079f6:    70 e0 00 13       	r1 = rev8(r3)			  ## msd_upgrade.c:46:12
  1079fa:    c1 00             	call r1			  ## msd_upgrade.c:119:5
  1079fc:    78 3b             	r0 = 0xfb			  ## msd_upgrade.c:121:12
  1079fe:    de e9 20 00       	b[sp+32] = r0			  ## msd_upgrade.c:121:12
  107a02:    00 22             	r0 = [sp+8]			  ## msd_upgrade.c:122:12
  107a04:    41 28             	r1 = 0x8			  ## msd_upgrade.c:122:12
  107a06:    89 41             	b[r0+0x1] = r1			  ## msd_upgrade.c:122:12
  107a08:    a8 80             	r0 = sp + 32			  ## msd_upgrade.c:122:12
  107a0a:    41 30             	r1 = 0x10			  ## msd_upgrade.c:124:5
  107a0c:    bf ea 1c fe       	call -0x3c8 <msd_mcu2usb : 107648 >			  ## msd_upgrade.c:124:5
  107a10:    52 ee d0 c0       	b[r13+0x0] = r12			  ## msd.c:283:27
  107a14:    44 9f             	goto 0x13e <.GJTIE58_0_0_+0x22 : 107b54 >			  ## msd.c:283:27
  107a16:    40 20             	r0 = 0x0			  ## msd.c:215:5
  107a18:    bf ea 5e fe       	call -0x344 <unknow : 1076d8 >			  ## msd.c:215:5
  107a1c:    40 25             	r0 = 0x5			  ## msd.c:216:23
  107a1e:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:216:23
  107a22:    40 21             	r0 = 0x1			  ## msd.c:217:20
  107a24:    52 ee bc 00       	b[r11+0xc] = r0			  ## msd.c:217:20
  107a28:    34 99             	goto 0xf2 <usb_slave_mode+0x406 : 107b1c >			  ## msd.c:217:20
  107a2a:    40 21             	r0 = 0x1			  ## msd.c:221:20
  107a2c:    52 ee bc 00       	b[r11+0xc] = r0			  ## msd.c:221:20
  107a30:    40 25             	r0 = 0x5			  ## msd.c:222:23
  107a32:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:222:23
  107a36:    44 95             	goto 0x12a <.GJTIE58_0_0_+0x30 : 107b62 >			  ## msd.c:222:23
  107a38:    49 4b             	r1 = b[r4+0xb] (u)			  ## msd.c:237:11
  107a3a:    4a 4a             	r2 = b[r4+0xa] (u)			  ## msd.c:237:11
  107a3c:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd.c:237:11
  107a40:    4b 49             		 r3 = b[r4+0x9] (u)			  ## msd.c:237:11
  107a42:    48 48             	r0 = b[r4+0x8] (u)			  ## msd.c:237:11
  107a44:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd.c:237:11
  107a48:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd.c:237:11
  107a4c:    07 16             	r7 = r0			  ## msd.c:237:11
  107a4e:    30 e9 12 00       	if (r0 >= 0x12) {			  ## msd.c:237:11
  107a52:    47 32             		r7 = 0x12
                               	}			  ## msd.c:237:11
  107a54:    20 4c             	if (r0 == 0) goto 0x98 <usb_slave_mode+0x3D8 : 107aee >
  107a56:    45 20             	r5 = 0x0
  107a58:    00 20             	r0 = [sp]			  ## msd.c:245:9
  107a5a:    00 90             	rep 0x2 0x11 {			  ## msd.c:245:9
  107a5c:    85 07             		b[r0++=0x1] = r5
                               	}			  ## msd.c:245:9
  107a5e:    c0 ff 21 94 02 00 	r0 = 0x29421 <msd_status.0 : 29420 >			  ## msd.c:245:9
  107a64:    08 40             	r0 = b[r0+0x0] (u)			  ## msd.c:246:36
  107a66:    69 40             	r1 = b[r6+0x0] (u)			  ## msd.c:247:37
  107a68:    02 21             	r2 = [sp+4]			  ## msd.c:247:37
  107a6a:    a8 42             	b[r2+0x2] = r0			  ## msd.c:246:23
  107a6c:    71 d6             	r1 = r7  #			  ## msd.c:253:9
  107a6e:    a9 4c             		 b[r2+0xc] = r1			  ## msd.c:247:24
  107a70:    ad 4d             	b[r2+0xd] = r5			  ## msd.c:248:24
  107a72:    58 30             	r0 = 0x70			  ## msd.c:249:23
  107a74:    de e9 0e 00       	b[sp+14] = r0			  ## msd.c:249:23
  107a78:    40 2a             	r0 = 0xa			  ## msd.c:250:23
  107a7a:    a8 47             	b[r2+0x7] = r0			  ## msd.c:250:23
  107a7c:    88 8e             	r0 = sp + 14			  ## msd.c:250:23
  107a7e:    bf ea e3 fd       	call -0x43a <msd_mcu2usb : 107648 >			  ## msd.c:253:9
  107a82:    50 ee bb 00       	r0 = b[r11+0xb] (u)			  ## msd.c:256:25
  107a86:    50 ee ba 10       	r1 = b[r11+0xa] (u)			  ## msd.c:256:25
  107a8a:    50 ee b9 20       	r2 = b[r11+0x9] (u)			  ## msd.c:256:25
  107a8e:    50 ee b8 30       	r3 = b[r11+0x8] (u)			  ## msd.c:256:25
  107a92:    a1 e1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:256:25
  107a96:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:256:25
  107a9a:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:256:25
  107a9e:    b8 1f             	r0 = r3 - r7			  ## msd.c:256:25
  107aa0:    14 8d             	goto 0x5a <usb_slave_mode+0x3E6 : 107afc >			  ## msd.c:256:25
  107aa2:    41 24             	r1 = 0x4			  ## msd.c:264:5
  107aa4:    c0 ff 0c 75 10 00 	r0 = 0x10750c <scsi_mode_sense : 10750c >			  ## msd.c:264:5
  107aaa:    bf ea cd fd       	call -0x466 <msd_mcu2usb : 107648 >			  ## msd.c:264:5
  107aae:    52 ee bb c0       	b[r11+0xb] = r12
  107ab2:    52 ee ba c0       	b[r11+0xa] = r12
  107ab6:    52 ee b9 c0       	b[r11+0x9] = r12
  107aba:    52 ee b8 c0       	b[r11+0x8] = r12
  107abe:    52 ee bc c0       	b[r11+0xc] = r12
  107ac2:    14 8c             	goto 0x58 <usb_slave_mode+0x406 : 107b1c >
  107ac4:    52 ee bc c0       	b[r11+0xc] = r12			  ## msd.c:226:20
  107ac8:    50 ee 43 01       	r0 = b[r4+0x13] (u)			  ## msd.c:227:9
  107acc:    b0 e8 00 c0       	if (r0 != 0x0) {			  ## msd.c:227:9
  107ad0:    40 22             		r0 = 0x2			  ## msd.c:228:27
  107ad2:    52 ee d0 00       		b[r13+0x0] = r0			  ## msd.c:228:27
  107ad6:    40 21             		r0 = 0x1			  ## msd.c:229:24
  107ad8:    52 ee bc 00       		b[r11+0xc] = r0
                               	}			  ## msd.c:229:24
  107adc:    52 ee bb c0       	b[r11+0xb] = r12			  ## msd.c:231:25
  107ae0:    52 ee ba c0       	b[r11+0xa] = r12			  ## msd.c:231:25
  107ae4:    52 ee b9 c0       	b[r11+0x9] = r12			  ## msd.c:231:25
  107ae8:    52 ee b8 c0       	b[r11+0x8] = r12			  ## msd.c:231:25
  107aec:    04 97             	goto 0x2e <usb_slave_mode+0x406 : 107b1c >			  ## msd.c:231:25
  107aee:    bf ea e7 fd       	call -0x432 <stall_inep : 1076c0 >			  ## msd.c:239:9
  107af2:    40 22             	r0 = 0x2			  ## msd.c:240:27
  107af4:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:240:27
  107af8:    45 21             	r5 = 0x1			  ## msd.c:240:27
  107afa:    40 20             	r0 = 0x0			  ## msd.c:240:27
  107afc:    c7 ff 21 94 02 00 	r7 = 0x29421 <msd_status.0 : 29420 >
  107b02:    52 ee b8 00       	b[r11+0x8] = r0
  107b06:    81 b8             	r1 = r0 >> 0x18
  107b08:    52 ee bb 10       	b[r11+0xb] = r1
  107b0c:    81 b0             	r1 = r0 >> 0x10
  107b0e:    52 ee ba 10       	b[r11+0xa] = r1
  107b12:    80 a8             	r0 = r0 >> 0x8
  107b14:    52 ee b9 00       	b[r11+0x9] = r0
  107b18:    52 ee bc 50       	b[r11+0xc] = r5
  107b1c:    50 ee d0 20       	r2 = b[r13+0x0] (u)			  ## msd.c:315:24
  107b20:    02 fc 1d 0c       	if (r2 > 0x6) goto 0x3a <.GJTIE58_0_0_+0x2C : 107b5e >			  ## msd.c:315:24
  107b24:    48 24             	r0 = 0x24
  107b26:    41 25             	r1 = 0x5
  107b28:    02 01             	tbb [r2]


.GJTIS58_0_0_:
  107b2a:    15     < 21 : 0x15 >
  107b2b:    04     < 4 : 0x4 >
  107b2c:    12     < 18 : 0x12 >
  107b2d:    04     < 4 : 0x4 >
  107b2e:    04     < 4 : 0x4 >
  107b2f:    1c     < 28 : 0x1C >
  107b30:    17     < 23 : 0x17 >
  107b31:    00     < 0 : 0x0 >
  107b32:    04 80             	goto 0x0 <.GJTIE58_0_0_+0x2 : 107b34 >
  107b34:    52 ee b3 a0       	b[r11+0x3] = r10			  ## msd.c:170:23
  107b38:    52 ee b2 e0       	b[r11+0x2] = r14			  ## msd.c:170:23
  107b3c:    52 ee b1 a0       	b[r11+0x1] = r10			  ## msd.c:170:23
  107b40:    52 ee b0 f0       	b[r11+0x0] = r15			  ## msd.c:170:23
  107b44:    41 2d             	r1 = 0xd			  ## msd.c:171:5
  107b46:    b0 16             	r0 = r11			  ## msd.c:171:5
  107b48:    bf ea 7e fd       	call -0x504 <msd_mcu2usb : 107648 >			  ## msd.c:171:5
  107b4c:    27 9b             	goto -0x34a <usb_slave_mode+0xEE : 107804 >			  ## msd.c:171:5
  107b4e:    f9 40             	b[r7+0x0] = r1
  107b50:    e8 40             	b[r6+0x0] = r0
  107b52:    f7 90             	goto -0x20 <.GJTIE58_0_0_+0x2 : 107b34 >
  107b54:    80 14             	r1_r0 = 0
  107b56:    f7 9b             	goto -0xa <.GJTIE58_0_0_+0x1C : 107b4e >
  107b58:    48 20             	r0 = 0x20
  107b5a:    41 2b             	r1 = 0xb
  107b5c:    f7 98             	goto -0x10 <.GJTIE58_0_0_+0x1C : 107b4e >
  107b5e:    82 f8 e9 1f       	if (r2 != 0xf) goto -0x2e <.GJTIE58_0_0_+0x2 : 107b34 >
  107b62:    48 3a             	r0 = 0x3a
  107b64:    41 22             	r1 = 0x2
  107b66:    f7 93             	goto -0x1a <.GJTIE58_0_0_+0x1C : 107b4e >


usb_write_txcsr:
  107b68:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:187:0
  107b6a:    12 17             	r2 = r1.b0 (u)			  ## usb_phy.c:191:28
  107b6c:    c3 ff 91 92 07 00 	r3 = 0x79291 <RAM_LIMIT_H+0x4D290 : 79290 >			  ## usb_phy.c:191:13
  107b72:    d8 ec 0b 23       	[r0+r3<<2] = r2			  ## usb_phy.c:191:20
  107b76:    91 a8             	r1 = r1 >> 0x8			  ## usb_phy.c:192:28
  107b78:    3a 81             	r2 = r3 + 0x1			  ## usb_phy.c:192:13
  107b7a:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## usb_phy.c:192:20
  107b7e:    80 00             	rts			  ## usb_phy.c:194:1


usb_write_rxcsr:
  107b80:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:206:0
  107b82:    12 17             	r2 = r1.b0 (u)			  ## usb_phy.c:210:28
  107b84:    c3 ff 94 92 07 00 	r3 = 0x79294 <RAM_LIMIT_H+0x4D294 : 79294 >			  ## usb_phy.c:210:13
  107b8a:    d8 ec 0b 23       	[r0+r3<<2] = r2			  ## usb_phy.c:210:20
  107b8e:    91 a8             	r1 = r1 >> 0x8			  ## usb_phy.c:211:28
  107b90:    3a 81             	r2 = r3 + 0x1			  ## usb_phy.c:211:13
  107b92:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## usb_phy.c:211:20
  107b96:    80 00             	rts			  ## usb_phy.c:213:1


usb_g_ep_config:
  107b98:    75 04             	[--sp] = {rets, r5, r4}			  ## usb_phy.c:429:0
  107b9a:    04 16             	r4 = r0			  ## usb_phy.c:429:0
  107b9c:    c0 ff 3c 94 02 00 	r0 = 0x2943c <ep0_addr : 2943c >			  ## usb_phy.c:429:0
  107ba2:    c2 ff 1c 18 1e 00 	r2 = 0x1e181c <__stub_VecMinScalar_float_c_f_c+0xD1820 : 1e181c >			  ## usb_phy.c:429:0
  107ba8:    54 e8 0f 3a       	if ((r4 & 0x80) != 0) goto 0x1e <usb_g_ep_config+0x32 : 107bca >			  ## usb_phy.c:429:0
  107bac:    14 41             	if (r4 == 0) goto 0x42 <usb_g_ep_config+0x58 : 107bf0 >			  ## usb_phy.c:429:0
  107bae:    30 e1 ff 4f       	r0 = r4 + -0x1			  ## usb_phy.c:294:22
  107bb2:    02 a3             	r2 = r0 << 0x3			  ## usb_phy.c:294:11
  107bb4:    c3 ff 09 86 07 00 	r3 = 0x78609 <RAM_LIMIT_H+0x4C608 : 78608 >			  ## usb_phy.c:294:11
  107bba:    d8 ec 2b 13       	[r2+r3<<2] = r1			  ## usb_phy.c:295:12
  107bbe:    c2 ff 50 94 02 00 	r2 = 0x29450 <ep_raddr : 29450 >			  ## usb_phy.c:296:5
  107bc4:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## usb_phy.c:296:22
  107bc8:    04 97             	goto 0x2e <usb_g_ep_config+0x60 : 107bf8 >
  107bca:    65 e1 0f 40       	r5 = r4 & 0xF			  ## usb_phy.c:432:12
  107bce:    60 ff 0f 40 20 00 	if ((r4 & 0xF) == 0) goto 0x40 <usb_g_ep_config+0x7C : 107c14 >
  107bd4:    30 e1 ff 5f       	r0 = r5 + -0x1			  ## usb_phy.c:275:22
  107bd8:    02 a3             	r2 = r0 << 0x3			  ## usb_phy.c:275:11
  107bda:    c3 ff 08 86 07 00 	r3 = 0x78608 <RAM_LIMIT_H+0x4C608 : 78608 >			  ## usb_phy.c:275:11
  107be0:    d8 ec 2b 13       	[r2+r3<<2] = r1			  ## usb_phy.c:276:12
  107be4:    c2 ff 40 94 02 00 	r2 = 0x29440 <ep_taddr : 29440 >			  ## usb_phy.c:277:5
  107bea:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## usb_phy.c:277:22
  107bee:    04 95             	goto 0x2a <usb_g_ep_config+0x82 : 107c1a >			  ## usb_phy.c:277:22
  107bf0:    a1 60             	[r2+0x0] = r1			  ## usb_phy.c:289:25
  107bf2:    30 f1 ff 4f       	r0 = r4 + -0x1  #			  ## usb_phy.c:228:19
  107bf6:    81 60             		 [r0+0x0] = r1			  ## usb_phy.c:290:18
  107bf8:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:229:13
  107bfa:    c1 ff d3 92 07 00 	r1 = 0x792d3 <RAM_LIMIT_H+0x4D2D2 : 792d2 >			  ## usb_phy.c:229:13
  107c00:    42 e0 ff 03       	r2 = 0x3ff <ROM_RAM_SIZE+0xDE : 3fe >			  ## usb_phy.c:229:20
  107c04:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## usb_phy.c:229:20
  107c08:    61 30             	r1 = 0x90			  ## usb_phy.c:449:9
  107c0a:    40 16             	r0 = r4			  ## usb_phy.c:449:9
  107c0c:    51 99             	call -0x8e <usb_write_rxcsr : 107b80 >			  ## usb_phy.c:449:9
  107c0e:    40 16             	r0 = r4			  ## usb_phy.c:456:13
  107c10:    35 04             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:456:13
  107c12:    46 9a             	goto -0x6cc <usb_clr_intr_rxe : 107548 >			  ## usb_phy.c:456:13
  107c14:    a1 60             	[r2+0x0] = r1			  ## usb_phy.c:270:25
  107c16:    81 60             	[r0+0x0] = r1			  ## usb_phy.c:271:18
  107c18:    10 3f             	r0 = -0x1			  ## usb_phy.c:271:18
  107c1a:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:237:13
  107c1c:    c1 ff d0 92 07 00 	r1 = 0x792d0 <RAM_LIMIT_H+0x4D2D0 : 792d0 >			  ## usb_phy.c:237:13
  107c22:    42 e0 ff 03       	r2 = 0x3ff <ROM_RAM_SIZE+0xDE : 3fe >			  ## usb_phy.c:237:20
  107c26:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## usb_phy.c:237:20
  107c2a:    51 28             	r1 = 0x48			  ## usb_phy.c:436:9
  107c2c:    50 16             	r0 = r5			  ## usb_phy.c:436:9
  107c2e:    41 9c             	call -0xc8 <usb_write_txcsr : 107b68 >			  ## usb_phy.c:436:9
  107c30:    50 16             	r0 = r5			  ## usb_phy.c:443:13
  107c32:    35 04             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:443:13
  107c34:    46 9a             	goto -0x6cc <usb_clr_intr_txe : 10756a >			  ## usb_phy.c:443:13


msd_itf_hander:
  107c36:    76 04             	[--sp] = {rets, r6-r4}			  ## msd.c:96:0
  107c38:    c2 ff 24 94 02 00 	r2 = 0x29424 <hook_usb_scsi : 29424 >			  ## msd_upgrade.c:128:19
  107c3e:    40 ea 00 20       	[r2+0x0] = 0x0			  ## msd_upgrade.c:128:19
  107c42:    04 15             	r5_r4 = r1_r0			  ## msd_upgrade.c:128:19
  107c44:    c6 ff 80 90 02 00 	r6 = 0x29080 <ep1_dma_buffer : 29080 >			  ## msd.c:90:5
  107c4a:    60 21             	r0 = 0x81			  ## msd.c:89:5
  107c4c:    61 16             	r1 = r6			  ## msd.c:89:5
  107c4e:    51 84             	call -0xb8 <usb_g_ep_config : 107b98 >			  ## msd.c:89:5
  107c50:    01 e1 40 60       	r1 = r6 + 0x40			  ## msd.c:90:5
  107c54:    40 21             	r0 = 0x1			  ## msd.c:90:5
  107c56:    51 80             	call -0xc0 <usb_g_ep_config : 107b98 >			  ## msd.c:90:5
  107c58:    58 40             	r0 = b[r5+0x0] (u)			  ## msd.c:98:15
  107c5a:    41 23             	r1 = 0x3			  ## msd.c:98:15
  107c5c:    10 f8 08 42       	if (r0 == 0xa1) goto 0x10 <msd_itf_hander+0x3A : 107c70 >			  ## msd.c:98:37
  107c60:    80 f8 10 42       	if (r0 != 0x21) goto 0x20 <msd_itf_hander+0x4E : 107c84 >
  107c64:    58 41             	r0 = b[r5+0x1] (u)			  ## msd.c:99:15
  107c66:    41 20             	r1 = 0x0			  ## msd.c:98:9
  107c68:    b0 e8 ff 00       	if (r0 != 0xff) {			  ## msd.c:98:9
  107c6c:    41 23             		r1 = 0x3
                               	}			  ## msd.c:98:9
  107c6e:    04 8a             	goto 0x14 <msd_itf_hander+0x4E : 107c84 >			  ## msd.c:98:9
  107c70:    58 41             	r0 = b[r5+0x1] (u)			  ## msd.c:104:22
  107c72:    90 f8 07 fc       	if (r0 != 0xfe) goto 0xe <msd_itf_hander+0x4E : 107c84 >			  ## msd.c:104:22
  107c76:    40 62             	r0 = [r4+0x8] 			  ## msd.c:107:21
  107c78:    41 20             	r1 = 0x0			  ## msd.c:107:37
  107c7a:    89 40             	b[r0+0x0] = r1			  ## msd.c:107:37
  107c7c:    40 62             	r0 = [r4+0x8] 			  ## msd.c:108:45
  107c7e:    c0 63             	[r4+0xc] = r0			  ## msd.c:108:31
  107c80:    41 21             	r1 = 0x1			  ## msd.c:108:31
  107c82:    c9 61             	h[r4+0x2] = r1			  ## msd.c:109:33
  107c84:    40 20             	r0 = 0x0			  ## msd.c:114:5
  107c86:    c9 41             	b[r4+0x1] = r1			  ## msd.c:114:5
  107c88:    56 04             	{pc, r6-r4} = [sp++]			  ## msd.c:114:5


ep0_stage_tx:
  107c8a:    76 04             	[--sp] = {rets, r6-r4}			  ## usb_setup.c:15:0
  107c8c:    c5 ff 44 4a 1e 00 	r5 = 0x1e4a44 <__stub_VecMinScalar_float_c_f_c+0xD4A48 : 1e4a44 >			  ## usb_setup.c:15:0
  107c92:    50 60             	r0 = [r5+0x0] 			  ## usb_phy.c:62:28
  107c94:    50 e8 21 0a       	if ((r0 & 0x2) != 0) goto 0x42 <ep0_stage_tx+0x50 : 107cda >
  107c98:    c6 ff 7c 94 02 00 	r6 = 0x2947c <usb_device : 2947c >
  107c9e:    6c 61             	r4 = h[r6+0x2] (u)			  ## usb_setup.c:20:16
  107ca0:    04 58             	if (r4 == 0) goto 0x30 <ep0_stage_tx+0x48 : 107cd2 >			  ## usb_setup.c:20:16
  107ca2:    34 e9 40 00       	if (r4 >= 0x40) {
  107ca6:    54 20             		r4 = 0x40
                               	}			  ## usb_setup.c:24:19
  107ca8:    c0 ff 3c 94 02 00 	r0 = 0x2943c <ep0_addr : 2943c >			  ## usb_phy.c:96:20
  107cae:    42 d6             	r2 = r4  #			  ## usb_phy.c:96:5
  107cb0:    00 60             		 r0 = [r0+0x0] 			  ## usb_phy.c:96:20
  107cb2:    61 63             	r1 = [r6+0xc] 			  ## usb_setup.c:25:34
  107cb4:    bf ea 44 e6       	call -0x3378 <memmove : 104940 >			  ## usb_phy.c:96:5
  107cb8:    c0 ff 08 18 1e 00 	r0 = 0x1e1808 <__stub_VecMinScalar_float_c_f_c+0xD180C : 1e1808 >			  ## usb_phy.c:97:21
  107cbe:    84 60             	[r0+0x0] = r4			  ## usb_phy.c:97:21
  107cc0:    68 e8 0c 64       	[r6+0xc] += r4			  ## usb_setup.c:26:30
  107cc4:    68 61             	r0 = h[r6+0x2] (u)			  ## usb_setup.c:27:32
  107cc6:    00 1f             	r0 = r0 - r4			  ## usb_setup.c:27:32
  107cc8:    e8 61             	h[r6+0x2] = r0			  ## usb_setup.c:27:32
  107cca:    69 46             	r1 = b[r6+0x6] (u)			  ## usb_setup.c:28:50
  107ccc:    81 47             	if (r1 != 0) goto 0xe <ep0_stage_tx+0x52 : 107cdc >			  ## usb_setup.c:28:50
  107cce:    80 17             	r0 = r0.l (u)			  ## usb_setup.c:28:13
  107cd0:    80 45             	if (r0 != 0) goto 0xa <ep0_stage_tx+0x52 : 107cdc >			  ## usb_setup.c:28:13
  107cd2:    40 ea 0a 50       	[r5+0x0] = 0xA
  107cd6:    40 20             	r0 = 0x0
  107cd8:    e8 41             	b[r6+0x1] = r0
  107cda:    56 04             	{pc, r6-r4} = [sp++]			  ## usb_setup.c:35:1
  107cdc:    40 ea 02 50       	[r5+0x0] = 0x2			  ## usb_phy.c:70:22
  107ce0:    56 04             	{pc, r6-r4} = [sp++]			  ## usb_setup.c:35:1


usb_device_isr:
  107ce2:    e9 04             	[--sp] = {psr, rets, reti}			  ## usb_onchip.c:30:0
  107ce4:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## usb_onchip.c:30:0
  107ce8:    e2 9e             	sp += -0x8			  ## usb_onchip.c:30:0
  107cea:    c0 ff 00 4a 1e 00 	r0 = 0x1e4a00 <__stub_VecMinScalar_float_c_f_c+0xD4A04 : 1e4a00 >			  ## usb_onchip.c:30:0
  107cf0:    01 66             	r1 = [r0+0x18] 			  ## usb_phy.c:115:29
  107cf2:    01 62             	r1 = [r0+0x8] 			  ## usb_phy.c:116:29
  107cf4:    02 63             	r2 = [r0+0xc] 			  ## usb_phy.c:116:53
  107cf6:    03 64             	r3 = [r0+0x10] 			  ## usb_phy.c:117:29
  107cf8:    04 65             	r4 = [r0+0x14] 			  ## usb_phy.c:117:53
  107cfa:    05 6b             	r5 = [r0+0x2c] 			  ## usb_phy.c:125:31
  107cfc:    05 67             	r5 = [r0+0x1c] 			  ## usb_phy.c:126:30
  107cfe:    22 a8             	r2 = r2 << 0x8			  ## usb_phy.c:116:62
  107d00:    21 d9             	r1 |= r2  #			  ## usb_phy.c:116:38
  107d02:    06 68             		 r6 = [r0+0x20] 			  ## usb_phy.c:126:55
  107d04:    62 a8             	r2 = r6 << 0x8			  ## usb_phy.c:126:65
  107d06:    52 19             	r2 |= r5			  ## usb_phy.c:126:40
  107d08:    07 69             	r7 = [r0+0x24] 			  ## usb_phy.c:127:30
  107d0a:    90 f1 12 52       	r5 = r1 & r2  #			  ## usb_onchip.c:45:13
  107d0e:    06 6a             		 r6 = [r0+0x28] 			  ## usb_phy.c:127:55
  107d10:    41 a8             	r1 = r4 << 0x8			  ## usb_phy.c:117:62
  107d12:    90 e1 10 93       	r9 = r1 | r3			  ## usb_phy.c:117:38
  107d16:    61 a8             	r1 = r6 << 0x8			  ## usb_phy.c:127:65
  107d18:    17 19             	r7 |= r1			  ## usb_phy.c:127:40
  107d1a:    60 ff 01 50 4d 01 	if ((r5 & 0x1) == 0) goto 0x29a <.GJTIE92_0_0_+0x1C0 : 107fba >
  107d20:    cf ff 7c 94 02 00 	r15 = 0x2947c <usb_device : 2947c >
  107d26:    50 ee f0 10       	r1 = b[r15+0x0] (u)			  ## usb_setup.c:220:20
  107d2a:    b1 e8 00 80       	if (r1 != 0x0) {			  ## usb_setup.c:220:20
  107d2e:    81 60             		[r0+0x0] = r1			  ## usb_phy.c:183:23
  107d30:    40 20             		r0 = 0x0			  ## usb_setup.c:222:26
  107d32:    52 ee f0 00       		b[r15+0x0] = r0
                               	}			  ## usb_setup.c:222:26
  107d36:    c8 ff 44 4a 1e 00 	r8 = 0x1e4a44 <__stub_VecMinScalar_float_c_f_c+0xD4A48 : 1e4a44 >			  ## usb_setup.c:222:26
  107d3c:    d0 ec 80 00       	r0 = [r8+0x0]			  ## usb_phy.c:62:28
  107d40:    50 e8 0b 12       	if ((r0 & 0x4) != 0) goto 0x16 <usb_device_isr+0x78 : 107d5a >
  107d44:    50 e8 0f 22       	if ((r0 & 0x10) != 0) goto 0x1e <usb_device_isr+0x84 : 107d66 >
  107d48:    50 ee f1 10       	r1 = b[r15+0x1] (u)			  ## usb_setup.c:236:24
  107d4c:    01 f8 60 04       	if (r1 == 0x2) goto 0xc0 <.GJTIE92_0_0_+0x16 : 107e10 >			  ## usb_setup.c:236:5
  107d50:    00 ff 01 10 30 01 	if (r1 == 0x1) goto 0x260 <.GJTIE92_0_0_+0x1BC : 107fb6 >
  107d56:    01 4c             	if (r1 == 0) goto 0x18 <usb_device_isr+0x8E : 107d70 >
  107d58:    94 90             	goto 0x260 <.GJTIE92_0_0_+0x1C0 : 107fba >
  107d5a:    40 20             	r0 = 0x0
  107d5c:    d0 ec 81 00       	[r8+0x0] = r0			  ## usb_phy.c:70:22
  107d60:    52 ee f1 00       	b[r15+0x1] = r0
  107d64:    94 8a             	goto 0x254 <.GJTIE92_0_0_+0x1C0 : 107fba >
  107d66:    40 ea 80 80       	[r8+0x0] = 0x80			  ## usb_phy.c:70:22
  107d6a:    41 20             	r1 = 0x0			  ## usb_setup.c:233:27
  107d6c:    52 ee f1 10       	b[r15+0x1] = r1			  ## usb_setup.c:233:27
  107d70:    60 ff 01 00 22 01 	if ((r0 & 0x1) == 0) goto 0x244 <.GJTIE92_0_0_+0x1C0 : 107fba >
  107d76:    c0 ff 3c 94 02 00 	r0 = 0x2943c <ep0_addr : 2943c >			  ## usb_phy.c:108:25
  107d7c:    02 60             	r2 = [r0+0x0] 			  ## usb_phy.c:108:25
  107d7e:    88 80             	r0 = sp + 0
  107d80:    21 16             	r1 = r2			  ## usb_phy.c:108:5
  107d82:    10 87             	rep 0x4 0x8 {			  ## usb_phy.c:108:5
  107d84:    13 07             		r3 = b[r1++=0x1] (u)			  ## usb_phy.c:108:5
  107d86:    83 07             		b[r0++=0x1] = r3
                               	}			  ## usb_phy.c:108:5
  107d88:    4e e0 01 00       	r14 = 0x1 <TLB_BEGIN : 0 >			  ## usb_phy.c:108:5
  107d8c:    52 ee f1 e0       	b[r15+0x1] = r14			  ## usb_setup.c:187:23
  107d90:    c0 ff 40 91 02 00 	r0 = 0x29140 <ep2_dma_buffer : 29140 >			  ## usb_setup.c:187:23
  107d96:    d0 ec f9 00       	[r15+0x8] = r0			  ## usb_setup.c:188:29
  107d9a:    2b 47             	r3 = b[r2+0x7] (u)			  ## usb_phy.c:108:5
  107d9c:    2e 46             	r6 = b[r2+0x6] (u)			  ## usb_phy.c:108:5
  107d9e:    a6 f1 20 34       	r6 <= insert(r3, p:0x8, l:0x8)  #			  ## usb_phy.c:108:5
  107da2:    2c 45             		 r4 = b[r2+0x5] (u)			  ## usb_phy.c:108:5
  107da4:    29 44             	r1 = b[r2+0x4] (u)			  ## usb_phy.c:108:5
  107da6:    a1 f1 20 44       	r1 <= insert(r4, p:0x8, l:0x8)  #			  ## usb_phy.c:108:5
  107daa:    2b 43             		 r3 = b[r2+0x3] (u)			  ## usb_phy.c:108:5
  107dac:    a1 f1 40 68       	r1 <= insert(r6, p:0x10, l:0x10)  #			  ## usb_phy.c:108:5
  107db0:    2c 42             		 r4 = b[r2+0x2] (u)			  ## usb_phy.c:108:5
  107db2:    a4 f1 20 34       	r4 <= insert(r3, p:0x8, l:0x8)  #			  ## usb_phy.c:108:5
  107db6:    2e 41             		 r6 = b[r2+0x1] (u)			  ## usb_phy.c:108:5
  107db8:    28 40             	r0 = b[r2+0x0] (u)			  ## usb_phy.c:108:5
  107dba:    a0 e1 20 64       	r0 <= insert(r6, p:0x8, l:0x8)			  ## usb_phy.c:108:5
  107dbe:    a0 e1 40 48       	r0 <= insert(r4, p:0x10, l:0x10)			  ## usb_phy.c:108:5
  107dc2:    0a 15             	r11_r10 = r1_r0			  ## usb_setup.c:190:5
  107dc4:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## usb_setup.c:190:5
  107dc8:    0c 15             	r13_r12 = r1_r0			  ## usb_setup.c:190:5
  107dca:    62 e1 1f 00       	r2 = r0 & 0x1F			  ## usb_setup.c:190:5
  107dce:    d0 e1 08 c8       	r13_r12 >>= 0x8			  ## usb_setup.c:190:5
  107dd2:    02 f8 20 04       	if (r2 == 0x2) goto 0x40 <.GJTIE92_0_0_+0x1C : 107e16 >			  ## usb_setup.c:190:5
  107dd6:    c3 ff 60 94 02 00 	r3 = 0x29460 <interface_hander : 29460 >
  107ddc:    02 f8 35 02       	if (r2 == 0x1) goto 0x6a <.GJTIE92_0_0_+0x50 : 107e4a >
  107de0:    82 f8 e7 00       	if (r2 != 0x0) goto 0x1ce <.GJTIE92_0_0_+0x1B8 : 107fb2 >
  107de4:    b2 e1 20 c0       	r2 = uextra(r12, p:0x0, l:0x8)
  107de8:    02 fc 39 16       	if (r2 > 0xb) goto 0x72 <.GJTIE92_0_0_+0x64 : 107e5e >
  107dec:    02 01             	tbb [r2]


.GJTIS92_0_0_:
  107dee:    06     < 6 : 0x6 >
  107def:    89     < 137 : 0x89 >
  107df0:    38     < 56 : 0x38 >
  107df1:    38     < 56 : 0x38 >
  107df2:    38     < 56 : 0x38 >
  107df3:    5d     < 93 : 0x5D >
  107df4:    60     < 96 : 0x60 >
  107df5:    38     < 56 : 0x38 >
  107df6:    79     < 121 : 0x79 >
  107df7:    87     < 135 : 0x87 >
  107df8:    38     < 56 : 0x38 >
  107df9:    89     < 137 : 0x89 >
  107dfa:    40 21             	r0 = 0x1
  107dfc:    c1 ff 40 91 02 00 	r1 = 0x29140 <ep2_dma_buffer : 29140 >
  107e02:    98 40             	b[r1+0x0] = r0			  ## usb_setup.c:105:36
  107e04:    40 20             	r0 = 0x0			  ## usb_setup.c:106:36
  107e06:    98 41             	b[r1+0x1] = r0			  ## usb_setup.c:106:36
  107e08:    40 22             	r0 = 0x2			  ## usb_setup.c:107:32
  107e0a:    50 ed f3 00       	h[r15+0x2] = r0			  ## usb_setup.c:107:32
  107e0e:    64 91             	goto 0x1a2 <.GJTIE92_0_0_+0x1B8 : 107fb2 >			  ## usb_setup.c:107:32
  107e10:    40 ea 48 80       	[r8+0x0] = 0x48			  ## usb_phy.c:70:22
  107e14:    14 89             	goto 0x52 <.GJTIE92_0_0_+0x6E : 107e68 >			  ## usb_phy.c:70:22
  107e16:    60 ff ff c0 28 00 	if ((r12 & 0xFF) == 0) goto 0x50 <.GJTIE92_0_0_+0x72 : 107e6c >			  ## usb_setup.c:150:5
  107e1c:    b2 e1 20 c0       	r2 = uextra(r12, p:0x0, l:0x8)
  107e20:    02 f8 32 06       	if (r2 == 0x3) goto 0x64 <.GJTIE92_0_0_+0x8E : 107e88 >
  107e24:    82 f8 2e 02       	if (r2 != 0x1) goto 0x5c <.GJTIE92_0_0_+0x8A : 107e84 >
  107e28:    4e e0 03 00       	r14 = 0x3 <TLB_BEGIN+0x2 : 2 >
  107e2c:    61 ff ff a0 2b 00 	if ((r10 & 0xFF) != 0) goto 0x56 <.GJTIE92_0_0_+0x8E : 107e88 >
  107e32:    02 15             	r3_r2 = r1_r0			  ## usb_phy.c:108:5
  107e34:    d0 e1 00 2a       	r3_r2 >>= 0x20			  ## usb_phy.c:108:5
  107e38:    60 e1 03 10       	r0 = r1 & 0x3			  ## usb_setup.c:149:34
  107e3c:    52 e8 69 3a       	if ((r2 & 0x80) != 0) goto 0xd2 <.GJTIE92_0_0_+0x118 : 107f12 >
  107e40:    61 20             	r1 = 0x80			  ## usb_setup.c:156:17
  107e42:    bf ea 9d fe       	call -0x2c6 <usb_write_rxcsr : 107b80 >			  ## usb_setup.c:156:17
  107e46:    c6 14             	r14 = 0
  107e48:    04 9f             	goto 0x3e <.GJTIE92_0_0_+0x8E : 107e88 >
  107e4a:    10 17             	r0 = r1.b0 (u)			  ## usb_setup.c:127:19
  107e4c:    00 fc 07 0c       	if (r0 > 0x6) goto 0xe <.GJTIE92_0_0_+0x64 : 107e5e >			  ## usb_setup.c:127:19
  107e50:    d8 ec 3a 20       	r2 = [r3+r0<<2]			  ## usb_setup.c:130:9
  107e54:    02 44             	if (r2 == 0) goto 0x8 <.GJTIE92_0_0_+0x64 : 107e5e >			  ## usb_setup.c:130:9
  107e56:    89 80             	r1 = sp + 0
  107e58:    f0 16             	r0 = r15			  ## usb_setup.c:131:10
  107e5a:    c2 00             	call r2			  ## usb_setup.c:131:10
  107e5c:    20 57             	if (r0 == 0) goto 0xae <.GJTIE92_0_0_+0x112 : 107f0c >			  ## usb_setup.c:131:10
  107e5e:    40 23             	r0 = 0x3
  107e60:    52 ee f1 00       	b[r15+0x1] = r0
  107e64:    40 ea 60 80       	[r8+0x0] = 0x60			  ## usb_phy.c:70:22
  107e68:    40 20             	r0 = 0x0
  107e6a:    b7 9a             	goto -0x10c <usb_device_isr+0x7E : 107d60 >
  107e6c:    40 20             	r0 = 0x0			  ## usb_setup.c:164:36
  107e6e:    c1 ff 40 91 02 00 	r1 = 0x29140 <ep2_dma_buffer : 29140 >			  ## usb_setup.c:164:36
  107e74:    98 40             	b[r1+0x0] = r0			  ## usb_setup.c:164:36
  107e76:    98 41             	b[r1+0x1] = r0			  ## usb_setup.c:165:36
  107e78:    d0 ec fd 10       	[r15+0xc] = r1			  ## usb_setup.c:166:30
  107e7c:    40 22             	r0 = 0x2			  ## usb_setup.c:167:32
  107e7e:    50 ed f3 00       	h[r15+0x2] = r0			  ## usb_setup.c:167:32
  107e82:    04 82             	goto 0x4 <.GJTIE92_0_0_+0x8E : 107e88 >			  ## usb_setup.c:167:32
  107e84:    4e e0 03 00       	r14 = 0x3 <TLB_BEGIN+0x2 : 2 >
  107e88:    52 ee f1 e0       	b[r15+0x1] = r14
  107e8c:    30 e1 ff ef       	r0 = r14 + -0x1			  ## usb_setup.c:203:9
  107e90:    80 f9 05 04       	if (r0 < 0x2) goto 0xa <.GJTIE92_0_0_+0xA4 : 107e9e >			  ## usb_setup.c:203:9
  107e94:    0e f8 37 00       	if (r14 == 0x0) goto 0x6e <.GJTIE92_0_0_+0x10C : 107f06 >
  107e98:    0e f8 e4 07       	if (r14 == 0x3) goto -0x38 <.GJTIE92_0_0_+0x6A : 107e64 >
  107e9c:    44 8e             	goto 0x11c <.GJTIE92_0_0_+0x1C0 : 107fba >
  107e9e:    40 ea 40 80       	[r8+0x0] = 0x40			  ## usb_phy.c:70:22
  107ea2:    0e f8 88 02       	if (r14 == 0x1) goto 0x110 <.GJTIE92_0_0_+0x1BC : 107fb6 >			  ## usb_phy.c:70:22
  107ea6:    44 89             	goto 0x112 <.GJTIE92_0_0_+0x1C0 : 107fba >			  ## usb_phy.c:70:22
  107ea8:    52 ee f0 a0       	b[r15+0x0] = r10			  ## usb_setup.c:47:26
  107eac:    14 89             	goto 0x52 <.GJTIE92_0_0_+0x106 : 107f00 >			  ## usb_setup.c:47:26
  107eae:    0c 15             	r13_r12 = r1_r0			  ## usb_setup.c:64:17
  107eb0:    d0 e1 08 c9       	r13_r12 >>= 0x18			  ## usb_setup.c:64:17
  107eb4:    b2 e1 20 c0       	r2 = uextra(r12, p:0x0, l:0x8)			  ## usb_setup.c:64:9
  107eb8:    02 f8 30 06       	if (r2 == 0x3) goto 0x60 <.GJTIE92_0_0_+0x122 : 107f1c >			  ## usb_setup.c:64:9
  107ebc:    02 f8 3d 04       	if (r2 == 0x2) goto 0x7a <.GJTIE92_0_0_+0x140 : 107f3a >
  107ec0:    82 f8 cd 03       	if (r2 != 0x1) goto -0x66 <.GJTIE92_0_0_+0x64 : 107e5e >
  107ec4:    c2 ff 10 75 10 00 	r2 = 0x107510 <sDeviceDescriptor : 107510 >			  ## descriptor.c:71:5
  107eca:    c3 ff 40 91 02 00 	r3 = 0x29140 <ep2_dma_buffer : 29140 >			  ## descriptor.c:71:5
  107ed0:    36 16             	r6 = r3			  ## descriptor.c:71:5
  107ed2:    10 91             	rep 0x4 0x12 {			  ## descriptor.c:71:5
  107ed4:    24 07             		r4 = b[r2++=0x1] (u)			  ## descriptor.c:71:5
  107ed6:    b4 07             		b[r3++=0x1] = r4
                               	}			  ## descriptor.c:71:5
  107ed8:    d0 ec fd 60       	[r15+0xc] = r6			  ## usb_setup.c:67:34
  107edc:    43 32             	r3 = 0x12
  107ede:    24 9b             	goto 0xb6 <.GJTIE92_0_0_+0x19C : 107f96 >
  107ee0:    50 ee f5 00       	r0 = b[r15+0x5] (u)			  ## usb_setup.c:57:49
  107ee4:    c1 ff 40 91 02 00 	r1 = 0x29140 <ep2_dma_buffer : 29140 >			  ## usb_setup.c:57:49
  107eea:    98 40             	b[r1+0x0] = r0			  ## usb_setup.c:57:36
  107eec:    d0 ec fd 10       	[r15+0xc] = r1			  ## usb_setup.c:58:30
  107ef0:    40 21             	r0 = 0x1			  ## usb_setup.c:58:30
  107ef2:    50 ed f3 00       	h[r15+0x2] = r0			  ## usb_setup.c:59:32
  107ef6:    52 ee f1 00       	b[r15+0x1] = r0			  ## usb_setup.c:60:27
  107efa:    24 9b             	goto 0xb6 <.GJTIE92_0_0_+0x1B8 : 107fb2 >			  ## usb_setup.c:60:27
  107efc:    52 ee f5 a0       	b[r15+0x5] = r10			  ## usb_setup.c:100:31
  107f00:    40 20             	r0 = 0x0
  107f02:    52 ee f1 00       	b[r15+0x1] = r0
  107f06:    40 ea 48 80       	[r8+0x0] = 0x48			  ## usb_phy.c:70:22
  107f0a:    24 97             	goto 0xae <.GJTIE92_0_0_+0x1C0 : 107fba >			  ## usb_phy.c:70:22
  107f0c:    50 ee f1 e0       	r14 = b[r15+0x1] (u)
  107f10:    d7 9d             	goto -0x86 <.GJTIE92_0_0_+0x92 : 107e8c >
  107f12:    51 20             	r1 = 0x40			  ## usb_setup.c:154:17
  107f14:    bf ea 28 fe       	call -0x3b0 <usb_write_txcsr : 107b68 >			  ## usb_setup.c:154:17
  107f18:    c6 14             	r14 = 0
  107f1a:    d7 96             	goto -0x94 <.GJTIE92_0_0_+0x8E : 107e88 >
  107f1c:    60 ff ff a0 30 00 	if ((r10 & 0xFF) == 0) goto 0x60 <.GJTIE92_0_0_+0x188 : 107f82 >
  107f22:    c2 ff 22 75 10 00 	r2 = 0x107522 <MANUFACTURE_STR : 107522 >			  ## descriptor.c:79:5
  107f28:    c6 ff 40 91 02 00 	r6 = 0x29140 <ep2_dma_buffer : 29140 >			  ## descriptor.c:79:5
  107f2e:    63 16             	r3 = r6			  ## descriptor.c:79:5
  107f30:    10 9b             	rep 0x4 0x1c {			  ## descriptor.c:79:5
  107f32:    24 07             		r4 = b[r2++=0x1] (u)			  ## descriptor.c:79:5
  107f34:    b4 07             		b[r3++=0x1] = r4
                               	}			  ## descriptor.c:79:5
  107f36:    43 3c             	r3 = 0x1c			  ## descriptor.c:79:5
  107f38:    14 8c             	goto 0x58 <.GJTIE92_0_0_+0x198 : 107f92 >			  ## descriptor.c:79:5
  107f3a:    c2 ff 3e 75 10 00 	r2 = 0x10753e <sConfigDescriptor : 10753e >			  ## descriptor.c:85:5
  107f40:    c4 ff 40 91 02 00 	r4 = 0x29140 <ep2_dma_buffer : 29140 >			  ## descriptor.c:85:5
  107f46:    4a 16             	r10 = r4			  ## descriptor.c:85:5
  107f48:    10 88             	rep 0x4 0x9 {			  ## descriptor.c:85:5
  107f4a:    26 07             		r6 = b[r2++=0x1] (u)			  ## descriptor.c:85:5
  107f4c:    c6 07             		b[r4++=0x1] = r6
                               	}			  ## descriptor.c:85:5
  107f4e:    02 e1 09 a0       	r2 = r10 + 0x9			  ## descriptor.c:85:5
  107f52:    c4 ff d1 74 10 00 	r4 = 0x1074d1 <$data.__2+0x110 : 1074d0 >			  ## msd.c:122:5
  107f58:    10 96             	rep 0x4 0x17 {			  ## msd.c:122:5
  107f5a:    46 07             		r6 = b[r4++=0x1] (u)			  ## msd.c:122:5
  107f5c:    a6 07             		b[r2++=0x1] = r6
                               	}			  ## msd.c:122:5
  107f5e:    42 20             	r2 = 0x0			  ## msd.c:123:12
  107f60:    52 ee ab 20       	b[r10+0xb] = r2			  ## msd.c:123:12
  107f64:    c4 ff 36 7c 10 00 	r4 = 0x107c36 <msd_itf_hander : 107c36 >			  ## usb_setup.c:143:31
  107f6a:    b4 60             	[r3+0x0] = r4			  ## usb_setup.c:143:31
  107f6c:    4b 20             	r3 = 0x20			  ## usb_setup.c:143:31
  107f6e:    52 ee a2 30       	b[r10+0x2] = r3			  ## descriptor.c:99:10
  107f72:    52 ee a3 20       	b[r10+0x3] = r2			  ## descriptor.c:100:10
  107f76:    42 21             	r2 = 0x1			  ## descriptor.c:101:10
  107f78:    52 ee a4 20       	b[r10+0x4] = r2			  ## descriptor.c:101:10
  107f7c:    d0 ec fd a0       	[r15+0xc] = r10			  ## usb_setup.c:72:34
  107f80:    04 8a             	goto 0x14 <.GJTIE92_0_0_+0x19C : 107f96 >			  ## usb_setup.c:72:34
  107f82:    c2 ff 04 03 09 04 	r2 = 0x4090304 <__stub_VecMinScalar_float_c_f_c+0x3F80308 : 4090304 >			  ## descriptor.c:75:5
  107f88:    c6 ff 40 91 02 00 	r6 = 0x29140 <ep2_dma_buffer : 29140 >			  ## descriptor.c:75:5
  107f8e:    e2 60             	[r6+0x0] = r2			  ## descriptor.c:75:5
  107f90:    43 24             	r3 = 0x4			  ## descriptor.c:75:5
  107f92:    d0 ec fd 60       	[r15+0xc] = r6			  ## usb_setup.c:81:34
  107f96:    d0 e1 00 0b       	r1_r0 >>= 0x30			  ## usb_setup.c:190:5
  107f9a:    32 16             	r2 = r3			  ## usb_setup.c:90:13
  107f9c:    90 ec 00 03       	if (r0 <= r3) {			  ## usb_setup.c:90:13
  107fa0:    02 16             		r2 = r0
                               	}			  ## usb_setup.c:90:13
  107fa2:    50 ed f3 20       	h[r15+0x2] = r2			  ## usb_setup.c:89:32
  107fa6:    42 21             	r2 = 0x1			  ## usb_setup.c:90:36
  107fa8:    90 ec 00 03       	if (r0 <= r3) {			  ## usb_setup.c:90:36
  107fac:    42 20             		r2 = 0x0
                               	}			  ## usb_setup.c:90:36
  107fae:    52 ee f6 20       	b[r15+0x6] = r2			  ## usb_setup.c:90:36
  107fb2:    40 ea 40 80       	[r8+0x0] = 0x40			  ## usb_phy.c:70:22
  107fb6:    bf ea 68 fe       	call -0x330 <ep0_stage_tx : 107c8a >
  107fba:    90 e1 92 67       	r6 = r9 & r7			  ## usb_onchip.c:46:13
  107fbe:    44 21             	r4 = 0x1
  107fc0:    c7 ff 90 94 02 00 	r7 = 0x29490 <usb_interrupt_tx : 29490 >
  107fc6:    04 8a             	goto 0x14 <.GJTIE92_0_0_+0x1E2 : 107fdc >
  107fc8:    94 e1 52 04       	r0 = r5 & (1 << r4)			  ## usb_onchip.c:63:13
  107fcc:    00 46             	if (r0 == 0) goto 0xc <.GJTIE92_0_0_+0x1E0 : 107fda >			  ## usb_onchip.c:63:13
  107fce:    d8 ec 7a 14       	r1 = [r7+r4<<2]			  ## usb_onchip.c:64:17
  107fd2:    b1 e8 00 40       	if (r1 != 0x0) {			  ## usb_onchip.c:64:17
  107fd6:    40 16             		r0 = r4			  ## usb_onchip.c:65:17
  107fd8:    c1 00             		call r1
                               	}			  ## usb_onchip.c:65:17
  107fda:    c4 21             	r4 += 0x1			  ## usb_onchip.c:62:37
  107fdc:    84 f8 f4 0f       	if (r4 != 0x7) goto -0x18 <.GJTIE92_0_0_+0x1CE : 107fc8 >			  ## usb_onchip.c:62:5
  107fe0:    44 21             	r4 = 0x1
  107fe2:    c5 ff ac 94 02 00 	r5 = 0x294ac <usb_interrupt_rx : 294ac >
  107fe8:    04 8a             	goto 0x14 <.GJTIE92_0_0_+0x204 : 107ffe >
  107fea:    94 e1 62 04       	r0 = r6 & (1 << r4)			  ## usb_onchip.c:70:13
  107fee:    00 46             	if (r0 == 0) goto 0xc <.GJTIE92_0_0_+0x202 : 107ffc >			  ## usb_onchip.c:70:13
  107ff0:    d8 ec 5a 14       	r1 = [r5+r4<<2]			  ## usb_onchip.c:71:17
  107ff4:    b1 e8 00 40       	if (r1 != 0x0) {			  ## usb_onchip.c:71:17
  107ff8:    40 16             		r0 = r4			  ## usb_onchip.c:72:17
  107ffa:    c1 00             		call r1
                               	}			  ## usb_onchip.c:72:17
  107ffc:    c4 21             	r4 += 0x1			  ## usb_onchip.c:69:37
  107ffe:    84 f8 f4 0f       	if (r4 != 0x7) goto -0x18 <.GJTIE92_0_0_+0x1F0 : 107fea >
  108002:    02 82             	sp += 0x8
  108004:    d4 e8 ff ff       	{r15-r0} = [sp++]			  ## usb_onchip.c:77:1
  108008:    a9 04             	{psr, rets, reti} = [sp++]			  ## usb_onchip.c:77:1
  10800a:    81 00             	rti			  ## usb_onchip.c:77:1


usb_code_end:
  10800c:    68 24             	r0 = 0xa4			  ## cvsd_codec.c:29:0
  10800e:    80 00             	rts			  ## cvsd_codec.c:30:5


btcvsd_init:
  108010:    75 04             	[--sp] = {rets, r5, r4}			  ## cvsd_codec.c:34:0
  108012:    04 16             	r4 = r0			  ## cvsd_codec.c:34:0
  108014:    41 20             	r1 = 0x0			  ## cvsd_codec.c:36:5
  108016:    6a 24             	r2 = 0xa4			  ## cvsd_codec.c:36:5
  108018:    45 20             	r5 = 0x0			  ## cvsd_codec.c:36:5
  10801a:    bf ea 06 e5       	call -0x35f4 <memset : 104a2a >			  ## cvsd_codec.c:36:5
  10801e:    40 e0 00 28       	r0 = 0x2800 <os_code_size+0x6AB : 2800 >			  ## cvsd_codec.c:38:35
  108022:    01 e1 40 40       	r1 = r4 + 0x40			  ## cvsd_codec.c:38:35
  108026:    90 62             	[r1+0x8] = r0			  ## cvsd_codec.c:38:35
  108028:    42 21             	r2 = 0x1			  ## cvsd_codec.c:39:33
  10802a:    9a 41             	b[r1+0x1] = r2			  ## cvsd_codec.c:39:33
  10802c:    95 61             	[r1+0x4] = r5			  ## cvsd_codec.c:40:34
  10802e:    90 65             	[r1+0x14] = r0			  ## cvsd_codec.c:42:35
  108030:    9a 4d             	b[r1+0xd] = r2			  ## cvsd_codec.c:43:33
  108032:    40 20             	r0 = 0x0			  ## cvsd_codec.c:46:5
  108034:    95 64             	[r1+0x10] = r5			  ## cvsd_codec.c:44:34
  108036:    55 04             	{pc, r5, r4} = [sp++]			  ## cvsd_codec.c:46:5


CVSD_StudentEncode:
  108038:    78 04             	[--sp] = {rets, r8-r4}			  ## cvsd_codec.c:235:0
  10803a:    42 20             	r2 = 0x0			  ## cvsd_codec.c:235:0
  10803c:    48 f0 ff 03       	r8 = 0x3ff  # <ROM_RAM_SIZE+0xDE : 3fe >			  ## cvsd_codec.c:235:0
  108040:    9a 40             		 b[r1+0x0] = r2			  ## cvsd_codec.c:240:26
  108042:    43 21             	r3 = 0x1
  108044:    24 8a             	goto 0x94 <CVSD_StudentEncode+0xA2 : 1080da >
  108046:    1c 41             	r4 = b[r1+0x1] (u)			  ## cvsd_codec.c:242:43
  108048:    44 a1             	r4 = r4 << 0x1			  ## cvsd_codec.c:242:50
  10804a:    66 e1 0e 40       	r6 = r4 & 0xE			  ## cvsd_codec.c:242:56
  10804e:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:242:28
  108050:    d8 ec 0a 42       	r4 = [r0+r2<<2]			  ## cvsd_codec.c:243:14
  108054:    15 61             	r5 = [r1+0x4] 			  ## cvsd_codec.c:243:53
  108056:    44 aa             	r4 = r4 << 0xa			  ## cvsd_codec.c:243:24
  108058:    05 ed 10 40       	ifs (r4 >= r5) goto 0x20 <CVSD_StudentEncode+0x44 : 10807c >			  ## cvsd_codec.c:243:24
  10805c:    36 20             	r6 |= 0x1			  ## cvsd_codec.c:259:53
  10805e:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:259:32
  108060:    1c 40             	r4 = b[r1+0x0] (u)			  ## cvsd_codec.c:260:36
  108062:    34 19             	r4 |= r3			  ## cvsd_codec.c:260:57
  108064:    9c 40             	b[r1+0x0] = r4			  ## cvsd_codec.c:260:34
  108066:    14 62             	r4 = [r1+0x8] 			  ## cvsd_codec.c:260:34
  108068:    86 f8 16 1e       	if (r6 != 0xf) goto 0x2c <CVSD_StudentEncode+0x60 : 108098 >			  ## cvsd_codec.c:261:17
  10806c:    e6 e0 20 4d       	r6 = r4 + 0x2800			  ## cvsd_codec.c:262:61
  108070:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:262:38
  108072:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:262:38
  108076:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:263:21
  10807a:    04 99             	goto 0x32 <CVSD_StudentEncode+0x76 : 1080ae >			  ## cvsd_codec.c:263:21
  10807c:    14 62             	r4 = [r1+0x8] 
  10807e:    06 5a             	if (r6 == 0) goto 0x34 <CVSD_StudentEncode+0x7C : 1080b4 >
  108080:    36 e1 01 8e       	r6 = r8 + -0x1ff			  ## cvsd_codec.c:251:23
  108084:    47 20             	r7 = 0x0			  ## cvsd_codec.c:251:23
  108086:    fc e1 40 68       	r7_r6 += r4 * r8 (u)			  ## cvsd_codec.c:251:23
  10808a:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:252:46
  10808e:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  108092:    46 e0 00 28       		r6 = 0x2800
                               	} <os_code_size+0x6AB : 2800 >			  ## cvsd_codec.c:253:21
  108096:    04 95             	goto 0x2a <CVSD_StudentEncode+0x8A : 1080c2 >			  ## cvsd_codec.c:253:21
  108098:    36 e1 01 8e       	r6 = r8 + -0x1ff			  ## cvsd_codec.c:268:23
  10809c:    47 20             	r7 = 0x0			  ## cvsd_codec.c:268:23
  10809e:    fc e1 40 68       	r7_r6 += r4 * r8 (u)			  ## cvsd_codec.c:268:23
  1080a2:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:269:46
  1080a6:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  1080aa:    46 e0 00 28       		r6 = 0x2800
                               	} <os_code_size+0x6AB : 2800 >			  ## cvsd_codec.c:270:21
  1080ae:    d5 df             	r5 = r5 - r6  #			  ## cvsd_codec.c:274:55
  1080b0:    96 62             		 [r1+0x8] = r6			  ## cvsd_codec.c:274:55
  1080b2:    04 89             	goto 0x12 <CVSD_StudentEncode+0x8E : 1080c6 >			  ## cvsd_codec.c:274:55
  1080b4:    e6 e0 20 4d       	r6 = r4 + 0x2800			  ## cvsd_codec.c:245:61
  1080b8:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:245:38
  1080ba:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:245:38
  1080be:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:246:21
  1080c2:    65 d8             	r5 += r6  #			  ## cvsd_codec.c:257:55
  1080c4:    96 62             		 [r1+0x8] = r6			  ## cvsd_codec.c:257:55
  1080c6:    95 61             	[r1+0x4] = r5
  1080c8:    5d a6             	r5 = r5 <<< 0x6			  ## cvsd_codec.c:285:13
  1080ca:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:285:13
  1080cc:    e4 e1 1f 50       	r4 = r5 * 0x1F			  ## cvsd_codec.c:297:52
  1080d0:    c4 30             	r4 += 0x10			  ## cvsd_codec.c:297:57
  1080d2:    cc a5             	r4 = r4 >>> 0x5			  ## cvsd_codec.c:297:63
  1080d4:    94 61             	[r1+0x4] = r4			  ## cvsd_codec.c:297:29
  1080d6:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:241:35
  1080d8:    33 a1             	r3 = r3 << 0x1			  ## cvsd_codec.c:298:19
  1080da:    82 f8 b4 11       	if (r2 != 0x8) goto -0x98 <CVSD_StudentEncode+0xE : 108046 >
  1080de:    58 04             	{pc, r8-r4} = [sp++]			  ## cvsd_codec.c:302:1


cvsd_encode:
  1080e0:    7e 04             	[--sp] = {rets, r14-r4}			  ## cvsd_codec.c:373:0
  1080e2:    04 e1 40 00       	r4 = r0 + 0x40			  ## cvsd_codec.c:377:23
  1080e6:    3c d6             	r12 = r3  #			  ## cvsd_codec.c:377:23
  1080e8:    4e 61             		 r6 = h[r4+0x2] (u)			  ## cvsd_codec.c:377:30
  1080ea:    2a 16             	r10 = r2
  1080ec:    1b 16             	r11 = r1
  1080ee:    86 f8 9c 02       	if (r6 != 0x1) goto 0x138 <cvsd_encode+0x14A : 10822a >
  1080f2:    08 e1 18 00       	r8 = r0 + 0x18			  ## cvsd_codec.c:374:9
  1080f6:    09 e1 08 00       	r9 = r0 + 0x8			  ## cvsd_codec.c:374:9
  1080fa:    c6 14             	r14 = 0			  ## cvsd_codec.c:374:9
  1080fc:    c5 14             	r13 = 0			  ## cvsd_codec.c:374:9
  1080fe:    44 92             	goto 0x124 <cvsd_encode+0x144 : 108224 >			  ## cvsd_codec.c:374:9
  108100:    d8 ed ba 2d       	r2 = h[r11+r13<<1] (s)			  ## cvsd_codec.c:118:30
  108104:    41 20             	r1 = 0x0			  ## cvsd_codec.c:118:30
  108106:    20 eb 06 00       	[r0+] = {r2, r1}			  ## cvsd_codec.c:117:28
  10810a:    14 83             	goto 0x46 <cvsd_encode+0x72 : 108152 >
  10810c:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  108110:    43 67             	r3 = [r4+0x1c] 			  ## cvsd_codec.c:55:15
  108112:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
  108114:    e5 e1 54 20       	r5 = r2 * 0x54			  ## cvsd_codec.c:56:27
  108118:    cd 20             	r5 += 0x20			  ## cvsd_codec.c:56:37
  10811a:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:56:43
  10811c:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:56:49
  10811e:    c3 67             	[r4+0x1c] = r3			  ## cvsd_codec.c:56:19
  108120:    45 69             	r5 = [r4+0x24] 			  ## cvsd_codec.c:59:27
  108122:    47 68             	r7 = [r4+0x20] 			  ## cvsd_codec.c:59:15
  108124:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:59:25
  108126:    e6 e1 4d 50       	r6 = r5 * 0x4D			  ## cvsd_codec.c:60:27
  10812a:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:60:37
  10812c:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:60:43
  10812e:    ee 1f             	r6 = r6 - r7			  ## cvsd_codec.c:60:49
  108130:    6d df             	r5 = r6 - r5  #			  ## cvsd_codec.c:61:26
  108132:    c6 68             		 [r4+0x20] = r6			  ## cvsd_codec.c:60:19
  108134:    d8 ec 0a 71       	r7 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  108138:    de 1f             	r6 = r5 - r7			  ## cvsd_codec.c:63:20
  10813a:    e7 e1 18 60       	r7 = r6 * 0x18			  ## cvsd_codec.c:64:27
  10813e:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
  108140:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
  108142:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:64:49
  108144:    b2 de             	r2 = r3 - r2  #			  ## cvsd_codec.c:65:26
  108146:    c5 69             		 [r4+0x24] = r5			  ## cvsd_codec.c:64:19
  108148:    a2 1f             	r2 = r2 - r6			  ## cvsd_codec.c:57:26
  10814a:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
  10814c:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  108150:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  108152:    81 f8 db 05       	if (r1 != 0x2) goto -0x4a <cvsd_encode+0x2C : 10810c >			  ## cvsd_codec.c:54:5
  108156:    41 21             	r1 = 0x1
  108158:    92 16             	r2 = r9
  10815a:    04 86             	goto 0xc <cvsd_encode+0x88 : 108168 >
  10815c:    d8 ec 0a 31       	r3 = [r0+r1<<2]			  ## cvsd_codec.c:121:42
  108160:    a3 61             	[r2+0x4] = r3			  ## cvsd_codec.c:121:40
  108162:    df ec 29 ef       	[r2++=-0x8] = r14			  ## cvsd_codec.c:122:36
  108166:    f9 3f             	r1 += -0x1			  ## cvsd_codec.c:120:26
  108168:    71 fe f8 ff       	ifs (r1 > -0x1) goto -0x10 <cvsd_encode+0x7C : 10815c >			  ## cvsd_codec.c:120:5
  10816c:    41 20             	r1 = 0x0
  10816e:    14 82             	goto 0x44 <cvsd_encode+0xD4 : 1081b4 >
  108170:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  108174:    43 6a             	r3 = [r4+0x28] 			  ## cvsd_codec.c:55:15
  108176:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
  108178:    e5 e1 60 20       	r5 = r2 * 0x60			  ## cvsd_codec.c:56:27
  10817c:    cd 20             	r5 += 0x20			  ## cvsd_codec.c:56:37
  10817e:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:56:43
  108180:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:56:49
  108182:    c3 6a             	[r4+0x28] = r3			  ## cvsd_codec.c:56:19
  108184:    45 6c             	r5 = [r4+0x30] 			  ## cvsd_codec.c:59:27
  108186:    46 6b             	r6 = [r4+0x2c] 			  ## cvsd_codec.c:59:15
  108188:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:59:25
  10818a:    e7 e1 60 50       	r7 = r5 * 0x60			  ## cvsd_codec.c:60:27
  10818e:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:60:37
  108190:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:60:43
  108192:    f6 1f             	r6 = r7 - r6			  ## cvsd_codec.c:60:49
  108194:    6d df             	r5 = r6 - r5  #			  ## cvsd_codec.c:61:26
  108196:    c6 6b             		 [r4+0x2c] = r6			  ## cvsd_codec.c:60:19
  108198:    d8 ec 0a 71       	r7 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  10819c:    de 1f             	r6 = r5 - r7			  ## cvsd_codec.c:63:20
  10819e:    67 a5             	r7 = r6 << 0x5			  ## cvsd_codec.c:64:27
  1081a0:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
  1081a2:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
  1081a4:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:64:49
  1081a6:    b2 de             	r2 = r3 - r2  #			  ## cvsd_codec.c:65:26
  1081a8:    c5 6c             		 [r4+0x30] = r5			  ## cvsd_codec.c:64:19
  1081aa:    a2 1f             	r2 = r2 - r6			  ## cvsd_codec.c:57:26
  1081ac:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
  1081ae:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  1081b2:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  1081b4:    81 f8 dc 09       	if (r1 != 0x4) goto -0x48 <cvsd_encode+0x90 : 108170 >			  ## cvsd_codec.c:54:5
  1081b8:    41 23             	r1 = 0x3
  1081ba:    82 16             	r2 = r8
  1081bc:    04 86             	goto 0xc <cvsd_encode+0xEA : 1081ca >
  1081be:    d8 ec 0a 31       	r3 = [r0+r1<<2]			  ## cvsd_codec.c:126:42
  1081c2:    a3 61             	[r2+0x4] = r3			  ## cvsd_codec.c:126:40
  1081c4:    df ec 29 ef       	[r2++=-0x8] = r14			  ## cvsd_codec.c:127:36
  1081c8:    f9 3f             	r1 += -0x1			  ## cvsd_codec.c:125:26
  1081ca:    71 fe f8 ff       	ifs (r1 > -0x1) goto -0x10 <cvsd_encode+0xDE : 1081be >			  ## cvsd_codec.c:125:5
  1081ce:    41 20             	r1 = 0x0
  1081d0:    04 99             	goto 0x32 <cvsd_encode+0x124 : 108204 >
  1081d2:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  1081d6:    a2 f0 00 20       	r2 = 0x0 - r2  #			  ## cvsd_codec.c:56:49
  1081da:    43 6d             		 r3 = [r4+0x34] 			  ## cvsd_codec.c:55:15
  1081dc:    c2 6d             	[r4+0x34] = r2			  ## cvsd_codec.c:56:19
  1081de:    42 6f             	r2 = [r4+0x3c] 			  ## cvsd_codec.c:59:27
  1081e0:    a2 f0 00 20       	r2 = 0x0 - r2  #			  ## cvsd_codec.c:60:49
  1081e4:    45 6e             		 r5 = [r4+0x38] 			  ## cvsd_codec.c:59:15
  1081e6:    c2 6e             	[r4+0x38] = r2			  ## cvsd_codec.c:60:19
  1081e8:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  1081ec:    52 18             	r2 += r5			  ## cvsd_codec.c:63:20
  1081ee:    26 a5             	r6 = r2 << 0x5			  ## cvsd_codec.c:64:37
  1081f0:    a6 e0 20 60       	r6 = 0x20 - r6			  ## cvsd_codec.c:64:37
  1081f4:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
  1081f6:    65 18             	r5 += r6			  ## cvsd_codec.c:64:49
  1081f8:    aa de             	r2 = r2 - r3  #			  ## cvsd_codec.c:57:26
  1081fa:    c5 6f             		 [r4+0x3c] = r5			  ## cvsd_codec.c:64:19
  1081fc:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
  1081fe:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  108202:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  108204:    81 f8 e5 11       	if (r1 != 0x8) goto -0x36 <cvsd_encode+0xF2 : 1081d2 >
  108208:    01 16             	r1 = r0			  ## cvsd_codec.c:142:9
  10820a:    30 87             	rep 0x8 0x8 {			  ## cvsd_codec.c:142:9
  10820c:    12 60             		r2 = [r1+0x0] 			  ## cvsd_codec.c:142:9
  10820e:    78 e0 01 22       		r2 = sat16(r2) (s)			  ## cvsd_codec.c:142:9
  108212:    92 05             		[r1++=0x4] = r2
                               	}			  ## cvsd_codec.c:142:9
  108214:    41 16             	r1 = r4			  ## cvsd_codec.c:380:13
  108216:    bf ea 0f ff       	call -0x1e2 <CVSD_StudentEncode : 108038 >			  ## cvsd_codec.c:380:13
  10821a:    49 40             	r1 = b[r4+0x0] (u)			  ## cvsd_codec.c:381:47
  10821c:    d8 ee a1 1d       	b[r10+r13] = r1			  ## cvsd_codec.c:381:24
  108220:    0d e1 01 d0       	r13 = r13 + 0x1			  ## cvsd_codec.c:378:31
  108224:    8c ed 6c d1       	ifs (r13 < r12) goto -0x128 <cvsd_encode+0x20 : 108100 >
  108228:    04 9c             	goto 0x38 <cvsd_encode+0x182 : 108262 >
  10822a:    46 20             	r6 = 0x0
  10822c:    04 98             	goto 0x30 <cvsd_encode+0x17E : 10825e >
  10822e:    d8 ed ba 16       	r1 = h[r11+r6<<1] (s)			  ## cvsd_codec.c:89:14
  108232:    54 ed 08 25       	r2 = h[r0+0x58] (s)			  ## cvsd_codec.c:89:23
  108236:    97 1e             	r7 = r1 - r2			  ## cvsd_codec.c:89:21
  108238:    7b 87             	r3 = r7 + 0x7			  ## cvsd_codec.c:91:15
  10823a:    37 ed 00 00       	ifs (r7 >= 0x0) {
  10823e:    73 16             		r3 = r7
                               	}			  ## cvsd_codec.c:90:9
  108240:    bb a3             	r3 = r3 >>> 0x3			  ## cvsd_codec.c:93:11
  108242:    05 16             	r5 = r0			  ## cvsd_codec.c:94:5
  108244:    af 1c             	r7 = r2 + r3			  ## cvsd_codec.c:94:5
  108246:    10 86             	rep 0x4 0x7 {			  ## cvsd_codec.c:94:5
  108248:    ff dc             		r7 = r7 + r3  #			  ## cvsd_codec.c:94:5
  10824a:    d7 05             			 [r5++=0x4] = r7
                               	}			  ## cvsd_codec.c:94:5
  10824c:    d7 05             	[r5++=0x4] = r7			  ## cvsd_codec.c:94:5
  10824e:    41 d6             	r1 = r4  #			  ## cvsd_codec.c:386:13
  108250:    c9 6c             		 h[r4+0x18] = r1			  ## cvsd_codec.c:107:28
  108252:    bf ea f1 fe       	call -0x21e <CVSD_StudentEncode : 108038 >			  ## cvsd_codec.c:386:13
  108256:    49 40             	r1 = b[r4+0x0] (u)			  ## cvsd_codec.c:387:47
  108258:    d8 ee a1 16       	b[r10+r6] = r1			  ## cvsd_codec.c:387:24
  10825c:    c6 21             	r6 += 0x1			  ## cvsd_codec.c:384:31
  10825e:    8c ed e6 61       	ifs (r6 < r12) goto -0x34 <cvsd_encode+0x14E : 10822e >
  108262:    40 20             	r0 = 0x0			  ## cvsd_codec.c:391:5
  108264:    5e 04             	{pc, r14-r4} = [sp++]			  ## cvsd_codec.c:391:5


CVSD_StudentDecode:
  108266:    78 04             	[--sp] = {rets, r8-r4}			  ## cvsd_codec.c:305:0
  108268:    42 20             	r2 = 0x0			  ## cvsd_codec.c:305:0
  10826a:    48 e0 ff 03       	r8 = 0x3ff <ROM_RAM_SIZE+0xDE : 3fe >			  ## cvsd_codec.c:305:0
  10826e:    04 e1 00 22       	r4 = r2 + 0x200			  ## cvsd_codec.c:305:0
  108272:    45 20             	r5 = 0x0			  ## cvsd_codec.c:305:0
  108274:    24 8a             	goto 0x94 <CVSD_StudentDecode+0xA4 : 10830a >			  ## cvsd_codec.c:305:0
  108276:    1b 40             	r3 = b[r1+0x0] (u)			  ## cvsd_codec.c:312:16
  108278:    a3 da             	r3 >>= r2  #			  ## cvsd_codec.c:312:37
  10827a:    1e 41             		 r6 = b[r1+0x1] (u)			  ## cvsd_codec.c:313:32
  10827c:    67 e1 01 30       	r7 = r3 & 0x1			  ## cvsd_codec.c:312:15
  108280:    66 a1             	r6 = r6 << 0x1			  ## cvsd_codec.c:313:51
  108282:    66 e1 0e 60       	r6 = r6 & 0xE			  ## cvsd_codec.c:313:57
  108286:    76 19             	r6 |= r7			  ## cvsd_codec.c:313:65
  108288:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:313:28
  10828a:    53 e8 0d 02       	if ((r3 & 0x1) != 0) goto 0x1a <CVSD_StudentDecode+0x42 : 1082a8 >			  ## cvsd_codec.c:314:13
  10828e:    13 62             	r3 = [r1+0x8] 
  108290:    16 44             	if (r6 == 0) goto 0x48 <CVSD_StudentDecode+0x74 : 1082da >
  108292:    46 16             	r6 = r4			  ## cvsd_codec.c:322:23
  108294:    47 20             	r7 = 0x0			  ## cvsd_codec.c:322:23
  108296:    fc e1 30 68       	r7_r6 += r3 * r8 (u)			  ## cvsd_codec.c:322:23
  10829a:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:323:46
  10829e:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  1082a2:    46 e0 00 28       		r6 = 0x2800
                               	} <os_code_size+0x6AB : 2800 >			  ## cvsd_codec.c:324:21
  1082a6:    14 80             	goto 0x40 <CVSD_StudentDecode+0x82 : 1082e8 >			  ## cvsd_codec.c:324:21
  1082a8:    13 62             	r3 = [r1+0x8] 
  1082aa:    86 f8 08 1e       	if (r6 != 0xf) goto 0x10 <CVSD_StudentDecode+0x58 : 1082be >			  ## cvsd_codec.c:331:17
  1082ae:    e6 e0 20 3d       	r6 = r3 + 0x2800			  ## cvsd_codec.c:332:61
  1082b2:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:332:38
  1082b4:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:332:38
  1082b8:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:333:21
  1082bc:    04 8a             	goto 0x14 <CVSD_StudentDecode+0x6C : 1082d2 >			  ## cvsd_codec.c:333:21
  1082be:    46 16             	r6 = r4			  ## cvsd_codec.c:338:23
  1082c0:    47 20             	r7 = 0x0			  ## cvsd_codec.c:338:23
  1082c2:    fc e1 30 68       	r7_r6 += r3 * r8 (u)			  ## cvsd_codec.c:338:23
  1082c6:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:339:46
  1082ca:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  1082ce:    46 e0 00 28       		r6 = 0x2800
                               	} <os_code_size+0x6AB : 2800 >			  ## cvsd_codec.c:340:21
  1082d2:    96 62             	[r1+0x8] = r6
  1082d4:    13 61             	r3 = [r1+0x4] 			  ## cvsd_codec.c:344:48
  1082d6:    b6 1f             	r6 = r3 - r6			  ## cvsd_codec.c:344:56
  1082d8:    04 8a             	goto 0x14 <CVSD_StudentDecode+0x88 : 1082ee >			  ## cvsd_codec.c:344:56
  1082da:    e6 e0 20 3d       	r6 = r3 + 0x2800			  ## cvsd_codec.c:316:61
  1082de:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:316:38
  1082e0:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:316:38
  1082e4:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:317:21
  1082e8:    96 62             	[r1+0x8] = r6
  1082ea:    13 61             	r3 = [r1+0x4] 			  ## cvsd_codec.c:329:47
  1082ec:    36 18             	r6 += r3			  ## cvsd_codec.c:329:55
  1082ee:    96 61             	[r1+0x4] = r6
  1082f0:    6e a6             	r6 = r6 <<< 0x6			  ## cvsd_codec.c:354:13
  1082f2:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:354:13
  1082f4:    e3 e1 1f 60       	r3 = r6 * 0x1F			  ## cvsd_codec.c:366:52
  1082f8:    c3 30             	r3 += 0x10			  ## cvsd_codec.c:366:57
  1082fa:    bb a5             	r3 = r3 >>> 0x5			  ## cvsd_codec.c:366:63
  1082fc:    03 f1 00 32       	r3 = r3 + 0x200  #			  ## cvsd_codec.c:367:42
  108300:    93 61             		 [r1+0x4] = r3			  ## cvsd_codec.c:366:29
  108302:    bb aa             	r3 = r3 >>> 0xa			  ## cvsd_codec.c:367:68
  108304:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:367:19
  108308:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:311:35
  10830a:    82 f8 b4 11       	if (r2 != 0x8) goto -0x98 <CVSD_StudentDecode+0x10 : 108276 >
  10830e:    58 04             	{pc, r8-r4} = [sp++]			  ## cvsd_codec.c:370:1


cvsd_decode:
  108310:    7e 04             	[--sp] = {rets, r14-r4}			  ## cvsd_codec.c:395:0
  108312:    0d 16             	r13 = r0			  ## cvsd_codec.c:395:0
  108314:    0e e1 4c 00       	r14 = r0 + 0x4c			  ## cvsd_codec.c:399:23
  108318:    50 ed e2 50       	r5 = h[r14+0x2] (u)			  ## cvsd_codec.c:399:30
  10831c:    3a 16             	r10 = r3
  10831e:    28 16             	r8 = r2
  108320:    19 16             	r9 = r1
  108322:    c8 20             	r0 += 0x20
  108324:    85 f8 a8 02       	if (r5 != 0x1) goto 0x150 <cvsd_decode+0x168 : 108478 >
  108328:    c3 14             	r11 = 0
  10832a:    4c e0 02 00       	r12 = 0x2 <TLB_BEGIN+0x2 : 2 >
  10832e:    54 81             	goto 0x142 <cvsd_decode+0x162 : 108472 >
  108330:    d8 ee 90 1b       	r1 = b[r9+r11] (u)			  ## cvsd_codec.c:401:45
  108334:    52 ee e0 10       	b[r14+0x0] = r1			  ## cvsd_codec.c:401:43
  108338:    e1 16             	r1 = r14			  ## cvsd_codec.c:402:13
  10833a:    41 95             	call -0xd6 <CVSD_StudentDecode : 108266 >			  ## cvsd_codec.c:402:13
  10833c:    42 20             	r2 = 0x0
  10833e:    04 99             	goto 0x32 <cvsd_decode+0x62 : 108372 >
  108340:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:55:27
  108344:    a3 f0 00 30       	r3 = 0x0 - r3  #			  ## cvsd_codec.c:56:49
  108348:    17 63             		 r7 = [r1+0xc] 			  ## cvsd_codec.c:55:15
  10834a:    93 63             	[r1+0xc] = r3			  ## cvsd_codec.c:56:19
  10834c:    13 65             	r3 = [r1+0x14] 			  ## cvsd_codec.c:59:27
  10834e:    a3 f0 00 30       	r3 = 0x0 - r3  #			  ## cvsd_codec.c:60:49
  108352:    15 64             		 r5 = [r1+0x10] 			  ## cvsd_codec.c:59:15
  108354:    93 64             	[r1+0x10] = r3			  ## cvsd_codec.c:60:19
  108356:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:63:22
  10835a:    53 18             	r3 += r5			  ## cvsd_codec.c:63:20
  10835c:    36 a5             	r6 = r3 << 0x5			  ## cvsd_codec.c:64:37
  10835e:    a6 e0 20 60       	r6 = 0x20 - r6			  ## cvsd_codec.c:64:37
  108362:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
  108364:    65 18             	r5 += r6			  ## cvsd_codec.c:64:49
  108366:    b9 df             	r1 = r3 - r7  #			  ## cvsd_codec.c:57:26
  108368:    95 65             		 [r1+0x14] = r5			  ## cvsd_codec.c:64:19
  10836a:    51 18             	r1 += r5			  ## cvsd_codec.c:67:27
  10836c:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## cvsd_codec.c:67:20
  108370:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:54:27
  108372:    01 e1 8c d0       	r1 = r13 + 0x8c
  108376:    82 f8 e3 11       	if (r2 != 0x8) goto -0x3a <cvsd_decode+0x30 : 108340 >			  ## cvsd_codec.c:54:5
  10837a:    82 14             	r3_r2 = 0
  10837c:    04 88             	goto 0x10 <cvsd_decode+0x7E : 10838e >
  10837e:    d8 ec 02 52       	r5 = [r0+r2]			  ## cvsd_codec.c:196:35
  108382:    f4 e1 51 5c       	r5 = r5 / r12 (s)			  ## cvsd_codec.c:196:63
  108386:    d8 ec 0b 53       	[r0+r3<<2] = r5			  ## cvsd_codec.c:196:33
  10838a:    c2 28             	r2 += 0x8			  ## cvsd_codec.c:195:5
  10838c:    c3 21             	r3 += 0x1			  ## cvsd_codec.c:195:25
  10838e:    83 f8 f6 09       	if (r3 != 0x4) goto -0x14 <cvsd_decode+0x6E : 10837e >			  ## cvsd_codec.c:195:5
  108392:    42 20             	r2 = 0x0
  108394:    14 82             	goto 0x44 <cvsd_decode+0xCA : 1083da >
  108396:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:55:27
  10839a:    15 60             	r5 = [r1+0x0] 			  ## cvsd_codec.c:55:15
  10839c:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:55:25
  10839e:    e6 e1 60 30       	r6 = r3 * 0x60			  ## cvsd_codec.c:56:27
  1083a2:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:56:37
  1083a4:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:56:43
  1083a6:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:56:49
  1083a8:    95 60             	[r1+0x0] = r5			  ## cvsd_codec.c:56:19
  1083aa:    16 62             	r6 = [r1+0x8] 			  ## cvsd_codec.c:59:27
  1083ac:    17 61             	r7 = [r1+0x4] 			  ## cvsd_codec.c:59:15
  1083ae:    f6 1f             	r6 = r7 - r6			  ## cvsd_codec.c:59:25
  1083b0:    e4 e1 60 60       	r4 = r6 * 0x60			  ## cvsd_codec.c:60:27
  1083b4:    cc 20             	r4 += 0x20			  ## cvsd_codec.c:60:37
  1083b6:    cc a6             	r4 = r4 >>> 0x6			  ## cvsd_codec.c:60:43
  1083b8:    cc 1f             	r4 = r4 - r7			  ## cvsd_codec.c:60:49
  1083ba:    c4 df             	r4 = r4 - r6  #			  ## cvsd_codec.c:61:26
  1083bc:    94 61             		 [r1+0x4] = r4			  ## cvsd_codec.c:60:19
  1083be:    d8 ec 0a 72       	r7 = [r0+r2<<2]			  ## cvsd_codec.c:63:22
  1083c2:    ce 1f             	r6 = r4 - r7			  ## cvsd_codec.c:63:20
  1083c4:    67 a5             	r7 = r6 << 0x5			  ## cvsd_codec.c:64:27
  1083c6:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
  1083c8:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
  1083ca:    74 1f             	r4 = r7 - r4			  ## cvsd_codec.c:64:49
  1083cc:    db de             	r3 = r5 - r3  #			  ## cvsd_codec.c:65:26
  1083ce:    94 62             		 [r1+0x8] = r4			  ## cvsd_codec.c:64:19
  1083d0:    b3 1f             	r3 = r3 - r6			  ## cvsd_codec.c:57:26
  1083d2:    43 18             	r3 += r4			  ## cvsd_codec.c:67:27
  1083d4:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:67:20
  1083d8:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:54:27
  1083da:    82 f8 dc 09       	if (r2 != 0x4) goto -0x48 <cvsd_decode+0x86 : 108396 >			  ## cvsd_codec.c:54:5
  1083de:    41 20             	r1 = 0x0
  1083e0:    42 20             	r2 = 0x0
  1083e2:    04 88             	goto 0x10 <cvsd_decode+0xE4 : 1083f4 >
  1083e4:    d8 ec 02 31       	r3 = [r0+r1]			  ## cvsd_codec.c:200:35
  1083e8:    f4 e1 31 3c       	r3 = r3 / r12 (s)			  ## cvsd_codec.c:200:63
  1083ec:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:200:33
  1083f0:    c1 28             	r1 += 0x8			  ## cvsd_codec.c:199:5
  1083f2:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:199:25
  1083f4:    82 f8 f6 05       	if (r2 != 0x2) goto -0x14 <cvsd_decode+0xD4 : 1083e4 >			  ## cvsd_codec.c:199:5
  1083f8:    41 20             	r1 = 0x0
  1083fa:    14 89             	goto 0x52 <cvsd_decode+0x13E : 10844e >
  1083fc:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  108400:    d0 ec e4 33       	r3 = [r14+0x34]			  ## cvsd_codec.c:55:15
  108404:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
  108406:    e4 e1 54 20       	r4 = r2 * 0x54			  ## cvsd_codec.c:56:27
  10840a:    cc 20             	r4 += 0x20			  ## cvsd_codec.c:56:37
  10840c:    cc a6             	r4 = r4 >>> 0x6			  ## cvsd_codec.c:56:43
  10840e:    cb 1e             	r3 = r4 - r3			  ## cvsd_codec.c:56:49
  108410:    d0 ec e5 33       	[r14+0x34] = r3			  ## cvsd_codec.c:56:19
  108414:    d0 ec ec 43       	r4 = [r14+0x3c]			  ## cvsd_codec.c:59:27
  108418:    d0 ec e8 53       	r5 = [r14+0x38]			  ## cvsd_codec.c:59:15
  10841c:    54 1f             	r4 = r5 - r4			  ## cvsd_codec.c:59:25
  10841e:    e6 e1 4d 40       	r6 = r4 * 0x4D			  ## cvsd_codec.c:60:27
  108422:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:60:37
  108424:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:60:43
  108426:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:60:49
  108428:    d0 ec e9 53       	[r14+0x38] = r5			  ## cvsd_codec.c:60:19
  10842c:    d8 ec 0a 61       	r6 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  108430:    54 1f             	r4 = r5 - r4			  ## cvsd_codec.c:61:26
  108432:    c5 1f             	r5 = r4 - r6			  ## cvsd_codec.c:63:20
  108434:    e6 e1 18 50       	r6 = r5 * 0x18			  ## cvsd_codec.c:64:27
  108438:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:64:37
  10843a:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
  10843c:    64 1f             	r4 = r6 - r4			  ## cvsd_codec.c:64:49
  10843e:    d0 ec ed 43       	[r14+0x3c] = r4			  ## cvsd_codec.c:64:19
  108442:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:65:26
  108444:    2a 1f             	r2 = r2 - r5			  ## cvsd_codec.c:57:26
  108446:    42 18             	r2 += r4			  ## cvsd_codec.c:67:27
  108448:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  10844c:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  10844e:    81 f8 d5 05       	if (r1 != 0x2) goto -0x56 <cvsd_decode+0xEC : 1083fc >
  108452:    d0 ec d0 12       	r1 = [r13+0x20]			  ## cvsd_codec.c:224:17
  108456:    12 16             	r2 = r1			  ## cvsd_codec.c:214:9
  108458:    ab bf             	r3 = r2 >>> 0x1f			  ## cvsd_codec.c:214:9
  10845a:    d2 e1 31 2c       	r2 = r3_r2 >>> 0x1 (zero)			  ## cvsd_codec.c:214:9
  10845e:    78 e0 01 12       	r1 = sat16(r2) (s)			  ## cvsd_codec.c:214:9
  108462:    d0 ec d1 12       	[r13+0x20] = r1			  ## cvsd_codec.c:214:9
  108466:    50 ed ef 10       	h[r14+0xe] = r1			  ## cvsd_codec.c:230:28
  10846a:    d8 ed 89 1b       	h[r8+r11<<1] = r1			  ## cvsd_codec.c:404:24
  10846e:    0b e1 01 b0       	r11 = r11 + 0x1			  ## cvsd_codec.c:400:31
  108472:    8a ed 5d b1       	ifs (r11 < r10) goto -0x146 <cvsd_decode+0x20 : 108330 >
  108476:    04 97             	goto 0x2e <cvsd_decode+0x196 : 1084a6 >
  108478:    45 20             	r5 = 0x0
  10847a:    04 93             	goto 0x26 <cvsd_decode+0x192 : 1084a2 >
  10847c:    d8 ee 90 15       	r1 = b[r9+r5] (u)			  ## cvsd_codec.c:408:45
  108480:    52 ee e0 10       	b[r14+0x0] = r1			  ## cvsd_codec.c:408:43
  108484:    e1 16             	r1 = r14			  ## cvsd_codec.c:409:13
  108486:    bf ea ee fe       	call -0x224 <CVSD_StudentDecode : 108266 >			  ## cvsd_codec.c:409:13
  10848a:    41 20             	r1 = 0x0			  ## cvsd_codec.c:170:9
  10848c:    02 16             	r2 = r0			  ## cvsd_codec.c:170:9
  10848e:    23 05             	r3 = [r2++=0x4] 			  ## cvsd_codec.c:170:9
  108490:    10 87             	rep 0x4 0x8 {			  ## cvsd_codec.c:170:9
  108492:    99 dc             		r1 = r1 + r3  #			  ## cvsd_codec.c:170:9
  108494:    23 05             			 r3 = [r2++=0x4] 
                               	}			  ## cvsd_codec.c:170:9
  108496:    91 a3             	r1 = r1 >> 0x3			  ## cvsd_codec.c:181:19
  108498:    50 ed ef 10       	h[r14+0xe] = r1			  ## cvsd_codec.c:184:28
  10849c:    d8 ed 89 15       	h[r8+r5<<1] = r1			  ## cvsd_codec.c:411:24
  1084a0:    c5 21             	r5 += 0x1			  ## cvsd_codec.c:407:31
  1084a2:    8a ed eb 51       	ifs (r5 < r10) goto -0x2a <cvsd_decode+0x16C : 10847c >
  1084a6:    40 20             	r0 = 0x0			  ## cvsd_codec.c:415:5
  1084a8:    5e 04             	{pc, r14-r4} = [sp++]			  ## cvsd_codec.c:415:5


cvsd_set:
  1084aa:    81 48             	if (r1 != 0) goto 0x10 <cvsd_set+0x12 : 1084bc >			  ## cvsd_codec.c:419:0
  1084ac:    54 ee 20 10       	r1 = b[r2+0x0] (s)			  ## cvsd_codec.c:425:40
  1084b0:    50 ed 03 14       	h[r0+0x42] = r1			  ## cvsd_codec.c:425:38
  1084b4:    54 ee 21 10       	r1 = b[r2+0x1] (s)			  ## cvsd_codec.c:426:40
  1084b8:    50 ed 0f 14       	h[r0+0x4e] = r1			  ## cvsd_codec.c:426:38
  1084bc:    80 00             	rts			  ## cvsd_codec.c:432:1


get_cvsd_codec_ops:
  1084be:    c0 ff c8 84 10 00 	r0 = 0x1084c8 <bt_esco_cvsd_codec : 1084c8 >			  ## cvsd_codec.c:443:0
  1084c4:    80 00             	rts			  ## cvsd_codec.c:444:5
  1084c6:    00 00             	nop


bt_esco_cvsd_codec:
  1084c8:	 0c 80 10 00 10 80 10 00         ........
  1084d0:	 e0 80 10 00 10 83 10 00         ........
  1084d8:	 aa 84 10 00                     ....


B_iircal:
  1084dc:    7b 04             	[--sp] = {rets, r11-r4}			  ## B_filter.c:108:0
  1084de:    50 ec 00 80       	r9_r8 = d[r0+0x0]			  ## B_filter.c:134:24
  1084e2:    c0 28             	r0 += 0x8			  ## B_filter.c:135:27


biir_i_outter_loop:
  1084e4:    d4 ed 12 60       	r6 = h[r1++=0x2] (s)			  ## B_filter.c:140:2
  1084e8:    07 16             	r7 = r0			  ## B_filter.c:140:2
  1084ea:    84 16             	r4 = r8			  ## B_filter.c:140:2
  1084ec:    e0 ee 41 b6       	r11_r10 = [r4 ++= 0x4]*r6 (s)			  ## B_filter.c:140:2
  1084f0:    10 83             	rep 0x4 0x4 {			  ## B_filter.c:140:2
  1084f2:    e1 e9 71 b4       		r11_r10 += [r7 ++= 0x4]*[r4 ++= 0x4] (s)
                               	}			  ## B_filter.c:140:2
  1084f6:    05 60             	r5 = [r0+0x0] 			  ## B_filter.c:140:2
  1084f8:    86 60             	[r0+0x0] = r6			  ## B_filter.c:140:2
  1084fa:    85 61             	[r0+0x4] = r5			  ## B_filter.c:140:2
  1084fc:    df e1 a1 59       	r5 = r11_r10 >> r9 (s)			  ## B_filter.c:140:2
  108500:    06 62             	r6 = [r0+0x8] 			  ## B_filter.c:140:2
  108502:    85 62             	[r0+0x8] = r5			  ## B_filter.c:140:2
  108504:    86 63             	[r0+0xc] = r6			  ## B_filter.c:140:2
  108506:    78 e0 01 55       	r5 = sat16(r5) (s)			  ## B_filter.c:140:2
  10850a:    a5 06             	h[r2++=0x2] = r5			  ## B_filter.c:140:2
  10850c:    03 ea ea ff       	if (--r3 != 0) goto -0x2c <biir_i_outter_loop : 1084e4 >			  ## B_filter.c:140:2
  108510:    5b 04             	{pc, r11-r4} = [sp++]			  ## B_filter.c:181:1


B_comput_correlataionS:
  108512:    76 04             	[--sp] = {rets, r6-r4}			  ## B_filter.c:296:0
  108514:    44 20             	r4 = 0x0			  ## B_filter.c:314:3
  108516:    45 20             	r5 = 0x0			  ## B_filter.c:314:3


bccs:
  108518:    32 03             	rep 0x8 r2 {			  ## B_filter.c:314:3
  10851a:    d4 ed 12 60       		r6 = h[r1++=0x2] (s)			  ## B_filter.c:314:3
  10851e:    ec ee 01 56       		r5_r4 += h[r0 ++= 0x2]*r6 (s)
                               	}			  ## B_filter.c:314:3
  108522:    f2 5a             	if (r2 != 0) goto -0xc <bccs : 108518 >			  ## B_filter.c:314:3
  108524:    df e1 41 03       	r0 = r5_r4 >> r3 (s)			  ## B_filter.c:337:2
  108528:    56 04             	{pc, r6-r4} = [sp++]			  ## B_filter.c:338:2


B_fir_cal_s:
  10852a:    d9 e8 f0 df       	[--sp] = {rets, r15, r14, r12-r4}			  ## B_filter.c:352:0
  10852e:    50 ed 06 c0       	r12 = h[r0+0x6] (u)			  ## B_filter.c:391:2
  108532:    54 ed 04 80       	r8 = h[r0+0x4] (s)			  ## B_filter.c:383:16
  108536:    d0 ec 0c 90       	r9 = [r0+0xc]			  ## B_filter.c:384:24
  10853a:    54 ed 08 a0       	r10 = h[r0+0x8] (s)			  ## B_filter.c:389:32
  10853e:    d0 ec 00 b0       	r11 = [r0+0x0]			  ## B_filter.c:381:25
  108542:    38 e1 ff 8f       	r8 = r8 + -0x1			  ## B_filter.c:383:33
  108546:    c0 e1 91 90       	r9 = r9 << 0x1			  ## B_filter.c:384:30
  10854a:    c0 e1 a2 50       	r5 = r10 << 0x2			  ## B_filter.c:389:51
  10854e:    35 31             	r5 |= 0x20000			  ## B_filter.c:389:29


fir_s_outter_loop:
  108550:    b7 16             	r7 = r11			  ## B_filter.c:391:2
  108552:    14 16             	r4 = r1			  ## B_filter.c:391:2
  108554:    e8 e8 45 f7       	r15_r14 = h[r4 ++= r5.h]*[r7 ++= r5.l] (s)			  ## B_filter.c:391:2
  108558:    86 16             	r6 = r8			  ## B_filter.c:391:2


bccs1:
  10855a:    16 03             	rep 0x4 r6 {			  ## B_filter.c:391:2
  10855c:    ec e8 45 f7       		r15_r14 += h[r4 ++= r5.h]*[r7 ++= r5.l] (s)
                               	}			  ## B_filter.c:391:2
  108560:    f6 5c             	if (r6 != 0) goto -0x8 <bccs1 : 10855a >			  ## B_filter.c:391:2
  108562:    df e1 e1 ac       	r10 = r15_r14 >> r12 (s)			  ## B_filter.c:391:2
  108566:    78 e0 01 aa       	r10 = sat16(r10) (s)			  ## B_filter.c:391:2
  10856a:    d0 ed 23 a0       	h[r2++=0x2] = r10			  ## B_filter.c:391:2
  10856e:    91 18             	r1 += r9			  ## B_filter.c:391:2
  108570:    03 ea ee ff       	if (--r3 != 0) goto -0x24 <fir_s_outter_loop : 108550 >			  ## B_filter.c:391:2
  108574:    50 ed 07 c0       	h[r0+0x6] = r12			  ## B_filter.c:391:2
  108578:    d5 e8 f0 df       	{pc, r15, r14, r12-r4} = [sp++]			  ## B_filter.c:430:1


B_array_vol:
  10857c:    42 03             	rep 0xa r2 {			  ## B_filter.c:434:0
  10857e:    54 ed 00 30       		r3 = h[r0+0x0] (s)			  ## B_filter.c:445:3
  108582:    13 1b             		r3 *= r1			  ## B_filter.c:445:3
  108584:    bb ad             		r3 = r3 >>> 0xd			  ## B_filter.c:445:3
  108586:    83 06             		h[r0++=0x2] = r3
                               	}			  ## B_filter.c:445:3
  108588:    f2 59             	if (r2 != 0) goto -0xe <B_array_vol : 10857c >			  ## B_filter.c:445:3
  10858a:    80 00             	rts			  ## B_filter.c:464:1


B_Syn_filt:
  10858c:    7b 04             	[--sp] = {rets, r11-r4}			  ## B_filter.c:557:0
  10858e:    d0 e9 24 80       	r9_r8 = d[sp+36]			  ## B_filter.c:557:0


bsy1_s_outter_loop:
  108592:    f7 e0 02 20       	r7 = r2 - 0x2			  ## B_filter.c:588:2
  108596:    04 16             	r4 = r0			  ## B_filter.c:588:2
  108598:    d4 ed 12 50       	r5 = h[r1++=0x2] (s)			  ## B_filter.c:588:2
  10859c:    e8 ee 41 b5       	r11_r10 = h[r4 ++= 0x2]*r5 (s)			  ## B_filter.c:588:2
  1085a0:    86 16             	r6 = r8			  ## B_filter.c:588:2


bsy1:
  1085a2:    36 03             	rep 0x8 r6 {			  ## B_filter.c:588:2
  1085a4:    d7 ed 7e 5f       		r5 = h[r7++=-0x2] (s)			  ## B_filter.c:588:2
  1085a8:    ee ee 41 b5       		r11_r10 -= h[r4 ++= 0x2]*r5 (s)
                               	}			  ## B_filter.c:588:2
  1085ac:    f6 5a             	if (r6 != 0) goto -0xc <bsy1 : 1085a2 >			  ## B_filter.c:588:2
  1085ae:    df e1 a1 59       	r5 = r11_r10 >> r9 (s)			  ## B_filter.c:588:2
  1085b2:    78 e0 01 55       	r5 = sat16(r5) (s)			  ## B_filter.c:588:2
  1085b6:    a5 06             	h[r2++=0x2] = r5			  ## B_filter.c:588:2
  1085b8:    03 ea eb ff       	if (--r3 != 0) goto -0x2a <bsy1_s_outter_loop : 108592 >			  ## B_filter.c:588:2
  1085bc:    5b 04             	{pc, r11-r4} = [sp++]			  ## B_filter.c:626:1


B_Residu:
  1085be:    7b 04             	[--sp] = {rets, r11-r4}			  ## B_filter.c:642:0
  1085c0:    d0 e9 24 80       	r9_r8 = d[sp+36]			  ## B_filter.c:642:0


brs1_s_outter_loop:
  1085c4:    f7 e0 02 10       	r7 = r1 - 0x2			  ## B_filter.c:670:2
  1085c8:    04 16             	r4 = r0			  ## B_filter.c:670:2
  1085ca:    d4 ed 12 50       	r5 = h[r1++=0x2] (s)			  ## B_filter.c:670:2
  1085ce:    e8 ee 41 b5       	r11_r10 = h[r4 ++= 0x2]*r5 (s)			  ## B_filter.c:670:2
  1085d2:    86 16             	r6 = r8			  ## B_filter.c:670:2


brsy1:
  1085d4:    36 03             	rep 0x8 r6 {			  ## B_filter.c:670:2
  1085d6:    d7 ed 7e 5f       		r5 = h[r7++=-0x2] (s)			  ## B_filter.c:670:2
  1085da:    ec ee 41 b5       		r11_r10 += h[r4 ++= 0x2]*r5 (s)
                               	}			  ## B_filter.c:670:2
  1085de:    f6 5a             	if (r6 != 0) goto -0xc <brsy1 : 1085d4 >			  ## B_filter.c:670:2
  1085e0:    df e1 a1 59       	r5 = r11_r10 >> r9 (s)			  ## B_filter.c:670:2
  1085e4:    78 e0 01 55       	r5 = sat16(r5) (s)			  ## B_filter.c:670:2
  1085e8:    a5 06             	h[r2++=0x2] = r5			  ## B_filter.c:670:2
  1085ea:    03 ea eb ff       	if (--r3 != 0) goto -0x2a <brs1_s_outter_loop : 1085c4 >			  ## B_filter.c:670:2
  1085ee:    5b 04             	{pc, r11-r4} = [sp++]			  ## B_filter.c:708:1


_rfifft_wrap:
  1085f0:    76 04             	[--sp] = {rets, r6-r4}
  1085f2:    e2 9d             	sp += -0xc
  1085f4:    44 20             	r4 = 0x0
  1085f6:    c3 ff 00 19 1f 00 	r3 = 0x1f1900 <__stub_VecMinScalar_float_c_f_c+0xE1904 : 1f1900 >
  1085fc:    b4 60             	[r3+0x0] = r4
  1085fe:    00 ef 80 3f       	[r3+0x0] |= 0x100
  108602:    44 21             	r4 = 0x1
  108604:    91 e8 00 02       	if (r1 != r2) {
  108608:    44 20             		r4 = 0x0
                               	}
  10860a:    00 eb 21 00       	{r5, r0} = [r0+]
  10860e:    56 a4             	r6 = r5 << 0x4
  108610:    f6 30             	r6 += -0x30
  108612:    64 19             	r4 |= r6
  108614:    55 a8             	r5 = r5 << 0x8
  108616:    35 e1 00 5e       	r5 = r5 + -0x200
  10861a:    54 19             	r4 |= r5
  10861c:    00 b0             	r0 = r0 << 0x10
  10861e:    40 19             	r0 |= r4
  108620:    30 21             	r0 |= 0x2
  108622:    d0 e9 01 00       	d[sp] = r1_r0
  108626:    82 22             	[sp+8] = r2
  108628:    88 80             	r0 = sp + 0
  10862a:    b0 61             	[r3+0x4] = r0
  10862c:    00 ef 01 30       	[r3+0x0] |= 0x1
  108630:    30 60             	r0 = [r3+0x0] 
  108632:    50 e8 fd 39       	if ((r0 & 0x80) == 0) goto -0x6 <_rfifft_wrap+0x40 : 108630 >
  108636:    00 ef 40 30       	[r3+0x0] |= 0x40
  10863a:    02 83             	sp += 0xc
  10863c:    56 04             	{pc, r6-r4} = [sp++]


_rififft_wrap:
  10863e:    75 04             	[--sp] = {rets, r5, r4}
  108640:    e2 9d             	sp += -0xc
  108642:    44 20             	r4 = 0x0
  108644:    c3 ff 00 19 1f 00 	r3 = 0x1f1900 <__stub_VecMinScalar_float_c_f_c+0xE1904 : 1f1900 >
  10864a:    b4 60             	[r3+0x0] = r4
  10864c:    00 ef 80 3f       	[r3+0x0] |= 0x100
  108650:    44 21             	r4 = 0x1
  108652:    91 e8 00 02       	if (r1 != r2) {
  108656:    44 20             		r4 = 0x0
                               	}
  108658:    00 eb 21 00       	{r5, r0} = [r0+]
  10865c:    55 a8             	r5 = r5 << 0x8
  10865e:    35 e1 00 5e       	r5 = r5 + -0x200
  108662:    54 19             	r4 |= r5
  108664:    00 b0             	r0 = r0 << 0x10
  108666:    40 19             	r0 |= r4
  108668:    40 e1 26 00       	r0 = r0 | 0x26
  10866c:    d0 e9 01 00       	d[sp] = r1_r0
  108670:    82 22             	[sp+8] = r2
  108672:    88 80             	r0 = sp + 0
  108674:    b0 61             	[r3+0x4] = r0
  108676:    00 ef 01 30       	[r3+0x0] |= 0x1
  10867a:    30 60             	r0 = [r3+0x0] 
  10867c:    50 e8 fd 39       	if ((r0 & 0x80) == 0) goto -0x6 <_rififft_wrap+0x3C : 10867a >
  108680:    00 ef 40 30       	[r3+0x0] |= 0x40
  108684:    02 83             	sp += 0xc
  108686:    55 04             	{pc, r5, r4} = [sp++]


find_max_exp:
  108688:    42 20             	r2 = 0x0
  10868a:    51 03             	rep 0xc r1 {
  10868c:    01 05             		r1 = [r0++=0x4] 
  10868e:    71 e1 00 14       		r1 = r1 & 0x7FFFFFFF
  108692:    11 ee 80 02       		iff (r1 > r2) {
  108696:    12 16             			r2 = r1
                               	}
                               	}
  108698:    01 fc f7 01       	if (r1 > 0x0) goto -0x12 <find_max_exp+0x2 : 10868a >
  10869c:    92 e8 00 41       	if (r2 != r1) {
  1086a0:    b2 e1 a0 2b       		r2 = uextra(r2, p:0x17, l:0x8)
  1086a4:    e2 21             		r2 += -0x7f
                               	}
  1086a6:    20 16             	r0 = r2
  1086a8:    80 00             	rts


gen_pow_2:
  1086aa:    41 20             	r1 = 0x0
  1086ac:    5a 3f             	r2 = 0x7f
  1086ae:    22 1c             	r2 = r2 + r0
  1086b0:    a2 e9 00 00       	if (r2 < 0x0) {
  1086b4:    42 20             		r2 = 0x0
                               	}
  1086b6:    22 ec fe 00       	if (r2 > 0xfe) {
  1086ba:    7a 3e             		r2 = 0xfe
                               	}
  1086bc:    a1 e1 a0 2b       	r1 <= insert(r2, p:0x17, l:0x8)
  1086c0:    10 16             	r0 = r1
  1086c2:    80 00             	rts


_rflfft_wrap:
  1086c4:    78 04             	[--sp] = {rets, r8-r4}
  1086c6:    e2 9d             	sp += -0xc
  1086c8:    04 15             	r5_r4 = r1_r0
  1086ca:    23 d6             	r3 = r2  #
  1086cc:    46 60             		 r6 = [r4+0x0] 
  1086ce:    50 16             	r0 = r5
  1086d0:    61 16             	r1 = r6
  1086d2:    61 9a             	call -0x4c <find_max_exp : 108688 >
  1086d4:    a6 e0 0f 00       	r6 = 0xF - r0
  1086d8:    c0 14             	r8 = 0
  1086da:    b6 ee 00 00       	ifs (r6 <= 0x0) {
  1086de:    46 20             		r6 = 0x0
                               	}
  1086e0:    60 16             	r0 = r6
  1086e2:    71 83             	call -0x3a <gen_pow_2 : 1086aa >
  1086e4:    07 16             	r7 = r0
  1086e6:    a0 e0 00 60       	r0 = 0x0 - r6
  1086ea:    61 9f             	call -0x42 <gen_pow_2 : 1086aa >
  1086ec:    32 d6             	r2 = r3  #
  1086ee:    41 60             		 r1 = [r4+0x0] 
  1086f0:    51 03             	rep 0xc r1 {
  1086f2:    56 05             		r6 = [r5++=0x4] 
  1086f4:    3f e5 62 67       		r6 = r6 * r7 (f)
  1086f8:    3f e5 1f 66       		r6 = ftoi(r6) (trunc)
  1086fc:    a6 05             		[r2++=0x4] = r6
                               	}
  1086fe:    01 fc f7 01       	if (r1 > 0x0) goto -0x12 <_rflfft_wrap+0x2C : 1086f0 >
  108702:    c1 ff 00 19 1f 00 	r1 = 0x1f1900 <__stub_VecMinScalar_float_c_f_c+0xE1904 : 1f1900 >
  108708:    d0 ec 11 80       	[r1+0x0] = r8
  10870c:    00 ef 80 1f       	[r1+0x0] |= 0x100
  108710:    45 61             	r5 = [r4+0x4] 
  108712:    52 a4             	r2 = r5 << 0x4
  108714:    36 f1 d0 2f       	r6 = r2 + -0x30  #
  108718:    42 60             		 r2 = [r4+0x0] 
  10871a:    54 a8             	r4 = r5 << 0x8
  10871c:    34 e1 00 4e       	r4 = r4 + -0x200
  108720:    64 19             	r4 |= r6
  108722:    25 b0             	r5 = r2 << 0x10
  108724:    54 19             	r4 |= r5
  108726:    44 e1 03 40       	r4 = r4 | 0x3
  10872a:    84 20             	[sp] = r4
  10872c:    83 21             	[sp+4] = r3
  10872e:    83 22             	[sp+8] = r3
  108730:    8c 80             	r4 = sp + 0
  108732:    94 61             	[r1+0x4] = r4
  108734:    00 ef 01 10       	[r1+0x0] |= 0x1
  108738:    14 60             	r4 = [r1+0x0] 
  10873a:    54 e8 fd 39       	if ((r4 & 0x80) == 0) goto -0x6 <_rflfft_wrap+0x74 : 108738 >
  10873e:    00 ef 40 10       	[r1+0x0] |= 0x40
  108742:    29 82             	r1 = r2 + 0x2
  108744:    32 16             	r2 = r3
  108746:    51 03             	rep 0xc r1 {
  108748:    34 05             		r4 = [r3++=0x4] 
  10874a:    3f e5 8f 44       		r4 = itof(r4)
  10874e:    3f e5 42 40       		r4 = r4 * r0 (f)
  108752:    a4 05             		[r2++=0x4] = r4
                               	}
  108754:    01 fc f7 01       	if (r1 > 0x0) goto -0x12 <_rflfft_wrap+0x82 : 108746 >
  108758:    02 83             	sp += 0xc
  10875a:    58 04             	{pc, r8-r4} = [sp++]


_riflfft_wrap:
  10875c:    79 04             	[--sp] = {rets, r9-r4}
  10875e:    e2 9d             	sp += -0xc
  108760:    09 d6             	r9 = r0  #
  108762:    06 60             		 r6 = [r0+0x0] 
  108764:    25 16             	r5 = r2
  108766:    17 16             	r7 = r1
  108768:    70 16             	r0 = r7
  10876a:    61 16             	r1 = r6
  10876c:    41 8d             	call -0xe6 <find_max_exp : 108688 >
  10876e:    a6 e0 0f 00       	r6 = 0xF - r0
  108772:    c0 14             	r8 = 0
  108774:    b6 ee 00 00       	ifs (r6 <= 0x0) {
  108778:    46 20             		r6 = 0x0
                               	}
  10877a:    60 16             	r0 = r6
  10877c:    41 96             	call -0xd4 <gen_pow_2 : 1086aa >
  10877e:    a1 e0 00 60       	r1 = 0x0 - r6
  108782:    06 16             	r6 = r0
  108784:    10 16             	r0 = r1
  108786:    41 91             	call -0xde <gen_pow_2 : 1086aa >
  108788:    d0 ec 90 10       	r1 = [r9+0x0]
  10878c:    c1 22             	r1 += 0x2
  10878e:    72 16             	r2 = r7
  108790:    73 16             	r3 = r7
  108792:    51 03             	rep 0xc r1 {
  108794:    24 05             		r4 = [r2++=0x4] 
  108796:    3f e5 42 46       		r4 = r4 * r6 (f)
  10879a:    3f e5 1f 44       		r4 = ftoi(r4) (trunc)
  10879e:    b4 05             		[r3++=0x4] = r4
                               	}
  1087a0:    01 fc f7 01       	if (r1 > 0x0) goto -0x12 <_riflfft_wrap+0x36 : 108792 >
  1087a4:    c1 ff 00 19 1f 00 	r1 = 0x1f1900 <__stub_VecMinScalar_float_c_f_c+0xE1904 : 1f1900 >
  1087aa:    d0 ec 11 80       	[r1+0x0] = r8
  1087ae:    00 ef 80 1f       	[r1+0x0] |= 0x100
  1087b2:    46 21             	r6 = 0x1
  1087b4:    97 e8 00 05       	if (r7 != r5) {
  1087b8:    46 20             		r6 = 0x0
                               	}
  1087ba:    50 ec 90 20       	r3_r2 = d[r9+0x0]
  1087be:    33 a8             	r3 = r3 << 0x8
  1087c0:    33 e1 00 3e       	r3 = r3 + -0x200
  1087c4:    63 19             	r3 |= r6
  1087c6:    24 b0             	r4 = r2 << 0x10
  1087c8:    43 19             	r3 |= r4
  1087ca:    43 e1 26 30       	r3 = r3 | 0x26
  1087ce:    83 20             	[sp] = r3
  1087d0:    87 21             	[sp+4] = r7
  1087d2:    85 22             	[sp+8] = r5
  1087d4:    8b 80             	r3 = sp + 0
  1087d6:    93 61             	[r1+0x4] = r3
  1087d8:    00 ef 01 10       	[r1+0x0] |= 0x1
  1087dc:    13 60             	r3 = [r1+0x0] 
  1087de:    53 e8 fd 39       	if ((r3 & 0x80) == 0) goto -0x6 <_riflfft_wrap+0x80 : 1087dc >
  1087e2:    00 ef 40 10       	[r1+0x0] |= 0x40
  1087e6:    51 16             	r1 = r5
  1087e8:    53 16             	r3 = r5
  1087ea:    04 16             	r4 = r0
  1087ec:    52 03             	rep 0xc r2 {
  1087ee:    16 05             		r6 = [r1++=0x4] 
  1087f0:    3f e5 8f 66       		r6 = itof(r6)
  1087f4:    3f e5 62 64       		r6 = r6 * r4 (f)
  1087f8:    b6 05             		[r3++=0x4] = r6
                               	}
  1087fa:    02 fc f7 01       	if (r2 > 0x0) goto -0x12 <_riflfft_wrap+0x90 : 1087ec >
  1087fe:    05 e8 0d 70       	if (r7 == r5) goto 0x1a <_riflfft_wrap+0xC0 : 10881c >
  108802:    d0 ec 90 10       	r1 = [r9+0x0]
  108806:    c1 22             	r1 += 0x2
  108808:    72 16             	r2 = r7
  10880a:    51 03             	rep 0xc r1 {
  10880c:    73 05             		r3 = [r7++=0x4] 
  10880e:    3f e5 8f 33       		r3 = itof(r3)
  108812:    3f e5 32 30       		r3 = r3 * r0 (f)
  108816:    a3 05             		[r2++=0x4] = r3
                               	}
  108818:    01 fc f7 01       	if (r1 > 0x0) goto -0x12 <_riflfft_wrap+0xAE : 10880a >
  10881c:    02 83             	sp += 0xc
  10881e:    59 04             	{pc, r9-r4} = [sp++]


eq_cos_sin:
  108820:    75 04             	[--sp] = {rets, r5, r4}			  ## eq_design.c:43:0
  108822:    a1 f0 18 10       	r1 = 0x18 - r1  #			  ## eq_design.c:46:28
  108826:    04 23             		 r4 = [sp+12]
  108828:    40 ea 18 40       	[r4+0x0] = 0x18			  ## eq_design.c:47:9
  10882c:    cc e1 03 41       	r4 = r0 >< r1 (sat)			  ## eq_design.c:48:5
  108830:    ff e1 03 44       	r5_r4 = copex(r5_r4) (0x3)			  ## eq_design.c:48:5
  108834:    a4 60             	[r2+0x0] = r4			  ## eq_design.c:48:5
  108836:    b5 60             	[r3+0x0] = r5			  ## eq_design.c:48:5
  108838:    55 04             	{pc, r5, r4} = [sp++]			  ## eq_design.c:61:1


eq_exp:
  10883a:    78 04             	[--sp] = {rets, r8-r4}			  ## eq_design.c:65:0
  10883c:    d0 ec 30 80       	r8 = [r3+0x0]			  ## eq_design.c:94:13
  108840:    a1 e0 18 10       	r1 = 0x18 - r1			  ## eq_design.c:69:28
  108844:    cc e1 03 61       	r6 = r0 >< r1 (sat)			  ## eq_design.c:71:5
  108848:    47 20             	r7 = 0x0			  ## eq_design.c:71:5
  10884a:    ff e1 0f 66       	r7_r6 = copex(r7_r6) (0xf)			  ## eq_design.c:71:5
  10884e:    b8 e1 18 7d       	r8 = uextra(r7, p:0x1a, l:0x6)			  ## eq_design.c:71:5
  108852:    b7 e1 69 70       	r7 = sextra(r7, p:0x0, l:0x1a)			  ## eq_design.c:71:5
  108856:    f8 e1 60 77       	r7_r6 = r6 * r7 (s)			  ## eq_design.c:71:5
  10885a:    80 e1 00 57       	r5 = clz(r7)			  ## eq_design.c:71:5
  10885e:    25 e8 20 40       	if (r5 == 0x20) {			  ## eq_design.c:71:5
  108862:    80 e1 00 46       		r4 = clz(r6)			  ## eq_design.c:71:5
  108866:    55 1d             		r5 = r5 + r4
                               	}			  ## eq_design.c:71:5
  108868:    f5 3d             	r5 += -0x23			  ## eq_design.c:71:5
  10886a:    dc e1 03 65       	r7_r6 ><= r5 (sat)			  ## eq_design.c:71:5
  10886e:    08 e1 18 80       	r8 = r8 + 0x18			  ## eq_design.c:71:5
  108872:    58 18             	r8 += r5			  ## eq_design.c:71:5
  108874:    60 16             	r0 = r6			  ## eq_design.c:71:5
  108876:    d0 ec 31 80       	[r3+0x0] = r8			  ## eq_design.c:71:5
  10887a:    a0 60             	[r2+0x0] = r0			  ## eq_design.c:71:5
  10887c:    58 04             	{pc, r8-r4} = [sp++]			  ## eq_design.c:102:1


eq_db2mag:
  10887e:    d9 e8 d0 00       	[--sp] = {rets, r7, r6, r4}			  ## eq_design.c:128:0
  108882:    e2 9e             	sp += -0x8			  ## eq_design.c:128:0
  108884:    24 16             	r4 = r2			  ## eq_design.c:128:0
  108886:    00 51             	if (r0 == 0) goto 0x22 <eq_db2mag+0x2C : 1088aa >			  ## eq_design.c:128:0
  108888:    c2 ff c6 91 d7 01 	r2 = 0x1d791c6 <__stub_VecMinScalar_float_c_f_c+0x1C691CA : 1d791c6 >			  ## eq_design.c:135:24
  10888e:    f8 e1 00 72       	r7_r6 = r0 * r2 (s)			  ## eq_design.c:135:24
  108892:    d0 e1 0c 69       	r7_r6 >>= 0x1c			  ## eq_design.c:135:34
  108896:    8a 84             	r2 = sp + 4
  108898:    8b 80             	r3 = sp + 0
  10889a:    60 16             	r0 = r6			  ## eq_design.c:136:5
  10889c:    61 8e             	call -0x64 <eq_exp : 10883a >			  ## eq_design.c:136:5
  10889e:    01 20             	r1 = [sp]			  ## eq_design.c:137:25
  1088a0:    49 de             	r1 = r4 - r1  #			  ## eq_design.c:137:23
  1088a2:    00 21             		 r0 = [sp+4]			  ## eq_design.c:141:15
  1088a4:    cc e1 03 01       	r0 = r0 >< r1 (sat)			  ## eq_design.c:138:5
  1088a8:    04 82             	goto 0x4 <eq_db2mag+0x30 : 1088ae >
  1088aa:    40 21             	r0 = 0x1			  ## eq_design.c:130:18
  1088ac:    40 1a             	r0 <<= r4			  ## eq_design.c:130:18
  1088ae:    02 82             	sp += 0x8
  1088b0:    d5 e8 d0 00       	{pc, r7, r6, r4} = [sp++]			  ## eq_design.c:145:1


eq_sqrt:
  1088b4:    78 04             	[--sp] = {rets, r8-r4}			  ## eq_design.c:149:0
  1088b6:    c8 ff 10 48 50 0b 	r8 = 0xb504810 <__stub_VecMinScalar_float_c_f_c+0xB3F4814 : b504810 >			  ## eq_design.c:157:5
  1088bc:    c5 ff 72 e8 51 13 	r5 = 0x1351e872 <__stub_VecMinScalar_float_c_f_c+0x1340E876 : 1351e872 >			  ## eq_design.c:157:5
  1088c2:    06 16             	r6 = r0			  ## eq_design.c:157:5
  1088c4:    14 16             	r4 = r1			  ## eq_design.c:157:5
  1088c6:    a4 ed 00 00       	ifs (r4 < 0x0) {			  ## eq_design.c:157:5
  1088ca:    a4 e0 00 40       		r4 = 0x0 - r4
                               	}			  ## eq_design.c:157:5
  1088ce:    ff e1 1b 66       	r7_r6 = copex(r7_r6) (0x1b)			  ## eq_design.c:157:5
  1088d2:    54 e8 04 00       	if ((r4 & 0x1) == 0) goto 0x8 <eq_sqrt+0x2A : 1088de >			  ## eq_design.c:157:5
  1088d6:    f8 e1 60 78       	r7_r6 = r6 * r8 (s)			  ## eq_design.c:157:5
  1088da:    de e1 6c 69       	r6 = r7_r6 >> 0x1c (s)			  ## eq_design.c:157:5
  1088de:    f8 e1 60 75       	r7_r6 = r6 * r5 (s)			  ## eq_design.c:157:5
  1088e2:    9c a1             	r4 = r1 >>> 0x1			  ## eq_design.c:157:5
  1088e4:    49 8f             	r1 = r4 + 0xf			  ## eq_design.c:157:5
  1088e6:    de e1 6c 01       	r0 = r7_r6 >> 0x1c (u)			  ## eq_design.c:157:5
  1088ea:    a0 60             	[r2+0x0] = r0			  ## eq_design.c:157:5
  1088ec:    b1 60             	[r3+0x0] = r1			  ## eq_design.c:157:5
  1088ee:    58 04             	{pc, r8-r4} = [sp++]			  ## eq_design.c:189:1


design_lp:
  1088f0:    77 04             	[--sp] = {rets, r7-r4}			  ## eq_design.c:283:0
  1088f2:    e2 9c             	sp += -0x10			  ## eq_design.c:283:0
  1088f4:    34 16             	r4 = r3			  ## eq_design.c:283:0
  1088f6:    25 16             	r5 = r2			  ## eq_design.c:283:0
  1088f8:    12 16             	r2 = r1			  ## eq_design.c:283:0
  1088fa:    8b 84             	r3 = sp + 4			  ## eq_design.c:283:0
  1088fc:    89 bf             	r1 = r0 >>> 0x1f			  ## eq_design.c:288:14
  1088fe:    d0 f1 09 01       	r1_r0 <<= 0x19  #			  ## eq_design.c:288:14
  108902:    83 20             		 [sp] = r3			  ## eq_design.c:292:5
  108904:    f6 e1 00 72       	r7_r6 = r1_r0 / r2 (s)			  ## eq_design.c:288:14
  108908:    8a 88             	r2 = sp + 8
  10890a:    8b 8c             	r3 = sp + 12
  10890c:    41 38             	r1 = 0x18			  ## eq_design.c:292:5
  10890e:    60 16             	r0 = r6			  ## eq_design.c:292:5
  108910:    41 87             	call -0xf2 <eq_cos_sin : 108820 >			  ## eq_design.c:292:5
  108912:    00 22             	r0 = [sp+8]			  ## eq_design.c:293:13
  108914:    89 bf             	r1 = r0 >>> 0x1f			  ## eq_design.c:293:13
  108916:    d0 e1 07 01       	r1_r0 <<= 0x17			  ## eq_design.c:293:13
  10891a:    f6 e1 00 35       	r3_r2 = r1_r0 / r5 (s)			  ## eq_design.c:293:13
  10891e:    e0 e0 80 27       	r0 = r2 + 0x1000000			  ## eq_design.c:294:19
  108922:    60 e0 80 7b       	r7 = 0x10000			  ## eq_design.c:295:19
  108926:    46 20             	r6 = 0x0
  108928:    f6 f1 60 10       	r1_r0 = r7_r6 / r0 (s)  #			  ## eq_design.c:295:19
  10892c:    05 23             		 r5 = [sp+12]			  ## eq_design.c:296:27
  10892e:    56 a1             	r6 = r5 << 0x1			  ## eq_design.c:297:17
  108930:    f8 e1 60 70       	r7_r6 = r6 * r0 (s)			  ## eq_design.c:297:17
  108934:    d0 e1 0a 69       	r7_r6 >>= 0x1a			  ## eq_design.c:297:17
  108938:    e2 f0 7f 24       	r2 = r2 + 0xFF000000  #			  ## eq_design.c:298:17
  10893c:    c6 63             		 [r4+0xc] = r6			  ## eq_design.c:297:15
  10893e:    f8 e1 20 30       	r3_r2 = r2 * r0 (s)			  ## eq_design.c:298:17
  108942:    d0 e1 0a 29       	r3_r2 >>= 0x1a			  ## eq_design.c:298:17
  108946:    a2 f0 80 57       	r2 = 0x1000000 - r5  #			  ## eq_design.c:296:25
  10894a:    c2 61             		 [r4+0x4] = r2			  ## eq_design.c:298:15
  10894c:    aa a1             	r2 = r2 >>> 0x1			  ## eq_design.c:299:17
  10894e:    f8 e1 20 10       	r1_r0 = r2 * r0 (s)			  ## eq_design.c:299:17
  108952:    d0 e1 0a 09       	r1_r0 >>= 0x1a			  ## eq_design.c:299:17
  108956:    c0 60             	[r4+0x0] = r0			  ## eq_design.c:299:15
  108958:    44 ea 00 48       	[r4+0x10] = 0x800000			  ## eq_design.c:300:15
  10895c:    42 ea 80 48       	[r4+0x8] = 0x400000			  ## eq_design.c:301:15
  108960:    02 84             	sp += 0x10			  ## eq_design.c:301:15
  108962:    57 04             	{pc, r7-r4} = [sp++]			  ## eq_design.c:302:1


design_hp:
  108964:    77 04             	[--sp] = {rets, r7-r4}			  ## eq_design.c:306:0
  108966:    e2 9c             	sp += -0x10			  ## eq_design.c:306:0
  108968:    34 16             	r4 = r3			  ## eq_design.c:306:0
  10896a:    25 16             	r5 = r2			  ## eq_design.c:306:0
  10896c:    12 16             	r2 = r1			  ## eq_design.c:306:0
  10896e:    8b 84             	r3 = sp + 4			  ## eq_design.c:306:0
  108970:    89 bf             	r1 = r0 >>> 0x1f			  ## eq_design.c:311:14
  108972:    d0 f1 09 01       	r1_r0 <<= 0x19  #			  ## eq_design.c:311:14
  108976:    83 20             		 [sp] = r3			  ## eq_design.c:315:5
  108978:    f6 e1 00 72       	r7_r6 = r1_r0 / r2 (s)			  ## eq_design.c:311:14
  10897c:    8a 88             	r2 = sp + 8
  10897e:    8b 8c             	r3 = sp + 12
  108980:    41 38             	r1 = 0x18			  ## eq_design.c:315:5
  108982:    60 16             	r0 = r6			  ## eq_design.c:315:5
  108984:    bf ea 4c ff       	call -0x168 <eq_cos_sin : 108820 >			  ## eq_design.c:315:5
  108988:    00 22             	r0 = [sp+8]			  ## eq_design.c:316:13
  10898a:    89 bf             	r1 = r0 >>> 0x1f			  ## eq_design.c:316:13
  10898c:    d0 e1 07 01       	r1_r0 <<= 0x17			  ## eq_design.c:316:13
  108990:    f6 e1 00 35       	r3_r2 = r1_r0 / r5 (s)			  ## eq_design.c:316:13
  108994:    e0 e0 80 27       	r0 = r2 + 0x1000000			  ## eq_design.c:317:19
  108998:    60 e0 80 7b       	r7 = 0x10000			  ## eq_design.c:318:19
  10899c:    46 20             	r6 = 0x0
  10899e:    f6 f1 60 10       	r1_r0 = r7_r6 / r0 (s)  #			  ## eq_design.c:318:19
  1089a2:    05 23             		 r5 = [sp+12]			  ## eq_design.c:319:27
  1089a4:    56 a1             	r6 = r5 << 0x1			  ## eq_design.c:320:17
  1089a6:    f8 e1 60 70       	r7_r6 = r6 * r0 (s)			  ## eq_design.c:320:17
  1089aa:    d0 e1 0a 69       	r7_r6 >>= 0x1a			  ## eq_design.c:320:17
  1089ae:    e2 f0 7f 24       	r2 = r2 + 0xFF000000  #			  ## eq_design.c:321:17
  1089b2:    c6 63             		 [r4+0xc] = r6			  ## eq_design.c:320:15
  1089b4:    f8 e1 20 30       	r3_r2 = r2 * r0 (s)			  ## eq_design.c:321:17
  1089b8:    d0 e1 0a 29       	r3_r2 >>= 0x1a			  ## eq_design.c:321:17
  1089bc:    e2 f0 80 57       	r2 = r5 + 0x1000000  #			  ## eq_design.c:319:25
  1089c0:    c2 61             		 [r4+0x4] = r2			  ## eq_design.c:321:15
  1089c2:    aa a1             	r2 = r2 >>> 0x1			  ## eq_design.c:322:17
  1089c4:    f8 e1 20 10       	r1_r0 = r2 * r0 (s)			  ## eq_design.c:322:17
  1089c8:    d0 e1 0a 09       	r1_r0 >>= 0x1a			  ## eq_design.c:322:17
  1089cc:    c0 60             	[r4+0x0] = r0			  ## eq_design.c:322:15
  1089ce:    c0 ff 00 00 80 ff 	r0 = 0xff800000 <__stub_VecMinScalar_float_c_f_c+0xFF6F0004 : ff800000 >			  ## eq_design.c:323:15
  1089d4:    c0 64             	[r4+0x10] = r0			  ## eq_design.c:323:15
  1089d6:    42 ea 80 48       	[r4+0x8] = 0x400000			  ## eq_design.c:324:15
  1089da:    02 84             	sp += 0x10			  ## eq_design.c:324:15
  1089dc:    57 04             	{pc, r7-r4} = [sp++]			  ## eq_design.c:325:1


design_pe:
  1089de:    7b 04             	[--sp] = {rets, r11-r4}			  ## eq_design.c:329:0
  1089e0:    e2 9c             	sp += -0x10			  ## eq_design.c:329:0
  1089e2:    24 15             	r5_r4 = r3_r2			  ## eq_design.c:329:0
  1089e4:    12 16             	r2 = r1			  ## eq_design.c:329:0
  1089e6:    8b 84             	r3 = sp + 4			  ## eq_design.c:329:0
  1089e8:    89 bf             	r1 = r0 >>> 0x1f			  ## eq_design.c:334:14
  1089ea:    d0 f1 09 01       	r1_r0 <<= 0x19  #			  ## eq_design.c:334:14
  1089ee:    83 20             		 [sp] = r3			  ## eq_design.c:339:5
  1089f0:    f6 e1 00 72       	r7_r6 = r1_r0 / r2 (s)			  ## eq_design.c:334:14
  1089f4:    8a 88             	r2 = sp + 8
  1089f6:    8b 8c             	r3 = sp + 12
  1089f8:    41 38             	r1 = 0x18			  ## eq_design.c:339:5
  1089fa:    60 16             	r0 = r6			  ## eq_design.c:339:5
  1089fc:    bf ea 10 ff       	call -0x1e0 <eq_cos_sin : 108820 >			  ## eq_design.c:339:5
  108a00:    00 22             	r0 = [sp+8]			  ## eq_design.c:340:13
  108a02:    89 bf             	r1 = r0 >>> 0x1f			  ## eq_design.c:340:13
  108a04:    d0 e1 07 01       	r1_r0 <<= 0x17			  ## eq_design.c:340:13
  108a08:    f6 e1 00 95       	r9_r8 = r1_r0 / r5 (s)			  ## eq_design.c:340:13
  108a0c:    46 20             	r6 = 0x0			  ## eq_design.c:340:13
  108a0e:    87 16             	r7 = r8
  108a10:    6a 15             	r11_r10 = r7_r6			  ## eq_design.c:342:23
  108a12:    d0 e1 08 ac       	r11_r10 >>>= 0x8			  ## eq_design.c:342:23
  108a16:    c8 a1             	r0 = r4 >>> 0x1			  ## eq_design.c:341:24
  108a18:    41 34             	r1 = 0x14			  ## eq_design.c:341:9
  108a1a:    42 38             	r2 = 0x18			  ## eq_design.c:341:9
  108a1c:    bf ea 2f ff       	call -0x1a2 <eq_db2mag : 10887e >			  ## eq_design.c:341:9
  108a20:    f6 e1 a0 30       	r3_r2 = r11_r10 / r0 (s)			  ## eq_design.c:342:23
  108a24:    e1 e0 80 27       	r1 = r2 + 0x1000000			  ## eq_design.c:344:19
  108a28:    60 e0 80 7b       	r7 = 0x10000			  ## eq_design.c:345:19
  108a2c:    f6 f1 60 51       	r5_r4 = r7_r6 / r1 (s)  #			  ## eq_design.c:345:19
  108a30:    06 23             		 r6 = [sp+12]			  ## eq_design.c:346:17
  108a32:    66 a1             	r6 = r6 << 0x1			  ## eq_design.c:346:17
  108a34:    f8 f1 60 b4       	r11_r10 = r6 * r4 (s)  #			  ## eq_design.c:346:17
  108a38:    01 2d             		 r1 = [sp+52]			  ## eq_design.c:346:17
  108a3a:    d0 e1 0a a9       	r11_r10 >>= 0x1a			  ## eq_design.c:346:17
  108a3e:    d0 ec 1d a0       	[r1+0xc] = r10			  ## eq_design.c:346:15
  108a42:    e2 e0 7f 24       	r2 = r2 + 0xFF000000			  ## eq_design.c:347:17
  108a46:    f8 e1 20 34       	r3_r2 = r2 * r4 (s)			  ## eq_design.c:347:17
  108a4a:    d0 e1 0a 29       	r3_r2 >>= 0x1a			  ## eq_design.c:347:17
  108a4e:    f8 f1 80 30       	r3_r2 = r8 * r0 (s)  #			  ## eq_design.c:343:23
  108a52:    92 61             		 [r1+0x4] = r2			  ## eq_design.c:347:15
  108a54:    d0 e1 08 29       	r3_r2 >>= 0x18			  ## eq_design.c:343:23
  108a58:    e0 e0 80 27       	r0 = r2 + 0x1000000			  ## eq_design.c:348:19
  108a5c:    f8 e1 00 54       	r5_r4 = r0 * r4 (s)			  ## eq_design.c:349:17
  108a60:    d0 e1 0a 49       	r5_r4 >>= 0x1a			  ## eq_design.c:349:17
  108a64:    a4 f0 00 60       	r4 = 0x0 - r6  #			  ## eq_design.c:350:17
  108a68:    94 60             		 [r1+0x0] = r4			  ## eq_design.c:349:15
  108a6a:    cd bf             	r5 = r4 >>> 0x1f			  ## eq_design.c:350:17
  108a6c:    d0 e1 06 41       	r5_r4 <<= 0x16			  ## eq_design.c:350:17
  108a70:    f6 e1 40 50       	r5_r4 = r5_r4 / r0 (s)			  ## eq_design.c:350:17
  108a74:    a2 f0 80 27       	r2 = 0x1000000 - r2  #			  ## eq_design.c:351:17
  108a78:    94 64             		 [r1+0x10] = r4			  ## eq_design.c:350:15
  108a7a:    ab bf             	r3 = r2 >>> 0x1f			  ## eq_design.c:351:17
  108a7c:    d0 e1 06 21       	r3_r2 <<= 0x16			  ## eq_design.c:351:17
  108a80:    f6 e1 20 30       	r3_r2 = r3_r2 / r0 (s)			  ## eq_design.c:351:17
  108a84:    92 62             	[r1+0x8] = r2			  ## eq_design.c:351:15
  108a86:    02 84             	sp += 0x10			  ## eq_design.c:351:15
  108a88:    5b 04             	{pc, r11-r4} = [sp++]			  ## eq_design.c:352:1


eq_stable_check:
  108a8a:    74 04             	[--sp] = {rets, r4}			  ## eq_design.c:450:0
  108a8c:    e2 9e             	sp += -0x8			  ## eq_design.c:450:0
  108a8e:    04 63             	r4 = [r0+0xc] 			  ## eq_design.c:453:14
  108a90:    a1 f0 00 40       	r1 = 0x0 - r4  #			  ## eq_design.c:453:13
  108a94:    00 61             		 r0 = [r0+0x4] 			  ## eq_design.c:454:14
  108a96:    f8 e1 10 31       	r3_r2 = r1 * r1 (s)			  ## eq_design.c:455:15
  108a9a:    d0 e1 06 29       	r3_r2 >>= 0x16			  ## eq_design.c:455:15
  108a9e:    a1 e0 00 00       	r1 = 0x0 - r0			  ## eq_design.c:454:13
  108aa2:    10 a2             	r0 = r1 << 0x2			  ## eq_design.c:456:20
  108aa4:    20 1e             	r0 = r2 - r0			  ## eq_design.c:456:15
  108aa6:    80 21             	[sp+4] = r0			  ## eq_design.c:456:9
  108aa8:    f0 fe 1e fe       	ifs (r0 <= -0x1) goto 0x3c <eq_stable_check+0x5E : 108ae8 >			  ## eq_design.c:456:9
  108aac:    8a 84             	r2 = sp + 4
  108aae:    8b 80             	r3 = sp + 0
  108ab0:    41 36             	r1 = 0x16			  ## eq_design.c:465:9
  108ab2:    bf ea ff fe       	call -0x202 <eq_sqrt : 1088b4 >			  ## eq_design.c:465:9
  108ab6:    d0 e9 00 00       	r1_r0 = d[sp]			  ## eq_design.c:466:9
  108aba:    a0 e0 16 00       	r0 = 0x16 - r0			  ## eq_design.c:466:9
  108abe:    cc e1 13 10       	r1 = r1 >< r0 (sat)			  ## eq_design.c:466:9
  108ac2:    48 de             	r0 = r4 - r1  #			  ## eq_design.c:468:25
  108ac4:    81 21             		 [sp+4] = r1			  ## eq_design.c:466:9
  108ac6:    8a bf             	r2 = r0 >>> 0x1f			  ## eq_design.c:468:32
  108ac8:    88 a1             	r0 = r0 >>> 0x1			  ## eq_design.c:468:32
  108aca:    20 18             	r0 += r2			  ## eq_design.c:468:32
  108acc:    0a 19             	r2 ^= r0			  ## eq_design.c:468:32
  108ace:    10 3f             	r0 = -0x1
  108ad0:    2c ff 80 28 0e 00 	ifs (r2 > 0x400000) goto 0x1c <eq_stable_check+0x68 : 108af2 >
  108ad6:    41 18             	r1 += r4			  ## eq_design.c:467:25
  108ad8:    9a bf             	r2 = r1 >>> 0x1f			  ## eq_design.c:467:32
  108ada:    99 a1             	r1 = r1 >>> 0x1			  ## eq_design.c:467:32
  108adc:    21 18             	r1 += r2			  ## eq_design.c:467:32
  108ade:    29 19             	r1 ^= r2			  ## eq_design.c:467:32
  108ae0:    2d ff 80 18 05 00 	ifs (r1 <= 0x400000) goto 0xa <eq_stable_check+0x66 : 108af0 >
  108ae6:    04 85             	goto 0xa <eq_stable_check+0x68 : 108af2 >
  108ae8:    10 3f             	r0 = -0x1
  108aea:    2c ff 80 18 01 00 	ifs (r1 > 0x400000) goto 0x2 <eq_stable_check+0x68 : 108af2 >
  108af0:    40 20             	r0 = 0x0
  108af2:    02 82             	sp += 0x8
  108af4:    54 04             	{pc, r4} = [sp++]			  ## eq_design.c:480:1


get_g729dec_ops:
  108af6:    c0 ff 3c 99 10 00 	r0 = 0x10993c <g729dec_context : 10993c >			  ## decoder.c:176:0
  108afc:    80 00             	rts			  ## decoder.c:177:2


Init_Post_Filter:
  108afe:    74 04             	[--sp] = {rets, r4}			  ## pst.c:62:0
  108b00:    01 e1 98 03       	r1 = r0 + 0x398			  ## pst.c:62:0
  108b04:    1a 94             	r2 = r1 + 0x14			  ## pst.c:68:7
  108b06:    43 20             	r3 = 0x0			  ## pst.c:68:7
  108b08:    44 20             	r4 = 0x0			  ## pst.c:68:7
  108b0a:    04 83             	goto 0x6 <Init_Post_Filter+0x14 : 108b12 >			  ## pst.c:68:7
  108b0c:    d8 ed 29 34       	h[r2+r4<<1] = r3			  ## pst.c:68:49
  108b10:    c4 21             	r4 += 0x1			  ## pst.c:68:27
  108b12:    84 f8 fb 15       	if (r4 != 0xa) goto -0xa <Init_Post_Filter+0xE : 108b0c >
  108b16:    02 e1 28 10       	r2 = r1 + 0x28			  ## pst.c:69:38
  108b1a:    43 e0 04 01       	r3 = 0x104 <ISR_SIZE+0x4 : 104 >			  ## pst.c:69:12
  108b1e:    d8 ec 0b 23       	[r0+r3<<2] = r2			  ## pst.c:69:21
  108b22:    c1 22             	r1 += 0x2			  ## pst.c:72:7
  108b24:    82 14             	r3_r2 = 0			  ## pst.c:72:7
  108b26:    04 83             	goto 0x6 <Init_Post_Filter+0x30 : 108b2e >			  ## pst.c:72:7
  108b28:    d8 ed 19 23       	h[r1+r3<<1] = r2			  ## pst.c:72:54
  108b2c:    c3 21             	r3 += 0x1			  ## pst.c:72:2
  108b2e:    83 f8 fb 13       	if (r3 != 0x9) goto -0xa <Init_Post_Filter+0x2A : 108b28 >
  108b32:    41 e0 0c 02       	r1 = 0x20c <var_bss_size+0x104 : 20c >			  ## pst.c:75:12
  108b36:    42 e0 00 40       	r2 = 0x4000 <os_code_size+0x1EAB : 4000 >			  ## pst.c:75:22
  108b3a:    d8 ed 09 21       	h[r0+r1<<1] = r2			  ## pst.c:75:22
  108b3e:    54 04             	{pc, r4} = [sp++]			  ## pst.c:78:1


Lsp_expand_1_2:
  108b40:    76 04             	[--sp] = {rets, r6-r4}			  ## lspgetq.c:54:0
  108b42:    42 20             	r2 = 0x0			  ## lspgetq.c:54:0
  108b44:    04 90             	goto 0x20 <Lsp_expand_1_2+0x26 : 108b66 >			  ## lspgetq.c:54:0
  108b46:    23 a1             	r3 = r2 << 0x1			  ## lspgetq.c:59:12
  108b48:    03 18             	r3 += r0			  ## lspgetq.c:59:12
  108b4a:    3c 61             	r4 = h[r3+0x2] (u)			  ## lspgetq.c:59:22
  108b4c:    35 06             	r5 = h[r3++=0x2] (u)			  ## lspgetq.c:59:12
  108b4e:    56 1f             	r6 = r5 - r4			  ## lspgetq.c:59:20
  108b50:    ee 17             	r6 = r6.l (s)			  ## lspgetq.c:60:9
  108b52:    16 18             	r6 += r1			  ## lspgetq.c:60:13
  108b54:    ee a1             	r6 = r6 >>> 0x1			  ## lspgetq.c:62:10
  108b56:    36 ed 01 c0       	ifs (r6 >= 0x1) {			  ## lspgetq.c:62:10
  108b5a:    d5 1f             		r5 = r5 - r6			  ## lspgetq.c:63:27
  108b5c:    d8 ed 09 52       		h[r0+r2<<1] = r5			  ## lspgetq.c:63:16
  108b60:    64 18             		r4 += r6			  ## lspgetq.c:64:24
  108b62:    bc 60             		h[r3+0x0] = r4
                               	}			  ## lspgetq.c:64:16
  108b64:    c2 21             	r2 += 0x1			  ## lspgetq.c:58:3
  108b66:    82 f8 ee 13       	if (r2 != 0x9) goto -0x24 <Lsp_expand_1_2+0x6 : 108b46 >
  108b6a:    56 04             	{pc, r6-r4} = [sp++]			  ## lspgetq.c:68:1


Get_lsp_pol:
  108b6c:    7c 04             	[--sp] = {rets, r12-r4}			  ## lpcfunc.c:82:0
  108b6e:    40 ea 80 17       	[r1+0x0] = 0x1000000			  ## lpcfunc.c:89:5
  108b72:    54 ed 00 20       	r2 = h[r0+0x0] (s)			  ## lpcfunc.c:91:18
  108b76:    22 aa             	r2 = r2 << 0xa			  ## lpcfunc.c:91:16
  108b78:    a2 e0 00 20       	r2 = 0x0 - r2			  ## lpcfunc.c:91:16
  108b7c:    0c f1 08 10       	r12 = r1 + 0x8  #			  ## lpcfunc.c:93:3
  108b80:    92 61             		 [r1+0x4] = r2			  ## lpcfunc.c:91:5
  108b82:    49 e0 ff ff       	r9 = -0x1 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEF0002 : fffffffffffffffe >
  108b86:    4b e0 02 00       	r11 = 0x2 <TLB_BEGIN+0x2 : 2 >
  108b8a:    c2 14             	r10 = 0
  108b8c:    14 8c             	goto 0x58 <Get_lsp_pol+0x7A : 108be6 >
  108b8e:    d7 ec c8 4f       	r4 = [r12+-0x8]			  ## lpcfunc.c:98:8
  108b92:    08 e1 04 00       	r8 = r0 + 0x4
  108b96:    d0 ec c1 40       	[r12+0x0] = r4			  ## lpcfunc.c:98:6
  108b9a:    a7 16             	r7 = r10			  ## lpcfunc.c:104:9
  108b9c:    04 8f             	goto 0x1e <Get_lsp_pol+0x50 : 108bbc >			  ## lpcfunc.c:104:9
  108b9e:    72 a2             	r2 = r7 << 0x2			  ## lpcfunc.c:100:16
  108ba0:    12 18             	r2 += r1			  ## lpcfunc.c:100:16
  108ba2:    02 eb 48 00       	{r6, r3} = [r2+]			  ## lpcfunc.c:102:21
  108ba6:    54 ed 04 50       	r5 = h[r0+0x4] (s)			  ## lpcfunc.c:102:29
  108baa:    43 18             	r3 += r4			  ## lpcfunc.c:104:9
  108bac:    f8 e1 50 56       	r5_r4 = r5 * r6 (s)			  ## lpcfunc.c:102:27
  108bb0:    d0 e1 0e 48       	r5_r4 >>= 0xe			  ## lpcfunc.c:103:15
  108bb4:    33 1f             	r3 = r3 - r4			  ## lpcfunc.c:105:9
  108bb6:    64 d6             	r4 = r6  #			  ## lpcfunc.c:104:9
  108bb8:    a3 62             		 [r2+0x8] = r3			  ## lpcfunc.c:105:9
  108bba:    ff 3f             	r7 += -0x1			  ## lpcfunc.c:100:3
  108bbc:    f7 f8 ef ff       	if (r7 != -0x1) goto -0x22 <Get_lsp_pol+0x32 : 108b9e >
  108bc0:    54 ed 04 00       	r0 = h[r0+0x4] (s)			  ## lpcfunc.c:107:10
  108bc4:    c0 e1 92 20       	r2 = r9 << 0x2			  ## lpcfunc.c:100:8
  108bc8:    c2 18             	r2 += r12			  ## lpcfunc.c:100:8
  108bca:    00 aa             	r0 = r0 << 0xa			  ## lpcfunc.c:107:17
  108bcc:    68 e8 02 20       	[r2+0x0] -= r0			  ## lpcfunc.c:107:6
  108bd0:    c0 e1 b2 00       	r0 = r11 << 0x2			  ## lpcfunc.c:108:5
  108bd4:    b4 e0 20 c0       	r12 = r2 + r0			  ## lpcfunc.c:108:5
  108bd8:    0a e1 01 a0       	r10 = r10 + 0x1			  ## lpcfunc.c:96:2
  108bdc:    39 e1 ff 9f       	r9 = r9 + -0x1			  ## lpcfunc.c:96:2
  108be0:    0b e1 01 b0       	r11 = r11 + 0x1			  ## lpcfunc.c:96:2
  108be4:    80 16             	r0 = r8
  108be6:    8b f8 d2 0d       	if (r11 != 0x6) goto -0x5c <Get_lsp_pol+0x22 : 108b8e >
  108bea:    5c 04             	{pc, r12-r4} = [sp++]			  ## lpcfunc.c:114:1


Lsp_Az:
  108bec:    77 04             	[--sp] = {rets, r7-r4}			  ## lpcfunc.c:28:0
  108bee:    e2 94             	sp += -0x30			  ## lpcfunc.c:28:0
  108bf0:    14 16             	r4 = r1			  ## lpcfunc.c:28:0
  108bf2:    05 16             	r5 = r0			  ## lpcfunc.c:28:0
  108bf4:    89 98             	r1 = sp + 24			  ## lpcfunc.c:28:0
  108bf6:    51 9a             	call -0x8c <Get_lsp_pol : 108b6c >			  ## lpcfunc.c:33:2
  108bf8:    58 82             	r0 = r5 + 0x2			  ## lpcfunc.c:34:15
  108bfa:    89 80             	r1 = sp + 0			  ## lpcfunc.c:34:15
  108bfc:    51 97             	call -0x92 <Get_lsp_pol : 108b6c >			  ## lpcfunc.c:34:2
  108bfe:    40 20             	r0 = 0x0
  108c00:    04 8c             	goto 0x18 <Lsp_Az+0x2E : 108c1a >
  108c02:    01 a2             	r1 = r0 << 0x2			  ## lpcfunc.c:38:12
  108c04:    8a 98             	r2 = sp + 24			  ## lpcfunc.c:38:12
  108c06:    12 18             	r2 += r1			  ## lpcfunc.c:38:12
  108c08:    8d 80             	r5 = sp + 0			  ## lpcfunc.c:38:12
  108c0a:    51 d8             	r1 += r5  #			  ## lpcfunc.c:39:12
  108c0c:    23 64             		 r3 = [r2+0x10] 			  ## lpcfunc.c:38:12
  108c0e:    15 64             	r5 = [r1+0x10] 			  ## lpcfunc.c:39:12
  108c10:    68 e8 14 23       	[r2+0x14] += r3			  ## lpcfunc.c:38:9
  108c14:    68 e8 16 15       	[r1+0x14] -= r5			  ## lpcfunc.c:39:9
  108c18:    f8 3f             	r0 += -0x1			  ## lpcfunc.c:36:2
  108c1a:    09 85             	r1 = r0 + 0x5			  ## lpcfunc.c:36:16
  108c1c:    01 fd f1 03       	ifs (r1 >= 0x1) goto -0x1e <Lsp_Az+0x16 : 108c02 >
  108c20:    40 e0 00 10       	r0 = 0x1000 <usb_code_size+0x4C5 : 1000 >			  ## lpcfunc.c:42:7
  108c24:    c8 60             	h[r4+0x0] = r0			  ## lpcfunc.c:42:7
  108c26:    40 21             	r0 = 0x1			  ## lpcfunc.c:42:7
  108c28:    41 34             	r1 = 0x14
  108c2a:    14 82             	goto 0x44 <Lsp_Az+0x84 : 108c70 >
  108c2c:    8a 98             	r2 = sp + 24
  108c2e:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## lpcfunc.c:55:8
  108c32:    8b 80             	r3 = sp + 0			  ## lpcfunc.c:55:8
  108c34:    d8 ec 3a 30       	r3 = [r3+r0<<2]			  ## lpcfunc.c:55:16
  108c38:    b7 1c             	r7 = r3 + r2			  ## lpcfunc.c:55:14
  108c3a:    30 e4 00 57       	r5 = abs(r7)			  ## lpcfunc.c:55:14
  108c3e:    15 e1 00 50       	r5 = r5 + 0x1000			  ## lpcfunc.c:57:15
  108c42:    d6 ad             	r6 = r5 >> 0xd			  ## lpcfunc.c:57:22
  108c44:    a5 e0 00 60       	r5 = 0x0 - r6			  ## lpcfunc.c:58:22
  108c48:    37 ed 00 00       	ifs (r7 >= 0x0) {			  ## lpcfunc.c:58:22
  108c4c:    65 16             		r5 = r6
                               	}			  ## lpcfunc.c:58:7
  108c4e:    ae 1e             	r6 = r2 - r3			  ## lpcfunc.c:60:14
  108c50:    30 e4 00 26       	r2 = abs(r6)			  ## lpcfunc.c:60:14
  108c54:    12 e1 00 20       	r2 = r2 + 0x1000			  ## lpcfunc.c:62:16
  108c58:    a3 ad             	r3 = r2 >> 0xd			  ## lpcfunc.c:62:24
  108c5a:    a2 e0 00 30       	r2 = 0x0 - r3			  ## lpcfunc.c:63:22
  108c5e:    d8 ed 49 50       	h[r4+r0<<1] = r5			  ## lpcfunc.c:57:8
  108c62:    36 ed 00 00       	ifs (r6 >= 0x0) {			  ## lpcfunc.c:57:8
  108c66:    32 16             		r2 = r3
                               	}			  ## lpcfunc.c:63:7
  108c68:    d8 ed 41 21       	h[r4+r1] = r2			  ## lpcfunc.c:62:8
  108c6c:    f9 3e             	r1 += -0x2			  ## lpcfunc.c:43:2
  108c6e:    c0 21             	r0 += 0x1			  ## lpcfunc.c:43:31
  108c70:    80 f8 dc 0d       	if (r0 != 0x6) goto -0x48 <Lsp_Az+0x40 : 108c2c >
  108c74:    02 8c             	sp += 0x30
  108c76:    57 04             	{pc, r7-r4} = [sp++]			  ## lpcfunc.c:68:1


Dec_lag3:
  108c78:    75 04             	[--sp] = {rets, r5, r4}			  ## dec_lag3.c:29:0
  108c7a:    11 43             	if (r1 == 0) goto 0x46 <Dec_lag3+0x4A : 108cc2 >			  ## dec_lag3.c:29:0
  108c7c:    29 60             	r1 = h[r2+0x0] (u)			  ## dec_lag3.c:57:15
  108c7e:    f9 3b             	r1 += -0x5			  ## dec_lag3.c:57:18
  108c80:    9c 17             	r4 = r1.l (s)			  ## dec_lag3.c:57:18
  108c82:    b4 ee 14 00       	ifs (r4 <= 0x14) {
  108c86:    41 34             		r1 = 0x14
                               	}			  ## dec_lag3.c:58:9
  108c88:    1c 89             	r4 = r1 + 0x9			  ## dec_lag3.c:63:21
  108c8a:    cd 17             	r5 = r4.l (s)			  ## dec_lag3.c:63:21
  108c8c:    64 26             	r4 = 0x86			  ## dec_lag3.c:74:12
  108c8e:    b5 ee 8f 00       	ifs (r5 <= 0x8f) {			  ## dec_lag3.c:74:12
  108c92:    14 16             		r4 = r1
                               	}			  ## dec_lag3.c:74:12
  108c94:    41 e0 56 55       	r1 = 0x5556 <os_code_size+0x3401 : 5556 >			  ## dec_lag3.c:74:8
  108c98:    01 1b             	r1 *= r0			  ## dec_lag3.c:73:20
  108c9a:    c5 ff ac aa 00 00 	r5 = 0xaaac <os_code_size+0x8957 : aaac >			  ## dec_lag3.c:74:8
  108ca0:    51 18             	r1 += r5			  ## dec_lag3.c:74:8
  108ca2:    c5 ff 00 00 ff ff 	r5 = 0xffff0000 <__stub_VecMinScalar_float_c_f_c+0xFFEE0004 : ffff0000 >			  ## dec_lag3.c:74:8
  108ca8:    d1 19             	r1 &= r5			  ## dec_lag3.c:73:29
  108caa:    f1 e0 80 1b       	r1 = r1 - 0x10000			  ## dec_lag3.c:74:8
  108cae:    99 b0             	r1 = r1 >>> 0x10			  ## dec_lag3.c:74:8
  108cb0:    14 18             	r4 += r1			  ## dec_lag3.c:74:10
  108cb2:    ac 60             	h[r2+0x0] = r4			  ## dec_lag3.c:74:6
  108cb4:    12 3d             	r2 = -0x3			  ## dec_lag3.c:77:23
  108cb6:    21 1b             	r1 *= r2			  ## dec_lag3.c:77:23
  108cb8:    10 18             	r0 += r1			  ## dec_lag3.c:77:19
  108cba:    e1 e0 01 21       	r1 = r2 + 0x10001			  ## dec_lag3.c:77:19
  108cbe:    10 18             	r0 += r1			  ## dec_lag3.c:77:23
  108cc0:    04 94             	goto 0x28 <Dec_lag3+0x72 : 108cea >			  ## dec_lag3.c:77:23
  108cc2:    10 fe 0f 88       	ifs (r0 > 0xc4) goto 0x1e <Dec_lag3+0x6C : 108ce4 >			  ## dec_lag3.c:35:9
  108cc6:    41 e0 ab 2a       	r1 = 0x2aab <os_code_size+0x955 : 2aaa >			  ## dec_lag3.c:39:26
  108cca:    01 1b             	r1 *= r0			  ## dec_lag3.c:39:26
  108ccc:    44 e0 56 55       	r4 = 0x5556 <os_code_size+0x3401 : 5556 >			  ## dec_lag3.c:39:26
  108cd0:    41 18             	r1 += r4			  ## dec_lag3.c:39:26
  108cd2:    91 af             	r1 = r1 >> 0xf			  ## dec_lag3.c:39:33
  108cd4:    c1 33             	r1 += 0x13			  ## dec_lag3.c:39:38
  108cd6:    99 d7             	r1 = r1.l (s)  #			  ## dec_lag3.c:43:23
  108cd8:    a9 60             		 h[r2+0x0] = r1			  ## dec_lag3.c:39:11
  108cda:    12 3d             	r2 = -0x3			  ## dec_lag3.c:43:21
  108cdc:    21 1b             	r1 *= r2			  ## dec_lag3.c:43:21
  108cde:    10 18             	r0 += r1			  ## dec_lag3.c:43:21
  108ce0:    c8 3a             	r0 += 0x3a			  ## dec_lag3.c:43:31
  108ce2:    04 83             	goto 0x6 <Dec_lag3+0x72 : 108cea >			  ## dec_lag3.c:43:31
  108ce4:    e0 30             	r0 += -0x70			  ## dec_lag3.c:47:19
  108ce6:    a8 60             	h[r2+0x0] = r0			  ## dec_lag3.c:47:11
  108ce8:    40 20             	r0 = 0x0			  ## dec_lag3.c:47:11
  108cea:    b8 60             	h[r3+0x0] = r0
  108cec:    55 04             	{pc, r5, r4} = [sp++]			  ## dec_lag3.c:82:1


norm_l:
  108cee:    00 44             	if (r0 == 0) goto 0x8 <norm_l+0xA : 108cf8 >			  ## basop32.c:1949:0
  108cf0:    f0 f8 04 fe       	if (r0 != -0x1) goto 0x8 <norm_l+0xE : 108cfc >			  ## basop32.c:1949:0
  108cf4:    40 3f             	r0 = 0x1f			  ## basop32.c:1949:0
  108cf6:    04 8b             	goto 0x16 <norm_l+0x20 : 108d0e >			  ## basop32.c:1949:0
  108cf8:    40 20             	r0 = 0x0			  ## basop32.c:1949:0
  108cfa:    04 89             	goto 0x12 <norm_l+0x20 : 108d0e >			  ## basop32.c:1949:0
  108cfc:    89 bf             	r1 = r0 >>> 0x1f			  ## basop32.c:1964:8
  108cfe:    09 19             	r1 ^= r0			  ## basop32.c:1964:8
  108d00:    40 20             	r0 = 0x0
  108d02:    04 82             	goto 0x4 <norm_l+0x1A : 108d08 >
  108d04:    c0 21             	r0 += 0x1			  ## basop32.c:1968:59
  108d06:    11 a1             	r1 = r1 << 0x1			  ## basop32.c:1970:12
  108d08:    2b ff 80 14 fb ff 	ifs (r1 < 0x40000000) goto -0xa <norm_l+0x16 : 108d04 >
  108d0e:    88 17             	r0 = r0.l (s)			  ## basop32.c:1978:2
  108d10:    80 00             	rts			  ## basop32.c:1978:2


Log2:
  108d12:    75 04             	[--sp] = {rets, r5, r4}			  ## dspfunc.c:84:0
  108d14:    13 16             	r3 = r1			  ## dspfunc.c:84:0
  108d16:    04 16             	r4 = r0			  ## dspfunc.c:84:0
  108d18:    84 fe 1d 00       	ifs (r4 <= 0x0) goto 0x3a <Log2+0x44 : 108d56 >			  ## dspfunc.c:84:0
  108d1c:    71 88             	call -0x30 <norm_l : 108cee >			  ## dspfunc.c:95:9
  108d1e:    c8 e1 40 10       	r1 = r4 << r0			  ## dspfunc.c:96:13
  108d22:    9c b9             	r4 = r1 >>> 0x19			  ## dspfunc.c:100:11
  108d24:    44 b0             	r4 = r4 << 0x10			  ## dspfunc.c:105:18
  108d26:    f4 e0 00 49       	r4 = r4 - 0x200000			  ## dspfunc.c:105:18
  108d2a:    cc af             	r4 = r4 >>> 0xf			  ## dspfunc.c:105:18
  108d2c:    c5 ff ae a9 10 00 	r5 = 0x10a9ae <tablog : 10a9ae >			  ## dspfunc.c:105:18
  108d32:    54 18             	r4 += r5			  ## dspfunc.c:105:18
  108d34:    a0 f0 1e 00       	r0 = 0x1E - r0  #			  ## dspfunc.c:98:18
  108d38:    4d 61             		 r5 = h[r4+0x2] (u)			  ## dspfunc.c:106:21
  108d3a:    4c 60             	r4 = h[r4+0x0] (u)			  ## dspfunc.c:105:18
  108d3c:    48 df             	r0 = r4 - r5  #			  ## dspfunc.c:106:19
  108d3e:    b8 60             		 h[r3+0x0] = r0			  ## dspfunc.c:98:13
  108d40:    88 17             	r0 = r0.l (s)			  ## dspfunc.c:107:16
  108d42:    91 a9             	r1 = r1 >> 0x9			  ## dspfunc.c:107:19
  108d44:    c3 ff fe ff 00 00 	r3 = 0xfffe <os_code_size+0xDEA9 : fffe >			  ## dspfunc.c:107:19
  108d4a:    b1 19             	r1 &= r3			  ## dspfunc.c:107:19
  108d4c:    10 1b             	r0 *= r1			  ## dspfunc.c:107:21
  108d4e:    41 b0             	r1 = r4 << 0x10			  ## dspfunc.c:105:29
  108d50:    10 1e             	r0 = r1 - r0			  ## dspfunc.c:107:13
  108d52:    80 b0             	r0 = r0 >> 0x10			  ## dspfunc.c:109:18
  108d54:    04 82             	goto 0x4 <Log2+0x48 : 108d5a >
  108d56:    40 20             	r0 = 0x0
  108d58:    b8 60             	h[r3+0x0] = r0			  ## dspfunc.c:90:15
  108d5a:    a8 60             	h[r2+0x0] = r0			  ## dspfunc.c:91:15
  108d5c:    55 04             	{pc, r5, r4} = [sp++]			  ## dspfunc.c:112:1


L_shr:
  108d5e:    10 04             	[--sp] = rets			  ## basop32.c:1298:0
  108d60:    f1 fe 05 fe       	ifs (r1 <= -0x1) goto 0xa <L_shr+0x10 : 108d6e >			  ## basop32.c:1298:0
  108d64:    b1 ed 1f 10       	ifs (r1 < 0x1f) {			  ## basop32.c:1298:0
  108d68:    98 1a             		r0 >>>= r1
                               	} else {			  ## basop32.c:1298:0
  108d6a:    88 bf             		r0 = r0 >>> 0x1f
                               	}			  ## basop32.c:1315:16
  108d6c:    00 04             	pc = [sp++]			  ## basop32.c:1332:2
  108d6e:    b1 ee e0 0f       	ifs (r1 <= -0x20) {
  108d72:    11 20             		r1 = -0x20
                               	}			  ## basop32.c:1303:7
  108d74:    a1 e0 00 10       	r1 = 0x0 - r1			  ## basop32.c:1305:10
  108d78:    99 17             	r1 = r1.l (s)			  ## basop32.c:1306:15
  108d7a:    01 81             	call 0x2 <L_shl : 108d7e >			  ## basop32.c:1306:15
  108d7c:    00 04             	pc = [sp++]			  ## basop32.c:1332:2


L_shl:
  108d7e:    74 04             	[--sp] = {rets, r4}			  ## basop32.c:1220:0
  108d80:    81 fd 13 02       	ifs (r1 < 0x1) goto 0x26 <L_shl+0x2C : 108daa >			  ## basop32.c:1224:6
  108d84:    42 20             	r2 = 0x0
  108d86:    c3 ff ff ff ff 7f 	r3 = 0x7fffffff <__stub_VecMinScalar_float_c_f_c+0x7FEF0002 : 7ffffffe >
  108d8c:    04 86             	goto 0xc <L_shl+0x1C : 108d9a >
  108d8e:    2b ff 40 04 14 00 	ifs (r0 < 0xc0000000) goto 0x28 <L_shl+0x3E : 108dbc >
  108d94:    00 a1             	r0 = r0 << 0x1			  ## basop32.c:1253:11
  108d96:    f9 3f             	r1 += -0x1			  ## basop32.c:1236:24
  108d98:    02 16             	r2 = r0
  108d9a:    9c 17             	r4 = r1.l (s)			  ## basop32.c:1236:15
  108d9c:    84 fd 10 02       	ifs (r4 < 0x1) goto 0x20 <L_shl+0x42 : 108dc0 >			  ## basop32.c:1236:15
  108da0:    2b ff 80 04 f4 ff 	ifs (r0 < 0x40000000) goto -0x18 <L_shl+0x10 : 108d8e >
  108da6:    32 16             	r2 = r3
  108da8:    04 8b             	goto 0x16 <L_shl+0x42 : 108dc0 >
  108daa:    b1 ee e0 0f       	ifs (r1 <= -0x20) {
  108dae:    11 20             		r1 = -0x20
                               	}			  ## basop32.c:1226:7
  108db0:    a1 e0 00 10       	r1 = 0x0 - r1			  ## basop32.c:1228:10
  108db4:    99 17             	r1 = r1.l (s)			  ## basop32.c:1229:15
  108db6:    61 93             	call -0x5a <L_shr : 108d5e >			  ## basop32.c:1229:15
  108db8:    02 16             	r2 = r0			  ## basop32.c:1229:15
  108dba:    04 82             	goto 0x4 <L_shl+0x42 : 108dc0 >
  108dbc:    60 e0 00 24       	r2 = 0x80000000
  108dc0:    20 16             	r0 = r2			  ## basop32.c:1260:2
  108dc2:    54 04             	{pc, r4} = [sp++]			  ## basop32.c:1260:2


Weight_Az:
  108dc4:    75 04             	[--sp] = {rets, r5, r4}			  ## lpcfunc.c:180:0
  108dc6:    14 d6             	r4 = r1  #			  ## lpcfunc.c:180:0
  108dc8:    0b 60             		 r3 = h[r0+0x0] (u)			  ## lpcfunc.c:183:10
  108dca:    ab 60             	h[r2+0x0] = r3			  ## lpcfunc.c:183:8
  108dcc:    43 21             	r3 = 0x1			  ## lpcfunc.c:183:8
  108dce:    04 8d             	goto 0x1a <Weight_Az+0x26 : 108dea >
  108dd0:    d8 ed 0a 53       	r5 = h[r0+r3<<1] (s)			  ## lpcfunc.c:187:12
  108dd4:    45 1b             	r5 *= r4			  ## lpcfunc.c:187:17
  108dd6:    e5 e0 80 5c       	r5 = r5 + 0x4000			  ## lpcfunc.c:187:23
  108dda:    d5 af             	r5 = r5 >> 0xf			  ## lpcfunc.c:187:36
  108ddc:    d8 ed 29 53       	h[r2+r3<<1] = r5			  ## lpcfunc.c:187:9
  108de0:    14 1b             	r4 *= r1			  ## lpcfunc.c:188:16
  108de2:    e4 e0 80 4c       	r4 = r4 + 0x4000			  ## lpcfunc.c:188:22
  108de6:    cc af             	r4 = r4 >>> 0xf			  ## lpcfunc.c:188:35
  108de8:    c3 21             	r3 += 0x1			  ## lpcfunc.c:185:20
  108dea:    83 f8 f1 15       	if (r3 != 0xa) goto -0x1e <Weight_Az+0xC : 108dd0 >
  108dee:    54 ed 04 01       	r0 = h[r0+0x14] (s)			  ## lpcfunc.c:190:11
  108df2:    40 1b             	r0 *= r4			  ## lpcfunc.c:190:16
  108df4:    e0 e0 80 0c       	r0 = r0 + 0x4000			  ## lpcfunc.c:190:22
  108df8:    80 af             	r0 = r0 >> 0xf			  ## lpcfunc.c:190:35
  108dfa:    a8 6a             	h[r2+0x14] = r0			  ## lpcfunc.c:190:8
  108dfc:    55 04             	{pc, r5, r4} = [sp++]			  ## lpcfunc.c:193:1


abs_s:
  108dfe:    30 e4 00 00       	r0 = abs(r0)			  ## basop32.c:343:0
  108e02:    41 e0 ff 7f       	r1 = 0x7fff <os_code_size+0x5EA9 : 7ffe >			  ## basop32.c:352:6
  108e06:    35 e4 01 01       	r0 = smin(r0, r1)			  ## basop32.c:352:6
  108e0a:    88 17             	r0 = r0.l (s)			  ## basop32.c:359:2
  108e0c:    80 00             	rts			  ## basop32.c:359:2


div_s:
  108e0e:    42 e0 ff 7f       	r2 = 0x7fff <os_code_size+0x5EA9 : 7ffe >			  ## basop32.c:1892:0
  108e12:    01 e8 0a 00       	if (r0 == r1) goto 0x14 <div_s+0x1C : 108e2a >			  ## basop32.c:1892:0
  108e16:    01 49             	if (r1 == 0) goto 0x12 <div_s+0x1C : 108e2a >			  ## basop32.c:1892:0
  108e18:    01 ee 07 00       	ifs (r0 > r1) goto 0xe <div_s+0x1C : 108e2a >			  ## basop32.c:1892:0
  108e1c:    90 e1 10 30       	r3 = r1 | r0			  ## basop32.c:1892:0
  108e20:    33 ed 00 40       	ifs (r3 >= 0x0) {			  ## basop32.c:1892:0
  108e24:    00 af             		r0 = r0 << 0xf			  ## basop32.c:1908:17
  108e26:    f4 e1 01 21       		r2 = r0 / r1 (s)
                               	}			  ## basop32.c:1909:19
  108e2a:    a8 17             	r0 = r2.l (s)			  ## basop32.c:1913:1
  108e2c:    80 00             	rts			  ## basop32.c:1913:1


mult_r:
  108e2e:    10 1b             	r0 *= r1			  ## basop32.c:1164:0
  108e30:    e0 e0 80 0c       	r0 = r0 + 0x4000			  ## basop32.c:1169:16
  108e34:    88 af             	r0 = r0 >>> 0xf			  ## basop32.c:1171:16
  108e36:    c1 ff 00 00 ff ff 	r1 = 0xffff0000 <__stub_VecMinScalar_float_c_f_c+0xFFEE0004 : ffff0000 >			  ## basop32.c:1175:17
  108e3c:    01 19             	r1 |= r0			  ## basop32.c:1175:17
  108e3e:    30 ea 80 0b       	if ((r0 & 0x10000) != 0) {
  108e42:    10 16             		r0 = r1
                               	}			  ## basop32.c:1173:6
  108e44:    78 e0 01 00       	r0 = sat16(r0) (s)			  ## basop32.c:212:2
  108e48:    88 17             	r0 = r0.l (s)			  ## basop32.c:1182:2
  108e4a:    80 00             	rts			  ## basop32.c:1182:2


L_mult:
  108e4c:    10 1b             	r0 *= r1			  ## basop32.c:684:0
  108e4e:    08 a1             	r0 = r0 <<< 0x1			  ## basop32.c:692:2
  108e50:    80 00             	rts			  ## basop32.c:694:2


L_abs:
  108e52:    20 e8 00 14       	if (r0 == 0x80000000) {			  ## basop32.c:1704:0
  108e56:    c0 ff ff ff ff 7f 		r0 = 0x7fffffff
                               	} else { <__stub_VecMinScalar_float_c_f_c+0x7FEF0002 : 7ffffffe >			  ## basop32.c:1726:2
  108e5c:    30 e4 00 00       		r0 = abs(r0)
                               	}			  ## basop32.c:1713:14
  108e60:    80 00             	rts			  ## basop32.c:1713:7


sub:
  108e62:    08 1e             	r0 = r0 - r1			  ## basop32.c:301:0
  108e64:    78 e0 01 10       	r1 = sat16(r0) (s)			  ## basop32.c:309:2
  108e68:    98 17             	r0 = r1.l (s)			  ## basop32.c:311:2
  108e6a:    80 00             	rts			  ## basop32.c:311:2


shr:
  108e6c:    10 04             	[--sp] = rets			  ## basop32.c:558:0
  108e6e:    f1 fe 06 fe       	ifs (r1 <= -0x1) goto 0xc <shr+0x12 : 108e7e >			  ## basop32.c:558:0
  108e72:    b1 ed 0f 10       	ifs (r1 < 0xf) {			  ## basop32.c:558:0
  108e76:    c8 e1 03 11       		r1 = r0 >>> r1
                               	} else {			  ## basop32.c:558:0
  108e7a:    89 af             		r1 = r0 >>> 0xf
                               	}			  ## basop32.c:576:14
  108e7c:    04 9f             	goto 0x3e <shr+0x50 : 108ebc >			  ## basop32.c:576:14
  108e7e:    b1 ee f0 0f       	ifs (r1 <= -0x10) {
  108e82:    11 30             		r1 = -0x10
                               	}			  ## basop32.c:563:7
  108e84:    a2 e0 00 10       	r2 = 0x0 - r1			  ## basop32.c:565:10
  108e88:    a9 17             	r1 = r2.l (s)			  ## basop32.c:565:10
  108e8a:    52 e8 0f 7a       	if ((r2 & 0x8000) != 0) goto 0x1e <shr+0x40 : 108eac >			  ## basop32.c:565:10
  108e8e:    00 42             	if (r0 == 0) goto 0x4 <shr+0x28 : 108e94 >
  108e90:    01 fe 05 1e       	ifs (r1 > 0xf) goto 0xa <shr+0x32 : 108e9e >
  108e94:    c8 e1 00 11       	r1 = r0 << r1			  ## basop32.c:500:25
  108e98:    9a 17             	r2 = r1.l (s)			  ## basop32.c:502:46
  108e9a:    02 e8 0f 10       	if (r1 == r2) goto 0x1e <shr+0x50 : 108ebc >			  ## basop32.c:502:46
  108e9e:    41 e0 ff 7f       	r1 = 0x7fff <os_code_size+0x5EA9 : 7ffe >			  ## basop32.c:504:14
  108ea2:    b0 ee 00 00       	ifs (r0 <= 0x0) {			  ## basop32.c:504:14
  108ea6:    41 e0 00 80       		r1 = -0x8000
                               	} <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEE8004 : ffffffffffff8000 >			  ## basop32.c:504:14
  108eaa:    04 88             	goto 0x10 <shr+0x50 : 108ebc >			  ## basop32.c:504:14
  108eac:    b1 ee f0 0f       	ifs (r1 <= -0x10) {
  108eb0:    11 30             		r1 = -0x10
                               	}			  ## basop32.c:489:7
  108eb2:    a1 e0 00 10       	r1 = 0x0 - r1			  ## basop32.c:491:10
  108eb6:    99 17             	r1 = r1.l (s)			  ## basop32.c:492:13
  108eb8:    61 99             	call -0x4e <shr : 108e6c >			  ## basop32.c:492:13
  108eba:    01 16             	r1 = r0			  ## basop32.c:492:13
  108ebc:    98 17             	r0 = r1.l (s)			  ## basop32.c:594:2
  108ebe:    00 04             	pc = [sp++]			  ## basop32.c:594:2


g729_dec_run:
  108ec0:    7f 04             	[--sp] = {rets, r15-r4}			  ## decoder.c:61:0
  108ec2:    a2 83             	sp += -0x174			  ## decoder.c:61:0
  108ec4:    06 e1 44 04       	r6 = r0 + 0x444			  ## decoder.c:61:0
  108ec8:    0c d6             	r12 = r0  #			  ## decoder.c:61:0
  108eca:    6a 42             		 r2 = b[r6+0x2] (u)			  ## decoder.c:69:24
  108ecc:    07 e1 fc 03       	r7 = r0 + 0x3fc			  ## decoder.c:69:24
  108ed0:    02 54             	if (r2 == 0) goto 0x28 <g729_dec_run+0x3A : 108efa >			  ## decoder.c:69:24
  108ed2:    74 d6             	r4 = r7  #			  ## decoder.c:72:84
  108ed4:    69 43             		 r1 = b[r6+0x3] (u)			  ## decoder.c:72:91
  108ed6:    c1 d8             	r1 += r12  #			  ## decoder.c:71:66
  108ed8:    73 6b             		 r3 = [r7+0x2c] 			  ## decoder.c:72:48
  108eda:    d0 ec 42 02       	r0 = [++r4=0x20]			  ## decoder.c:72:84
  108ede:    01 e1 98 10       	r1 = r1 + 0x98			  ## decoder.c:72:91
  108ee2:    c3 00             	call r3			  ## decoder.c:72:19
  108ee4:    69 43             	r1 = b[r6+0x3] (u)			  ## decoder.c:73:30
  108ee6:    01 18             	r1 += r0			  ## decoder.c:73:30
  108ee8:    e9 43             	b[r6+0x3] = r1			  ## decoder.c:73:30
  108eea:    69 42             	r1 = b[r6+0x2] (u)			  ## decoder.c:74:35
  108eec:    11 1e             	r1 = r1 - r0			  ## decoder.c:74:35
  108eee:    e9 42             	b[r6+0x2] = r1			  ## decoder.c:74:35
  108ef0:    40 20             	r0 = 0x0			  ## decoder.c:74:35
  108ef2:    61 ff ff 10 ae 04 	if ((r1 & 0xFF) != 0) goto 0x95c <g729_dec_run+0x994 : 109854 >
  108ef8:    04 82             	goto 0x4 <g729_dec_run+0x3E : 108efe >
  108efa:    04 e1 20 70       	r4 = r7 + 0x20			  ## decoder.c:81:22
  108efe:    c6 d4             	r14 = 0  #
  108f00:    75 69             		 r5 = [r7+0x24] 			  ## decoder.c:81:33
  108f02:    40 60             	r0 = [r4+0x0] 			  ## decoder.c:81:68
  108f04:    71 6e             	r1 = [r7+0x38] 			  ## decoder.c:81:92
  108f06:    ca 90             	r2 = sp + 80			  ## decoder.c:81:92
  108f08:    43 2a             	r3 = 0xa			  ## decoder.c:81:4
  108f0a:    d4 e9 01 e0       	[sp] = r14			  ## decoder.c:81:4
  108f0e:    c5 00             	call r5			  ## decoder.c:81:4
  108f10:    01 16             	r1 = r0			  ## decoder.c:81:4
  108f12:    50 20             	r0 = 0x40
  108f14:    0b ff 0a 10 9d 04 	ifs (r1 < 0xa) goto 0x93a <g729_dec_run+0x994 : 109854 >
  108f1a:    86 22             	[sp+8] = r6
  108f1c:    87 33             	[sp+76] = r7
  108f1e:    ce eb 0a 70       	[r7+0x38] += 0xa			  ## decoder.c:86:27
  108f22:    d8 e9 50 b0       	r11 = h[sp+80] (u)			  ## bits.c:61:11
  108f26:    d8 e9 52 10       	r1 = h[sp+82] (u)			  ## bits.c:62:39
  108f2a:    70 e1 7f bc       	r0 = r11 & 0xFFFF00FF			  ## bits.c:61:19
  108f2e:    d8 e9 5b 00       	h[sp+90] = r0			  ## bits.c:61:9
  108f32:    c0 e1 b8 98       	r9 = r11 >> 0x8			  ## bits.c:62:21
  108f36:    12 a8             	r2 = r1 << 0x8			  ## bits.c:62:54
  108f38:    62 e1 40 2f       	r2 = r2 & 0x300			  ## bits.c:62:54
  108f3c:    90 e1 20 29       	r2 = r2 | r9			  ## bits.c:62:35
  108f40:    d8 e9 5d 20       	h[sp+92] = r2			  ## bits.c:62:9
  108f44:    b3 e1 20 11       	r3 = uextra(r1, p:0x2, l:0x8)			  ## bits.c:63:26
  108f48:    d8 e9 5f 30       	h[sp+94] = r3			  ## bits.c:63:9
  108f4c:    d8 e9 54 40       	r4 = h[sp+84] (u)			  ## bits.c:65:40
  108f50:    b3 e1 04 15       	r3 = uextra(r1, p:0xa, l:0x1)			  ## bits.c:64:11
  108f54:    d8 e9 61 30       	h[sp+96] = r3			  ## bits.c:64:9
  108f58:    91 ab             	r1 = r1 >> 0xb			  ## bits.c:65:21
  108f5a:    47 a5             	r7 = r4 << 0x5			  ## bits.c:65:56
  108f5c:    67 e1 ff 7d       	r7 = r7 & 0x1FE0			  ## bits.c:65:56
  108f60:    71 19             	r1 |= r7			  ## bits.c:65:36
  108f62:    d8 e9 63 10       	h[sp+98] = r1			  ## bits.c:65:9
  108f66:    d8 e9 56 10       	r1 = h[sp+86] (u)			  ## bits.c:67:39
  108f6a:    b7 e1 10 44       	r7 = uextra(r4, p:0x8, l:0x4)			  ## bits.c:66:26
  108f6e:    d8 e9 65 70       	h[sp+100] = r7			  ## bits.c:66:9
  108f72:    c4 ac             	r4 = r4 >> 0xc			  ## bits.c:67:21
  108f74:    17 a4             	r7 = r1 << 0x4			  ## bits.c:67:54
  108f76:    67 e1 70 70       	r7 = r7 & 0x70			  ## bits.c:67:54
  108f7a:    74 19             	r4 |= r7			  ## bits.c:67:35
  108f7c:    d8 e9 67 40       	h[sp+102] = r4			  ## bits.c:67:9
  108f80:    d8 e9 58 40       	r4 = h[sp+88] (u)			  ## bits.c:69:39
  108f84:    b7 e1 94 11       	r7 = uextra(r1, p:0x3, l:0x5)			  ## bits.c:68:27
  108f88:    d8 e9 69 70       	h[sp+104] = r7			  ## bits.c:68:9
  108f8c:    91 a8             	r1 = r1 >> 0x8			  ## bits.c:69:21
  108f8e:    47 a8             	r7 = r4 << 0x8			  ## bits.c:69:55
  108f90:    67 e1 f8 7d       	r7 = r7 & 0x1F00			  ## bits.c:69:55
  108f94:    71 19             	r1 |= r7			  ## bits.c:69:35
  108f96:    d8 e9 6b 10       	h[sp+106] = r1			  ## bits.c:69:9
  108f9a:    b1 e1 90 42       	r1 = uextra(r4, p:0x5, l:0x4)			  ## bits.c:70:27
  108f9e:    d8 e9 6d 10       	h[sp+108] = r1			  ## bits.c:70:9
  108fa2:    c1 a9             	r1 = r4 >> 0x9			  ## bits.c:71:22
  108fa4:    d8 e9 6f 10       	h[sp+110] = r1			  ## bits.c:71:10
  108fa8:    06 e1 50 c0       	r6 = r12 + 0x50			  ## bits.c:71:10
  108fac:    00 e1 40 c1       	r0 = r12 + 0x140			  ## bits.c:71:10
  108fb0:    61 e1 7f b0       	r1 = r11 & 0x7F			  ## lspdec.c:63:15
  108fb4:    e1 e1 14 10       	r1 = r1 * 0x14			  ## lspdec.c:63:15
  108fb8:    c4 ff 78 9b 10 00 	r4 = 0x109b78 <lspcb1 : 109b78 >			  ## lspdec.c:63:15
  108fbe:    41 18             	r1 += r4			  ## lspdec.c:63:15
  108fc0:    a2 a5             	r2 = r2 >> 0x5			  ## lspdec.c:60:20
  108fc2:    e2 f1 14 20       	r2 = r2 * 0x14  #			  ## lspdec.c:64:15
  108fc6:    1c 60             		 r4 = h[r1+0x0] (u)			  ## lspdec.c:66:13
  108fc8:    c8 ff 78 a5 10 00 	r8 = 0x10a578 <lspcb2 : 10a578 >			  ## lspdec.c:66:13
  108fce:    82 18             	r2 += r8			  ## lspdec.c:64:15
  108fd0:    2f 60             	r7 = h[r2+0x0] (u)			  ## lspdec.c:66:31
  108fd2:    74 d8             	r4 += r7  #			  ## lspdec.c:66:29
  108fd4:    80 2d             		 [sp+52] = r0			  ## lspdec.c:66:29
  108fd6:    8b 44             	b[r0+0x4] = r3			  ## decoder.c:88:33
  108fd8:    1b 61             	r3 = h[r1+0x2] (u)			  ## lspdec.c:67:13
  108fda:    28 61             	r0 = h[r2+0x2] (u)			  ## lspdec.c:67:31
  108fdc:    d0 ec 64 a1       	r10 = [r6+0x14]			  ## decoder.c:91:45
  108fe0:    d8 e9 ed 40       	h[sp+236] = r4			  ## lspdec.c:66:11
  108fe4:    30 d8             	r0 += r3  #			  ## lspdec.c:67:29
  108fe6:    1b 62             		 r3 = h[r1+0x4] (u)			  ## lspdec.c:68:13
  108fe8:    2c 62             	r4 = h[r2+0x4] (u)			  ## lspdec.c:68:31
  108fea:    1f 63             	r7 = h[r1+0x6] (u)			  ## lspdec.c:69:13
  108fec:    2d 63             	r5 = h[r2+0x6] (u)			  ## lspdec.c:69:31
  108fee:    d8 e9 ef 00       	h[sp+238] = r0			  ## lspdec.c:67:11
  108ff2:    c8 1c             	r0 = r4 + r3			  ## lspdec.c:68:29
  108ff4:    d8 e9 f1 00       	h[sp+240] = r0			  ## lspdec.c:68:11
  108ff8:    d8 dd             	r0 = r5 + r7  #			  ## lspdec.c:69:29
  108ffa:    1b 64             		 r3 = h[r1+0x8] (u)			  ## lspdec.c:70:13
  108ffc:    65 f1 1f 90       	r5 = r9 & 0x1F  #			  ## lspdec.c:61:20
  109000:    2a 64             		 r2 = h[r2+0x8] (u)			  ## lspdec.c:70:31
  109002:    e5 f1 14 50       	r5 = r5 * 0x14  #			  ## lspdec.c:73:31
  109006:    1c 65             		 r4 = h[r1+0xa] (u)			  ## lspdec.c:73:13
  109008:    85 18             	r5 += r8			  ## lspdec.c:73:31
  10900a:    5f 65             	r7 = h[r5+0xa] (u)			  ## lspdec.c:73:31
  10900c:    d8 e9 f3 00       	h[sp+242] = r0			  ## lspdec.c:69:11
  109010:    a8 1c             	r0 = r2 + r3			  ## lspdec.c:70:29
  109012:    d8 e9 f5 00       	h[sp+244] = r0			  ## lspdec.c:70:11
  109016:    70 dd             	r0 = r7 + r4  #			  ## lspdec.c:73:29
  109018:    1a 66             		 r2 = h[r1+0xc] (u)			  ## lspdec.c:74:13
  10901a:    5b 66             	r3 = h[r5+0xc] (u)			  ## lspdec.c:74:31
  10901c:    1c 67             	r4 = h[r1+0xe] (u)			  ## lspdec.c:75:13
  10901e:    5f 67             	r7 = h[r5+0xe] (u)			  ## lspdec.c:75:31
  109020:    d8 e9 f7 00       	h[sp+246] = r0			  ## lspdec.c:73:11
  109024:    b0 1c             	r0 = r3 + r2			  ## lspdec.c:74:29
  109026:    d8 e9 f9 00       	h[sp+248] = r0			  ## lspdec.c:74:11
  10902a:    70 dd             	r0 = r7 + r4  #			  ## lspdec.c:75:29
  10902c:    1a 68             		 r2 = h[r1+0x10] (u)			  ## lspdec.c:76:13
  10902e:    5b 68             	r3 = h[r5+0x10] (u)			  ## lspdec.c:76:31
  109030:    19 69             	r1 = h[r1+0x12] (u)			  ## lspdec.c:77:13
  109032:    5c 69             	r4 = h[r5+0x12] (u)			  ## lspdec.c:77:31
  109034:    d8 e9 fb 00       	h[sp+250] = r0			  ## lspdec.c:75:11
  109038:    b0 1c             	r0 = r3 + r2			  ## lspdec.c:76:29
  10903a:    d8 e9 fd 00       	h[sp+252] = r0			  ## lspdec.c:76:11
  10903e:    48 1c             	r0 = r4 + r1			  ## lspdec.c:77:29
  109040:    d8 e9 ff 00       	h[sp+254] = r0			  ## lspdec.c:77:11
  109044:    f8 e8 ec 00       	r0 = sp + 236			  ## lspdec.c:77:11
  109048:    41 2a             	r1 = 0xa			  ## lspdec.c:85:2
  10904a:    bf ea 79 fd       	call -0x50e <Lsp_expand_1_2 : 108b40 >			  ## lspdec.c:85:2
  10904e:    41 25             	r1 = 0x5			  ## lspdec.c:86:2
  109050:    bf ea 76 fd       	call -0x514 <Lsp_expand_1_2 : 108b40 >			  ## lspdec.c:86:2
  109054:    b0 f1 84 b3       	r0 = uextra(r11, p:0x7, l:0x1)  #			  ## lspdec.c:58:18
  109058:    86 2e             		 [sp+56] = r6
  10905a:    e1 e1 14 00       	r1 = r0 * 0x14			  ## lspgetq.c:90:9
  10905e:    c2 ff 98 a8 10 00 	r2 = 0x10a898 <fg_sum : 10a898 >			  ## lspgetq.c:90:9
  109064:    b4 e0 10 b2       	r11 = r1 + r2			  ## lspgetq.c:90:9
  109068:    e0 e1 50 00       	r0 = r0 * 0x50			  ## lspgetq.c:90:9
  10906c:    c2 ff f8 a7 10 00 	r2 = 0x10a7f8 <fg : 10a7f8 >			  ## lspgetq.c:90:9
  109072:    b4 e0 00 d2       	r13 = r0 + r2			  ## lspgetq.c:90:9
  109076:    0f e1 cc c2       	r15 = r12 + 0x2cc			  ## lspgetq.c:90:9
  10907a:    08 e1 3a f0       	r8 = r15 + 0x3a			  ## lspdec.c:112:15
  10907e:    00 e1 32 60       	r0 = r6 + 0x32			  ## decoder.c:91:70
  109082:    cb 9a             	r3 = sp + 90			  ## decoder.c:91:70
  109084:    09 f1 04 30       	r9 = r3 + 0x4  #			  ## bits.c:63:2
  109088:    80 2c             		 [sp+48] = r0			  ## bits.c:63:2
  10908a:    14 8e             	goto 0x5c <g729_dec_run+0x228 : 1090e8 >
  10908c:    f8 e8 ec 30       	r3 = sp + 236
  109090:    d8 ed 32 3e       	r3 = h[r3+r14] (s)			  ## lspgetq.c:91:14
  109094:    b4 e0 c0 4e       	r4 = r12 + r14			  ## lspgetq.c:93:18
  109098:    04 e1 06 43       	r4 = r4 + 0x306			  ## lspgetq.c:93:18
  10909c:    54 ed 40 50       	r5 = h[r4+0x0] (s)			  ## lspgetq.c:93:18
  1090a0:    d2 16             	r2 = r13			  ## lspgetq.c:93:36
  1090a2:    dc ed 22 7e       	r7 = h[++r2=r14] (s)			  ## lspgetq.c:93:36
  1090a6:    d8 ed b2 1e       	r1 = h[r11+r14] (s)			  ## lspgetq.c:91:25
  1090aa:    54 ed 44 01       	r0 = h[r4+0x14] (s)			  ## lspgetq.c:94:18
  1090ae:    54 ed 24 61       	r6 = h[r2+0x14] (s)			  ## lspgetq.c:94:36
  1090b2:    31 1b             	r1 *= r3			  ## lspgetq.c:91:24
  1090b4:    f0 e1 70 35       	r3 = r7 * r5			  ## lspgetq.c:93:34
  1090b8:    31 18             	r1 += r3			  ## lspgetq.c:93:16
  1090ba:    60 1b             	r0 *= r6			  ## lspgetq.c:94:34
  1090bc:    54 ed 48 32       	r3 = h[r4+0x28] (s)			  ## lspgetq.c:95:18
  1090c0:    54 ed 28 52       	r5 = h[r2+0x28] (s)			  ## lspgetq.c:95:36
  1090c4:    54 ed 4c 43       	r4 = h[r4+0x3c] (s)			  ## lspgetq.c:96:18
  1090c8:    54 ed 2c 23       	r2 = h[r2+0x3c] (s)			  ## lspgetq.c:96:36
  1090cc:    10 18             	r0 += r1			  ## lspgetq.c:94:16
  1090ce:    f0 e1 50 13       	r1 = r5 * r3			  ## lspgetq.c:95:34
  1090d2:    10 18             	r0 += r1			  ## lspgetq.c:95:16
  1090d4:    f0 e1 20 14       	r1 = r2 * r4			  ## lspgetq.c:96:34
  1090d8:    10 18             	r0 += r1			  ## lspgetq.c:96:16
  1090da:    80 af             	r0 = r0 >> 0xf			  ## lspgetq.c:102:19
  1090dc:    f8 e8 d8 10       	r1 = sp + 216			  ## lspgetq.c:102:19
  1090e0:    d8 ed 11 0e       	h[r1+r14] = r0			  ## lspgetq.c:102:12
  1090e4:    0e e1 02 e0       	r14 = r14 + 0x2			  ## lspgetq.c:90:3
  1090e8:    8e f8 d0 29       	if (r14 != 0x14) goto -0x60 <g729_dec_run+0x1CC : 10908c >			  ## lspgetq.c:90:3
  1090ec:    01 e1 62 f0       	r1 = r15 + 0x62			  ## lspgetq.c:116:10
  1090f0:    42 23             	r2 = 0x3			  ## lspgetq.c:116:10
  1090f2:    04 87             	goto 0xe <g729_dec_run+0x242 : 109102 >			  ## lspgetq.c:116:10
  1090f4:    18 94             	r0 = r1 + 0x14			  ## lspgetq.c:119:37
  1090f6:    13 16             	r3 = r1			  ## lspgetq.c:119:4
  1090f8:    10 89             	rep 0x4 0xa {			  ## lspgetq.c:119:4
  1090fa:    34 06             		r4 = h[r3++=0x2] (u)			  ## lspgetq.c:119:4
  1090fc:    84 06             		h[r0++=0x2] = r4
                               	}			  ## lspgetq.c:119:4
  1090fe:    f9 2c             	r1 += -0x14			  ## lspgetq.c:118:3
  109100:    fa 3f             	r2 += -0x1			  ## lspgetq.c:119:37
  109102:    02 fd f7 03       	ifs (r2 >= 0x1) goto -0x12 <g729_dec_run+0x234 : 1090f4 >
  109106:    f8 e8 ec 00       	r0 = sp + 236
  10910a:    20 89             	rep 0x6 0xa {			  ## lspgetq.c:121:3
  10910c:    01 06             		r1 = h[r0++=0x2] (u)			  ## lspgetq.c:121:3
  10910e:    d0 ed 83 10       		h[r8++=0x2] = r1
                               	}			  ## lspgetq.c:121:3
  109112:    41 20             	r1 = 0x0
  109114:    04 8f             	goto 0x1e <g729_dec_run+0x274 : 109134 >
  109116:    01 a1             	r1 = r0 << 0x1			  ## lspgetq.c:135:23
  109118:    f8 e8 d8 20       	r2 = sp + 216			  ## lspgetq.c:135:23
  10911c:    dc ed 22 41       	r4 = h[++r2=r1] (s)			  ## lspgetq.c:136:24
  109120:    5c ed 22 30       	r3 = h[++r2=0x2] (s)			  ## lspgetq.c:135:23
  109124:    09 81             	r1 = r0 + 0x1			  ## lspgetq.c:135:28
  109126:    93 ed 00 84       	ifs (r3 < r4) {			  ## lspgetq.c:135:28
  10912a:    ac 60             		h[r2+0x0] = r4			  ## lspgetq.c:141:16
  10912c:    f8 e8 d8 20       		r2 = sp + 216			  ## lspgetq.c:141:16
  109130:    d8 ed 29 30       		h[r2+r0<<1] = r3
                               	}			  ## lspgetq.c:142:16
  109134:    10 16             	r0 = r1
  109136:    80 f8 ee 13       	if (r0 != 0x9) goto -0x24 <g729_dec_run+0x256 : 109116 >
  10913a:    d9 e9 d8 00       	r0 = h[sp+216] (s)			  ## lspgetq.c:147:7
  10913e:    b0 ee 27 40       	ifs (r0 <= 0x27) {			  ## lspgetq.c:147:7
  109142:    48 28             		r0 = 0x28			  ## lspgetq.c:147:7
  109144:    d8 e9 d9 00       		h[sp+216] = r0
                               	}			  ## lspgetq.c:148:12
  109148:    41 21             	r1 = 0x1			  ## lspgetq.c:148:12
  10914a:    04 90             	goto 0x20 <g729_dec_run+0x2AC : 10916c >			  ## lspgetq.c:148:12
  10914c:    f8 e8 d8 20       	r2 = sp + 216
  109150:    d8 ed 2a 21       	r2 = h[r2+r1<<1] (s)			  ## lspgetq.c:152:13
  109154:    8b 17             	r3 = r0.l (s)			  ## lspgetq.c:153:14
  109156:    ab 1e             	r3 = r2 - r3			  ## lspgetq.c:154:20
  109158:    b3 ee 40 81       	ifs (r3 <= 0x140) {
  10915c:    02 e1 41 01       		r2 = r0 + 0x141			  ## lspgetq.c:157:25
  109160:    f8 e8 d8 00       		r0 = sp + 216
  109164:    d8 ed 09 21       		h[r0+r1<<1] = r2
                               	}			  ## lspgetq.c:157:16
  109168:    c1 21             	r1 += 0x1			  ## lspgetq.c:129:10
  10916a:    20 16             	r0 = r2			  ## lspgetq.c:153:24
  10916c:    81 f8 ee 15       	if (r1 != 0xa) goto -0x24 <g729_dec_run+0x28C : 10914c >
  109170:    d9 e9 ea 10       	r1 = h[sp+234] (s)			  ## lspgetq.c:161:7
  109174:    42 e0 52 64       	r2 = 0x6452 <os_code_size+0x42FD : 6452 >			  ## lspgetq.c:161:7
  109178:    f8 e8 d8 00       	r0 = sp + 216			  ## lspgetq.c:161:7
  10917c:    11 ed 00 42       	ifs (r1 >= r2) {			  ## lspgetq.c:161:7
  109180:    41 e0 51 64       		r1 = 0x6451 <os_code_size+0x42FB : 6450 >			  ## lspgetq.c:162:14
  109184:    89 69             		h[r0+0x12] = r1
                               	}			  ## lspgetq.c:162:14
  109186:    40 20             	r0 = 0x0
  109188:    41 e0 7d 51       	r1 = 0x517d <os_code_size+0x3027 : 517c >
  10918c:    c2 ff f8 9a 10 00 	r2 = 0x109af8 <slope_cos : 109af8 >
  109192:    c3 ff 78 9a 10 00 	r3 = 0x109a78 <table2 : 109a78 >
  109198:    04 97             	goto 0x2e <g729_dec_run+0x308 : 1091c8 >
  10919a:    f8 e8 d8 40       	r4 = sp + 216
  10919e:    d8 ed 4a 40       	r4 = h[r4+r0<<1] (s)			  ## lpcfunc.c:147:11
  1091a2:    14 1b             	r4 *= r1			  ## lpcfunc.c:147:18
  1091a4:    cd b7             	r5 = r4 >>> 0x17			  ## lpcfunc.c:148:14
  1091a6:    35 ed 3f 00       	ifs (r5 >= 0x3f) {
  1091aa:    4d 3f             		r5 = 0x3f
                               	}			  ## lpcfunc.c:151:7
  1091ac:    d8 ed 2a 65       	r6 = h[r2+r5<<1] (s)			  ## lpcfunc.c:157:11
  1091b0:    d8 ed 38 55       	r5 = h[r3+r5<<1] (u)			  ## lpcfunc.c:158:12
  1091b4:    b4 e1 a0 47       	r4 = uextra(r4, p:0xf, l:0x8)			  ## lpcfunc.c:149:17
  1091b8:    64 1b             	r4 *= r6			  ## lpcfunc.c:157:26
  1091ba:    c4 ac             	r4 = r4 >> 0xc			  ## lpcfunc.c:158:33
  1091bc:    54 18             	r4 += r5			  ## lpcfunc.c:158:24
  1091be:    f8 e8 c4 50       	r5 = sp + 196			  ## lpcfunc.c:158:24
  1091c2:    d8 ed 59 40       	h[r5+r0<<1] = r4			  ## lpcfunc.c:158:10
  1091c6:    c0 21             	r0 += 0x1			  ## lpcfunc.c:144:20
  1091c8:    80 f8 e7 15       	if (r0 != 0xa) goto -0x32 <g729_dec_run+0x2DA : 10919a >
  1091cc:    04 e1 04 f0       	r4 = r15 + 0x4			  ## dec_ld8k.c:101:21
  1091d0:    40 20             	r0 = 0x0			  ## dec_ld8k.c:101:21
  1091d2:    41 2a             	r1 = 0xa
  1091d4:    04 92             	goto 0x24 <g729_dec_run+0x33A : 1091fa >
  1091d6:    b4 e0 c0 20       	r2 = r12 + r0			  ## lpcfunc.c:217:18
  1091da:    02 e1 d0 22       	r2 = r2 + 0x2d0			  ## lpcfunc.c:217:18
  1091de:    f8 e8 c4 30       	r3 = sp + 196			  ## lpcfunc.c:217:18
  1091e2:    d8 ed 32 30       	r3 = h[r3+r0] (s)			  ## lpcfunc.c:219:15
  1091e6:    54 ed 20 20       	r2 = h[r2+0x0] (s)			  ## lpcfunc.c:219:38
  1091ea:    32 18             	r2 += r3			  ## lpcfunc.c:219:36
  1091ec:    a2 a1             	r2 = r2 >> 0x1			  ## lpcfunc.c:220:21
  1091ee:    f8 e8 ec 30       	r3 = sp + 236
  1091f2:    d8 ed 31 20       	h[r3+r0] = r2			  ## lpcfunc.c:220:15
  1091f6:    f9 3f             	r1 += -0x1			  ## lpcfunc.c:217:4
  1091f8:    c0 22             	r0 += 0x2			  ## lpcfunc.c:217:4
  1091fa:    92 17             	r2 = r1.l (u)			  ## lpcfunc.c:217:4
  1091fc:    f2 4c             	if (r2 != 0) goto -0x28 <g729_dec_run+0x316 : 1091d6 >			  ## lpcfunc.c:217:4
  1091fe:    f8 e8 ec 00       	r0 = sp + 236
  109202:    01 2c             	r1 = [sp+48]			  ## lpcfunc.c:247:2
  109204:    bf ea f2 fc       	call -0x61c <Lsp_Az : 108bec >			  ## lpcfunc.c:247:2
  109208:    05 2e             	r5 = [sp+56]			  ## lpcfunc.c:247:2
  10920a:    01 e1 48 50       	r1 = r5 + 0x48			  ## lpcfunc.c:249:19
  10920e:    f8 e8 c4 60       	r6 = sp + 196			  ## lpcfunc.c:249:19
  109212:    60 d6             	r0 = r6  #			  ## lpcfunc.c:249:2
  109214:    81 23             		 [sp+12] = r1			  ## lpcfunc.c:249:2
  109216:    bf ea e9 fc       	call -0x62e <Lsp_Az : 108bec >			  ## lpcfunc.c:249:2
  10921a:    10 89             	rep 0x4 0xa {			  ## dec_ld8k.c:102:2
  10921c:    60 06             		r0 = h[r6++=0x2] (u)			  ## dec_ld8k.c:102:2
  10921e:    c0 06             		h[r4++=0x2] = r0
                               	}			  ## dec_ld8k.c:102:2
  109220:    00 e1 e0 f0       	r0 = r15 + 0xe0			  ## dec_ld8k.c:102:2
  109224:    80 2b             	[sp+44] = r0			  ## dec_ld8k.c:102:2
  109226:    f8 e8 38 01       	r0 = sp + 312			  ## dec_ld8k.c:102:2
  10922a:    09 96             	r1 = r0 + 0x16			  ## dec_ld8k.c:102:2
  10922c:    c0 34             	r0 += 0x14			  ## dec_ld8k.c:102:2
  10922e:    d0 e9 25 00       	d[sp+36] = r1_r0
  109232:    00 e1 b8 f0       	r0 = r15 + 0xb8
  109236:    80 28             	[sp+32] = r0
  109238:    f8 e8 12 01       	r0 = sp + 274
  10923c:    80 27             	[sp+28] = r0
  10923e:    f8 e8 00 01       	r0 = sp + 256
  109242:    80 26             	[sp+24] = r0
  109244:    d4 e9 34 b0       	r11 = [sp+52]
  109248:    00 e1 56 b0       	r0 = r11 + 0x56
  10924c:    00 f1 f6 50       	r0 = r5 + 0xf6  #
  109250:    80 25             		 [sp+20] = r0
  109252:    0e f1 98 50       	r14 = r5 + 0x98  #
  109256:    80 24             		 [sp+16] = r0
  109258:    45 20             	r5 = 0x0
  10925a:    cd ff dc a8 10 00 	r13 = 0x10a8dc <gbk1 : 10a8dc >
  109260:    42 20             	r2 = 0x0
  109262:    75 85             	goto 0x5ca <g729_dec_run+0x96E : 10982e >
  109264:    50 ed 90 00       	r0 = h[r9+0x0] (u)			  ## dec_ld8k.c:108:17
  109268:    a2 d7             	r2 = r2.l (u)  #			  ## dec_ld8k.c:109:12
  10926a:    82 31             		 [sp+68] = r2			  ## dec_ld8k.c:109:12
  10926c:    88 d7             	r0 = r0.l (s)  #			  ## dec_ld8k.c:117:14
  10926e:    82 30             		 [sp+64] = r2			  ## dec_ld8k.c:117:14
  109270:    02 47             	if (r2 == 0) goto 0xe <g729_dec_run+0x3C0 : 109280 >			  ## dec_ld8k.c:117:14
  109272:    ea 92             	r2 = sp + 114
  109274:    eb 90             	r3 = sp + 112
  109276:    bf ea ff fc       	call -0x602 <Dec_lag3 : 108c78 >			  ## dec_ld8k.c:117:14
  10927a:    09 e1 02 90       	r9 = r9 + 0x2			  ## dec_ld8k.c:108:22
  10927e:    04 87             	goto 0xe <g729_dec_run+0x3CE : 10928e >
  109280:    ea 92             	r2 = sp + 114
  109282:    eb 90             	r3 = sp + 112
  109284:    41 20             	r1 = 0x0			  ## dec_ld8k.c:112:14
  109286:    bf ea f7 fc       	call -0x612 <Dec_lag3 : 108c78 >			  ## dec_ld8k.c:112:14
  10928a:    09 e1 04 90       	r9 = r9 + 0x4			  ## dec_ld8k.c:111:18
  10928e:    d0 ec f0 20       	r2 = [r15+0x0]			  ## dec_ld8k.c:120:30
  109292:    d8 e9 70 00       	r0 = h[sp+112] (u)			  ## dec_ld8k.c:120:42
  109296:    d9 e9 72 70       	r7 = h[sp+114] (s)			  ## dec_ld8k.c:120:38
  10929a:    01 26             	r1 = [sp+24]			  ## dec_ld8k.c:120:38
  10929c:    43 21             	r3 = 0x1			  ## pred_lt3.c:50:17
  10929e:    93 63             	[r1+0xc] = r3			  ## pred_lt3.c:50:17
  1092a0:    43 34             	r3 = 0x14			  ## pred_lt3.c:51:20
  1092a2:    9b 62             	h[r1+0x4] = r3			  ## pred_lt3.c:51:20
  1092a4:    43 23             	r3 = 0x3			  ## pred_lt3.c:52:22
  1092a6:    9b 64             	h[r1+0x8] = r3			  ## pred_lt3.c:52:22
  1092a8:    43 38             	r3 = 0x18			  ## pred_lt3.c:53:21
  1092aa:    9b 63             	h[r1+0x6] = r3			  ## pred_lt3.c:53:21
  1092ac:    11 37             	r1 = -0x9			  ## pred_lt3.c:55:16
  1092ae:    99 1f             	r1 = r1 - r7			  ## pred_lt3.c:55:16
  1092b0:    11 a1             	r1 = r1 << 0x1			  ## pred_lt3.c:55:8
  1092b2:    a3 e0 00 00       	r3 = 0x0 - r0			  ## pred_lt3.c:56:9
  1092b6:    bb 17             	r3 = r3.l (s)			  ## pred_lt3.c:56:9
  1092b8:    21 18             	r1 += r2			  ## pred_lt3.c:55:8
  1092ba:    c6 ff d4 a8 10 00 	r6 = 0x10a8d4 <pred : 10a8d4 >
  1092c0:    b3 ed 00 40       	ifs (r3 < 0x0) {
  1092c4:    f9 3e             		r1 += -0x2			  ## pred_lt3.c:60:5
  1092c6:    a3 e0 03 00       		r3 = 0x3 - r0
                               	}			  ## pred_lt3.c:59:15
  1092ca:    b8 17             	r0 = r3.l (s)			  ## pred_lt3.c:63:60
  1092cc:    a0 e0 03 00       	r0 = 0x3 - r0			  ## pred_lt3.c:63:58
  1092d0:    00 a2             	r0 = r0 << 0x2			  ## pred_lt3.c:63:34
  1092d2:    c3 ff 84 99 10 00 	r3 = 0x109984 <inter32_fir_tab : 109984 >			  ## pred_lt3.c:63:34
  1092d8:    30 18             	r0 += r3			  ## pred_lt3.c:63:34
  1092da:    d4 e9 01 01       	[sp+256] = r0			  ## pred_lt3.c:63:20
  1092de:    f8 e8 00 01       	r0 = sp + 256			  ## pred_lt3.c:63:20
  1092e2:    4b 28             	r3 = 0x28			  ## pred_lt3.c:64:2
  1092e4:    bf ea 21 f9       	call -0xdbe <B_fir_cal_s : 10852a >			  ## pred_lt3.c:64:2
  1092e8:    50 ed 90 10       	r1 = h[r9+0x0] (u)			  ## dec_ld8k.c:126:30
  1092ec:    50 ed 92 00       	r0 = h[r9+0x2] (u)			  ## dec_ld8k.c:126:21
  1092f0:    62 e1 07 10       	r2 = r1 & 0x7			  ## de_acelp.c:32:18
  1092f4:    e2 e1 05 20       	r2 = r2 * 0x5			  ## de_acelp.c:33:13
  1092f8:    d8 e9 13 21       	h[sp+274] = r2			  ## de_acelp.c:33:10
  1092fc:    99 d7             	r1 = r1.l (s)  #			  ## de_acelp.c:32:12
  1092fe:    03 27             		 r3 = [sp+28]			  ## de_acelp.c:32:12
  109300:    b2 e1 8c 11       	r2 = uextra(r1, p:0x3, l:0x3)			  ## de_acelp.c:36:12
  109304:    e2 e1 05 20       	r2 = r2 * 0x5			  ## de_acelp.c:37:14
  109308:    c2 21             	r2 += 0x1			  ## de_acelp.c:37:18
  10930a:    b2 f1 0c 13       	r2 = uextra(r1, p:0x6, l:0x3)  #			  ## de_acelp.c:40:12
  10930e:    ba 61             		 h[r3+0x2] = r2			  ## de_acelp.c:37:10
  109310:    e2 e1 05 20       	r2 = r2 * 0x5			  ## de_acelp.c:41:14
  109314:    c2 22             	r2 += 0x2			  ## de_acelp.c:41:18
  109316:    b2 f1 84 14       	r2 = uextra(r1, p:0x9, l:0x1)  #			  ## de_acelp.c:44:12
  10931a:    ba 62             		 h[r3+0x4] = r2			  ## de_acelp.c:41:10
  10931c:    b1 e1 0c 15       	r1 = uextra(r1, p:0xa, l:0x3)			  ## de_acelp.c:46:12
  109320:    e1 e1 05 10       	r1 = r1 * 0x5			  ## de_acelp.c:47:14
  109324:    21 18             	r1 += r2			  ## de_acelp.c:47:18
  109326:    c1 23             	r1 += 0x3			  ## de_acelp.c:47:22
  109328:    b9 63             	h[r3+0x6] = r1			  ## de_acelp.c:47:10
  10932a:    41 20             	r1 = 0x0			  ## de_acelp.c:47:10
  10932c:    04 84             	goto 0x8 <g729_dec_run+0x476 : 109336 >
  10932e:    ea 94             	r2 = sp + 116
  109330:    d8 ed 29 51       	h[r2+r1<<1] = r5			  ## de_acelp.c:52:12
  109334:    c1 21             	r1 += 0x1			  ## de_acelp.c:51:25
  109336:    81 f8 fa 51       	if (r1 != 0x28) goto -0xc <g729_dec_run+0x46E : 10932e >			  ## de_acelp.c:51:3
  10933a:    41 20             	r1 = 0x0
  10933c:    04 90             	goto 0x20 <g729_dec_run+0x49E : 10935e >
  10933e:    42 e0 ff 1f       	r2 = 0x1fff <usb_code_size+0x14C3 : 1ffe >			  ## de_acelp.c:60:9
  109342:    20 ea 01 00       	if ((r0 & 0x1) == 0) {			  ## de_acelp.c:60:9
  109346:    42 e0 00 e0       		r2 = -0x2000
                               	} <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEE004 : ffffffffffffe000 >			  ## de_acelp.c:60:9
  10934a:    f8 e8 12 31       	r3 = sp + 274			  ## de_acelp.c:60:9
  10934e:    d8 ed 3a 31       	r3 = h[r3+r1<<1] (s)			  ## de_acelp.c:60:9
  109352:    ec 94             	r4 = sp + 116			  ## de_acelp.c:60:9
  109354:    d8 ed 49 23       	h[r4+r3<<1] = r2			  ## de_acelp.c:60:9
  109358:    c1 21             	r1 += 0x1			  ## de_acelp.c:55:19
  10935a:    88 17             	r0 = r0.l (s)			  ## de_acelp.c:57:14
  10935c:    88 a1             	r0 = r0 >>> 0x1			  ## de_acelp.c:58:12
  10935e:    81 f8 ee 09       	if (r1 != 0x4) goto -0x24 <g729_dec_run+0x47E : 10933e >
  109362:    08 e1 f8 c2       	r8 = r12 + 0x2f8
  109366:    07 fe 14 4e       	ifs (r7 > 0x27) goto 0x28 <g729_dec_run+0x4D2 : 109392 >
  10936a:    50 ed 80 00       	r0 = h[r8+0x0] (u)			  ## dec_ld8k.c:129:24
  10936e:    00 a1             	r0 = r0 << 0x1			  ## dec_ld8k.c:129:29
  109370:    88 17             	r0 = r0.l (s)			  ## dec_ld8k.c:129:29
  109372:    e9 94             	r1 = sp + 116			  ## dec_ld8k.c:129:29
  109374:    72 16             	r2 = r7			  ## dec_ld8k.c:129:29
  109376:    04 8b             	goto 0x16 <g729_dec_run+0x4CE : 10938e >			  ## dec_ld8k.c:129:29
  109378:    54 ed 10 30       	r3 = h[r1+0x0] (s)			  ## dec_ld8k.c:132:34
  10937c:    d8 ed 18 47       	r4 = h[r1+r7<<1] (u)			  ## dec_ld8k.c:132:23
  109380:    03 1b             	r3 *= r0			  ## dec_ld8k.c:132:44
  109382:    b3 af             	r3 = r3 >> 0xf			  ## dec_ld8k.c:132:48
  109384:    43 18             	r3 += r4			  ## dec_ld8k.c:132:30
  109386:    d8 ed 19 37       	h[r1+r7<<1] = r3			  ## dec_ld8k.c:132:21
  10938a:    c1 22             	r1 += 0x2			  ## dec_ld8k.c:131:11
  10938c:    c2 21             	r2 += 0x1			  ## dec_ld8k.c:131:38
  10938e:    82 fe f3 4f       	ifs (r2 <= 0x27) goto -0x1a <g729_dec_run+0x4B8 : 109378 >
  109392:    54 ed 94 00       	r0 = h[r9+0x4] (s)			  ## dec_gain.c:54:20
  109396:    89 a4             	r1 = r0 >>> 0x4			  ## dec_gain.c:54:25
  109398:    c2 ff 3c a9 10 00 	r2 = 0x10a93c <imap1 : 10a93c >			  ## dec_gain.c:56:18
  10939e:    d8 ed 2a 11       	r1 = h[r2+r1<<1] (s)			  ## dec_gain.c:56:18
  1093a2:    60 e1 0f 00       	r0 = r0 & 0xF			  ## dec_gain.c:55:26
  1093a6:    c2 ff 4c a9 10 00 	r2 = 0x10a94c <imap2 : 10a94c >			  ## dec_gain.c:56:35
  1093ac:    d8 ed 2a 00       	r0 = h[r2+r0<<1] (s)			  ## dec_gain.c:56:35
  1093b0:    15 a2             	r5 = r1 << 0x2			  ## dec_gain.c:56:18
  1093b2:    d8 ed d0 15       	r1 = h[r13+r5] (u)			  ## dec_gain.c:56:18
  1093b6:    07 a2             	r7 = r0 << 0x2			  ## dec_gain.c:56:35
  1093b8:    c0 ff fc a8 10 00 	r0 = 0x10a8fc <gbk2 : 10a8fc >			  ## dec_gain.c:56:35
  1093be:    d8 ed 00 07       	r0 = h[r0+r7] (u)			  ## dec_gain.c:56:35
  1093c2:    10 18             	r0 += r1			  ## dec_gain.c:56:33
  1093c4:    50 ed 85 00       	h[r8+0x4] = r0			  ## dec_gain.c:56:14
  1093c8:    e8 94             	r0 = sp + 116
  1093ca:    4a 28             	r2 = 0x28			  ## gainpred.c:45:12
  1093cc:    43 21             	r3 = 0x1			  ## gainpred.c:45:12
  1093ce:    01 16             	r1 = r0			  ## gainpred.c:45:12
  1093d0:    bf ea 9f f8       	call -0xec2 <B_comput_correlataionS : 108512 >			  ## gainpred.c:45:12
  1093d4:    f8 e8 1c 11       	r1 = sp + 284
  1093d8:    f8 e8 1a 21       	r2 = sp + 282
  1093dc:    bf ea 99 fc       	call -0x6ce <Log2 : 108d12 >			  ## gainpred.c:57:4
  1093e0:    d9 e9 1c 01       	r0 = h[sp+284] (s)			  ## gainpred.c:58:12
  1093e4:    d9 e9 1a 11       	r1 = h[sp+282] (s)			  ## gainpred.c:58:31
  1093e8:    c2 ff 58 3f ff ff 	r2 = 0xffff3f58 <__stub_VecMinScalar_float_c_f_c+0xFFEE3F5C : ffff3f58 >			  ## gainpred.c:58:24
  1093ee:    20 1b             	r0 *= r2			  ## gainpred.c:58:24
  1093f0:    42 e0 ac 9f       	r2 = -0x6054 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEE9FB0 : ffffffffffff9fac >			  ## gainpred.c:58:35
  1093f4:    21 1b             	r1 *= r2			  ## gainpred.c:58:35
  1093f6:    99 ae             	r1 = r1 >>> 0xe			  ## gainpred.c:58:46
  1093f8:    10 18             	r0 += r1			  ## gainpred.c:58:27
  1093fa:    00 a9             	r0 = r0 << 0x9			  ## gainpred.c:70:18
  1093fc:    c1 ff 00 00 a6 3f 	r1 = 0x3fa60000 <__stub_VecMinScalar_float_c_f_c+0x3F950004 : 3fa60000 >			  ## gainpred.c:70:18
  109402:    10 18             	r0 += r1			  ## gainpred.c:70:18
  109404:    41 20             	r1 = 0x0
  109406:    04 89             	goto 0x12 <g729_dec_run+0x55A : 10941a >
  109408:    d8 ed 6a 21       	r2 = h[r6+r1<<1] (s)			  ## gainpred.c:73:15
  10940c:    03 e1 32 f0       	r3 = r15 + 0x32			  ## gainpred.c:73:24
  109410:    d8 ed 3a 31       	r3 = h[r3+r1<<1] (s)			  ## gainpred.c:73:24
  109414:    32 1b             	r2 *= r3			  ## gainpred.c:73:22
  109416:    20 18             	r0 += r2			  ## gainpred.c:73:11
  109418:    c1 21             	r1 += 0x1			  ## gainpred.c:71:24
  10941a:    81 f8 f5 09       	if (r1 != 0x4) goto -0x16 <g729_dec_run+0x548 : 109408 >
  10941e:    80 af             	r0 = r0 >> 0xf			  ## gainpred.c:76:20
  109420:    88 17             	r0 = r0.l (s)			  ## gainpred.c:84:13
  109422:    41 e0 3f 15       	r1 = 0x153f <usb_code_size+0xA03 : 153e >			  ## gainpred.c:84:22
  109426:    01 1b             	r1 *= r0			  ## gainpred.c:84:22
  109428:    90 a8             	r0 = r1 >> 0x8
  10942a:    9a b7             	r2 = r1 >>> 0x17			  ## basop32.c:965:14
  10942c:    22 ae             	r2 = r2 << 0xe			  ## basop32.c:965:27
  10942e:    2a a1             	r2 = r2 <<< 0x1			  ## basop32.c:969:2
  109430:    80 1e             	r0 = r0 - r2			  ## basop32.c:975:21
  109432:    b2 e1 19 05       	r2 = sextra(r0, p:0xa, l:0x6)			  ## dspfunc.c:45:9
  109436:    22 a1             	r2 = r2 << 0x1			  ## dspfunc.c:45:9
  109438:    c3 ff 6c a9 10 00 	r3 = 0x10a96c <tabpow : 10a96c >			  ## dspfunc.c:45:9
  10943e:    32 18             	r2 += r3			  ## dspfunc.c:45:9
  109440:    2b 61             	r3 = h[r2+0x2] (u)			  ## dspfunc.c:46:21
  109442:    2a 60             	r2 = h[r2+0x0] (u)			  ## dspfunc.c:45:9
  109444:    ab 1e             	r3 = r2 - r3			  ## dspfunc.c:46:19
  109446:    bb 17             	r3 = r3.l (s)			  ## dspfunc.c:47:15
  109448:    00 a6             	r0 = r0 << 0x6			  ## dspfunc.c:47:18
  10944a:    80 17             	r0 = r0.l (u)			  ## dspfunc.c:47:18
  10944c:    30 1b             	r0 *= r3			  ## dspfunc.c:47:21
  10944e:    b4 e0 50 3d       	r3 = r5 + r13			  ## dec_gain.c:72:14
  109452:    54 ed 32 30       	r3 = h[r3+0x2] (s)			  ## dec_gain.c:72:12
  109456:    c4 ff fc a8 10 00 	r4 = 0x10a8fc <gbk2 : 10a8fc >			  ## dec_gain.c:73:15
  10945c:    74 18             	r4 += r7			  ## dec_gain.c:73:15
  10945e:    54 ed 42 40       	r4 = h[r4+0x2] (s)			  ## dec_gain.c:73:13
  109462:    22 b0             	r2 = r2 << 0x10			  ## dspfunc.c:45:19
  109464:    20 1e             	r0 = r2 - r0			  ## dspfunc.c:47:13
  109466:    88 b0             	r0 = r0 >>> 0x10			  ## dec_gain.c:76:18
  109468:    cf 1c             	r7 = r4 + r3			  ## dec_gain.c:74:21
  10946a:    f2 a1             	r2 = r7 >> 0x1			  ## dec_gain.c:76:13
  10946c:    20 1b             	r0 *= r2			  ## dec_gain.c:76:24
  10946e:    00 a1             	r0 = r0 << 0x1			  ## dec_gain.c:76:24
  109470:    99 a7             	r1 = r1 >>> 0x7			  ## gainpred.c:84:29
  109472:    91 b0             	r1 = r1 >> 0x10			  ## basop32.c:769:28
  109474:    f9 36             	r1 += -0xa			  ## dec_gain.c:78:40
  109476:    99 17             	r1 = r1.l (s)			  ## dec_gain.c:78:12
  109478:    bf ea 81 fc       	call -0x6fe <L_shl : 108d7e >			  ## dec_gain.c:78:12
  10947c:    80 b0             	r0 = r0 >> 0x10			  ## dec_gain.c:79:23
  10947e:    50 ed 83 00       	h[r8+0x2] = r0			  ## dec_gain.c:79:14
  109482:    40 20             	r0 = 0x0
  109484:    43 e0 81 01       	r3 = 0x181 <var_bss_size+0x78 : 180 >
  109488:    3c 81             	r4 = r3 + 0x1
  10948a:    04 87             	goto 0xe <g729_dec_run+0x5DA : 10949a >
  10948c:    01 a1             	r1 = r0 << 0x1			  ## gainpred.c:110:24
  10948e:    c1 18             	r1 += r12			  ## gainpred.c:110:24
  109490:    d8 ed 18 23       	r2 = h[r1+r3<<1] (u)			  ## gainpred.c:110:24
  109494:    d8 ed 19 24       	h[r1+r4<<1] = r2			  ## gainpred.c:110:22
  109498:    f8 3f             	r0 += -0x1			  ## gainpred.c:109:4
  10949a:    09 83             	r1 = r0 + 0x3			  ## gainpred.c:109:14
  10949c:    01 fd f6 03       	ifs (r1 >= 0x1) goto -0x14 <g729_dec_run+0x5CC : 10948c >			  ## gainpred.c:109:14
  1094a0:    f8 e8 20 11       	r1 = sp + 288
  1094a4:    f8 e8 1e 21       	r2 = sp + 286
  1094a8:    70 16             	r0 = r7			  ## gainpred.c:120:4
  1094aa:    bf ea 32 fc       	call -0x79c <Log2 : 108d12 >			  ## gainpred.c:120:4
  1094ae:    d8 e9 20 01       	r0 = h[sp+288] (u)			  ## gainpred.c:121:19
  1094b2:    d9 e9 1e 11       	r1 = h[sp+286] (s)			  ## basop32.c:906:14
  1094b6:    00 b0             	r0 = r0 << 0x10			  ## gainpred.c:121:22
  1094b8:    19 a1             	r1 = r1 <<< 0x1			  ## basop32.c:911:2
  1094ba:    10 18             	r0 += r1			  ## basop32.c:911:2
  1094bc:    00 ad             	r0 = r0 << 0xd			  ## basop32.c:917:21
  1094be:    e0 e0 c0 04       	r0 = r0 + 0x60000000			  ## gainpred.c:123:23
  1094c2:    88 b0             	r0 = r0 >>> 0x10			  ## gainpred.c:123:23
  1094c4:    41 e0 54 60       	r1 = 0x6054 <os_code_size+0x3EFF : 6054 >			  ## gainpred.c:123:26
  1094c8:    10 1b             	r0 *= r1			  ## gainpred.c:123:26
  1094ca:    80 af             	r0 = r0 >> 0xf			  ## gainpred.c:123:34
  1094cc:    50 ed 87 00       	h[r8+0x6] = r0			  ## gainpred.c:123:19
  1094d0:    55 ed bc 0b       	r0 = h[r11+0x1bc] (s)			  ## dec_ld8k.c:145:31
  1094d4:    41 e0 d9 32       	r1 = 0x32d9 <os_code_size+0x1183 : 32d8 >			  ## dec_ld8k.c:146:13
  1094d8:    35 e4 01 11       	r1 = smin(r0, r1)			  ## dec_ld8k.c:146:13
  1094dc:    42 e0 cd 0c       	r2 = 0xccd <usb_code_size+0x191 : ccc >			  ## dec_ld8k.c:147:13
  1094e0:    34 e4 11 12       	r1 = smax(r1, r2)			  ## dec_ld8k.c:147:13
  1094e4:    50 ed 81 10       	h[r8+0x0] = r1			  ## dec_ld8k.c:145:19
  1094e8:    50 ee b4 10       	r1 = b[r11+0x4] (u)			  ## dec_ld8k.c:156:17
  1094ec:    d4 e9 49 90       	[sp+72] = r9			  ## dec_ld8k.c:156:17
  1094f0:    b1 e8 00 10       	if (r1 != 0x0) {			  ## dec_ld8k.c:156:17
  1094f4:    80 14             		r1_r0 = 0
                               	} else {			  ## dec_ld8k.c:156:17
  1094f6:    50 ed 82 10       		r1 = h[r8+0x2] (u)
                               	}			  ## dec_ld8k.c:154:25
  1094fa:    d0 ec f0 20       	r2 = [r15+0x0]			  ## dec_ld8k.c:171:31
  1094fe:    eb 94             	r3 = sp + 116
  109500:    60 9f             	rep 0xe 0x20 {			  ## dec_ld8k.c:175:4
  109502:    e8 ee 21 50       		r5_r4 = h[r2 ++= 0x2]*r0 (s)			  ## dec_ld8k.c:175:4
  109506:    ec ee 31 51       		r5_r4 += h[r3 ++= 0x2]*r1 (s)			  ## dec_ld8k.c:175:4
  10950a:    de e1 4e 48       		r4 = r5_r4 >> 0xe (s)			  ## dec_ld8k.c:175:4
  10950e:    ac 7f             		h[r2+-0x2] = r4
                               	}			  ## dec_ld8k.c:175:4
  109510:    60 87             	rep 0xe 0x8 {			  ## dec_ld8k.c:175:4
  109512:    e8 ee 21 50       		r5_r4 = h[r2 ++= 0x2]*r0 (s)			  ## dec_ld8k.c:175:4
  109516:    ec ee 31 51       		r5_r4 += h[r3 ++= 0x2]*r1 (s)			  ## dec_ld8k.c:175:4
  10951a:    de e1 4e 48       		r4 = r5_r4 >> 0xe (s)			  ## dec_ld8k.c:175:4
  10951e:    ac 7f             		h[r2+-0x2] = r4
                               	}			  ## dec_ld8k.c:175:4
  109520:    f0 16             	r0 = r15			  ## dec_ld8k.c:203:29
  109522:    d8 ec 00 1a       	r1 = [r0++=0xa0]			  ## dec_ld8k.c:203:29
  109526:    49 f0 0a 00       	r9 = 0xa  # <TLB_BEGIN+0xA : a >			  ## dec_ld8k.c:203:29
  10952a:    80 2f             		 [sp+60] = r0			  ## dec_ld8k.c:203:29
  10952c:    46 2c             	r6 = 0xc			  ## dec_ld8k.c:203:29
  10952e:    a2 d6             	r2 = r10  #			  ## dec_ld8k.c:203:3
  109530:    86 21             		 [sp+4] = r6			  ## dec_ld8k.c:203:3
  109532:    4b 28             	r3 = 0x28			  ## dec_ld8k.c:203:3
  109534:    d4 e9 01 90       	[sp] = r9			  ## dec_ld8k.c:203:3
  109538:    04 2c             	r4 = [sp+48]			  ## dec_ld8k.c:203:3
  10953a:    40 16             	r0 = r4			  ## dec_ld8k.c:203:3
  10953c:    bf ea 26 f8       	call -0xfb4 <B_Syn_filt : 10858c >			  ## dec_ld8k.c:203:3
  109540:    f8 e8 22 81       	r8 = sp + 290			  ## dec_ld8k.c:203:3
  109544:    41 e0 9a 59       	r1 = 0x599a <os_code_size+0x3845 : 599a >			  ## pst.c:101:2
  109548:    40 16             	r0 = r4			  ## pst.c:101:2
  10954a:    82 16             	r2 = r8			  ## pst.c:101:2
  10954c:    bf ea 3a fc       	call -0x78c <Weight_Az : 108dc4 >			  ## pst.c:101:2
  109550:    40 16             	r0 = r4			  ## pst.c:103:2
  109552:    41 f0 66 46       	r1 = 0x4666  # <os_code_size+0x2511 : 4666 >			  ## pst.c:103:2
  109556:    04 28             		 r4 = [sp+32]			  ## pst.c:103:2
  109558:    42 16             	r2 = r4			  ## pst.c:103:2
  10955a:    bf ea 33 fc       	call -0x79a <Weight_Az : 108dc4 >			  ## pst.c:103:2
  10955e:    40 d6             	r0 = r4  #			  ## pst.c:105:2
  109560:    05 33             		 r5 = [sp+76]			  ## pst.c:105:2
  109562:    a1 d6             	r1 = r10  #			  ## pst.c:105:2
  109564:    52 65             		 r2 = [r5+0x14] 			  ## pst.c:105:41
  109566:    86 21             	[sp+4] = r6			  ## pst.c:105:2
  109568:    4b 28             	r3 = 0x28			  ## pst.c:105:2
  10956a:    d4 e9 01 90       	[sp] = r9			  ## pst.c:105:2
  10956e:    bf ea 26 f8       	call -0xfb4 <B_Residu : 1085be >			  ## pst.c:105:2
  109572:    55 65             	r5 = [r5+0x14] 			  ## pst.c:108:52
  109574:    f8 e8 38 01       	r0 = sp + 312
  109578:    47 20             	r7 = 0x0
  10957a:    00 89             	rep 0x2 0xa {			  ## pst.c:147:2
  10957c:    87 06             		h[r0++=0x2] = r7
                               	}			  ## pst.c:147:2
  10957e:    4d f0 0c 00       	r13 = 0xc  # <TLB_BEGIN+0xC : c >			  ## pst.c:147:2
  109582:    86 21             		 [sp+4] = r6			  ## pst.c:148:2
  109584:    43 34             	r3 = 0x14			  ## pst.c:148:2
  109586:    46 2a             	r6 = 0xa			  ## pst.c:148:2
  109588:    d4 e9 01 90       	[sp] = r9			  ## pst.c:148:2
  10958c:    41 16             	r1 = r4			  ## pst.c:148:2
  10958e:    80 d6             	r0 = r8  #			  ## pst.c:148:2
  109590:    04 29             		 r4 = [sp+36]			  ## pst.c:148:2
  109592:    42 16             	r2 = r4			  ## pst.c:148:2
  109594:    bf ea fa f7       	call -0x100c <B_Syn_filt : 10858c >			  ## pst.c:148:2
  109598:    42 34             	r2 = 0x14			  ## pst.c:186:9
  10959a:    43 21             	r3 = 0x1			  ## pst.c:186:9
  10959c:    40 16             	r0 = r4			  ## pst.c:186:9
  10959e:    41 16             	r1 = r4			  ## pst.c:186:9
  1095a0:    bf ea b7 f7       	call -0x1092 <B_comput_correlataionS : 108512 >			  ## pst.c:186:9
  1095a4:    08 d6             	r8 = r0  #			  ## pst.c:186:9
  1095a6:    01 2a             		 r1 = [sp+40]			  ## pst.c:187:10
  1095a8:    42 33             	r2 = 0x13			  ## pst.c:187:10
  1095aa:    40 16             	r0 = r4			  ## pst.c:187:10
  1095ac:    bf ea b1 f7       	call -0x109e <B_comput_correlataionS : 108512 >			  ## pst.c:187:10
  1095b0:    c1 14             	r9 = 0
  1095b2:    08 f8 0e 00       	if (r8 == 0x0) goto 0x1c <g729_dec_run+0x712 : 1095d2 >
  1095b6:    30 e4 00 20       	r2 = abs(r0)			  ## pst.c:187:10
  1095ba:    82 ed 0a 80       	ifs (r8 < r2) goto 0x14 <g729_dec_run+0x712 : 1095d2 >
  1095be:    ab bf             	r3 = r2 >>> 0x1f			  ## pst.c:196:11
  1095c0:    d0 e1 0f 20       	r3_r2 <<= 0xf			  ## pst.c:197:17
  1095c4:    f6 e1 20 38       	r3_r2 = r3_r2 / r8 (s)			  ## pst.c:198:21
  1095c8:    a9 e0 00 20       	r9 = 0x0 - r2			  ## basop32.c:732:16
  1095cc:    b0 ee 00 00       	ifs (r0 <= 0x0) {			  ## basop32.c:732:16
  1095d0:    29 16             		r9 = r2
                               	}			  ## pst.c:200:6
  1095d2:    42 2a             	r2 = 0xa
  1095d4:    04 88             	goto 0x10 <g729_dec_run+0x726 : 1095e6 >
  1095d6:    f8 e8 38 01       	r0 = sp + 312
  1095da:    d8 ed 0a 02       	r0 = h[r0+r2<<1] (s)			  ## pst.c:156:11
  1095de:    bf ea 0e fc       	call -0x7e4 <abs_s : 108dfe >			  ## pst.c:156:11
  1095e2:    07 18             	r7 += r0			  ## pst.c:156:8
  1095e4:    c2 21             	r2 += 0x1			  ## pst.c:155:2
  1095e6:    82 f8 f6 3d       	if (r2 != 0x1e) goto -0x14 <g729_dec_run+0x716 : 1095d6 >
  1095ea:    f0 a2             	r0 = r7 >> 0x2			  ## pst.c:158:12
  1095ec:    89 17             	r1 = r0.l (s)			  ## pst.c:161:8
  1095ee:    0b ff 01 14 0f 00 	ifs (r1 < 0x401) goto 0x1e <g729_dec_run+0x752 : 109612 >			  ## pst.c:161:8
  1095f4:    40 e0 00 04       	r0 = 0x400 <ROM_RAM_SIZE+0xE0 : 400 >			  ## pst.c:162:10
  1095f8:    bf ea 09 fc       	call -0x7ee <div_s : 108e0e >			  ## pst.c:162:10
  1095fc:    41 20             	r1 = 0x0
  1095fe:    04 87             	goto 0xe <g729_dec_run+0x74E : 10960e >
  109600:    d8 ed 5a 21       	r2 = h[r5+r1<<1] (s)			  ## pst.c:164:22
  109604:    02 1b             	r2 *= r0			  ## pst.c:164:41
  109606:    a2 af             	r2 = r2 >> 0xf			  ## pst.c:164:54
  109608:    d8 ed 59 21       	h[r5+r1<<1] = r2			  ## pst.c:164:19
  10960c:    c1 21             	r1 += 0x1			  ## pst.c:163:27
  10960e:    81 f8 f7 51       	if (r1 != 0x28) goto -0x12 <g729_dec_run+0x740 : 109600 >
  109612:    04 33             	r4 = [sp+76]
  109614:    41 65             	r1 = [r4+0x14] 			  ## pst.c:113:31
  109616:    d4 e9 05 d0       	[sp+4] = r13			  ## pst.c:113:2
  10961a:    f8 e8 22 01       	r0 = sp + 290			  ## pst.c:113:2
  10961e:    4b 28             	r3 = 0x28			  ## pst.c:113:2
  109620:    12 d6             	r2 = r1  #			  ## pst.c:113:2
  109622:    86 20             		 [sp] = r6			  ## pst.c:113:2
  109624:    bf ea b2 f7       	call -0x109c <B_Syn_filt : 10858c >			  ## pst.c:113:2
  109628:    d0 ec 44 d1       	r13 = [r4+0x14]			  ## pst.c:116:20
  10962c:    b0 e1 41 90       	r0 = sextra(r9, p:0x0, l:0x10)			  ## pst.c:226:14
  109630:    30 ee 00 b0       	ifs (r0 > 0x0) {
  109634:    47 2f             		r7 = 0xf
  109636:    48 e0 00 40       		r8 = 0x4000 <os_code_size+0x1EAB : 4000 >
  10963a:    41 e0 9a 19       		r1 = 0x199a
                               	} else { <usb_code_size+0xE5F : 199a >
  10963e:    47 2c             		r7 = 0xc
  109640:    48 e0 00 08       		r8 = 0x800 <stack_bss_size : 800 >
  109644:    41 e0 33 73       		r1 = 0x7333
                               	} <os_code_size+0x51DD : 7332 >
  109648:    bf ea f1 fb       	call -0x81e <mult_r : 108e2e >			  ## pst.c:234:8
  10964c:    0b 16             	r11 = r0			  ## pst.c:234:8
  10964e:    bf ea d6 fb       	call -0x854 <abs_s : 108dfe >			  ## pst.c:241:16
  109652:    a0 e0 01 00       	r0 = 0x1 - r0			  ## basop32.c:305:24
  109656:    78 e0 01 10       	r1 = sat16(r0) (s)			  ## basop32.c:309:2
  10965a:    98 17             	r0 = r1.l (s)			  ## basop32.c:257:25
  10965c:    41 e0 ff 7f       	r1 = 0x7fff <os_code_size+0x5EA9 : 7ffe >			  ## basop32.c:257:23
  109660:    10 18             	r0 += r1			  ## basop32.c:257:23
  109662:    78 e0 01 10       	r1 = sat16(r0) (s)			  ## basop32.c:261:2
  109666:    99 17             	r1 = r1.l (s)			  ## pst.c:243:7
  109668:    80 16             	r0 = r8			  ## pst.c:243:7
  10966a:    bf ea d0 fb       	call -0x860 <div_s : 108e0e >			  ## pst.c:243:7
  10966e:    09 16             	r9 = r0			  ## pst.c:243:7
  109670:    c0 e1 b1 6c       	r6 = r11 >>> 0x1			  ## pst.c:243:7
  109674:    7c 28             	r4 = 0xe8			  ## pst.c:243:7
  109676:    04 9d             	goto 0x3a <g729_dec_run+0x7F2 : 1096b2 >
  109678:    b4 e0 d0 14       	r1 = r13 + r4			  ## pst.c:248:15
  10967c:    57 ed 18 01       	r0 = h[r1+-0xe8] (s)			  ## pst.c:250:12
  109680:    57 ed 16 51       	r5 = h[r1+-0xea] (s)			  ## basop32.c:906:28
  109684:    41 2f             	r1 = 0xf			  ## pst.c:251:11
  109686:    bf ea 7a fb       	call -0x90c <L_shl : 108d7e >			  ## pst.c:251:11
  10968a:    f0 e1 50 16       	r1 = r5 * r6			  ## basop32.c:906:27
  10968e:    19 a1             	r1 = r1 <<< 0x1			  ## basop32.c:911:2
  109690:    10 18             	r0 += r1			  ## basop32.c:917:21
  109692:    e0 e0 80 0c       	r0 = r0 + 0x4000			  ## basop32.c:1029:21
  109696:    80 af             	r0 = r0 >> 0xf
  109698:    88 17             	r0 = r0.l (s)			  ## pst.c:256:18
  10969a:    91 16             	r1 = r9			  ## pst.c:256:18
  10969c:    bf ea d6 fb       	call -0x854 <L_mult : 108e4c >			  ## pst.c:256:18
  1096a0:    80 18             	r0 += r8			  ## basop32.c:1029:21
  1096a2:    71 16             	r1 = r7			  ## pst.c:257:12
  1096a4:    bf ea 5b fb       	call -0x94a <L_shr : 108d5e >			  ## pst.c:257:12
  1096a8:    78 e0 01 00       	r0 = sat16(r0) (s)			  ## basop32.c:212:2
  1096ac:    d8 ed c1 04       	h[r12+r4] = r0			  ## pst.c:258:14
  1096b0:    c4 22             	r4 += 0x2			  ## pst.c:248:2
  1096b2:    a4 f8 e1 71       	if (r4 != 0x138) goto -0x3e <g729_dec_run+0x7B8 : 109678 >			  ## pst.c:248:2
  1096b6:    42 20             	r2 = 0x0
  1096b8:    41 20             	r1 = 0x0
  1096ba:    d4 e9 34 b0       	r11 = [sp+52]
  1096be:    cd ff dc a8 10 00 	r13 = 0x10a8dc <gbk1 : 10a8dc >
  1096c4:    06 32             	r6 = [sp+72]
  1096c6:    04 86             	goto 0xc <g729_dec_run+0x814 : 1096d4 >
  1096c8:    d8 ed aa 01       	r0 = h[r10+r1<<1] (s)			  ## basop32.c:1594:14
  1096cc:    bf ea c1 fb       	call -0x87e <L_abs : 108e52 >			  ## pst.c:284:12
  1096d0:    02 18             	r2 += r0			  ## basop32.c:1029:21
  1096d2:    c1 21             	r1 += 0x1			  ## pst.c:283:26
  1096d4:    81 f8 f8 51       	if (r1 != 0x28) goto -0x10 <g729_dec_run+0x808 : 1096c8 >
  1096d8:    45 20             	r5 = 0x0
  1096da:    47 20             	r7 = 0x0
  1096dc:    22 53             	if (r2 == 0) goto 0xa6 <g729_dec_run+0x8C4 : 109784 >
  1096de:    20 16             	r0 = r2			  ## pst.c:292:13
  1096e0:    bf ea 05 fb       	call -0x9f6 <norm_l : 108cee >			  ## pst.c:292:13
  1096e4:    08 16             	r8 = r0			  ## pst.c:292:13
  1096e6:    20 16             	r0 = r2			  ## pst.c:293:11
  1096e8:    81 16             	r1 = r8			  ## pst.c:293:11
  1096ea:    bf ea 48 fb       	call -0x970 <L_shl : 108d7e >			  ## pst.c:293:11
  1096ee:    c0 e1 00 99       	r9 = r0 >> 0x10			  ## basop32.c:769:28
  1096f2:    42 20             	r2 = 0x0
  1096f4:    41 20             	r1 = 0x0
  1096f6:    04 86             	goto 0xc <g729_dec_run+0x844 : 109704 >
  1096f8:    d8 ed ea 01       	r0 = h[r14+r1<<1] (s)			  ## basop32.c:1594:14
  1096fc:    bf ea a9 fb       	call -0x8ae <L_abs : 108e52 >			  ## pst.c:299:13
  109700:    02 18             	r2 += r0			  ## basop32.c:1029:21
  109702:    c1 21             	r1 += 0x1			  ## pst.c:298:27
  109704:    81 f8 f8 51       	if (r1 != 0x28) goto -0x10 <g729_dec_run+0x838 : 1096f8 >
  109708:    12 4c             	if (r2 == 0) goto 0x58 <g729_dec_run+0x8A2 : 109762 >
  10970a:    20 16             	r0 = r2			  ## pst.c:306:14
  10970c:    bf ea ef fa       	call -0xa22 <norm_l : 108cee >			  ## pst.c:306:14
  109710:    07 16             	r7 = r0			  ## pst.c:306:14
  109712:    20 16             	r0 = r2			  ## pst.c:307:11
  109714:    71 16             	r1 = r7			  ## pst.c:307:11
  109716:    bf ea 32 fb       	call -0x99c <L_shl : 108d7e >			  ## pst.c:307:11
  10971a:    02 16             	r2 = r0			  ## pst.c:307:11
  10971c:    a3 b0             	r3 = r2 >> 0x10			  ## basop32.c:769:28
  10971e:    00 e1 01 80       	r0 = r8 + 0x1			  ## basop32.c:257:23
  109722:    78 e0 01 10       	r1 = sat16(r0) (s)			  ## basop32.c:261:2
  109726:    98 17             	r0 = r1.l (s)			  ## pst.c:311:11
  109728:    71 16             	r1 = r7			  ## pst.c:311:11
  10972a:    bf ea 9a fb       	call -0x8cc <sub : 108e62 >			  ## pst.c:311:11
  10972e:    07 16             	r7 = r0			  ## pst.c:311:11
  109730:    a9 b0             	r1 = r2 >>> 0x10			  ## pst.c:312:7
  109732:    b2 e1 41 90       	r2 = sextra(r9, p:0x0, l:0x10)			  ## pst.c:312:7
  109736:    20 16             	r0 = r2			  ## pst.c:312:7
  109738:    bf ea 93 fb       	call -0x8da <sub : 108e62 >			  ## pst.c:312:7
  10973c:    f0 fe 14 fe       	ifs (r0 <= -0x1) goto 0x28 <g729_dec_run+0x8A8 : 109768 >			  ## pst.c:312:7
  109740:    bb 17             	r3 = r3.l (s)			  ## pst.c:316:11
  109742:    20 15             	r1_r0 = r3_r2			  ## pst.c:316:11
  109744:    bf ea 8d fb       	call -0x8e6 <sub : 108e62 >			  ## pst.c:316:11
  109748:    31 16             	r1 = r3			  ## pst.c:317:13
  10974a:    bf ea 60 fb       	call -0x940 <div_s : 108e0e >			  ## pst.c:317:13
  10974e:    88 a1             	r0 = r0 >>> 0x1			  ## basop32.c:257:10
  109750:    e1 e0 80 0c       	r1 = r0 + 0x4000			  ## basop32.c:257:23
  109754:    78 e0 01 01       	r0 = sat16(r1) (s)			  ## basop32.c:261:2
  109758:    31 e1 ff 7f       	r1 = r7 + -0x1			  ## basop32.c:305:24
  10975c:    78 e0 01 71       	r7 = sat16(r1) (s)			  ## basop32.c:309:2
  109760:    04 87             	goto 0xe <g729_dec_run+0x8B0 : 109770 >			  ## basop32.c:309:2
  109762:    44 20             	r4 = 0x0
  109764:    06 32             	r6 = [sp+72]
  109766:    14 8a             	goto 0x54 <g729_dec_run+0x8FC : 1097bc >
  109768:    b9 17             	r1 = r3.l (s)			  ## pst.c:313:9
  10976a:    20 16             	r0 = r2			  ## pst.c:313:9
  10976c:    bf ea 4f fb       	call -0x962 <div_s : 108e0e >			  ## pst.c:313:9
  109770:    88 17             	r0 = r0.l (s)			  ## pst.c:323:8
  109772:    f9 17             	r1 = r7.l (s)			  ## pst.c:323:8
  109774:    bf ea 7a fb       	call -0x90c <shr : 108e6c >			  ## pst.c:323:8
  109778:    41 e0 9a 01       	r1 = 0x19a <var_bss_size+0x92 : 19a >			  ## pst.c:324:8
  10977c:    bf ea 57 fb       	call -0x952 <mult_r : 108e2e >			  ## pst.c:324:8
  109780:    07 d6             	r7 = r0  #			  ## pst.c:324:8
  109782:    06 32             		 r6 = [sp+72]			  ## pst.c:324:8
  109784:    00 33             	r0 = [sp+76]			  ## pst.c:330:9
  109786:    0c 6e             	r4 = h[r0+0x1c] (u)			  ## pst.c:330:9
  109788:    04 96             	goto 0x2c <g729_dec_run+0x8F6 : 1097b6 >
  10978a:    c9 17             	r1 = r4.l (s)			  ## pst.c:332:10
  10978c:    40 e0 66 7e       	r0 = 0x7e66 <os_code_size+0x5D11 : 7e66 >			  ## pst.c:332:10
  109790:    bf ea 4d fb       	call -0x966 <mult_r : 108e2e >			  ## pst.c:332:10
  109794:    70 18             	r0 += r7			  ## basop32.c:257:23
  109796:    78 e0 01 40       	r4 = sat16(r0) (s)			  ## basop32.c:261:2
  10979a:    d8 ed ea 15       	r1 = h[r14+r5<<1] (s)			  ## pst.c:334:12
  10979e:    c8 17             	r0 = r4.l (s)			  ## pst.c:334:12
  1097a0:    bf ea 54 fb       	call -0x958 <L_mult : 108e4c >			  ## pst.c:334:12
  1097a4:    41 21             	r1 = 0x1			  ## pst.c:335:12
  1097a6:    bf ea ea fa       	call -0xa2c <L_shl : 108d7e >			  ## pst.c:335:12
  1097aa:    e0 e0 00 0c       	r0 = r0 + 0x8000			  ## basop32.c:1029:21
  1097ae:    80 b0             	r0 = r0 >> 0x10			  ## basop32.c:769:28
  1097b0:    d8 ed e9 05       	h[r14+r5<<1] = r0			  ## pst.c:336:14
  1097b4:    c5 21             	r5 += 0x1			  ## pst.c:331:26
  1097b6:    85 f8 e8 51       	if (r5 != 0x28) goto -0x30 <g729_dec_run+0x8CA : 10978a >
  1097ba:    45 20             	r5 = 0x0
  1097bc:    01 33             	r1 = [sp+76]
  1097be:    9c 6e             	h[r1+0x1c] = r4			  ## pst.c:303:15
  1097c0:    00 2b             	r0 = [sp+44]			  ## pst.c:121:2
  1097c2:    10 84             	rep 0x4 0x5 {			  ## pst.c:121:2
  1097c4:    12 05             		r2 = [r1++=0x4] 			  ## pst.c:121:2
  1097c6:    82 05             		[r0++=0x4] = r2
                               	}			  ## pst.c:121:2
  1097c8:    4b 28             	r3 = 0x28			  ## post_pro.c:69:3
  1097ca:    e1 d6             	r1 = r14  #			  ## post_pro.c:69:3
  1097cc:    00 2f             		 r0 = [sp+60]			  ## post_pro.c:69:3
  1097ce:    e2 16             	r2 = r14			  ## post_pro.c:69:3
  1097d0:    bf ea 84 f6       	call -0x12f8 <B_iircal : 1084dc >			  ## post_pro.c:69:3
  1097d4:    d0 ec b0 10       	r1 = [r11+0x0]			  ## dec_ld8k.c:56:21
  1097d8:    58 34             	r0 = 0x74
  1097da:    04 8f             	goto 0x1e <g729_dec_run+0x93A : 1097fa >
  1097dc:    d8 ed ca 20       	r2 = h[r12+r0<<1] (s)			  ## dec_ld8k.c:60:41
  1097e0:    23 a7             	r3 = r2 << 0x7			  ## dec_ld8k.c:60:50
  1097e2:    e1 e1 ff 10       	r1 = r1 * 0xFF			  ## dec_ld8k.c:60:33
  1097e6:    31 18             	r1 += r3			  ## dec_ld8k.c:60:39
  1097e8:    d9 3f             	r1 += 0x7f			  ## dec_ld8k.c:60:54
  1097ea:    9b af             	r3 = r1 >>> 0xf			  ## dec_ld8k.c:61:35
  1097ec:    aa 1e             	r2 = r2 - r3			  ## dec_ld8k.c:61:19
  1097ee:    78 e0 01 32       	r3 = sat16(r2) (s)			  ## dec_ld8k.c:62:4
  1097f2:    d8 ed c9 30       	h[r12+r0<<1] = r3			  ## dec_ld8k.c:63:14
  1097f6:    99 a8             	r1 = r1 >>> 0x8			  ## dec_ld8k.c:60:59
  1097f8:    c0 21             	r0 += 0x1			  ## dec_ld8k.c:57:2
  1097fa:    90 f8 ef 39       	if (r0 != 0x9c) goto -0x22 <g729_dec_run+0x91C : 1097dc >
  1097fe:    d0 ec b1 10       	[r11+0x0] = r1			  ## dec_ld8k.c:65:15
  109802:    00 30             	r0 = [sp+64]			  ## dec_ld8k.c:216:7
  109804:    80 45             	if (r0 != 0) goto 0xa <g729_dec_run+0x950 : 109810 >			  ## dec_ld8k.c:216:7
  109806:    e0 d6             	r0 = r14  #			  ## dec_ld8k.c:218:4
  109808:    01 23             		 r1 = [sp+12]			  ## dec_ld8k.c:218:4
  10980a:    10 93             	rep 0x4 0x14 {			  ## dec_ld8k.c:218:4
  10980c:    02 05             		r2 = [r0++=0x4] 			  ## dec_ld8k.c:218:4
  10980e:    92 05             		[r1++=0x4] = r2
                               	}			  ## dec_ld8k.c:218:4
  109810:    09 e1 06 60       	r9 = r6 + 0x6			  ## dec_ld8k.c:139:22
  109814:    42 e0 34 01       	r2 = 0x134 <var_bss_size+0x2C : 134 >			  ## dec_ld8k.c:223:3
  109818:    d0 e9 10 00       	r1_r0 = d[sp+16]			  ## dec_ld8k.c:223:3
  10981c:    bf ea 90 d8       	call -0x4ee0 <memmove : 104940 >			  ## dec_ld8k.c:223:3
  109820:    c1 d6             	r1 = r12  #			  ## dec_ld8k.c:224:3
  109822:    00 2e             		 r0 = [sp+56]			  ## dec_ld8k.c:224:3
  109824:    10 84             	rep 0x4 0x5 {			  ## dec_ld8k.c:224:3
  109826:    02 05             		r2 = [r0++=0x4] 			  ## dec_ld8k.c:224:3
  109828:    92 05             		[r1++=0x4] = r2
                               	}			  ## dec_ld8k.c:224:3
  10982a:    02 31             	r2 = [sp+68]			  ## dec_ld8k.c:224:3
  10982c:    ca 28             	r2 += 0x28			  ## dec_ld8k.c:106:50
  10982e:    a9 17             	r1 = r2.l (s)			  ## dec_ld8k.c:106:31
  109830:    0d ff 4f 10 17 fd 	ifs (r1 <= 0x4f) goto -0x5d2 <g729_dec_run+0x3A4 : 109264 >			  ## dec_ld8k.c:106:31
  109836:    05 22             	r5 = [sp+8]
  109838:    5c 41             	r4 = b[r5+0x1] (u)			  ## dec_ld8k.c:228:18
  10983a:    01 33             	r1 = [sp+76]			  ## dec_ld8k.c:228:18
  10983c:    10 68             	r0 = [r1+0x20] 			  ## dec_ld8k.c:228:18
  10983e:    13 6b             	r3 = [r1+0x2c] 			  ## dec_ld8k.c:228:18
  109840:    6a 20             	r2 = 0xa0			  ## dec_ld8k.c:230:17
  109842:    01 23             	r1 = [sp+12]			  ## dec_ld8k.c:230:17
  109844:    c3 00             	call r3			  ## dec_ld8k.c:230:17
  109846:    b4 e8 00 80       	if (r4 != 0x0) {
  10984a:    d8 43             		b[r5+0x3] = r0			  ## dec_ld8k.c:231:24
  10984c:    a0 e0 a0 00       		r0 = 0xA0 - r0			  ## dec_ld8k.c:232:46
  109850:    d8 42             		b[r5+0x2] = r0
                               	}			  ## dec_ld8k.c:232:29
  109852:    40 20             	r0 = 0x0			  ## dec_ld8k.c:232:29
  109854:    42 9d             	sp += 0x174
  109856:    5f 04             	{pc, r15-r4} = [sp++]			  ## decoder.c:93:1


g729dec_init:
  109858:    78 04             	[--sp] = {rets, r8-r4}			  ## decoder.c:31:0
  10985a:    18 16             	r8 = r1			  ## decoder.c:31:0
  10985c:    04 16             	r4 = r0			  ## decoder.c:31:0
  10985e:    41 20             	r1 = 0x0			  ## decoder.c:34:2
  109860:    42 e0 48 04       	r2 = 0x448 <ROM_RAM_SIZE+0x128 : 448 >			  ## decoder.c:34:2
  109864:    46 20             	r6 = 0x0
  109866:    bf ea e0 d8       	call -0x4e40 <memset : 104a2a >			  ## decoder.c:34:2
  10986a:    48 94             	r0 = r4 + 0x14			  ## decoder.c:35:56
  10986c:    d0 ec 45 06       	[r4+0x64] = r0			  ## decoder.c:35:26
  109870:    00 e1 78 42       	r0 = r4 + 0x278			  ## decoder.c:35:26
  109874:    09 82             	r1 = r0 + 0x2			  ## dec_ld8k.c:27:46
  109876:    d2 ec 4d 1c       	[r4+0x2cc] = r1			  ## dec_ld8k.c:27:16
  10987a:    41 e0 7c 01       	r1 = 0x17c <var_bss_size+0x74 : 17c >			  ## dec_ld8k.c:29:13
  10987e:    42 e0 cd 0c       	r2 = 0xccd <usb_code_size+0x191 : ccc >			  ## dec_ld8k.c:29:20
  109882:    d8 ed 49 21       	h[r4+r1<<1] = r2			  ## dec_ld8k.c:29:20
  109886:    02 e1 8e 00       	r2 = r0 + 0x8e			  ## dec_ld8k.c:31:18
  10988a:    c1 ff c0 a8 10 00 	r1 = 0x10a8c0 <freq_prev_reset : 10a8c0 >			  ## dec_ld8k.c:31:18
  109890:    04 86             	goto 0xc <g729dec_init+0x46 : 10989e >			  ## dec_ld8k.c:31:18
  109892:    a3 1d             	r3 = r2 + r6			  ## lspdec.c:30:4
  109894:    17 16             	r7 = r1			  ## lspdec.c:30:4
  109896:    10 89             	rep 0x4 0xa {			  ## lspdec.c:30:4
  109898:    75 06             		r5 = h[r7++=0x2] (u)			  ## lspdec.c:30:4
  10989a:    b5 06             		h[r3++=0x2] = r5
                               	}			  ## lspdec.c:30:4
  10989c:    c6 34             	r6 += 0x14			  ## lspdec.c:28:3
  10989e:    86 f8 f8 a1       	if (r6 != 0x50) goto -0x10 <g729dec_init+0x3A : 109892 >
  1098a2:    02 e1 e0 00       	r2 = r0 + 0xe0			  ## dec_ld8k.c:31:58
  1098a6:    10 89             	rep 0x4 0xa {			  ## lspdec.c:35:3
  1098a8:    13 06             		r3 = h[r1++=0x2] (u)			  ## lspdec.c:35:3
  1098aa:    a3 06             		h[r2++=0x2] = r3
                               	}			  ## lspdec.c:35:3
  1098ac:    00 e1 86 00       	r0 = r0 + 0x86			  ## dec_ld8k.c:33:8
  1098b0:    41 20             	r1 = 0x0			  ## dec_ld8k.c:33:8
  1098b2:    60 e0 48 2c       	r2 = 0xC800			  ## dec_ld8k.c:33:8
  1098b6:    04 83             	goto 0x6 <g729dec_init+0x66 : 1098be >			  ## dec_ld8k.c:33:8
  1098b8:    d8 ed 09 21       	h[r0+r1<<1] = r2			  ## dec_ld8k.c:35:29
  1098bc:    c1 21             	r1 += 0x1			  ## dec_ld8k.c:33:23
  1098be:    81 f8 fb 09       	if (r1 != 0x4) goto -0xa <g729dec_init+0x60 : 1098b8 >
  1098c2:    c0 ff 70 99 10 00 	r0 = 0x109970 <hpfilt100 : 109970 >			  ## dec_ld8k.c:38:30
  1098c8:    05 e1 6c 43       	r5 = r4 + 0x36c			  ## dec_ld8k.c:38:30
  1098cc:    40 d6             	r0 = r4  #			  ## decoder.c:38:2
  1098ce:    d0 60             		 [r5+0x0] = r0			  ## dec_ld8k.c:38:30
  1098d0:    41 ea 0d 50       	[r5+0x4] = 0xD			  ## dec_ld8k.c:39:32
  1098d4:    bf ea 13 f9       	call -0xdda <Init_Post_Filter : 108afe >			  ## decoder.c:38:2
  1098d8:    00 e1 b0 50       	r0 = r5 + 0xb0			  ## decoder.c:40:28
  1098dc:    20 85             	rep 0x6 0x6 {			  ## decoder.c:40:2
  1098de:    d8 ec 84 10       		r1 = [r8++=0x4]			  ## decoder.c:40:2
  1098e2:    81 05             		[r0++=0x4] = r1
                               	}			  ## decoder.c:40:2
  1098e4:    40 e0 40 1f       	r0 = 0x1f40 <usb_code_size+0x1405 : 1f40 >			  ## decoder.c:42:32
  1098e8:    04 e1 1c 44       	r4 = r4 + 0x41c			  ## decoder.c:42:32
  1098ec:    c8 6f             	h[r4+0x1e] = r0			  ## decoder.c:42:32
  1098ee:    48 ea 01 40       	[r4+0x20] = 0x1			  ## decoder.c:43:33
  1098f2:    c8 6e             	h[r4+0x1c] = r0			  ## decoder.c:44:32
  1098f4:    40 60             	r0 = [r4+0x0] 			  ## decoder.c:46:82
  1098f6:    41 64             	r1 = [r4+0x10] 			  ## decoder.c:46:43
  1098f8:    c1 00             	call r1			  ## decoder.c:46:14
  1098fa:    41 e0 e8 03       	r1 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >			  ## decoder.c:48:51
  1098fe:    f4 e1 01 11       	r1 = r0 / r1 (s)			  ## decoder.c:48:51
  109902:    40 20             	r0 = 0x0			  ## decoder.c:51:2
  109904:    c1 69             	[r4+0x24] = r1			  ## decoder.c:48:40
  109906:    58 04             	{pc, r8-r4} = [sp++]			  ## decoder.c:51:2


type_check:
  109908:    40 20             	r0 = 0x0			  ## decoder.c:56:0
  10990a:    80 00             	rts			  ## decoder.c:57:2


get_dec_inf:
  10990c:    00 e1 38 04       	r0 = r0 + 0x438			  ## decoder.c:152:0
  109910:    80 00             	rts			  ## decoder.c:154:2


get_time:
  109912:    40 20             	r0 = 0x0			  ## decoder.c:116:0
  109914:    80 00             	rts			  ## decoder.c:117:2


get_bp_inf:
  109916:    80 00             	rts			  ## decoder.c:122:0


need_buf:
  109918:    40 e0 48 04       	r0 = 0x448 <ROM_RAM_SIZE+0x128 : 448 >			  ## decoder.c:98:0
  10991c:    80 00             	rts			  ## decoder.c:99:2


need_rdbuf_size:
  10991e:    40 2a             	r0 = 0xa			  ## decoder.c:128:0
  109920:    80 00             	rts			  ## decoder.c:129:2


need_bpbuf_size:
  109922:    40 24             	r0 = 0x4			  ## decoder.c:134:0
  109924:    80 00             	rts			  ## decoder.c:135:2


set_step:
  109926:    80 00             	rts			  ## decoder.c:140:0


set_err_info:
  109928:    80 00             	rts			  ## decoder.c:146:0


g729_dec_config:
  10992a:    31 e8 80 80       	if (r1 == 0x80) {			  ## decoder.c:104:0
  10992e:    21 60             		r1 = [r2+0x0] 			  ## decoder.c:109:46
  109930:    42 e0 45 04       		r2 = 0x445 <ROM_RAM_SIZE+0x124 : 444 >			  ## decoder.c:109:21
  109934:    d8 ee 01 12       		b[r0+r2] = r1
                               	}			  ## decoder.c:109:33
  109938:    40 20             	r0 = 0x0			  ## decoder.c:111:2
  10993a:    80 00             	rts			  ## decoder.c:111:2


g729dec_context:
  10993c:	 5b fb 10 00 58 98 10 00         [...X...
  109944:	 08 99 10 00 c0 8e 10 00         ........
  10994c:	 0c 99 10 00 12 99 10 00         ........
  109954:	 16 99 10 00 18 99 10 00         ........
  10995c:	 1e 99 10 00 22 99 10 00         ...."...
  109964:	 26 99 10 00 28 99 10 00         &...(...
  10996c:	 2a 99 10 00                     *...


hpfilt100:
  109970:	 26 3c 00 00 b4 87 ff ff         &<......
  109978:	 26 3c 00 00 dc 3d 00 00         &<...=..
  109980:	 0d e2 ff ff                     ....


inter32_fir_tab:
  109984:	 00 00 00 00 52 67 ff ff         ....Rg..
  10998c:	 6f 53 ff ff 00 00 00 00         oS......
  109994:	 2a f7 00 00 f8 2f 01 00         *..../..
  10999c:	 00 00 00 00 bc 31 fe ff         .....1..
  1099a4:	 b0 c9 fd ff 00 00 00 00         ........
  1099ac:	 aa 3f 03 00 97 e4 03 00         .?......
  1099b4:	 00 00 00 00 7f 85 fa ff         ........
  1099bc:	 5c 8e f9 ff 00 00 00 00         \.......
  1099c4:	 dd cd 08 00 85 3f 0a 00         .....?..
  1099cc:	 00 00 00 00 5a 25 f2 ff         ....Z%..
  1099d4:	 80 dc ef ff 00 00 00 00         ........
  1099dc:	 2e 36 16 00 76 67 1a 00         .6..vg..
  1099e4:	 00 00 00 00 2c aa d8 ff         ....,...
  1099ec:	 7f af cd ff 00 00 00 00         ........
  1099f4:	 40 be 67 00 a6 10 d1 00         @.g.....
  1099fc:	 a4 70 fd 00 a6 10 d1 00         .p......
  109a04:	 40 be 67 00 00 00 00 00         @.g.....
  109a0c:	 7f af cd ff 2c aa d8 ff         ....,...
  109a14:	 00 00 00 00 76 67 1a 00         ....vg..
  109a1c:	 2e 36 16 00 00 00 00 00         .6......
  109a24:	 80 dc ef ff 5a 25 f2 ff         ....Z%..
  109a2c:	 00 00 00 00 85 3f 0a 00         .....?..
  109a34:	 dd cd 08 00 00 00 00 00         ........
  109a3c:	 5c 8e f9 ff 7f 85 fa ff         \.......
  109a44:	 00 00 00 00 97 e4 03 00         ........
  109a4c:	 aa 3f 03 00 00 00 00 00         .?......
  109a54:	 b0 c9 fd ff bc 31 fe ff         .....1..
  109a5c:	 00 00 00 00 f8 2f 01 00         ...../..
  109a64:	 2a f7 00 00 00 00 00 00         *.......
  109a6c:	 6f 53 ff ff 52 67 ff ff         oS..Rg..
  109a74:	 00 00 00 00                     ....


table2:
  109a78:	 ff 7f d9 7f 62 7f 9d 7e         ....b..~
  109a80:	 8a 7d 2a 7c 7d 7a 85 78         .}*|}z.x
  109a88:	 42 76 b6 73 e3 70 ca 6d         Bv.s.p.m
  109a90:	 6e 6a d0 66 f2 62 d7 5e         nj.f.b.^
  109a98:	 82 5a f6 55 34 51 40 4c         .Z.U4Q@L
  109aa0:	 1d 47 ce 41 57 3c ba 36         .G.AW<.6
  109aa8:	 fc 30 1f 2b 28 25 1a 1f         .0.+(%..
  109ab0:	 f9 18 c8 12 8c 0c 48 06         ......H.
  109ab8:	 00 00 b8 f9 74 f3 38 ed         ....t.8.
  109ac0:	 07 e7 e6 e0 d8 da e1 d4         ........
  109ac8:	 04 cf 46 c9 a9 c3 32 be         ..F...2.
  109ad0:	 e3 b8 c0 b3 cc ae 0a aa         ........
  109ad8:	 7e a5 29 a1 0e 9d 30 99         ~.)...0.
  109ae0:	 92 95 36 92 1d 8f 4a 8c         ..6...J.
  109ae8:	 be 89 7b 87 83 85 d6 83         ..{.....
  109af0:	 76 82 63 81 9e 80 27 80         v.c...'.


slope_cos:
  109af8:	 88 fd 9b f8 b2 f3 d1 ee         ........
  109b00:	 fa e9 31 e5 78 e0 d3 db         ..1.x...
  109b08:	 44 d7 ce d2 74 ce 39 ca         D...t.9.
  109b10:	 1f c6 28 c2 58 be b0 ba         ..(.X...
  109b18:	 33 b7 e2 b3 c1 b0 d1 ad         3.......
  109b20:	 13 ab 8a a8 36 a6 1a a4         ....6...
  109b28:	 37 a2 8d a0 1f 9f ec 9d         7.......
  109b30:	 f6 9c 3c 9c c0 9b 82 9b         ..<.....
  109b38:	 82 9b c0 9b 3c 9c f6 9c         ....<...
  109b40:	 ec 9d 1f 9f 8d a0 37 a2         ......7.
  109b48:	 1a a4 36 a6 8a a8 13 ab         ..6.....
  109b50:	 d1 ad c1 b0 e2 b3 33 b7         ......3.
  109b58:	 b0 ba 58 be 28 c2 1f c6         ..X.(...
  109b60:	 39 ca 74 ce ce d2 44 d7         9.t...D.
  109b68:	 d3 db 78 e0 31 e5 fa e9         ..x.1...
  109b70:	 d1 ee b2 f3 9b f8 88 fd         ........


lspcb1:
  109b78:	 ce 05 78 08 a7 0e 72 23         ..x...r#
  109b80:	 66 2f 78 36 3f 46 e5 4a         f/x6?F.J
  109b88:	 c6 52 3c 55 c2 06 50 0a         .R<U..P.
  109b90:	 7a 0d 06 13 ee 17 c4 1e         z.......
  109b98:	 1c 3d 99 45 46 4f 8e 55         .=.EFO.U
  109ba0:	 20 06 d0 08 10 0c 0a 13          .......
  109ba8:	 37 2b 51 34 83 47 5d 4b         7+Q4.G]K
  109bb0:	 75 52 ed 54 c5 06 d0 09         uR.T....
  109bb8:	 1d 0d 64 12 41 1b 38 28         ..d.A.8(
  109bc0:	 80 42 24 46 c9 4a 7e 4f         .B$F.J~O
  109bc8:	 d0 06 84 09 ec 0c 1b 22         ......."
  109bd0:	 c0 28 e7 2e fe 3c ff 40         .(...<.@
  109bd8:	 6f 53 99 55 fa 06 41 09         oS.U..A.
  109be0:	 2c 0d a9 11 8b 1a a3 32         ,......2
  109be8:	 0a 45 2c 4a 77 51 88 54         .E,JwQ.T
  109bf0:	 5f 06 81 09 21 0d b8 18         _...!...
  109bf8:	 d5 29 ed 2e dd 33 50 36         .)...3P6
  109c00:	 f1 4b 60 52 d1 05 3c 09         .K`R..<.
  109c08:	 db 0c 6a 18 0b 24 a3 28         ..j..$.(
  109c10:	 13 36 ae 3b 39 45 cb 53         .6.;9E.S
  109c18:	 4d 07 e5 09 93 0d 0d 11         M.......
  109c20:	 c0 23 b1 38 24 3e 7e 42         .#.8$>~B
  109c28:	 83 50 a3 53 16 08 d1 0b         .P.S....
  109c30:	 ed 10 de 16 7d 1e 0f 24         ....}..$
  109c38:	 65 29 af 3e 8d 4e 4a 55         e).>.NJU
  109c40:	 76 07 71 0a 5b 0d a5 10         v.q.[...
  109c48:	 a0 2b 07 3b c1 40 b7 44         .+.;.@.D
  109c50:	 6e 4b 29 4f 75 04 17 07         nK)Ou...
  109c58:	 40 0a 0f 12 5f 19 74 25         @..._.t%
  109c60:	 90 36 2c 40 97 4b 26 53         .6,@.K&S
  109c68:	 90 08 63 0c 63 12 b0 16         ..c.c...
  109c70:	 98 2a d4 30 52 37 30 3d         .*.0R70=
  109c78:	 84 52 1d 55 06 05 73 07         .R.U..s.
  109c80:	 f4 09 7d 0d 66 25 bc 2e         ..}.f%..
  109c88:	 6a 3e c0 43 eb 4c df 57         j>.C.L.W
  109c90:	 81 07 a0 0a fc 11 1c 1a         ........
  109c98:	 ef 2c c0 32 0e 38 9e 3b         .,.2.8.;
  109ca0:	 65 42 37 51 04 08 c7 0a         eB7Q....
  109ca8:	 39 0f 7e 14 ee 19 1b 28         9.~....(
  109cb0:	 da 3d ae 41 e5 46 ab 54         .=.A.F.T
  109cb8:	 06 07 c1 09 f1 15 b9 2c         .......,
  109cc0:	 85 33 77 39 9a 42 13 47         .3w9.B.G
  109cc8:	 53 4f be 52 f1 03 6f 06         SO.R..o.
  109cd0:	 49 0b 4d 16 45 25 42 30         I.M.E%B0
  109cd8:	 7f 3b 3e 48 e6 51 11 56         .;>H.Q.V
  109ce0:	 c8 0b d2 0e 1e 15 2d 1d         ......-.
  109ce8:	 c8 30 a0 36 e0 3b ce 3f         .0.6.;.?
  109cf0:	 f0 4d 37 51 9b 08 e0 0b         .M7Q....
  109cf8:	 d4 0e 42 15 d3 2e c8 34         ..B....4
  109d00:	 53 3a f2 3f c0 45 73 49         S:.?.EsI
  109d08:	 60 0b c4 10 34 1f 64 25         `...4.d%
  109d10:	 2a 2d bc 33 dc 38 91 40         *-.3.8.@
  109d18:	 24 4e 51 52 2d 0b 17 0e         $NQR-...
  109d20:	 23 17 7a 1b 12 24 16 2f         #.z..$./
  109d28:	 a1 35 88 46 26 4f ee 51         .5.F&O.Q
  109d30:	 fd 0b d7 10 4f 17 c7 1c         ....O...
  109d38:	 da 2c 9b 31 e5 37 69 3f         .,.1.7i?
  109d40:	 9d 47 e4 4a 82 09 4d 0e         .G.J..M.
  109d48:	 02 13 a6 16 8f 28 ca 2d         .....(.-
  109d50:	 f9 32 34 3d ae 49 77 4d         .24=.IwM
  109d58:	 e4 07 2d 0a 14 0f 19 24         ..-....$
  109d60:	 db 33 34 39 8a 3e cb 42         .349.>.B
  109d68:	 44 4b 1b 4f 55 07 f9 0a         DK.OU...
  109d70:	 06 0e 63 12 30 2b 99 30         ..c.0+.0
  109d78:	 06 3d 10 43 49 49 c3 4d         .=.CII.M
  109d80:	 3b 08 39 0b 59 0e a7 16         ;.9.Y...
  109d88:	 0b 35 5f 39 42 3e b5 42         .5_9B>.B
  109d90:	 ca 49 77 4d 4c 06 ec 08         .IwML...
  109d98:	 80 0b f4 0d 1b 20 87 36         ..... .6
  109da0:	 34 3e 57 43 a0 48 95 4e         4>WC.H.N
  109da8:	 74 09 54 0c 8e 19 e7 27         t.T....'
  109db0:	 1d 2f de 34 c9 3b 44 40         ./.4.;D@
  109db8:	 1d 49 a8 4d 83 06 34 0a         .I.M..4.
  109dc0:	 ce 0d 75 14 11 29 b0 2d         ..u..).-
  109dc8:	 8c 32 9e 41 8a 46 b2 4b         .2.A.F.K
  109dd0:	 54 09 c9 0b e7 12 75 24         T.....u$
  109dd8:	 95 2c ba 31 b0 3a 78 3f         .,.1.:x?
  109de0:	 29 44 f5 48 53 07 e2 0a         )D.HS...
  109de8:	 87 10 b0 18 f6 21 a5 27         .....!.'
  109df0:	 09 2e 75 42 b0 48 f8 4d         ..uB.H.M
  109df8:	 a7 02 83 05 2e 12 46 1f         ......F.
  109e00:	 b6 2c c1 33 93 3d cf 46         .,.3.=.F
  109e08:	 89 4f 3f 54 2e 07 24 0a         .O?T..$.
  109e10:	 fa 0d 00 12 12 16 0a 2c         .......,
  109e18:	 13 38 0e 3e 63 50 fa 54         .8.>cP.T
  109e20:	 17 05 a3 07 5b 09 fa 0c         ....[...
  109e28:	 f7 2e c4 35 0b 3e 9d 46         ...5.>.F
  109e30:	 d4 4e f0 52 9e 05 36 08         .N.R..6.
  109e38:	 67 0a 86 0d 88 20 7a 28         g.... z(
  109e40:	 c3 35 60 43 14 4d 48 57         .5`C.MHW
  109e48:	 5c 03 70 07 d2 17 5f 1e         \.p..._.
  109e50:	 57 26 e7 2e e5 39 45 41         W&...9EA
  109e58:	 4b 4d 8c 52 89 06 a3 0a         KM.R....
  109e60:	 78 0e ed 17 f4 1d e7 24         x......$
  109e68:	 73 35 6b 38 3a 50 e3 54         s5k8:P.T
  109e70:	 de 04 39 07 56 0b 9c 11         ..9.V...
  109e78:	 35 1c a6 31 f3 39 ba 3f         5..1.9.?
  109e80:	 87 4b c0 58 f5 05 d4 08         .K.X....
  109e88:	 16 0f 1b 16 ae 1c e4 2d         .......-
  109e90:	 3a 34 6a 38 7c 46 56 53         :4j8|FVS
  109e98:	 ac 04 36 07 20 0c 97 1b         ..6. ...
  109ea0:	 dc 2a 69 32 de 39 8d 42         .*i2.9.B
  109ea8:	 d2 4d 6c 58 63 08 22 0c         .MlXc.".
  109eb0:	 7b 11 6f 19 23 20 25 26         {.o.# %&
  109eb8:	 e8 2a 81 2f 1b 4a 34 53         .*./.J4S
  109ec0:	 31 06 65 09 b2 0b c4 0f         1.e.....
  109ec8:	 d9 2c 79 33 b7 38 47 3c         .,y3.8G<
  109ed0:	 ff 4d 1b 53 f2 06 80 0a         .M.S....
  109ed8:	 1e 0e 48 12 f9 24 38 2b         ..H..$8+
  109ee0:	 b9 30 c0 3f 1e 4d 40 51         .0.?.M@Q
  109ee8:	 46 07 1a 0a a4 0d 3f 1a         F.....?.
  109ef0:	 bc 2d d4 32 1c 38 00 3f         .-.2.8.?
  109ef8:	 9a 4c c9 4f 73 05 6c 08         .L.Os.l.
  109f00:	 6d 0a 3a 0d 6f 29 5d 2f         m.:.o)]/
  109f08:	 2e 35 41 41 20 4a 77 53         .5AA JwS
  109f10:	 a4 05 45 08 d6 0c 59 18         ..E...Y.
  109f18:	 cf 24 b5 32 96 3a ed 3d         .$.2.:.=
  109f20:	 24 43 61 55 d4 07 4f 0b         $CaU..O.
  109f28:	 c7 0e 21 13 18 18 81 1c         ..!.....
  109f30:	 41 31 3d 40 61 4b d9 53         A1=@aK.S
  109f38:	 d7 05 2f 0b d8 18 a4 1f         ../.....
  109f40:	 87 2c bf 37 1e 3e 2f 45         .,.7.>/E
  109f48:	 ff 4f 2d 56 b4 09 2a 0c         .O-V..*.
  109f50:	 56 16 b9 1b d0 20 48 31         V.... H1
  109f58:	 f9 36 ff 39 37 50 94 53         .6.97P.S
  109f60:	 78 09 cd 0c b0 14 8c 18         x.......
  109f68:	 1a 2c 67 32 96 3e 64 44         .,g2.>dD
  109f70:	 85 4b 3b 4f 05 0a c2 0e         .K;O....
  109f78:	 f0 14 4d 1b 4e 22 bc 28         ..M.N".(
  109f80:	 36 38 7e 3d 6a 45 e6 54         68~=jE.T
  109f88:	 a7 0a 38 0d d5 19 26 24         ..8...&$
  109f90:	 2e 29 cc 2f 3b 39 47 3d         .)./;9G=
  109f98:	 6a 4e 6e 52 7c 07 89 0b         jNnR|...
  109fa0:	 82 18 98 1f ee 25 ad 2a         .....%.*
  109fa8:	 68 30 32 40 2a 4e bf 52         h02@*N.R
  109fb0:	 38 0d 0e 11 e5 14 f3 1d         8.......
  109fb8:	 ac 2b 3d 31 61 36 dc 3b         .+=1a6.;
  109fc0:	 bd 4d 12 51 03 0c bb 10         .M.Q....
  109fc8:	 3f 17 c3 1d 84 25 02 2b         ?....%.+
  109fd0:	 60 30 b6 36 b2 50 f9 53         `0.6.P.S
  109fd8:	 d7 06 97 09 1b 14 ee 26         .......&
  109fe0:	 65 2d 78 33 93 39 56 40         e-x3.9V@
  109fe8:	 34 51 fc 54 a2 05 8c 08         4Q.T....
  109ff0:	 02 0d 9d 1a e1 22 67 2f         ....."g/
  109ff8:	 8c 38 ca 3b b3 4c 40 50         .8.;.L@P
  10a000:	 f6 08 4f 0b e6 0f 63 1f         ..O...c.
  10a008:	 c9 2f 68 34 aa 39 d7 43         ./h4.9.C
  10a010:	 08 4a e8 4c 91 07 63 0a         .J.L..c.
  10a018:	 fa 11 29 1a 6f 23 3f 32         ..).o#?2
  10a020:	 75 37 7e 3b af 3e bd 49         u7~;.>.I
  10a028:	 17 08 67 0a 78 10 e5 24         ..g.x..$
  10a030:	 87 2a 04 30 7d 36 3d 3a         .*.0}6=:
  10a038:	 24 4b 75 4f cc 06 bb 09         $KuO....
  10a040:	 a0 0d ca 1f b8 25 91 2b         .....%.+
  10a048:	 96 33 60 39 a0 51 93 55         .3`9.Q.U
  10a050:	 97 08 41 0b 43 12 4f 21         ..A.C.O!
  10a058:	 43 27 90 2c 63 38 67 3c         C'.,c8g<
  10a060:	 26 43 75 50 97 07 ac 0b         &CuP....
  10a068:	 51 10 97 17 36 1d 58 21         Q...6.X!
  10a070:	 65 37 bf 3c d6 44 4b 54         e7.<.DKT
  10a078:	 21 07 67 0c 96 1b 5a 26         !.g...Z&
  10a080:	 18 32 5a 3c 9a 47 90 4d         .2Z<.G.M
  10a088:	 46 55 8c 57 a0 09 e6 0b         FU.W....
  10a090:	 d6 12 59 17 10 1e 26 3c         ..Y...&<
  10a098:	 5a 41 ee 44 6c 50 48 53         ZA.DlPHS
  10a0a0:	 f6 09 41 0d b9 14 08 1b         ..A.....
  10a0a8:	 fb 27 03 37 df 46 fb 4a         .'.7.F.J
  10a0b0:	 c9 50 58 53 bb 0b d7 0e         .PXS....
  10a0b8:	 c9 14 25 19 ef 1e 7b 2d         ..%...{-
  10a0c0:	 c2 3d ce 41 c7 46 24 4a         .=.A.F$J
  10a0c8:	 7f 0d 3d 10 b6 1a 07 20         ..=.... 
  10a0d0:	 95 26 1a 30 21 3e ba 41         .&.0!>.A
  10a0d8:	 ed 4d 9c 51 ec 0b b9 0e         .M.Q....
  10a0e0:	 1b 13 b2 16 41 1b 8e 27         ....A..'
  10a0e8:	 c4 39 76 3e 3d 4d a8 51         .9v>=M.Q
  10a0f0:	 57 0e 04 11 c3 16 55 1b         W.....U.
  10a0f8:	 0c 21 34 2f 4a 37 5b 3a         .!4/J7[:
  10a100:	 2f 4b c7 4f 9c 0a 64 0e         /K.O..d.
  10a108:	 7e 14 1e 1a 0f 21 11 27         ~....!.'
  10a110:	 6a 30 33 37 16 3f 40 4d         j037.?@M
  10a118:	 99 07 4e 0a 22 10 3b 1f         ..N.".;.
  10a120:	 02 38 d8 3c a1 42 1e 47         .8.<.B.G
  10a128:	 01 4f 05 52 00 09 70 0b         .O.R..p.
  10a130:	 1a 10 d8 12 08 16 53 33         ......S3
  10a138:	 d1 3d 2a 42 8c 4e 3e 52         .=*B.N>R
  10a140:	 08 07 d4 09 16 0d 63 14         ......c.
  10a148:	 5e 34 4c 3e d2 44 6c 48         ^4L>.DlH
  10a150:	 33 50 04 53 9c 05 b0 08         3P.S....
  10a158:	 c1 0a c2 11 b9 25 ed 2b         .....%.+
  10a160:	 49 3b bd 3f 51 44 bf 4a         I;.?QD.J
  10a168:	 0f 09 53 0b 74 13 18 1b         ..S.t...
  10a170:	 d4 20 b1 34 c2 3c 99 3f         . .4.<.?
  10a178:	 2e 4f af 51 8b 08 67 0b         .O.Q..g.
  10a180:	 02 12 f3 16 de 1c 0c 31         .......1
  10a188:	 d1 36 9a 41 06 52 09 55         .6.A.R.U
  10a190:	 bb 08 6b 0b 01 14 73 18         ..k...s.
  10a198:	 a3 1f 15 35 ec 3b d4 3f         ...5.;.?
  10a1a0:	 07 46 bf 4e e5 06 4e 0a         .F.N..N.
  10a1a8:	 a7 0e 62 16 cb 1e 7c 27         ..b...|'
  10a1b0:	 41 35 3b 3c a8 41 8e 48         A5;<.A.H
  10a1b8:	 84 0d 6d 16 7c 25 de 2d         ..m.|%.-
  10a1c0:	 4d 38 d0 3e fd 46 92 4a         M8.>.F.J
  10a1c8:	 6d 51 61 54 97 0e 4a 11         mQaT..J.
  10a1d0:	 37 18 c3 1c 22 24 99 38         7..."$.8
  10a1d8:	 a3 3e 82 42 a1 4d 8c 51         .>.B.M.Q
  10a1e0:	 c1 0d aa 12 e7 1a e8 21         .......!
  10a1e8:	 ad 31 f2 37 4e 3e 82 46         .1.7N>.F
  10a1f0:	 c6 4e 99 52 5d 08 98 0b         .N.R]...
  10a1f8:	 d1 1a 73 1f 1a 27 67 33         ..s..'g3
  10a200:	 dd 39 f5 3d 78 44 df 48         .9.=xD.H
  10a208:	 34 10 f0 17 44 23 77 2a         4...D#w*
  10a210:	 8e 31 b5 36 68 3e 38 43         .1.6h>8C
  10a218:	 83 4c 73 50 33 11 f7 14         .LsP3...
  10a220:	 ea 19 b3 20 b3 27 4f 2d         ... .'O-
  10a228:	 73 3a cb 3f 3e 46 50 49         s:.?>FPI
  10a230:	 fb 0f 0a 15 c4 1a 42 22         ......B"
  10a238:	 2b 2d ea 33 70 3d 22 42         +-.3p="B
  10a240:	 70 4a 86 4e ba 0a 29 0e         pJ.N..).
  10a248:	 b3 14 50 1d 16 28 a8 2c         ..P..(.,
  10a250:	 74 33 82 3c eb 41 6a 44         t3.<.AjD
  10a258:	 c8 08 e4 0d 5b 21 5e 29         ....[!^)
  10a260:	 79 31 68 39 83 40 a0 45         y1h9.@.E
  10a268:	 2c 4f ff 52 ff 04 a8 07         ,O.R....
  10a270:	 50 0f 71 1e a9 27 a1 39         P.q..'.9
  10a278:	 06 41 db 46 c7 50 da 53         .A.F.P.S
  10a280:	 88 09 93 0d 51 1a ce 21         ....Q..!
  10a288:	 9e 2f fc 38 df 42 05 46         ./.8.B.F
  10a290:	 a6 4a 0b 4e 57 07 d2 09         .J.NW...
  10a298:	 91 11 94 1d 21 27 64 3a         ....!'d:
  10a2a0:	 0d 3f 01 42 dd 47 b0 4b         .?.B.G.K
  10a2a8:	 f4 0a 68 0e 42 1d 66 27         ..h.B.f'
  10a2b0:	 d2 2b a7 31 b3 3f 3e 44         .+.1.?>D
  10a2b8:	 6d 4e 86 52 e7 07 7a 0a         mN.R..z.
  10a2c0:	 21 0f 4c 20 0f 28 7d 2d         !.L .(}-
  10a2c8:	 53 3b ce 42 15 4a 4c 4d         S;.B.JLM
  10a2d0:	 07 0b 15 0e b7 16 93 21         .......!
  10a2d8:	 65 27 cd 2c b8 40 36 44         e'.,.@6D
  10a2e0:	 42 49 a4 4d 23 0b 61 0e         BI.M#.a.
  10a2e8:	 a0 14 e0 1d d5 23 62 28         .....#b(
  10a2f0:	 71 3a 14 3f 97 44 2a 48         q:.?.D*H
  10a2f8:	 44 05 55 0a c2 16 51 22         D.U...Q"
  10a300:	 7c 29 1f 32 7f 3f 8f 47         |).2.?.G
  10a308:	 8d 52 3a 58 5d 08 dc 0b         .R:X]...
  10a310:	 c5 10 c2 17 a9 1d 85 29         .......)
  10a318:	 06 43 71 46 da 53 44 56         .CqF.SDV
  10a320:	 48 06 47 09 38 0d de 1a         H.G.8...
  10a328:	 f2 26 db 2b 20 42 f2 44         .&.+ B.D
  10a330:	 d9 4e 80 52 d6 0a 20 0e         .N.R.. .
  10a338:	 96 13 9d 19 6c 1e ff 22         ....l.."
  10a340:	 ac 42 7e 47 51 4c 3e 50         .B~GQL>P
  10a348:	 8e 07 cd 12 3c 18 2c 1c         ....<.,.
  10a350:	 13 23 91 2d 75 3e 93 45         .#.-u>.E
  10a358:	 ca 4f c7 54 f0 08 b3 0d         .O.T....
  10a360:	 ad 13 b9 1a 56 20 a6 25         ....V .%
  10a368:	 da 3a 61 40 95 54 c6 56         .:a@.T.V
  10a370:	 87 0b bb 0e 0e 13 9a 1d         ........
  10a378:	 38 23 3a 28 9a 38 8a 3b         8#:(.8.;
  10a380:	 ff 4e fe 51 b8 0c b7 12         .N.Q....
  10a388:	 c9 19 61 1d c4 21 eb 25         ..a..!.%
  10a390:	 56 34 ce 3e 9e 4a 19 4f         V4.>.J.O
  10a398:	 23 07 36 0a 9e 0d 97 17         #.6.....
  10a3a0:	 75 2f ff 35 3f 3f 82 43         u/.5??.C
  10a3a8:	 af 53 19 56 e8 03 a8 06         .S.V....
  10a3b0:	 ba 0b bf 18 17 21 04 29         .....!.)
  10a3b8:	 1e 3a 53 42 3a 4e 9b 57         .:SB:N.W
  10a3c0:	 6e 06 ee 08 25 0c 4d 1c         n...%.M.
  10a3c8:	 e5 2c f7 31 b8 41 03 45         .,.1.A.E
  10a3d0:	 25 4a fe 4e ac 06 c5 09         %J.N....
  10a3d8:	 f3 0c 51 1a 19 22 c4 26         ..Q..".&
  10a3e0:	 d9 3e c9 42 c6 47 cd 4d         .>.B.G.M
  10a3e8:	 3f 0a b6 0d 7e 11 0d 16         ?...~...
  10a3f0:	 86 26 6b 2b 73 3b 93 46         .&k+s;.F
  10a3f8:	 7f 4c 9e 4f d6 09 6a 0d         .L.O..j.
  10a400:	 78 12 f4 18 92 1f 45 24         x.....E$
  10a408:	 6a 33 cf 47 6b 4d 48 50         j3.GkMHP
  10a410:	 be 06 4f 09 fa 0f 9f 18         ..O.....
  10a418:	 7d 1e 2d 32 14 39 c8 44         }.-2.9.D
  10a420:	 45 4b d5 4e 2c 0b 97 0e         EK.N,...
  10a428:	 e6 12 9c 17 56 1c d2 20         ....V.. 
  10a430:	 cf 36 fd 3f 75 46 d2 4b         .6.?uF.K
  10a438:	 97 10 69 17 10 1f 40 26         ..i...@&
  10a440:	 36 30 3d 39 77 44 56 49         60=9wDVI
  10a448:	 5f 51 c3 54 ae 0d d3 0f         _Q.T....
  10a450:	 30 16 95 1a d2 1f a9 2e         0.......
  10a458:	 09 41 24 44 a6 4f 3c 54         .A$D.O<T
  10a460:	 4f 0c 1d 13 0b 17 1e 1c         O.......
  10a468:	 9a 2c 11 33 14 3b 09 45         .,.3.;.E
  10a470:	 28 50 65 55 78 0f f0 12         (PeUx...
  10a478:	 26 17 5b 1c 6b 22 21 29         &.[.k"!)
  10a480:	 2d 3d b0 40 14 47 d7 4e         -=.@.G.N
  10a488:	 93 11 cc 19 64 1f 23 24         ....d.#$
  10a490:	 34 2a 53 31 08 3e 68 44         4*S1.>hD
  10a498:	 34 4e 36 52 9b 10 a5 15         4N6R....
  10a4a0:	 fe 19 7e 20 ac 26 a6 2d         ..~ .&.-
  10a4a8:	 fc 3a c5 42 5c 50 b7 54         .:.B\P.T
  10a4b0:	 b9 0e cf 14 b9 1e 90 24         .......$
  10a4b8:	 bc 29 2a 2e 5c 35 06 3c         .)*.\5.<
  10a4c0:	 2d 49 aa 4d 0b 0c 81 0f         -I.M....
  10a4c8:	 68 18 b9 1f 46 26 f2 2a         h...F&.*
  10a4d0:	 69 30 76 35 e0 45 a1 4a         i0v5.E.J
  10a4d8:	 ab 0a 3e 12 97 1b f1 23         ..>....#
  10a4e0:	 52 2c a7 35 eb 41 6d 49         R,.5.AmI
  10a4e8:	 33 51 58 57 a3 04 b3 08         3QXW....
  10a4f0:	 81 12 2e 1c 96 25 59 31         .....%Y1
  10a4f8:	 2c 3c 30 46 26 4f ed 5b         ,<0F&O.[
  10a500:	 77 07 ad 09 4b 0f 72 27         w...K.r'
  10a508:	 60 2d 9b 32 5f 3f f2 42         `-.2_?.B
  10a510:	 46 4b f9 50 e4 06 d7 09         FK.P....
  10a518:	 2f 0f 20 1b be 23 2e 31         /. ..#.1
  10a520:	 82 3f 58 42 04 46 03 48         .?XB.F.H
  10a528:	 78 05 5a 0e db 1b 0e 22         x.Z...."
  10a530:	 c0 29 dc 30 5c 3d 2f 45         .).0\=/E
  10a538:	 08 4d 4c 52 12 09 01 0c         .MLR....
  10a540:	 bf 10 ac 1f bf 24 84 29         .....$.)
  10a548:	 f6 3d 35 41 02 4d e2 53         .=5A.M.S
  10a550:	 46 0a 0b 0d 96 12 a8 20         F...... 
  10a558:	 22 28 45 2c 50 32 de 43         "(E,P2.C
  10a560:	 15 4b e0 4d b9 06 11 0a         .K.M....
  10a568:	 b1 15 1b 1c cb 21 be 29         .....!.)
  10a570:	 dd 3a 39 42 0f 49 d9 4d         .:9B.I.M


lspcb2:
  10a578:	 4d fe d1 fc 1a fd 09 04         M.......
  10a580:	 fa fd 46 02 4f fb 3d 03         ..F.O.=.
  10a588:	 56 00 81 01 bf fc 85 fc         V.......
  10a590:	 cf 01 f8 ff 1d fb aa 05         ........
  10a598:	 48 00 19 ff 60 03 95 02         H...`...
  10a5a0:	 03 fc e7 00 ce fe 41 01         ......A.
  10a5a8:	 24 ff 5d ff f2 fd 0e fd         $.].....
  10a5b0:	 9f f9 0b 01 39 00 3a ff         ....9.:.
  10a5b8:	 ad fe df ff 44 fa 3d 02         ....D.=.
  10a5c0:	 1c 03 57 ff 89 fd 30 03         ..W...0.
  10a5c8:	 ab 00 a2 fe 26 01 7c 06         ....&.|.
  10a5d0:	 c5 01 07 02 23 01 9f 00         ....#...
  10a5d8:	 80 fd f0 fa 43 fd b6 fc         ....C...
  10a5e0:	 c6 ff b6 03 7c 03 0d 06         ....|...
  10a5e8:	 cb 02 0f 02 36 fd 3f ff         ....6.?.
  10a5f0:	 48 02 1f 00 df fe 64 01         H.....d.
  10a5f8:	 b3 fe 37 fe 64 02 e5 fe         ..7.d...
  10a600:	 9b fa 1b fd 93 ff d8 fc         ........
  10a608:	 e7 00 4d 00 a9 ff a8 fe         ..M.....
  10a610:	 3d 05 3f 04 72 fd c7 fd         =.?.r...
  10a618:	 a5 fc d4 04 26 02 56 03         ....&.V.
  10a620:	 ca 02 e1 fd 28 f9 3d ff         ....(.=.
  10a628:	 9e ff ec fe 93 fc 46 fc         ......F.
  10a630:	 20 fb d5 fe d4 00 15 ff          .......
  10a638:	 28 fd b5 03 ed 05 7f 03         (.......
  10a640:	 b3 ff 58 01 94 fd fb 02         ..X.....
  10a648:	 9d 01 f6 01 96 fe 40 fc         ......@.
  10a650:	 1d fe 6a 05 c6 fe cd fe         ..j.....
  10a658:	 00 ff 14 fb 53 fe c2 01         ....S...
  10a660:	 2e fe 94 ff f2 03 af 08         ........
  10a668:	 c7 02 b5 02 09 02 8a 02         ........
  10a670:	 19 05 e4 ff 86 fe e8 02         ........
  10a678:	 13 fc f0 00 90 ff f1 fe         ........
  10a680:	 0c fe b2 03 c5 06 0f 01         ........
  10a688:	 f1 ff 8d 03 fd fe 98 06         ........
  10a690:	 3f 02 f6 ff 2c fe 39 ff         ?...,.9.
  10a698:	 4d 04 0d fc 45 02 cb ff         M...E...
  10a6a0:	 15 fd 6e 03 91 00 e3 fe         ..n.....
  10a6a8:	 00 fb 72 fe 24 00 0e fe         ..r.$...
  10a6b0:	 9f fa 12 00 44 fe cb 05         ....D...
  10a6b8:	 93 fb bd fc 46 05 04 05         ....F...
  10a6c0:	 a1 ff f7 03 22 ff bb 01         ...."...
  10a6c8:	 74 01 9e fe 4d fa 2b fb         t...M.+.
  10a6d0:	 a0 01 2b ff d2 01 9d 02         ..+.....
  10a6d8:	 93 02 68 06 a4 03 16 02         ..h.....
  10a6e0:	 f1 ff 42 00 d4 01 fb 03         ..B.....
  10a6e8:	 14 fd 69 05 4a ff 75 fc         ..i.J.u.
  10a6f0:	 2f fd fa fe ae fe 94 00         /.......
  10a6f8:	 a5 05 4b 00 08 fd 39 02         ..K...9.
  10a700:	 df 04 51 01 a0 01 87 ff         ..Q.....
  10a708:	 85 01 ef 00 20 06 d5 03         .... ...
  10a710:	 71 00 71 01 15 fc 05 fe         q.q.....
  10a718:	 b5 fd 78 fc c8 fe 9e ff         ..x.....
  10a720:	 b5 03 1f 00 50 04 48 00         ....P.H.
  10a728:	 73 ff b9 05 3f 00 ef fc         s...?...
  10a730:	 67 04 48 02 43 03 15 01         g.H.C...
  10a738:	 79 fb d0 00 2d 01 8e fc         y...-...
  10a740:	 75 00 6c fe 1b 02 8e ff         u.l.....
  10a748:	 58 03 13 fe df 00 70 fc         X.....p.
  10a750:	 6f 02 b4 ff 14 01 48 fe         o.....H.
  10a758:	 95 08 21 09 f4 04 9e 02         ..!.....
  10a760:	 30 01 f5 fe f3 fd 8c 00         0.......
  10a768:	 72 03 75 ff c4 f9 26 02         r.u...&.
  10a770:	 21 03 38 fe c8 ff 47 fd         !.8...G.
  10a778:	 61 03 24 04 9d 01 be 01         a.$.....
  10a780:	 82 04 51 02 b3 ff d5 04         ..Q.....
  10a788:	 e1 ff 45 02 f3 fb 81 fc         ..E.....
  10a790:	 9d 02 29 01 8d 01 2e 02         ..).....
  10a798:	 cb 00 e3 fc 69 fc 03 00         ....i...
  10a7a0:	 b4 02 dc fe 1a 04 0e 03         ........
  10a7a8:	 4e 01 c3 05 78 02 b0 ff         N...x...
  10a7b0:	 30 00 db fb 1c fe 6a 01         0.....j.
  10a7b8:	 ab fd ac fc df fd b6 fe         ........
  10a7c0:	 53 fe 58 fd 6d 04 62 fb         S.X.m.b.
  10a7c8:	 18 fd 3c 05 06 01 3f 00         ..<...?.
  10a7d0:	 28 05 3b 03 72 fe c0 fd         (.;.r...
  10a7d8:	 55 01 fa fc 1d fe 21 fb         U.....!.
  10a7e0:	 ba ff 62 00 5d ff a2 02         ..b.]...
  10a7e8:	 f5 ff 8a fc 13 02 9b fb         ........
  10a7f0:	 f7 fe 0e ff d4 02 a6 03         ........


fg:
  10a7f8:	 e5 20 95 23 d7 23 05 23         . .#.#.#
  10a800:	 4a 23 61 23 3d 22 47 22         J#a#="G"
  10a808:	 92 23 e1 21 6a 1b 15 1c         .#.!j...
  10a810:	 d6 1d 8b 1c 14 1d d3 1c         ........
  10a818:	 7e 1b 2c 1b 12 1b d4 1a         ~.,.....
  10a820:	 60 15 7e 13 0e 14 39 14         `.~...9.
  10a828:	 7e 14 15 14 56 14 e7 13         ~...V...
  10a830:	 de 12 1b 14 d8 0f d7 0b         ........
  10a838:	 36 0a d0 0b 64 0b 99 0a         6...d...
  10a840:	 ed 0c a5 0c 29 0b 91 0d         ....)...
  10a848:	 35 1e c8 1e fc 1f ef 1f         5.......
  10a850:	 37 20 2a 21 bd 21 99 21         7 *!.!.!
  10a858:	 a7 20 91 1d 72 10 d7 0b         . ..r...
  10a860:	 f8 09 91 0d 24 0f 0d 0f         ....$...
  10a868:	 58 10 3a 10 45 0f 80 0f         X.:.E...
  10a870:	 8e 0c 8a 07 21 05 5f 08         ....!._.
  10a878:	 bd 09 51 09 c3 0a 92 0a         ..Q.....
  10a880:	 ee 09 67 0b d0 0b 38 06         ..g...8.
  10a888:	 ac 03 5f 06 bb 06 2b 06         .._...+.
  10a890:	 f2 07 24 08 79 07 29 0a         ..$.y.).


fg_sum:
  10a898:	 76 1e ff 20 0d 20 65 20         v.. . e 
  10a8a0:	 be 1f 1d 21 ff 20 ff 21         ...!. .!
  10a8a8:	 53 23 9c 21 f9 38 9d 47         S#.!.8.G
  10a8b0:	 3c 4d c0 43 2a 40 4b 40         <M.C*@K@
  10a8b8:	 33 3b 74 3b ab 3e 5c 3d         3;t;.>\=


freq_prev_reset:
  10a8c0:	 23 09 47 12 6a 1b 8e 24         #.G.j..$
  10a8c8:	 b2 2d d5 36 f9 3f 1d 49         .-.6.?.I
  10a8d0:	 40 52 64 5b                     @Rd[


pred:
  10a8d4:	 c3 15 8f 12 e1 0a 14 06         ........


gbk1:
  10a8dc:	 01 00 ec 05 0f 06 79 09         ......y.
  10a8e4:	 27 07 9e 13 39 00 1c 15         '...9...
  10a8ec:	 81 07 4b 24 aa 0c dd 26         ..K$...&
  10a8f4:	 64 01 a4 39 76 0a 1a 6a         d..9v..j


gbk2:
  10a8fc:	 3a 03 d5 07 ca 07 00 00         :.......
  10a904:	 16 14 50 02 10 18 5b 09         ..P...[.
  10a90c:	 9b 1f fd 12 a0 23 0d 02         .....#..
  10a914:	 4d 29 96 0b 31 2d ac 04         M)..1-..
  10a91c:	 cc 33 b8 0c 72 37 5e 06         .3..r7^.
  10a924:	 1c 3b 32 13 39 3b c4 37         .;2.9;.7
  10a92c:	 4a 3c ed 00 f0 3e 40 0d         J<...>@.
  10a934:	 93 43 45 07 1d 4a 2f 17         .CE..J/.


imap1:
  10a93c:	 05 00 01 00 07 00 04 00         ........
  10a944:	 02 00 00 00 06 00 03 00         ........


imap2:
  10a94c:	 02 00 0e 00 03 00 0d 00         ........
  10a954:	 00 00 0f 00 01 00 0c 00         ........
  10a95c:	 06 00 0a 00 07 00 09 00         ........
  10a964:	 04 00 0b 00 05 00 08 00         ........


tabpow:
  10a96c:	 00 40 67 41 d5 42 4c 44         .@gA.BLD
  10a974:	 cb 45 52 47 e2 48 7a 4a         .ERG.HzJ
  10a97c:	 1c 4c c7 4d 7b 4f 38 51         .L.M{O8Q
  10a984:	 ff 52 d1 54 ac 56 92 58         .R.T.V.X
  10a98c:	 82 5a 7e 5c 84 5e 96 60         .Z~\.^.`
  10a994:	 b4 62 dd 64 12 67 54 69         .b.d.gTi
  10a99c:	 a2 6b fe 6d 66 70 dd 72         .k.mfp.r
  10a9a4:	 60 75 f2 77 93 7a 42 7d         `u.w.zB}
  10a9ac:	 ff 7f                           ..


tablog:
  10a9ae:	 00 00 af 05 32 0b 8c 10         ....2...
  10a9b6:	 c0 15 cf 1a bc 1f 88 24         .......$
  10a9be:	 35 29 c4 2d 37 32 8f 36         5).-72.6
  10a9c6:	 ce 3a f5 3e 04 43 fc 46         .:.>.C.F
  10a9ce:	 df 4a ae 4e 69 52 11 56         .J.NiR.V
  10a9d6:	 a7 59 2c 5d 9f 60 03 64         .Y,].`.d
  10a9de:	 57 67 9b 6a d1 6d fa 70         Wg.j.m.p
  10a9e6:	 14 74 21 77 22 7a 17 7d         .t!w"z.}
  10a9ee:	 ff 7f                           ..


sha256ProcessBlock:
  10a9f0:    7f 04             	[--sp] = {rets, r15-r4}			  ## sha256.c:237:0
  10a9f2:    e2 9e             	sp += -0x8			  ## sha256.c:237:0
  10a9f4:    0d f1 20 00       	r13 = r0 + 0x20  #			  ## sha256.c:256:10
  10a9f8:    01 67             		 r1 = [r0+0x1c] 			  ## sha256.c:250:13
  10a9fa:    81 21             	[sp+4] = r1			  ## sha256.c:249:13
  10a9fc:    d0 ec 08 e1       	r14 = [r0+0x18]			  ## sha256.c:249:13
  10aa00:    02 65             	r2 = [r0+0x14] 			  ## sha256.c:248:13
  10aa02:    d0 ec 00 c1       	r12 = [r0+0x10]			  ## sha256.c:247:13
  10aa06:    d0 ec 0c 90       	r9 = [r0+0xc]			  ## sha256.c:246:13
  10aa0a:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## sha256.c:245:13
  10aa0e:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## sha256.c:244:13
  10aa12:    d0 ec 00 b0       	r11 = [r0+0x0]			  ## sha256.c:243:13
  10aa16:    80 20             	[sp] = r0
  10aa18:    41 20             	r1 = 0x0
  10aa1a:    04 87             	goto 0xe <sha256ProcessBlock+0x3A : 10aa2a >
  10aa1c:    d8 ec da 31       	r3 = [r13+r1<<2]			  ## sha256.c:257:16
  10aa20:    70 e0 00 33       	r3 = rev8(r3)			  ## endian.c:58:12
  10aa24:    d8 ec db 31       	[r13+r1<<2] = r3			  ## sha256.c:257:14
  10aa28:    c1 21             	r1 += 0x1			  ## sha256.c:256:26
  10aa2a:    81 f8 f7 21       	if (r1 != 0x10) goto -0x12 <sha256ProcessBlock+0x2C : 10aa1c >			  ## sha256.c:256:5
  10aa2e:    41 20             	r1 = 0x0
  10aa30:    04 9d             	goto 0x3a <sha256ProcessBlock+0x7C : 10aa6c >
  10aa32:    00 20             	r0 = [sp]			  ## sha256.c:262:16
  10aa34:    0b 1c             	r3 = r0 + r1			  ## sha256.c:262:16
  10aa36:    04 e1 20 30       	r4 = r3 + 0x20			  ## sha256.c:262:16
  10aa3a:    45 69             	r5 = [r4+0x24] 			  ## sha256.c:262:35
  10aa3c:    47 60             	r7 = [r4+0x0] 			  ## sha256.c:262:66
  10aa3e:    75 d8             	r5 += r7  #			  ## sha256.c:262:33
  10aa40:    46 6e             		 r6 = [r4+0x38] 			  ## sha256.c:262:16
  10aa42:    e7 aa             	r7 = r6 >> 0xa			  ## sha256.c:262:16
  10aa44:    c4 f1 63 81       	r8 = r6 <> 0x13  #			  ## sha256.c:262:16
  10aa48:    44 61             		 r4 = [r4+0x4] 			  ## sha256.c:262:46
  10aa4a:    90 e1 71 78       	r7 = r7 ^ r8			  ## sha256.c:262:16
  10aa4e:    c4 e1 61 61       	r6 = r6 <> 0x11			  ## sha256.c:262:16
  10aa52:    7e 19             	r6 ^= r7			  ## sha256.c:262:16
  10aa54:    65 18             	r5 += r6			  ## sha256.c:262:44
  10aa56:    c6 a3             	r6 = r4 >> 0x3			  ## sha256.c:262:46
  10aa58:    c4 e1 42 71       	r7 = r4 <> 0x12			  ## sha256.c:262:46
  10aa5c:    7e 19             	r6 ^= r7			  ## sha256.c:262:46
  10aa5e:    c4 e1 47 40       	r4 = r4 <> 0x7			  ## sha256.c:262:46
  10aa62:    6c 19             	r4 ^= r6			  ## sha256.c:262:46
  10aa64:    54 18             	r4 += r5			  ## sha256.c:262:64
  10aa66:    d0 ec 31 46       	[r3+0x60] = r4			  ## sha256.c:262:14
  10aa6a:    c1 24             	r1 += 0x4			  ## sha256.c:261:5
  10aa6c:    91 f8 e1 81       	if (r1 != 0xc0) goto -0x3e <sha256ProcessBlock+0x42 : 10aa32 >			  ## sha256.c:261:5
  10aa70:    43 20             	r3 = 0x0
  10aa72:    c8 ff 10 b3 10 00 	r8 = 0x10b310 <k : 10b310 >
  10aa78:    14 8e             	goto 0x5c <sha256ProcessBlock+0xE6 : 10aad6 >
  10aa7a:    90 e1 42 6f       	r6 = r4 & r15			  ## sha256.c:269:29
  10aa7e:    90 e1 40 7f       	r7 = r4 | r15			  ## sha256.c:269:29
  10aa82:    90 e1 72 7a       	r7 = r7 & r10			  ## sha256.c:269:29
  10aa86:    76 19             	r6 |= r7			  ## sha256.c:269:29
  10aa88:    c4 e1 ad 70       	r7 = r10 <> 0xd			  ## sha256.c:269:17
  10aa8c:    c4 e1 a2 50       	r5 = r10 <> 0x2			  ## sha256.c:269:17
  10aa90:    7d 19             	r5 ^= r7			  ## sha256.c:269:17
  10aa92:    c4 e1 a6 71       	r7 = r10 <> 0x16			  ## sha256.c:269:17
  10aa96:    7d 19             	r5 ^= r7			  ## sha256.c:269:17
  10aa98:    b4 e0 60 b5       	r11 = r6 + r5			  ## sha256.c:269:27
  10aa9c:    90 e1 e2 62       	r6 = r14 & r2			  ## sha256.c:268:33
  10aaa0:    90 e1 13 72       	r7 = r1 & ~r2			  ## sha256.c:268:33
  10aaa4:    90 f1 70 c6       	r12 = r7 | r6  #			  ## sha256.c:268:33
  10aaa8:    06 21             		 r6 = [sp+4]			  ## sha256.c:268:19
  10aaaa:    c4 e1 2b 70       	r7 = r2 <> 0xb			  ## sha256.c:268:21
  10aaae:    c4 e1 26 00       	r0 = r2 <> 0x6			  ## sha256.c:268:21
  10aab2:    78 19             	r0 ^= r7			  ## sha256.c:268:21
  10aab4:    c4 e1 29 71       	r7 = r2 <> 0x19			  ## sha256.c:268:21
  10aab8:    78 19             	r0 ^= r7			  ## sha256.c:268:21
  10aaba:    d8 ec 8a 73       	r7 = [r8+r3<<2]			  ## sha256.c:268:47
  10aabe:    d8 ec da 53       	r5 = [r13+r3<<2]			  ## sha256.c:268:54
  10aac2:    60 d8             	r0 += r6  #			  ## sha256.c:268:19
  10aac4:    81 21             		 [sp+4] = r1			  ## sha256.c:268:19
  10aac6:    c0 18             	r0 += r12			  ## sha256.c:268:31
  10aac8:    70 18             	r0 += r7			  ## sha256.c:268:45
  10aaca:    50 18             	r0 += r5			  ## sha256.c:268:52
  10aacc:    0b 18             	r11 += r0			  ## sha256.c:279:19
  10aace:    b4 e0 00 c9       	r12 = r0 + r9			  ## sha256.c:275:15
  10aad2:    c3 21             	r3 += 0x1			  ## sha256.c:266:26
  10aad4:    49 16             	r9 = r4
  10aad6:    e1 16             	r1 = r14
  10aad8:    2e 16             	r14 = r2
  10aada:    c2 16             	r2 = r12
  10aadc:    f4 16             	r4 = r15
  10aade:    af 16             	r15 = r10
  10aae0:    ba 16             	r10 = r11
  10aae2:    83 f8 ca 81       	if (r3 != 0x40) goto -0x6c <sha256ProcessBlock+0x8A : 10aa7a >
  10aae6:    00 20             	r0 = [sp]
  10aae8:    68 e8 00 0a       	[r0+0x0] += r10			  ## sha256.c:283:19
  10aaec:    68 e8 04 0f       	[r0+0x4] += r15			  ## sha256.c:284:19
  10aaf0:    68 e8 08 04       	[r0+0x8] += r4			  ## sha256.c:285:19
  10aaf4:    68 e8 0c 09       	[r0+0xc] += r9			  ## sha256.c:286:19
  10aaf8:    68 e8 10 02       	[r0+0x10] += r2			  ## sha256.c:287:19
  10aafc:    68 e8 14 0e       	[r0+0x14] += r14			  ## sha256.c:288:19
  10ab00:    68 e8 18 01       	[r0+0x18] += r1			  ## sha256.c:289:19
  10ab04:    01 21             	r1 = [sp+4]			  ## sha256.c:290:19
  10ab06:    68 e8 1c 01       	[r0+0x1c] += r1			  ## sha256.c:290:19
  10ab0a:    02 82             	sp += 0x8			  ## sha256.c:290:19
  10ab0c:    5f 04             	{pc, r15-r4} = [sp++]			  ## sha256.c:291:1


sha256Update:
  10ab0e:    d9 e8 f0 37       	[--sp] = {rets, r13, r12, r10-r4}			  ## sha256.c:164:0
  10ab12:    24 16             	r4 = r2			  ## sha256.c:164:0
  10ab14:    15 16             	r5 = r1			  ## sha256.c:164:0
  10ab16:    06 16             	r6 = r0			  ## sha256.c:164:0
  10ab18:    07 e1 20 61       	r7 = r6 + 0x120			  ## sha256.c:164:0
  10ab1c:    0a e1 20 60       	r10 = r6 + 0x20			  ## sha256.c:164:0
  10ab20:    14 82             	goto 0x44 <sha256Update+0x58 : 10ab66 >			  ## sha256.c:164:0
  10ab22:    71 60             	r1 = [r7+0x0] 			  ## sha256.c:168:17
  10ab24:    b4 e0 a0 01       	r0 = r10 + r1			  ## sha256.c:171:32
  10ab28:    a1 e0 40 10       	r1 = 0x40 - r1			  ## sha256.c:168:17
  10ab2c:    35 e4 41 81       	r8 = smin(r4, r1)			  ## sha256.c:168:17
  10ab30:    51 16             	r1 = r5			  ## sha256.c:171:9
  10ab32:    82 16             	r2 = r8			  ## sha256.c:171:9
  10ab34:    bf ea 04 cf       	call -0x61f8 <memmove : 104940 >			  ## sha256.c:171:9
  10ab38:    70 60             	r0 = [r7+0x0] 			  ## sha256.c:174:23
  10ab3a:    80 18             	r0 += r8			  ## sha256.c:174:23
  10ab3c:    c0 f1 8f 9d       	r9 = r8 >>> 0x1f  #			  ## sha256.c:175:31
  10ab40:    f0 60             		 [r7+0x0] = r0			  ## sha256.c:174:23
  10ab42:    51 ec 64 22       	r3_r2 = d[r6+0x124]			  ## sha256.c:175:28
  10ab46:    b4 e0 20 c8       	r12 = r2 + r8			  ## sha256.c:175:28
  10ab4a:    b8 e0 30 d9       	r13 = r3 + r9 + c			  ## sha256.c:175:28
  10ab4e:    51 ec 65 c2       	d[r6+0x124] = r13_r12			  ## sha256.c:175:28
  10ab52:    b4 e0 42 48       	r4 = r4 - r8			  ## sha256.c:179:16
  10ab56:    85 18             	r5 += r8			  ## sha256.c:177:28
  10ab58:    80 f8 05 80       	if (r0 != 0x40) goto 0xa <sha256Update+0x58 : 10ab66 >
  10ab5c:    60 16             	r0 = r6			  ## sha256.c:184:13
  10ab5e:    bf ea 47 ff       	call -0x172 <sha256ProcessBlock : 10a9f0 >			  ## sha256.c:184:13
  10ab62:    40 ea 00 70       	[r7+0x0] = 0x0			  ## sha256.c:186:27
  10ab66:    04 fd dc 03       	ifs (r4 >= 0x1) goto -0x48 <sha256Update+0x14 : 10ab22 >
  10ab6a:    d5 e8 f0 37       	{pc, r13, r12, r10-r4} = [sp++]			  ## sha256.c:189:1


sha256Final:
  10ab6e:    78 04             	[--sp] = {rets, r8-r4}			  ## sha256.c:199:0
  10ab70:    04 16             	r4 = r0			  ## sha256.c:199:0
  10ab72:    d1 ec 40 02       	r0 = [r4+0x120]			  ## sha256.c:208:29
  10ab76:    18 16             	r8 = r1			  ## sha256.c:208:29
  10ab78:    49 38             	r1 = 0x38
  10ab7a:    30 ed 38 00       	ifs (r0 >= 0x38) {
  10ab7e:    59 38             		r1 = 0x78
                               	}			  ## sha256.c:208:19
  10ab80:    05 e1 58 40       	r5 = r4 + 0x58			  ## sha256.c:208:19
  10ab84:    50 ec 5c 6c       	r7_r6 = d[r5+0xcc]			  ## sha256.c:205:26
  10ab88:    12 1e             	r2 = r1 - r0			  ## sha256.c:205:26
  10ab8a:    c1 ff d0 b2 10 00 	r1 = 0x10b2d0 <padding : 10b2d0 >			  ## sha256.c:210:5
  10ab90:    40 16             	r0 = r4			  ## sha256.c:210:5
  10ab92:    51 9d             	call -0x86 <sha256Update : 10ab0e >			  ## sha256.c:210:5
  10ab94:    60 15             	r1_r0 = r7_r6			  ## sha256.c:213:22
  10ab96:    d0 e1 0d 09       	r1_r0 >>= 0x1d			  ## sha256.c:213:22
  10ab9a:    70 e0 00 00       	r0 = rev8(r0)			  ## endian.c:58:12
  10ab9e:    d0 60             	[r5+0x0] = r0			  ## sha256.c:213:20
  10aba0:    60 a3             	r0 = r6 << 0x3			  ## sha256.c:214:22
  10aba2:    70 e0 00 00       	r0 = rev8(r0)			  ## endian.c:58:12
  10aba6:    40 d6             	r0 = r4  #			  ## sha256.c:217:5
  10aba8:    d0 61             		 [r5+0x4] = r0			  ## sha256.c:214:20
  10abaa:    bf ea 21 ff       	call -0x1be <sha256ProcessBlock : 10a9f0 >			  ## sha256.c:217:5
  10abae:    40 20             	r0 = 0x0
  10abb0:    04 87             	goto 0xe <sha256Final+0x52 : 10abc0 >
  10abb2:    d8 ec 4a 10       	r1 = [r4+r0<<2]			  ## sha256.c:221:25
  10abb6:    70 e0 00 11       	r1 = rev8(r1)			  ## endian.c:58:12
  10abba:    d8 ec 4b 10       	[r4+r0<<2] = r1			  ## sha256.c:221:23
  10abbe:    c0 21             	r0 += 0x1			  ## sha256.c:220:25
  10abc0:    80 f8 f7 11       	if (r0 != 0x8) goto -0x12 <sha256Final+0x44 : 10abb2 >
  10abc4:    b8 e8 00 c0       	if (r8 != 0x0) {
  10abc8:    4a 20             		r2 = 0x20			  ## sha256.c:226:9
  10abca:    80 16             		r0 = r8			  ## sha256.c:226:9
  10abcc:    41 16             		r1 = r4			  ## sha256.c:226:9
  10abce:    bf ea b7 ce       		call -0x6292
                               	} <memmove : 104940 >			  ## sha256.c:226:9
  10abd2:    58 04             	{pc, r8-r4} = [sp++]			  ## sha256.c:228:1


hmacCompute:
  10abd4:    7b 04             	[--sp] = {rets, r11-r4}			  ## hmac.c:87:0
  10abd6:    82 9c             	sp += -0x190			  ## hmac.c:87:0
  10abd8:    2a 16             	r10 = r2			  ## hmac.c:87:0
  10abda:    15 16             	r5 = r1			  ## hmac.c:87:0
  10abdc:    01 16             	r1 = r0			  ## hmac.c:87:0
  10abde:    c0 ff 10 b4 10 00 	r0 = 0x10b410 <sha256HashAlgo : 10b410 >			  ## hmac.c:125:19
  10abe4:    38 d6             	r8 = r3  #
  10abe6:    80 20             		 [sp] = r0			  ## hmac.c:125:19
  10abe8:    85 fd 36 82       	ifs (r5 < 0x41) goto 0x6c <hmacCompute+0x84 : 10ac58 >			  ## hmac.c:128:9
  10abec:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <__stub_VecMinScalar_float_c_f_c+0x69F8E66A : 6a09e666 >			  ## sha256.c:140:19
  10abf2:    80 21             	[sp+4] = r0			  ## sha256.c:140:19
  10abf4:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <__stub_VecMinScalar_float_c_f_c+0xBB56AE88 : bb67ae84 >			  ## sha256.c:141:19
  10abfa:    80 22             	[sp+8] = r0			  ## sha256.c:141:19
  10abfc:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <__stub_VecMinScalar_float_c_f_c+0x3C5DF376 : 3c6ef372 >			  ## sha256.c:142:19
  10ac02:    80 23             	[sp+12] = r0			  ## sha256.c:142:19
  10ac04:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <__stub_VecMinScalar_float_c_f_c+0xA53EF53E : a54ff53a >			  ## sha256.c:143:19
  10ac0a:    80 24             	[sp+16] = r0			  ## sha256.c:143:19
  10ac0c:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <__stub_VecMinScalar_float_c_f_c+0x50FD5282 : 510e527e >			  ## sha256.c:144:19
  10ac12:    80 25             	[sp+20] = r0			  ## sha256.c:144:19
  10ac14:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <__stub_VecMinScalar_float_c_f_c+0x9AF46890 : 9b05688c >			  ## sha256.c:145:19
  10ac1a:    80 26             	[sp+24] = r0			  ## sha256.c:145:19
  10ac1c:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <__stub_VecMinScalar_float_c_f_c+0x1F72D9AE : 1f83d9aa >			  ## sha256.c:146:19
  10ac22:    80 27             	[sp+28] = r0			  ## sha256.c:146:19
  10ac24:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <__stub_VecMinScalar_float_c_f_c+0x5BCFCD1C : 5be0cd18 >			  ## sha256.c:147:19
  10ac2a:    80 28             	[sp+32] = r0			  ## sha256.c:147:19
  10ac2c:    40 20             	r0 = 0x0			  ## sha256.c:147:19
  10ac2e:    d4 e9 25 01       	[sp+292] = r0			  ## sha256.c:150:19
  10ac32:    42 20             	r2 = 0x0			  ## sha256.c:152:24
  10ac34:    43 20             	r3 = 0x0			  ## sha256.c:152:24
  10ac36:    d0 e9 29 21       	d[sp+296] = r3_r2			  ## sha256.c:152:24
  10ac3a:    8c 80             	r4 = sp + 0			  ## sha256.c:152:24
  10ac3c:    4e 84             	r6 = r4 + 0x4			  ## hmac.c:130:20
  10ac3e:    60 16             	r0 = r6			  ## hmac.c:132:9
  10ac40:    52 16             	r2 = r5			  ## hmac.c:132:9
  10ac42:    bf ea 64 ff       	call -0x138 <sha256Update : 10ab0e >			  ## hmac.c:132:9
  10ac46:    01 e1 30 41       	r1 = r4 + 0x130			  ## hmac.c:134:43
  10ac4a:    60 16             	r0 = r6			  ## hmac.c:134:9
  10ac4c:    41 90             	call -0xe0 <sha256Final : 10ab6e >			  ## hmac.c:134:9
  10ac4e:    00 e1 50 41       	r0 = r4 + 0x150			  ## hmac.c:136:29
  10ac52:    41 20             	r1 = 0x0			  ## hmac.c:136:9
  10ac54:    4a 20             	r2 = 0x20			  ## hmac.c:136:9
  10ac56:    04 8b             	goto 0x16 <hmacCompute+0x9A : 10ac6e >			  ## hmac.c:136:9
  10ac58:    88 80             	r0 = sp + 0
  10ac5a:    06 e1 30 01       	r6 = r0 + 0x130			  ## hmac.c:139:16
  10ac5e:    60 16             	r0 = r6			  ## hmac.c:139:9
  10ac60:    52 16             	r2 = r5			  ## hmac.c:139:9
  10ac62:    bf ea 6d ce       	call -0x6326 <memmove : 104940 >			  ## hmac.c:139:9
  10ac66:    68 1d             	r0 = r6 + r5			  ## hmac.c:141:29
  10ac68:    a2 e0 40 50       	r2 = 0x40 - r5			  ## hmac.c:141:61
  10ac6c:    41 20             	r1 = 0x0			  ## hmac.c:141:9
  10ac6e:    bf ea dc ce       	call -0x6248 <memset : 104a2a >
  10ac72:    d4 e9 b4 91       	r9 = [sp+436]
  10ac76:    88 80             	r0 = sp + 0
  10ac78:    00 e1 30 01       	r0 = r0 + 0x130			  ## hmac.c:122:9
  10ac7c:    41 20             	r1 = 0x0			  ## hmac.c:122:9
  10ac7e:    04 87             	goto 0xe <hmacCompute+0xBA : 10ac8e >			  ## hmac.c:122:9
  10ac80:    d8 ee 00 21       	r2 = b[r0+r1] (u)			  ## hmac.c:146:25
  10ac84:    52 e1 36 20       	r2 = r2 ^ 0x36			  ## hmac.c:146:25
  10ac88:    d8 ee 01 21       	b[r0+r1] = r2			  ## hmac.c:146:25
  10ac8c:    c1 21             	r1 += 0x1			  ## hmac.c:145:39
  10ac8e:    81 f8 f7 81       	if (r1 != 0x40) goto -0x12 <hmacCompute+0xAC : 10ac80 >
  10ac92:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <__stub_VecMinScalar_float_c_f_c+0x69F8E66A : 6a09e666 >			  ## sha256.c:140:19
  10ac98:    80 21             	[sp+4] = r0			  ## sha256.c:140:19
  10ac9a:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <__stub_VecMinScalar_float_c_f_c+0xBB56AE88 : bb67ae84 >			  ## sha256.c:141:19
  10aca0:    80 22             	[sp+8] = r0			  ## sha256.c:141:19
  10aca2:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <__stub_VecMinScalar_float_c_f_c+0x3C5DF376 : 3c6ef372 >			  ## sha256.c:142:19
  10aca8:    80 23             	[sp+12] = r0			  ## sha256.c:142:19
  10acaa:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <__stub_VecMinScalar_float_c_f_c+0xA53EF53E : a54ff53a >			  ## sha256.c:143:19
  10acb0:    80 24             	[sp+16] = r0			  ## sha256.c:143:19
  10acb2:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <__stub_VecMinScalar_float_c_f_c+0x50FD5282 : 510e527e >			  ## sha256.c:144:19
  10acb8:    80 25             	[sp+20] = r0			  ## sha256.c:144:19
  10acba:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <__stub_VecMinScalar_float_c_f_c+0x9AF46890 : 9b05688c >			  ## sha256.c:145:19
  10acc0:    80 26             	[sp+24] = r0			  ## sha256.c:145:19
  10acc2:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <__stub_VecMinScalar_float_c_f_c+0x1F72D9AE : 1f83d9aa >			  ## sha256.c:146:19
  10acc8:    80 27             	[sp+28] = r0			  ## sha256.c:146:19
  10acca:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <__stub_VecMinScalar_float_c_f_c+0x5BCFCD1C : 5be0cd18 >			  ## sha256.c:147:19
  10acd0:    80 28             	[sp+32] = r0			  ## sha256.c:147:19
  10acd2:    44 20             	r4 = 0x0			  ## sha256.c:147:19
  10acd4:    d4 e9 25 41       	[sp+292] = r4			  ## sha256.c:150:19
  10acd8:    40 20             	r0 = 0x0			  ## sha256.c:152:24
  10acda:    41 20             	r1 = 0x0			  ## sha256.c:152:24
  10acdc:    d0 e9 29 01       	d[sp+296] = r1_r0			  ## sha256.c:152:24
  10ace0:    f8 e8 00 b0       	r11 = sp + 0			  ## sha256.c:152:24
  10ace4:    07 e1 04 b0       	r7 = r11 + 0x4			  ## hmac.c:150:16
  10ace8:    05 e1 30 b1       	r5 = r11 + 0x130			  ## hmac.c:152:40
  10acec:    52 20             	r2 = 0x40			  ## hmac.c:152:5
  10acee:    70 16             	r0 = r7			  ## hmac.c:152:5
  10acf0:    51 16             	r1 = r5			  ## hmac.c:152:5
  10acf2:    bf ea 0c ff       	call -0x1e8 <sha256Update : 10ab0e >			  ## hmac.c:152:5
  10acf6:    a1 d6             	r1 = r10  #			  ## hmac.c:168:5
  10acf8:    00 20             		 r0 = [sp]			  ## hmac.c:166:37
  10acfa:    70 d6             	r0 = r7  #			  ## hmac.c:168:5
  10acfc:    03 68             		 r3 = [r0+0x20] 			  ## hmac.c:168:11
  10acfe:    82 16             	r2 = r8			  ## hmac.c:168:5
  10ad00:    c3 00             	call r3			  ## hmac.c:168:5
  10ad02:    08 f1 70 b1       	r8 = r11 + 0x170  #			  ## hmac.c:185:39
  10ad06:    06 20             		 r6 = [sp]			  ## hmac.c:183:37
  10ad08:    70 d6             	r0 = r7  #			  ## hmac.c:185:5
  10ad0a:    62 69             		 r2 = [r6+0x24] 			  ## hmac.c:185:11
  10ad0c:    81 16             	r1 = r8			  ## hmac.c:185:5
  10ad0e:    c2 00             	call r2			  ## hmac.c:185:5
  10ad10:    04 87             	goto 0xe <hmacCompute+0x14C : 10ad20 >
  10ad12:    d8 ee 50 04       	r0 = b[r5+r4] (u)			  ## hmac.c:189:25
  10ad16:    50 e1 6a 00       	r0 = r0 ^ 0x6A			  ## hmac.c:189:25
  10ad1a:    d8 ee 51 04       	b[r5+r4] = r0			  ## hmac.c:189:25
  10ad1e:    c4 21             	r4 += 0x1			  ## hmac.c:188:39
  10ad20:    60 64             	r0 = [r6+0x10] 			  ## hmac.c:188:27
  10ad22:    80 e9 f6 41       	if (r4 < r0) goto -0x14 <hmacCompute+0x13E : 10ad12 >			  ## hmac.c:188:27
  10ad26:    70 d6             	r0 = r7  #			  ## hmac.c:193:5
  10ad28:    61 67             		 r1 = [r6+0x1c] 			  ## hmac.c:193:11
  10ad2a:    c1 00             	call r1			  ## hmac.c:193:5
  10ad2c:    70 d6             	r0 = r7  #			  ## hmac.c:195:5
  10ad2e:    62 64             		 r2 = [r6+0x10] 			  ## hmac.c:195:60
  10ad30:    51 d6             	r1 = r5  #			  ## hmac.c:195:5
  10ad32:    63 68             		 r3 = [r6+0x20] 			  ## hmac.c:195:11
  10ad34:    c3 00             	call r3			  ## hmac.c:195:5
  10ad36:    70 d6             	r0 = r7  #			  ## hmac.c:197:5
  10ad38:    62 65             		 r2 = [r6+0x14] 			  ## hmac.c:197:63
  10ad3a:    81 d6             	r1 = r8  #			  ## hmac.c:197:5
  10ad3c:    63 68             		 r3 = [r6+0x20] 			  ## hmac.c:197:11
  10ad3e:    c3 00             	call r3			  ## hmac.c:197:5
  10ad40:    70 d6             	r0 = r7  #			  ## hmac.c:199:5
  10ad42:    62 69             		 r2 = [r6+0x24] 			  ## hmac.c:199:11
  10ad44:    81 16             	r1 = r8			  ## hmac.c:199:5
  10ad46:    c2 00             	call r2			  ## hmac.c:199:5
  10ad48:    b9 e8 00 c0       	if (r9 != 0x0) {
  10ad4c:    62 65             		r2 = [r6+0x14] 			  ## hmac.c:203:47
  10ad4e:    90 16             		r0 = r9			  ## hmac.c:203:9
  10ad50:    81 16             		r1 = r8			  ## hmac.c:203:9
  10ad52:    bf ea f5 cd       		call -0x6416
                               	} <memmove : 104940 >			  ## hmac.c:203:9
  10ad56:    62 84             	sp += 0x190			  ## hmac.c:203:9
  10ad58:    5b 04             	{pc, r11-r4} = [sp++]			  ## hmac.c:203:9


sha256Compute:
  10ad5a:    77 04             	[--sp] = {rets, r7-r4}			  ## sha256.c:108:0
  10ad5c:    a2 95             	sp += -0x12c			  ## sha256.c:108:0
  10ad5e:    24 16             	r4 = r2			  ## sha256.c:108:0
  10ad60:    12 16             	r2 = r1			  ## sha256.c:108:0
  10ad62:    01 16             	r1 = r0			  ## sha256.c:108:0
  10ad64:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <__stub_VecMinScalar_float_c_f_c+0x69F8E66A : 6a09e666 >			  ## sha256.c:140:19
  10ad6a:    80 20             	[sp] = r0			  ## sha256.c:140:19
  10ad6c:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <__stub_VecMinScalar_float_c_f_c+0xBB56AE88 : bb67ae84 >			  ## sha256.c:141:19
  10ad72:    80 21             	[sp+4] = r0			  ## sha256.c:141:19
  10ad74:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <__stub_VecMinScalar_float_c_f_c+0x3C5DF376 : 3c6ef372 >			  ## sha256.c:142:19
  10ad7a:    80 22             	[sp+8] = r0			  ## sha256.c:142:19
  10ad7c:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <__stub_VecMinScalar_float_c_f_c+0xA53EF53E : a54ff53a >			  ## sha256.c:143:19
  10ad82:    80 23             	[sp+12] = r0			  ## sha256.c:143:19
  10ad84:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <__stub_VecMinScalar_float_c_f_c+0x50FD5282 : 510e527e >			  ## sha256.c:144:19
  10ad8a:    80 24             	[sp+16] = r0			  ## sha256.c:144:19
  10ad8c:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <__stub_VecMinScalar_float_c_f_c+0x9AF46890 : 9b05688c >			  ## sha256.c:145:19
  10ad92:    80 25             	[sp+20] = r0			  ## sha256.c:145:19
  10ad94:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <__stub_VecMinScalar_float_c_f_c+0x1F72D9AE : 1f83d9aa >			  ## sha256.c:146:19
  10ad9a:    80 26             	[sp+24] = r0			  ## sha256.c:146:19
  10ad9c:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <__stub_VecMinScalar_float_c_f_c+0x5BCFCD1C : 5be0cd18 >			  ## sha256.c:147:19
  10ada2:    80 27             	[sp+28] = r0			  ## sha256.c:147:19
  10ada4:    40 20             	r0 = 0x0			  ## sha256.c:147:19
  10ada6:    d4 e9 21 01       	[sp+288] = r0			  ## sha256.c:150:19
  10adaa:    46 20             	r6 = 0x0			  ## sha256.c:152:24
  10adac:    47 20             	r7 = 0x0			  ## sha256.c:152:24
  10adae:    d0 e9 25 61       	d[sp+292] = r7_r6			  ## sha256.c:152:24
  10adb2:    8d 80             	r5 = sp + 0			  ## sha256.c:152:24
  10adb4:    50 16             	r0 = r5			  ## sha256.c:121:5
  10adb6:    bf ea aa fe       	call -0x2ac <sha256Update : 10ab0e >			  ## sha256.c:121:5
  10adba:    50 16             	r0 = r5			  ## sha256.c:123:5
  10adbc:    41 16             	r1 = r4			  ## sha256.c:123:5
  10adbe:    bf ea d6 fe       	call -0x254 <sha256Final : 10ab6e >			  ## sha256.c:123:5
  10adc2:    40 21             	r0 = 0x1			  ## sha256.c:129:1
  10adc4:    42 8b             	sp += 0x12c			  ## sha256.c:129:1
  10adc6:    57 04             	{pc, r7-r4} = [sp++]			  ## sha256.c:129:1


sha256Init:
  10adc8:    c1 ff 67 e6 09 6a 	r1 = 0x6a09e667 <__stub_VecMinScalar_float_c_f_c+0x69F8E66A : 6a09e666 >			  ## sha256.c:138:0
  10adce:    81 60             	[r0+0x0] = r1			  ## sha256.c:140:19
  10add0:    c1 ff 85 ae 67 bb 	r1 = 0xbb67ae85 <__stub_VecMinScalar_float_c_f_c+0xBB56AE88 : bb67ae84 >			  ## sha256.c:141:19
  10add6:    81 61             	[r0+0x4] = r1			  ## sha256.c:141:19
  10add8:    c1 ff 72 f3 6e 3c 	r1 = 0x3c6ef372 <__stub_VecMinScalar_float_c_f_c+0x3C5DF376 : 3c6ef372 >			  ## sha256.c:142:19
  10adde:    81 62             	[r0+0x8] = r1			  ## sha256.c:142:19
  10ade0:    c1 ff 3a f5 4f a5 	r1 = 0xa54ff53a <__stub_VecMinScalar_float_c_f_c+0xA53EF53E : a54ff53a >			  ## sha256.c:143:19
  10ade6:    81 63             	[r0+0xc] = r1			  ## sha256.c:143:19
  10ade8:    c1 ff 7f 52 0e 51 	r1 = 0x510e527f <__stub_VecMinScalar_float_c_f_c+0x50FD5282 : 510e527e >			  ## sha256.c:144:19
  10adee:    81 64             	[r0+0x10] = r1			  ## sha256.c:144:19
  10adf0:    c1 ff 8c 68 05 9b 	r1 = 0x9b05688c <__stub_VecMinScalar_float_c_f_c+0x9AF46890 : 9b05688c >			  ## sha256.c:145:19
  10adf6:    81 65             	[r0+0x14] = r1			  ## sha256.c:145:19
  10adf8:    c1 ff ab d9 83 1f 	r1 = 0x1f83d9ab <__stub_VecMinScalar_float_c_f_c+0x1F72D9AE : 1f83d9aa >			  ## sha256.c:146:19
  10adfe:    81 66             	[r0+0x18] = r1			  ## sha256.c:146:19
  10ae00:    c1 ff 19 cd e0 5b 	r1 = 0x5be0cd19 <__stub_VecMinScalar_float_c_f_c+0x5BCFCD1C : 5be0cd18 >			  ## sha256.c:147:19
  10ae06:    81 67             	[r0+0x1c] = r1			  ## sha256.c:147:19
  10ae08:    41 20             	r1 = 0x0			  ## sha256.c:147:19
  10ae0a:    d1 ec 01 12       	[r0+0x120] = r1			  ## sha256.c:150:19
  10ae0e:    42 20             	r2 = 0x0			  ## sha256.c:152:24
  10ae10:    43 20             	r3 = 0x0			  ## sha256.c:152:24
  10ae12:    51 ec 05 22       	d[r0+0x124] = r3_r2			  ## sha256.c:152:24
  10ae16:    80 00             	rts			  ## sha256.c:153:1


f1_hash_function:
  10ae18:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:14:0
  10ae1a:    e2 8a             	sp += -0x58			  ## Crypto_hash.c:14:0
  10ae1c:    34 16             	r4 = r3			  ## Crypto_hash.c:14:0
  10ae1e:    25 16             	r5 = r2			  ## Crypto_hash.c:14:0
  10ae20:    16 16             	r6 = r1			  ## Crypto_hash.c:14:0
  10ae22:    01 16             	r1 = r0			  ## Crypto_hash.c:14:0
  10ae24:    af 87             	r7 = sp + 39			  ## Crypto_hash.c:14:0
  10ae26:    42 38             	r2 = 0x18			  ## Crypto_hash.c:20:5
  10ae28:    70 16             	r0 = r7			  ## Crypto_hash.c:20:5
  10ae2a:    bf ea 89 cd       	call -0x64ee <memmove : 104940 >			  ## Crypto_hash.c:20:5
  10ae2e:    78 98             	r0 = r7 + 0x18			  ## Crypto_hash.c:21:20
  10ae30:    42 38             	r2 = 0x18			  ## Crypto_hash.c:21:5
  10ae32:    61 16             	r1 = r6			  ## Crypto_hash.c:21:5
  10ae34:    bf ea 84 cd       	call -0x64f8 <memmove : 104940 >			  ## Crypto_hash.c:21:5
  10ae38:    72 d6             	r2 = r7  #			  ## Crypto_hash.c:24:5
  10ae3a:    48 40             		 r0 = b[r4+0x0] (u)			  ## Crypto_hash.c:23:42
  10ae3c:    de e9 57 00       	b[sp+87] = r0			  ## Crypto_hash.c:23:40
  10ae40:    8c 87             	r4 = sp + 7			  ## Crypto_hash.c:23:40
  10ae42:    41 30             	r1 = 0x10			  ## Crypto_hash.c:24:5
  10ae44:    4b 31             	r3 = 0x31			  ## Crypto_hash.c:24:5
  10ae46:    50 d6             	r0 = r5  #			  ## Crypto_hash.c:24:5
  10ae48:    84 20             		 [sp] = r4			  ## Crypto_hash.c:24:5
  10ae4a:    bf ea c3 fe       	call -0x27a <hmacCompute : 10abd4 >			  ## Crypto_hash.c:24:5
  10ae4e:    41 d6             	r1 = r4  #			  ## Crypto_hash.c:26:5
  10ae50:    00 3b             		 r0 = [sp+108]			  ## Crypto_hash.c:26:5
  10ae52:    42 30             	r2 = 0x10			  ## Crypto_hash.c:26:5
  10ae54:    bf ea 74 cd       	call -0x6518 <memmove : 104940 >			  ## Crypto_hash.c:26:5
  10ae58:    02 96             	sp += 0x58			  ## Crypto_hash.c:26:5
  10ae5a:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:27:1


g_hash_function:
  10ae5c:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:30:0
  10ae5e:    c2 9c             	sp += -0x90			  ## Crypto_hash.c:30:0
  10ae60:    35 16             	r5 = r3			  ## Crypto_hash.c:30:0
  10ae62:    26 16             	r6 = r2			  ## Crypto_hash.c:30:0
  10ae64:    17 16             	r7 = r1			  ## Crypto_hash.c:30:0
  10ae66:    01 16             	r1 = r0			  ## Crypto_hash.c:30:0
  10ae68:    cc 80             	r4 = sp + 64			  ## Crypto_hash.c:30:0
  10ae6a:    42 38             	r2 = 0x18			  ## Crypto_hash.c:35:5
  10ae6c:    40 16             	r0 = r4			  ## Crypto_hash.c:35:5
  10ae6e:    bf ea 67 cd       	call -0x6532 <memmove : 104940 >			  ## Crypto_hash.c:35:5
  10ae72:    48 98             	r0 = r4 + 0x18			  ## Crypto_hash.c:36:20
  10ae74:    42 38             	r2 = 0x18			  ## Crypto_hash.c:36:5
  10ae76:    71 16             	r1 = r7			  ## Crypto_hash.c:36:5
  10ae78:    bf ea 62 cd       	call -0x653c <memmove : 104940 >			  ## Crypto_hash.c:36:5
  10ae7c:    00 e1 30 40       	r0 = r4 + 0x30			  ## Crypto_hash.c:37:20
  10ae80:    42 30             	r2 = 0x10			  ## Crypto_hash.c:37:5
  10ae82:    61 16             	r1 = r6			  ## Crypto_hash.c:37:5
  10ae84:    bf ea 5c cd       	call -0x6548 <memmove : 104940 >			  ## Crypto_hash.c:37:5
  10ae88:    00 e1 40 40       	r0 = r4 + 0x40			  ## Crypto_hash.c:38:35
  10ae8c:    42 30             	r2 = 0x10			  ## Crypto_hash.c:38:5
  10ae8e:    51 16             	r1 = r5			  ## Crypto_hash.c:38:5
  10ae90:    bf ea 56 cd       	call -0x6554 <memmove : 104940 >			  ## Crypto_hash.c:38:5
  10ae94:    8d 80             	r5 = sp + 0
  10ae96:    51 30             	r1 = 0x50			  ## Crypto_hash.c:39:5
  10ae98:    40 16             	r0 = r4			  ## Crypto_hash.c:39:5
  10ae9a:    52 16             	r2 = r5			  ## Crypto_hash.c:39:5
  10ae9c:    bf ea 5d ff       	call -0x146 <sha256Compute : 10ad5a >			  ## Crypto_hash.c:39:5
  10aea0:    20 29             	r0 = [sp+164]			  ## Crypto_hash.c:39:5
  10aea2:    59 9c             	r1 = r5 + 0x1c			  ## Crypto_hash.c:41:27
  10aea4:    42 24             	r2 = 0x4			  ## Crypto_hash.c:41:5
  10aea6:    bf ea 4b cd       	call -0x656a <memmove : 104940 >			  ## Crypto_hash.c:41:5
  10aeaa:    22 84             	sp += 0x90			  ## Crypto_hash.c:41:5
  10aeac:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:42:1


f2_hash_function:
  10aeae:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:45:0
  10aeb0:    e2 8b             	sp += -0x54			  ## Crypto_hash.c:45:0
  10aeb2:    36 16             	r6 = r3			  ## Crypto_hash.c:45:0
  10aeb4:    27 16             	r7 = r2			  ## Crypto_hash.c:45:0
  10aeb6:    04 16             	r4 = r0			  ## Crypto_hash.c:45:0
  10aeb8:    ad 84             	r5 = sp + 36			  ## Crypto_hash.c:45:0
  10aeba:    42 30             	r2 = 0x10			  ## Crypto_hash.c:49:5
  10aebc:    50 16             	r0 = r5			  ## Crypto_hash.c:49:5
  10aebe:    bf ea 3f cd       	call -0x6582 <memmove : 104940 >			  ## Crypto_hash.c:49:5
  10aec2:    58 90             	r0 = r5 + 0x10			  ## Crypto_hash.c:50:20
  10aec4:    42 30             	r2 = 0x10			  ## Crypto_hash.c:50:5
  10aec6:    71 16             	r1 = r7			  ## Crypto_hash.c:50:5
  10aec8:    bf ea 3a cd       	call -0x658c <memmove : 104940 >			  ## Crypto_hash.c:50:5
  10aecc:    00 e1 20 50       	r0 = r5 + 0x20			  ## Crypto_hash.c:51:20
  10aed0:    42 24             	r2 = 0x4			  ## Crypto_hash.c:51:5
  10aed2:    61 16             	r1 = r6			  ## Crypto_hash.c:51:5
  10aed4:    bf ea 34 cd       	call -0x6598 <memmove : 104940 >			  ## Crypto_hash.c:51:5
  10aed8:    00 f1 24 50       	r0 = r5 + 0x24  #			  ## Crypto_hash.c:52:20
  10aedc:    01 3a             		 r1 = [sp+104]			  ## Crypto_hash.c:52:20
  10aede:    42 26             	r2 = 0x6			  ## Crypto_hash.c:52:5
  10aee0:    bf ea 2e cd       	call -0x65a4 <memmove : 104940 >			  ## Crypto_hash.c:52:5
  10aee4:    00 f1 2a 50       	r0 = r5 + 0x2a  #			  ## Crypto_hash.c:53:20
  10aee8:    01 3b             		 r1 = [sp+108]			  ## Crypto_hash.c:53:20
  10aeea:    42 26             	r2 = 0x6			  ## Crypto_hash.c:53:5
  10aeec:    bf ea 28 cd       	call -0x65b0 <memmove : 104940 >			  ## Crypto_hash.c:53:5
  10aef0:    8e 84             	r6 = sp + 4			  ## Crypto_hash.c:53:5
  10aef2:    41 38             	r1 = 0x18			  ## Crypto_hash.c:54:5
  10aef4:    4b 30             	r3 = 0x30			  ## Crypto_hash.c:54:5
  10aef6:    40 d6             	r0 = r4  #			  ## Crypto_hash.c:54:5
  10aef8:    86 20             		 [sp] = r6			  ## Crypto_hash.c:54:5
  10aefa:    52 16             	r2 = r5			  ## Crypto_hash.c:54:5
  10aefc:    bf ea 6a fe       	call -0x32c <hmacCompute : 10abd4 >			  ## Crypto_hash.c:54:5
  10af00:    61 d6             	r1 = r6  #			  ## Crypto_hash.c:55:5
  10af02:    00 3c             		 r0 = [sp+112]			  ## Crypto_hash.c:55:5
  10af04:    42 30             	r2 = 0x10			  ## Crypto_hash.c:55:5
  10af06:    bf ea 1b cd       	call -0x65ca <memmove : 104940 >			  ## Crypto_hash.c:55:5
  10af0a:    02 95             	sp += 0x54			  ## Crypto_hash.c:55:5
  10af0c:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:56:1


f3_hash_function:
  10af0e:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:67:0
  10af10:    e2 87             	sp += -0x64			  ## Crypto_hash.c:67:0
  10af12:    36 16             	r6 = r3			  ## Crypto_hash.c:67:0
  10af14:    27 16             	r7 = r2			  ## Crypto_hash.c:67:0
  10af16:    04 16             	r4 = r0			  ## Crypto_hash.c:67:0
  10af18:    ad 85             	r5 = sp + 37			  ## Crypto_hash.c:67:0
  10af1a:    42 30             	r2 = 0x10			  ## Crypto_hash.c:71:5
  10af1c:    50 16             	r0 = r5			  ## Crypto_hash.c:71:5
  10af1e:    bf ea 0f cd       	call -0x65e2 <memmove : 104940 >			  ## Crypto_hash.c:71:5
  10af22:    58 90             	r0 = r5 + 0x10			  ## Crypto_hash.c:72:20
  10af24:    42 30             	r2 = 0x10			  ## Crypto_hash.c:72:5
  10af26:    71 16             	r1 = r7			  ## Crypto_hash.c:72:5
  10af28:    bf ea 0a cd       	call -0x65ec <memmove : 104940 >			  ## Crypto_hash.c:72:5
  10af2c:    00 e1 20 50       	r0 = r5 + 0x20			  ## Crypto_hash.c:73:20
  10af30:    42 30             	r2 = 0x10			  ## Crypto_hash.c:73:5
  10af32:    61 16             	r1 = r6			  ## Crypto_hash.c:73:5
  10af34:    bf ea 04 cd       	call -0x65f8 <memmove : 104940 >			  ## Crypto_hash.c:73:5
  10af38:    00 f1 30 50       	r0 = r5 + 0x30  #			  ## Crypto_hash.c:74:20
  10af3c:    01 3e             		 r1 = [sp+120]			  ## Crypto_hash.c:74:20
  10af3e:    42 23             	r2 = 0x3			  ## Crypto_hash.c:74:5
  10af40:    bf ea fe cc       	call -0x6604 <memmove : 104940 >			  ## Crypto_hash.c:74:5
  10af44:    00 f1 33 50       	r0 = r5 + 0x33  #			  ## Crypto_hash.c:75:20
  10af48:    01 3f             		 r1 = [sp+124]			  ## Crypto_hash.c:75:20
  10af4a:    42 26             	r2 = 0x6			  ## Crypto_hash.c:75:5
  10af4c:    bf ea f8 cc       	call -0x6610 <memmove : 104940 >			  ## Crypto_hash.c:75:5
  10af50:    00 f1 39 50       	r0 = r5 + 0x39  #			  ## Crypto_hash.c:76:20
  10af54:    21 20             		 r1 = [sp+128]			  ## Crypto_hash.c:76:20
  10af56:    42 26             	r2 = 0x6			  ## Crypto_hash.c:76:5
  10af58:    bf ea f2 cc       	call -0x661c <memmove : 104940 >			  ## Crypto_hash.c:76:5
  10af5c:    8e 85             	r6 = sp + 5			  ## Crypto_hash.c:76:5
  10af5e:    41 38             	r1 = 0x18			  ## Crypto_hash.c:77:5
  10af60:    4b 3f             	r3 = 0x3f			  ## Crypto_hash.c:77:5
  10af62:    40 d6             	r0 = r4  #			  ## Crypto_hash.c:77:5
  10af64:    86 20             		 [sp] = r6			  ## Crypto_hash.c:77:5
  10af66:    52 16             	r2 = r5			  ## Crypto_hash.c:77:5
  10af68:    bf ea 34 fe       	call -0x398 <hmacCompute : 10abd4 >			  ## Crypto_hash.c:77:5
  10af6c:    61 d6             	r1 = r6  #			  ## Crypto_hash.c:78:5
  10af6e:    20 21             		 r0 = [sp+132]			  ## Crypto_hash.c:78:5
  10af70:    42 30             	r2 = 0x10			  ## Crypto_hash.c:78:5
  10af72:    bf ea e5 cc       	call -0x6636 <memmove : 104940 >			  ## Crypto_hash.c:78:5
  10af76:    02 99             	sp += 0x64			  ## Crypto_hash.c:78:5
  10af78:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:79:1


h2_hash_function:
  10af7a:    76 04             	[--sp] = {rets, r6-r4}			  ## Crypto_hash.c:86:0
  10af7c:    e2 97             	sp += -0x24			  ## Crypto_hash.c:86:0
  10af7e:    34 16             	r4 = r3			  ## Crypto_hash.c:86:0
  10af80:    25 16             	r5 = r2			  ## Crypto_hash.c:86:0
  10af82:    12 16             	r2 = r1			  ## Crypto_hash.c:86:0
  10af84:    8e 84             	r6 = sp + 4			  ## Crypto_hash.c:86:0
  10af86:    49 20             	r1 = 0x20			  ## Crypto_hash.c:89:5
  10af88:    43 24             	r3 = 0x4			  ## Crypto_hash.c:89:5
  10af8a:    86 20             	[sp] = r6			  ## Crypto_hash.c:89:5
  10af8c:    bf ea 22 fe       	call -0x3bc <hmacCompute : 10abd4 >			  ## Crypto_hash.c:89:5
  10af90:    40 d6             	r0 = r4  #			  ## Crypto_hash.c:91:5
  10af92:    5a 40             		 r2 = b[r5+0x0] (u)			  ## Crypto_hash.c:91:24
  10af94:    61 16             	r1 = r6			  ## Crypto_hash.c:91:5
  10af96:    bf ea d3 cc       	call -0x665a <memmove : 104940 >			  ## Crypto_hash.c:91:5
  10af9a:    02 89             	sp += 0x24
  10af9c:    56 04             	{pc, r6-r4} = [sp++]			  ## Crypto_hash.c:92:1


h3_hash_function:
  10af9e:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:101:0
  10afa0:    e2 91             	sp += -0x3c			  ## Crypto_hash.c:101:0
  10afa2:    36 16             	r6 = r3			  ## Crypto_hash.c:101:0
  10afa4:    27 16             	r7 = r2			  ## Crypto_hash.c:101:0
  10afa6:    04 16             	r4 = r0			  ## Crypto_hash.c:101:0
  10afa8:    ad 84             	r5 = sp + 36			  ## Crypto_hash.c:101:0
  10afaa:    42 24             	r2 = 0x4			  ## Crypto_hash.c:105:5
  10afac:    50 16             	r0 = r5			  ## Crypto_hash.c:105:5
  10afae:    bf ea c7 cc       	call -0x6672 <memmove : 104940 >			  ## Crypto_hash.c:105:5
  10afb2:    58 84             	r0 = r5 + 0x4			  ## Crypto_hash.c:106:20
  10afb4:    42 26             	r2 = 0x6			  ## Crypto_hash.c:106:5
  10afb6:    71 16             	r1 = r7			  ## Crypto_hash.c:106:5
  10afb8:    bf ea c2 cc       	call -0x667c <memmove : 104940 >			  ## Crypto_hash.c:106:5
  10afbc:    58 8a             	r0 = r5 + 0xa			  ## Crypto_hash.c:107:20
  10afbe:    42 26             	r2 = 0x6			  ## Crypto_hash.c:107:5
  10afc0:    61 16             	r1 = r6			  ## Crypto_hash.c:107:5
  10afc2:    bf ea bd cc       	call -0x6686 <memmove : 104940 >			  ## Crypto_hash.c:107:5
  10afc6:    01 34             	r1 = [sp+80]
  10afc8:    58 90             	r0 = r5 + 0x10			  ## Crypto_hash.c:108:20
  10afca:    42 28             	r2 = 0x8			  ## Crypto_hash.c:108:5
  10afcc:    bf ea b8 cc       	call -0x6690 <memmove : 104940 >			  ## Crypto_hash.c:108:5
  10afd0:    8e 84             	r6 = sp + 4			  ## Crypto_hash.c:108:5
  10afd2:    41 30             	r1 = 0x10			  ## Crypto_hash.c:109:5
  10afd4:    43 38             	r3 = 0x18			  ## Crypto_hash.c:109:5
  10afd6:    40 d6             	r0 = r4  #			  ## Crypto_hash.c:109:5
  10afd8:    86 20             		 [sp] = r6			  ## Crypto_hash.c:109:5
  10afda:    52 16             	r2 = r5			  ## Crypto_hash.c:109:5
  10afdc:    bf ea fa fd       	call -0x40c <hmacCompute : 10abd4 >			  ## Crypto_hash.c:109:5
  10afe0:    61 d6             	r1 = r6  #			  ## Crypto_hash.c:110:5
  10afe2:    00 35             		 r0 = [sp+84]			  ## Crypto_hash.c:110:5
  10afe4:    42 30             	r2 = 0x10			  ## Crypto_hash.c:110:5
  10afe6:    bf ea ab cc       	call -0x66aa <memmove : 104940 >			  ## Crypto_hash.c:110:5
  10afea:    02 8f             	sp += 0x3c			  ## Crypto_hash.c:110:5
  10afec:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:111:1


h4_hash_function:
  10afee:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:120:0
  10aff0:    e2 93             	sp += -0x34			  ## Crypto_hash.c:120:0
  10aff2:    34 16             	r4 = r3			  ## Crypto_hash.c:120:0
  10aff4:    25 16             	r5 = r2			  ## Crypto_hash.c:120:0
  10aff6:    06 16             	r6 = r0			  ## Crypto_hash.c:120:0
  10aff8:    af 84             	r7 = sp + 36			  ## Crypto_hash.c:120:0
  10affa:    42 24             	r2 = 0x4			  ## Crypto_hash.c:124:5
  10affc:    70 16             	r0 = r7			  ## Crypto_hash.c:124:5
  10affe:    bf ea 9f cc       	call -0x66c2 <memmove : 104940 >			  ## Crypto_hash.c:124:5
  10b002:    78 84             	r0 = r7 + 0x4			  ## Crypto_hash.c:125:20
  10b004:    42 26             	r2 = 0x6			  ## Crypto_hash.c:125:5
  10b006:    51 16             	r1 = r5			  ## Crypto_hash.c:125:5
  10b008:    bf ea 9a cc       	call -0x66cc <memmove : 104940 >			  ## Crypto_hash.c:125:5
  10b00c:    78 8a             	r0 = r7 + 0xa			  ## Crypto_hash.c:126:20
  10b00e:    42 26             	r2 = 0x6			  ## Crypto_hash.c:126:5
  10b010:    41 16             	r1 = r4			  ## Crypto_hash.c:126:5
  10b012:    bf ea 95 cc       	call -0x66d6 <memmove : 104940 >			  ## Crypto_hash.c:126:5
  10b016:    8c 84             	r4 = sp + 4
  10b018:    41 30             	r1 = 0x10			  ## Crypto_hash.c:127:5
  10b01a:    43 30             	r3 = 0x10			  ## Crypto_hash.c:127:5
  10b01c:    60 d6             	r0 = r6  #			  ## Crypto_hash.c:127:5
  10b01e:    84 20             		 [sp] = r4			  ## Crypto_hash.c:127:5
  10b020:    72 16             	r2 = r7			  ## Crypto_hash.c:127:5
  10b022:    bf ea d7 fd       	call -0x452 <hmacCompute : 10abd4 >			  ## Crypto_hash.c:127:5
  10b026:    41 d6             	r1 = r4  #			  ## Crypto_hash.c:128:5
  10b028:    00 32             		 r0 = [sp+72]			  ## Crypto_hash.c:128:5
  10b02a:    42 30             	r2 = 0x10			  ## Crypto_hash.c:128:5
  10b02c:    bf ea 88 cc       	call -0x66f0 <memmove : 104940 >			  ## Crypto_hash.c:128:5
  10b030:    02 8d             	sp += 0x34			  ## Crypto_hash.c:128:5
  10b032:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:129:1


h5_hash_function:
  10b034:    77 04             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:137:0
  10b036:    e2 8f             	sp += -0x44			  ## Crypto_hash.c:137:0
  10b038:    34 16             	r4 = r3			  ## Crypto_hash.c:137:0
  10b03a:    25 16             	r5 = r2			  ## Crypto_hash.c:137:0
  10b03c:    06 16             	r6 = r0			  ## Crypto_hash.c:137:0
  10b03e:    af 84             	r7 = sp + 36			  ## Crypto_hash.c:137:0
  10b040:    42 30             	r2 = 0x10			  ## Crypto_hash.c:141:5
  10b042:    70 16             	r0 = r7			  ## Crypto_hash.c:141:5
  10b044:    bf ea 7c cc       	call -0x6708 <memmove : 104940 >			  ## Crypto_hash.c:141:5
  10b048:    78 90             	r0 = r7 + 0x10			  ## Crypto_hash.c:142:20
  10b04a:    42 30             	r2 = 0x10			  ## Crypto_hash.c:142:5
  10b04c:    51 16             	r1 = r5			  ## Crypto_hash.c:142:5
  10b04e:    bf ea 77 cc       	call -0x6712 <memmove : 104940 >			  ## Crypto_hash.c:142:5
  10b052:    8d 84             	r5 = sp + 4
  10b054:    41 30             	r1 = 0x10			  ## Crypto_hash.c:143:5
  10b056:    4b 20             	r3 = 0x20			  ## Crypto_hash.c:143:5
  10b058:    60 d6             	r0 = r6  #			  ## Crypto_hash.c:143:5
  10b05a:    85 20             		 [sp] = r5			  ## Crypto_hash.c:143:5
  10b05c:    72 16             	r2 = r7			  ## Crypto_hash.c:143:5
  10b05e:    bf ea b9 fd       	call -0x48e <hmacCompute : 10abd4 >			  ## Crypto_hash.c:143:5
  10b062:    42 30             	r2 = 0x10			  ## Crypto_hash.c:144:5
  10b064:    40 15             	r1_r0 = r5_r4			  ## Crypto_hash.c:144:5
  10b066:    bf ea 6b cc       	call -0x672a <memmove : 104940 >			  ## Crypto_hash.c:144:5
  10b06a:    02 91             	sp += 0x44
  10b06c:    57 04             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:145:1


g_function:
  10b06e:    78 04             	[--sp] = {rets, r8-r4}			  ## Crypto_hash.c:149:0
  10b070:    e2 8a             	sp += -0x58			  ## Crypto_hash.c:149:0
  10b072:    38 16             	r8 = r3			  ## Crypto_hash.c:149:0
  10b074:    27 16             	r7 = r2			  ## Crypto_hash.c:149:0
  10b076:    16 16             	r6 = r1			  ## Crypto_hash.c:149:0
  10b078:    01 16             	r1 = r0			  ## Crypto_hash.c:149:0
  10b07a:    cc 80             	r4 = sp + 64			  ## Crypto_hash.c:149:0
  10b07c:    42 38             	r2 = 0x18			  ## Crypto_hash.c:154:5
  10b07e:    40 16             	r0 = r4			  ## Crypto_hash.c:154:5
  10b080:    bf ea 5e cc       	call -0x6744 <memmove : 104940 >			  ## Crypto_hash.c:154:5
  10b084:    ad 88             	r5 = sp + 40
  10b086:    42 38             	r2 = 0x18			  ## Crypto_hash.c:155:5
  10b088:    50 16             	r0 = r5			  ## Crypto_hash.c:155:5
  10b08a:    61 16             	r1 = r6			  ## Crypto_hash.c:155:5
  10b08c:    bf ea 58 cc       	call -0x6750 <memmove : 104940 >			  ## Crypto_hash.c:155:5
  10b090:    8e 98             	r6 = sp + 24
  10b092:    42 30             	r2 = 0x10			  ## Crypto_hash.c:156:5
  10b094:    60 15             	r1_r0 = r7_r6			  ## Crypto_hash.c:156:5
  10b096:    bf ea 53 cc       	call -0x675a <memmove : 104940 >			  ## Crypto_hash.c:156:5
  10b09a:    8f 88             	r7 = sp + 8
  10b09c:    42 30             	r2 = 0x10			  ## Crypto_hash.c:157:5
  10b09e:    70 16             	r0 = r7			  ## Crypto_hash.c:157:5
  10b0a0:    81 16             	r1 = r8			  ## Crypto_hash.c:157:5
  10b0a2:    bf ea 4d cc       	call -0x6766 <memmove : 104940 >			  ## Crypto_hash.c:157:5
  10b0a6:    41 38             	r1 = 0x18			  ## Crypto_hash.c:158:5
  10b0a8:    40 16             	r0 = r4			  ## Crypto_hash.c:158:5
  10b0aa:    80 ea cc 22       	call 0x4598 <endian_change : 10f646 >			  ## Crypto_hash.c:158:5
  10b0ae:    41 38             	r1 = 0x18			  ## Crypto_hash.c:159:5
  10b0b0:    50 16             	r0 = r5			  ## Crypto_hash.c:159:5
  10b0b2:    80 ea c8 22       	call 0x4590 <endian_change : 10f646 >			  ## Crypto_hash.c:159:5
  10b0b6:    41 30             	r1 = 0x10			  ## Crypto_hash.c:160:5
  10b0b8:    60 16             	r0 = r6			  ## Crypto_hash.c:160:5
  10b0ba:    80 ea c4 22       	call 0x4588 <endian_change : 10f646 >			  ## Crypto_hash.c:160:5
  10b0be:    41 30             	r1 = 0x10			  ## Crypto_hash.c:161:5
  10b0c0:    70 16             	r0 = r7			  ## Crypto_hash.c:161:5
  10b0c2:    80 ea c0 22       	call 0x4580 <endian_change : 10f646 >			  ## Crypto_hash.c:161:5
  10b0c6:    88 84             	r0 = sp + 4			  ## Crypto_hash.c:161:5
  10b0c8:    40 d5             	r1_r0 = r5_r4  #			  ## Crypto_hash.c:164:5
  10b0ca:    80 20             		 [sp] = r0			  ## Crypto_hash.c:164:5
  10b0cc:    62 15             	r3_r2 = r7_r6			  ## Crypto_hash.c:164:5
  10b0ce:    bf ea c5 fe       	call -0x276 <g_hash_function : 10ae5c >			  ## Crypto_hash.c:164:5
  10b0d2:    dc e9 06 00       	r0 = b[sp+6] (u)			  ## Crypto_hash.c:165:26
  10b0d6:    dc e9 07 10       	r1 = b[sp+7] (u)			  ## Crypto_hash.c:165:16
  10b0da:    dc e9 05 20       	r2 = b[sp+5] (u)			  ## Crypto_hash.c:165:42
  10b0de:    dc e9 04 30       	r3 = b[sp+4] (u)			  ## Crypto_hash.c:165:59
  10b0e2:    a1 e1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)			  ## Crypto_hash.c:165:23
  10b0e6:    a1 e1 20 28       	r1 <= insert(r2, p:0x10, l:0x8)			  ## Crypto_hash.c:165:39
  10b0ea:    a1 e1 20 3c       	r1 <= insert(r3, p:0x18, l:0x8)			  ## Crypto_hash.c:165:56
  10b0ee:    c0 ff 40 42 0f 00 	r0 = 0xf4240 <$data.__3 : f4240 >			  ## Crypto_hash.c:166:14
  10b0f4:    f4 e1 10 20       	r2 = r1 / r0 (u)			  ## Crypto_hash.c:166:14
  10b0f8:    20 1b             	r0 *= r2			  ## Crypto_hash.c:166:14
  10b0fa:    10 1e             	r0 = r1 - r0			  ## Crypto_hash.c:166:14
  10b0fc:    02 96             	sp += 0x58
  10b0fe:    58 04             	{pc, r8-r4} = [sp++]			  ## Crypto_hash.c:167:5


f1_function:
  10b100:    79 04             	[--sp] = {rets, r9-r4}			  ## Crypto_hash.c:172:0
  10b102:    e2 8e             	sp += -0x48			  ## Crypto_hash.c:172:0
  10b104:    38 16             	r8 = r3			  ## Crypto_hash.c:172:0
  10b106:    27 16             	r7 = r2			  ## Crypto_hash.c:172:0
  10b108:    16 16             	r6 = r1			  ## Crypto_hash.c:172:0
  10b10a:    01 16             	r1 = r0			  ## Crypto_hash.c:172:0
  10b10c:    f8 e8 30 90       	r9 = sp + 48			  ## Crypto_hash.c:172:0
  10b110:    42 38             	r2 = 0x18			  ## Crypto_hash.c:177:5
  10b112:    90 16             	r0 = r9			  ## Crypto_hash.c:177:5
  10b114:    bf ea 14 cc       	call -0x67d8 <memmove : 104940 >			  ## Crypto_hash.c:177:5
  10b118:    8d 98             	r5 = sp + 24
  10b11a:    42 38             	r2 = 0x18			  ## Crypto_hash.c:178:5
  10b11c:    50 16             	r0 = r5			  ## Crypto_hash.c:178:5
  10b11e:    61 16             	r1 = r6			  ## Crypto_hash.c:178:5
  10b120:    bf ea 0e cc       	call -0x67e4 <memmove : 104940 >			  ## Crypto_hash.c:178:5
  10b124:    8e 88             	r6 = sp + 8
  10b126:    42 30             	r2 = 0x10			  ## Crypto_hash.c:179:5
  10b128:    60 15             	r1_r0 = r7_r6			  ## Crypto_hash.c:179:5
  10b12a:    bf ea 09 cc       	call -0x67ee <memmove : 104940 >			  ## Crypto_hash.c:179:5
  10b12e:    8f 87             	r7 = sp + 7
  10b130:    42 21             	r2 = 0x1			  ## Crypto_hash.c:180:5
  10b132:    70 16             	r0 = r7			  ## Crypto_hash.c:180:5
  10b134:    81 16             	r1 = r8			  ## Crypto_hash.c:180:5
  10b136:    bf ea 03 cc       	call -0x67fa <memmove : 104940 >			  ## Crypto_hash.c:180:5
  10b13a:    41 38             	r1 = 0x18			  ## Crypto_hash.c:181:5
  10b13c:    90 16             	r0 = r9			  ## Crypto_hash.c:181:5
  10b13e:    80 ea 82 22       	call 0x4504 <endian_change : 10f646 >			  ## Crypto_hash.c:181:5
  10b142:    41 38             	r1 = 0x18			  ## Crypto_hash.c:182:5
  10b144:    50 16             	r0 = r5			  ## Crypto_hash.c:182:5
  10b146:    80 ea 7e 22       	call 0x44fc <endian_change : 10f646 >			  ## Crypto_hash.c:182:5
  10b14a:    41 30             	r1 = 0x10			  ## Crypto_hash.c:183:5
  10b14c:    60 16             	r0 = r6			  ## Crypto_hash.c:183:5
  10b14e:    80 ea 7a 22       	call 0x44f4 <endian_change : 10f646 >			  ## Crypto_hash.c:183:5
  10b152:    90 d6             	r0 = r9  #			  ## Crypto_hash.c:185:5
  10b154:    04 39             		 r4 = [sp+100]			  ## Crypto_hash.c:185:5
  10b156:    51 d6             	r1 = r5  #			  ## Crypto_hash.c:185:5
  10b158:    84 20             		 [sp] = r4			  ## Crypto_hash.c:185:5
  10b15a:    62 15             	r3_r2 = r7_r6			  ## Crypto_hash.c:185:5
  10b15c:    bf ea 5c fe       	call -0x348 <f1_hash_function : 10ae18 >			  ## Crypto_hash.c:185:5
  10b160:    41 30             	r1 = 0x10			  ## Crypto_hash.c:186:5
  10b162:    40 16             	r0 = r4			  ## Crypto_hash.c:186:5
  10b164:    80 ea 6f 22       	call 0x44de <endian_change : 10f646 >			  ## Crypto_hash.c:186:5
  10b168:    02 92             	sp += 0x48			  ## Crypto_hash.c:186:5
  10b16a:    59 04             	{pc, r9-r4} = [sp++]			  ## Crypto_hash.c:187:1


f2_function:
  10b16c:    7a 04             	[--sp] = {rets, r10-r4}			  ## Crypto_hash.c:190:0
  10b16e:    e2 8b             	sp += -0x54			  ## Crypto_hash.c:190:0
  10b170:    24 16             	r4 = r2			  ## Crypto_hash.c:190:0
  10b172:    16 16             	r6 = r1			  ## Crypto_hash.c:190:0
  10b174:    01 16             	r1 = r0			  ## Crypto_hash.c:190:0
  10b176:    c0 ff 62 74 6c 6b 	r0 = 0x6b6c7462 <__stub_VecMinScalar_float_c_f_c+0x6B5B7466 : 6b6c7462 >			  ## Crypto_hash.c:194:8
  10b17c:    38 d6             	r8 = r3  #			  ## Crypto_hash.c:194:8
  10b17e:    80 26             		 [sp+24] = r0			  ## Crypto_hash.c:194:8
  10b180:    f8 e8 3c 90       	r9 = sp + 60			  ## Crypto_hash.c:194:8
  10b184:    42 38             	r2 = 0x18			  ## Crypto_hash.c:197:5
  10b186:    90 16             	r0 = r9			  ## Crypto_hash.c:197:5
  10b188:    bf ea da cb       	call -0x684c <memmove : 104940 >			  ## Crypto_hash.c:197:5
  10b18c:    f8 e8 2c a0       	r10 = sp + 44
  10b190:    42 30             	r2 = 0x10			  ## Crypto_hash.c:198:5
  10b192:    a0 16             	r0 = r10			  ## Crypto_hash.c:198:5
  10b194:    61 16             	r1 = r6			  ## Crypto_hash.c:198:5
  10b196:    bf ea d3 cb       	call -0x685a <memmove : 104940 >			  ## Crypto_hash.c:198:5
  10b19a:    8e 9c             	r6 = sp + 28
  10b19c:    42 30             	r2 = 0x10			  ## Crypto_hash.c:199:5
  10b19e:    60 16             	r0 = r6			  ## Crypto_hash.c:199:5
  10b1a0:    41 16             	r1 = r4			  ## Crypto_hash.c:199:5
  10b1a2:    bf ea cd cb       	call -0x6866 <memmove : 104940 >			  ## Crypto_hash.c:199:5
  10b1a6:    8f 92             	r7 = sp + 18
  10b1a8:    42 26             	r2 = 0x6			  ## Crypto_hash.c:200:5
  10b1aa:    70 16             	r0 = r7			  ## Crypto_hash.c:200:5
  10b1ac:    81 16             	r1 = r8			  ## Crypto_hash.c:200:5
  10b1ae:    bf ea c7 cb       	call -0x6872 <memmove : 104940 >			  ## Crypto_hash.c:200:5
  10b1b2:    8c 8c             	r4 = sp + 12
  10b1b4:    42 26             	r2 = 0x6			  ## Crypto_hash.c:201:5
  10b1b6:    40 d6             	r0 = r4  #			  ## Crypto_hash.c:201:5
  10b1b8:    01 3d             		 r1 = [sp+116]			  ## Crypto_hash.c:201:5
  10b1ba:    bf ea c1 cb       	call -0x687e <memmove : 104940 >			  ## Crypto_hash.c:201:5
  10b1be:    41 38             	r1 = 0x18			  ## Crypto_hash.c:203:5
  10b1c0:    90 16             	r0 = r9			  ## Crypto_hash.c:203:5
  10b1c2:    80 ea 40 22       	call 0x4480 <endian_change : 10f646 >			  ## Crypto_hash.c:203:5
  10b1c6:    41 30             	r1 = 0x10			  ## Crypto_hash.c:204:5
  10b1c8:    a0 16             	r0 = r10			  ## Crypto_hash.c:204:5
  10b1ca:    80 ea 3c 22       	call 0x4478 <endian_change : 10f646 >			  ## Crypto_hash.c:204:5
  10b1ce:    41 30             	r1 = 0x10			  ## Crypto_hash.c:205:5
  10b1d0:    60 16             	r0 = r6			  ## Crypto_hash.c:205:5
  10b1d2:    80 ea 38 22       	call 0x4470 <endian_change : 10f646 >			  ## Crypto_hash.c:205:5
  10b1d6:    41 26             	r1 = 0x6			  ## Crypto_hash.c:206:5
  10b1d8:    70 16             	r0 = r7			  ## Crypto_hash.c:206:5
  10b1da:    80 ea 34 22       	call 0x4468 <endian_change : 10f646 >			  ## Crypto_hash.c:206:5
  10b1de:    41 26             	r1 = 0x6			  ## Crypto_hash.c:207:5
  10b1e0:    40 16             	r0 = r4			  ## Crypto_hash.c:207:5
  10b1e2:    80 ea 30 22       	call 0x4460 <endian_change : 10f646 >			  ## Crypto_hash.c:207:5
  10b1e6:    90 d6             	r0 = r9  #			  ## Crypto_hash.c:208:5
  10b1e8:    05 3e             		 r5 = [sp+120]			  ## Crypto_hash.c:208:5
  10b1ea:    d0 e9 05 40       	d[sp+4] = r5_r4			  ## Crypto_hash.c:208:5
  10b1ee:    8b 98             	r3 = sp + 24			  ## Crypto_hash.c:208:5
  10b1f0:    a1 d6             	r1 = r10  #			  ## Crypto_hash.c:208:5
  10b1f2:    87 20             		 [sp] = r7			  ## Crypto_hash.c:208:5
  10b1f4:    62 16             	r2 = r6			  ## Crypto_hash.c:208:5
  10b1f6:    bf ea 5a fe       	call -0x34c <f2_hash_function : 10aeae >			  ## Crypto_hash.c:208:5
  10b1fa:    41 30             	r1 = 0x10			  ## Crypto_hash.c:209:5
  10b1fc:    50 16             	r0 = r5			  ## Crypto_hash.c:209:5
  10b1fe:    80 ea 22 22       	call 0x4444 <endian_change : 10f646 >			  ## Crypto_hash.c:209:5
  10b202:    02 95             	sp += 0x54			  ## Crypto_hash.c:209:5
  10b204:    5a 04             	{pc, r10-r4} = [sp++]			  ## Crypto_hash.c:210:1


f3_function:
  10b206:    7b 04             	[--sp] = {rets, r11-r4}			  ## Crypto_hash.c:213:0
  10b208:    e2 86             	sp += -0x68			  ## Crypto_hash.c:213:0
  10b20a:    34 16             	r4 = r3			  ## Crypto_hash.c:213:0
  10b20c:    25 16             	r5 = r2			  ## Crypto_hash.c:213:0
  10b20e:    16 16             	r6 = r1			  ## Crypto_hash.c:213:0
  10b210:    01 16             	r1 = r0			  ## Crypto_hash.c:213:0
  10b212:    42 20             	r2 = 0x0			  ## Crypto_hash.c:217:8
  10b214:    43 20             	r3 = 0x0			  ## Crypto_hash.c:217:8
  10b216:    d0 e9 29 20       	d[sp+40] = r3_r2			  ## Crypto_hash.c:217:8
  10b21a:    d0 e9 21 20       	d[sp+32] = r3_r2			  ## Crypto_hash.c:217:8
  10b21e:    f8 e8 50 80       	r8 = sp + 80			  ## Crypto_hash.c:217:8
  10b222:    42 38             	r2 = 0x18			  ## Crypto_hash.c:221:5
  10b224:    80 16             	r0 = r8			  ## Crypto_hash.c:221:5
  10b226:    bf ea 8b cb       	call -0x68ea <memmove : 104940 >			  ## Crypto_hash.c:221:5
  10b22a:    f8 e8 40 90       	r9 = sp + 64
  10b22e:    42 30             	r2 = 0x10			  ## Crypto_hash.c:222:5
  10b230:    90 16             	r0 = r9			  ## Crypto_hash.c:222:5
  10b232:    61 16             	r1 = r6			  ## Crypto_hash.c:222:5
  10b234:    bf ea 84 cb       	call -0x68f8 <memmove : 104940 >			  ## Crypto_hash.c:222:5
  10b238:    f8 e8 30 a0       	r10 = sp + 48
  10b23c:    42 30             	r2 = 0x10			  ## Crypto_hash.c:223:5
  10b23e:    a0 16             	r0 = r10			  ## Crypto_hash.c:223:5
  10b240:    51 16             	r1 = r5			  ## Crypto_hash.c:223:5
  10b242:    bf ea 7d cb       	call -0x6906 <memmove : 104940 >			  ## Crypto_hash.c:223:5
  10b246:    f8 e8 20 b0       	r11 = sp + 32
  10b24a:    42 30             	r2 = 0x10			  ## Crypto_hash.c:224:5
  10b24c:    b0 16             	r0 = r11			  ## Crypto_hash.c:224:5
  10b24e:    41 16             	r1 = r4			  ## Crypto_hash.c:224:5
  10b250:    bf ea 76 cb       	call -0x6914 <memmove : 104940 >			  ## Crypto_hash.c:224:5
  10b254:    8c 9d             	r4 = sp + 29
  10b256:    42 23             	r2 = 0x3			  ## Crypto_hash.c:225:5
  10b258:    40 d6             	r0 = r4  #			  ## Crypto_hash.c:225:5
  10b25a:    21 23             		 r1 = [sp+140]			  ## Crypto_hash.c:225:5
  10b25c:    bf ea 70 cb       	call -0x6920 <memmove : 104940 >			  ## Crypto_hash.c:225:5
  10b260:    8d 97             	r5 = sp + 23			  ## Crypto_hash.c:225:5
  10b262:    42 26             	r2 = 0x6			  ## Crypto_hash.c:226:5
  10b264:    50 d6             	r0 = r5  #			  ## Crypto_hash.c:226:5
  10b266:    21 24             		 r1 = [sp+144]			  ## Crypto_hash.c:226:5
  10b268:    bf ea 6a cb       	call -0x692c <memmove : 104940 >			  ## Crypto_hash.c:226:5
  10b26c:    8e 91             	r6 = sp + 17			  ## Crypto_hash.c:226:5
  10b26e:    42 26             	r2 = 0x6			  ## Crypto_hash.c:227:5
  10b270:    60 d6             	r0 = r6  #			  ## Crypto_hash.c:227:5
  10b272:    21 25             		 r1 = [sp+148]			  ## Crypto_hash.c:227:5
  10b274:    bf ea 64 cb       	call -0x6938 <memmove : 104940 >			  ## Crypto_hash.c:227:5
  10b278:    41 38             	r1 = 0x18			  ## Crypto_hash.c:229:5
  10b27a:    80 16             	r0 = r8			  ## Crypto_hash.c:229:5
  10b27c:    80 ea e3 21       	call 0x43c6 <endian_change : 10f646 >			  ## Crypto_hash.c:229:5
  10b280:    41 30             	r1 = 0x10			  ## Crypto_hash.c:230:5
  10b282:    90 16             	r0 = r9			  ## Crypto_hash.c:230:5
  10b284:    80 ea df 21       	call 0x43be <endian_change : 10f646 >			  ## Crypto_hash.c:230:5
  10b288:    41 30             	r1 = 0x10			  ## Crypto_hash.c:231:5
  10b28a:    a0 16             	r0 = r10			  ## Crypto_hash.c:231:5
  10b28c:    80 ea db 21       	call 0x43b6 <endian_change : 10f646 >			  ## Crypto_hash.c:231:5
  10b290:    41 30             	r1 = 0x10			  ## Crypto_hash.c:232:5
  10b292:    b0 16             	r0 = r11			  ## Crypto_hash.c:232:5
  10b294:    80 ea d7 21       	call 0x43ae <endian_change : 10f646 >			  ## Crypto_hash.c:232:5
  10b298:    41 23             	r1 = 0x3			  ## Crypto_hash.c:233:5
  10b29a:    40 16             	r0 = r4			  ## Crypto_hash.c:233:5
  10b29c:    80 ea d3 21       	call 0x43a6 <endian_change : 10f646 >			  ## Crypto_hash.c:233:5
  10b2a0:    41 26             	r1 = 0x6			  ## Crypto_hash.c:234:5
  10b2a2:    50 16             	r0 = r5			  ## Crypto_hash.c:234:5
  10b2a4:    80 ea cf 21       	call 0x439e <endian_change : 10f646 >			  ## Crypto_hash.c:234:5
  10b2a8:    41 26             	r1 = 0x6			  ## Crypto_hash.c:235:5
  10b2aa:    60 16             	r0 = r6			  ## Crypto_hash.c:235:5
  10b2ac:    80 ea cb 21       	call 0x4396 <endian_change : 10f646 >			  ## Crypto_hash.c:235:5
  10b2b0:    80 d5             	r1_r0 = r9_r8  #			  ## Crypto_hash.c:236:5
  10b2b2:    27 26             		 r7 = [sp+152]			  ## Crypto_hash.c:236:5
  10b2b4:    d0 e9 09 60       	d[sp+8] = r7_r6			  ## Crypto_hash.c:236:5
  10b2b8:    d0 e9 01 40       	d[sp] = r5_r4			  ## Crypto_hash.c:236:5
  10b2bc:    a2 15             	r3_r2 = r11_r10			  ## Crypto_hash.c:236:5
  10b2be:    bf ea 26 fe       	call -0x3b4 <f3_hash_function : 10af0e >			  ## Crypto_hash.c:236:5
  10b2c2:    41 30             	r1 = 0x10			  ## Crypto_hash.c:237:5
  10b2c4:    70 16             	r0 = r7			  ## Crypto_hash.c:237:5
  10b2c6:    80 ea be 21       	call 0x437c <endian_change : 10f646 >			  ## Crypto_hash.c:237:5
  10b2ca:    02 9a             	sp += 0x68			  ## Crypto_hash.c:237:5
  10b2cc:    5b 04             	{pc, r11-r4} = [sp++]			  ## Crypto_hash.c:238:1
  10b2ce:    00 00             	nop


padding:
  10b2d0:	 80 00 00 00 00 00 00 00         ........
  10b2d8:	 00 00 00 00 00 00 00 00         ........
  10b2e0:	 00 00 00 00 00 00 00 00         ........
  10b2e8:	 00 00 00 00 00 00 00 00         ........
  10b2f0:	 00 00 00 00 00 00 00 00         ........
  10b2f8:	 00 00 00 00 00 00 00 00         ........
  10b300:	 00 00 00 00 00 00 00 00         ........
  10b308:	 00 00 00 00 00 00 00 00         ........


k:
  10b310:	 98 2f 8a 42 91 44 37 71         ./.B.D7q
  10b318:	 cf fb c0 b5 a5 db b5 e9         ........
  10b320:	 5b c2 56 39 f1 11 f1 59         [.V9...Y
  10b328:	 a4 82 3f 92 d5 5e 1c ab         ..?..^..
  10b330:	 98 aa 07 d8 01 5b 83 12         .....[..
  10b338:	 be 85 31 24 c3 7d 0c 55         ..1$.}.U
  10b340:	 74 5d be 72 fe b1 de 80         t].r....
  10b348:	 a7 06 dc 9b 74 f1 9b c1         ....t...
  10b350:	 c1 69 9b e4 86 47 be ef         .i...G..
  10b358:	 c6 9d c1 0f cc a1 0c 24         .......$
  10b360:	 6f 2c e9 2d aa 84 74 4a         o,.-..tJ
  10b368:	 dc a9 b0 5c da 88 f9 76         ...\...v
  10b370:	 52 51 3e 98 6d c6 31 a8         RQ>.m.1.
  10b378:	 c8 27 03 b0 c7 7f 59 bf         .'....Y.
  10b380:	 f3 0b e0 c6 47 91 a7 d5         ....G...
  10b388:	 51 63 ca 06 67 29 29 14         Qc..g)).
  10b390:	 85 0a b7 27 38 21 1b 2e         ...'8!..
  10b398:	 fc 6d 2c 4d 13 0d 38 53         .m,M..8S
  10b3a0:	 54 73 0a 65 bb 0a 6a 76         Ts.e..jv
  10b3a8:	 2e c9 c2 81 85 2c 72 92         .....,r.
  10b3b0:	 a1 e8 bf a2 4b 66 1a a8         ....Kf..
  10b3b8:	 70 8b 4b c2 a3 51 6c c7         p.K..Ql.
  10b3c0:	 19 e8 92 d1 24 06 99 d6         ....$...
  10b3c8:	 85 35 0e f4 70 a0 6a 10         .5..p.j.
  10b3d0:	 16 c1 a4 19 08 6c 37 1e         .....l7.
  10b3d8:	 4c 77 48 27 b5 bc b0 34         LwH'...4
  10b3e0:	 b3 0c 1c 39 4a aa d8 4e         ...9J..N
  10b3e8:	 4f ca 9c 5b f3 6f 2e 68         O..[.o.h
  10b3f0:	 ee 82 8f 74 6f 63 a5 78         ...toc.x
  10b3f8:	 14 78 c8 84 08 02 c7 8c         .x......
  10b400:	 fa ff be 90 eb 6c 50 a4         .....lP.
  10b408:	 f7 a3 f9 be f2 78 71 c6         .....xq.


sha256HashAlgo:
  10b410:	 60 fb 10 00 38 b4 10 00         `...8...
  10b418:	 09 00 00 00 2c 01 00 00         ....,...
  10b420:	 40 00 00 00 20 00 00 00         @... ...
  10b428:	 5a ad 10 00 c8 ad 10 00         Z.......
  10b430:	 0e ab 10 00 6e ab 10 00         ....n...


sha256Oid:
  10b438:	 60 86 48 01 65 03 04 02         `.H.e...
  10b440:	 01 00                           ..


vli_isZero:
  10b442:    41 20             	r1 = 0x0			  ## uECC.c:515:0
  10b444:    01 fc 06 0a       	if (r1 > 0x5) goto 0xc <vli_isZero+0x12 : 10b454 >			  ## uECC.c:515:0
  10b448:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## uECC.c:518:13
  10b44c:    c1 21             	r1 += 0x1			  ## uECC.c:517:33
  10b44e:    72 5a             	if (r2 == 0) goto -0xc <vli_isZero+0x2 : 10b444 >
  10b450:    40 20             	r0 = 0x0
  10b452:    80 00             	rts			  ## uECC.c:523:1
  10b454:    40 21             	r0 = 0x1
  10b456:    80 00             	rts			  ## uECC.c:523:1


vli_bytesToNative:
  10b458:    76 04             	[--sp] = {rets, r6-r4}			  ## uECC.c:2247:0
  10b45a:    42 20             	r2 = 0x0			  ## uECC.c:2247:0
  10b45c:    04 8e             	goto 0x1c <vli_bytesToNative+0x22 : 10b47a >			  ## uECC.c:2247:0
  10b45e:    93 1c             	r3 = r1 + r2			  ## uECC.c:2251:32
  10b460:    c3 34             	r3 += 0x14			  ## uECC.c:2251:32
  10b462:    3c 40             	r4 = b[r3+0x0] (u)			  ## uECC.c:2251:22
  10b464:    3d 41             	r5 = b[r3+0x1] (u)			  ## uECC.c:2251:51
  10b466:    3e 42             	r6 = b[r3+0x2] (u)			  ## uECC.c:2252:22
  10b468:    44 b8             	r4 = r4 << 0x18			  ## uECC.c:2251:41
  10b46a:    a4 f1 20 58       	r4 <= insert(r5, p:0x10, l:0x8)  #			  ## uECC.c:2251:48
  10b46e:    3b 43             		 r3 = b[r3+0x3] (u)			  ## uECC.c:2252:49
  10b470:    a4 e1 20 64       	r4 <= insert(r6, p:0x8, l:0x8)			  ## uECC.c:2251:77
  10b474:    43 19             	r3 |= r4			  ## uECC.c:2252:47
  10b476:    83 05             	[r0++=0x4] = r3			  ## uECC.c:2251:19
  10b478:    fa 3c             	r2 += -0x4			  ## uECC.c:2249:5
  10b47a:    f2 f8 f0 d1       	if (r2 != -0x18) goto -0x20 <vli_bytesToNative+0x6 : 10b45e >
  10b47e:    56 04             	{pc, r6-r4} = [sp++]			  ## uECC.c:2254:1


vli_add:
  10b480:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:623:0
  10b482:    44 20             	r4 = 0x0			  ## uECC.c:623:0
  10b484:    43 20             	r3 = 0x0			  ## uECC.c:623:0
  10b486:    04 90             	goto 0x20 <vli_add+0x28 : 10b4a8 >			  ## uECC.c:623:0
  10b488:    d8 ec 1a 54       	r5 = [r1+r4<<2]			  ## uECC.c:627:27
  10b48c:    d8 ec 2a 64       	r6 = [r2+r4<<2]			  ## uECC.c:627:37
  10b490:    df 1c             	r7 = r5 + r3			  ## uECC.c:627:35
  10b492:    76 18             	r6 += r7			  ## uECC.c:627:46
  10b494:    d8 ec 0b 64       	[r0+r4<<2] = r6			  ## uECC.c:631:19
  10b498:    47 21             	r7 = 0x1			  ## uECC.c:631:19
  10b49a:    16 e9 00 05       	if (r6 >= r5) {			  ## uECC.c:631:19
  10b49e:    47 20             		r7 = 0x0
                               	}			  ## uECC.c:629:26
  10b4a0:    96 e8 00 05       	if (r6 != r5) {			  ## uECC.c:629:26
  10b4a4:    73 16             		r3 = r7
                               	}			  ## uECC.c:628:13
  10b4a6:    c4 21             	r4 += 0x1			  ## uECC.c:626:33
  10b4a8:    84 f8 ee 0d       	if (r4 != 0x6) goto -0x24 <vli_add+0x8 : 10b488 >
  10b4ac:    30 16             	r0 = r3			  ## uECC.c:633:5
  10b4ae:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:633:5


vli_set:
  10b4b0:    42 20             	r2 = 0x0			  ## uECC.c:570:0
  10b4b2:    04 85             	goto 0xa <vli_set+0xE : 10b4be >			  ## uECC.c:570:0
  10b4b4:    d8 ec 1a 32       	r3 = [r1+r2<<2]			  ## uECC.c:573:19
  10b4b8:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## uECC.c:573:17
  10b4bc:    c2 21             	r2 += 0x1			  ## uECC.c:572:33
  10b4be:    82 f8 f9 0d       	if (r2 != 0x6) goto -0xe <vli_set+0x4 : 10b4b4 >
  10b4c2:    80 00             	rts			  ## uECC.c:575:1


vli_clear:
  10b4c4:    41 20             	r1 = 0x0			  ## uECC.c:504:0
  10b4c6:    42 20             	r2 = 0x0			  ## uECC.c:504:0
  10b4c8:    04 83             	goto 0x6 <vli_clear+0xC : 10b4d0 >			  ## uECC.c:504:0
  10b4ca:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## uECC.c:507:16
  10b4ce:    c2 21             	r2 += 0x1			  ## uECC.c:506:33
  10b4d0:    82 f8 fb 0d       	if (r2 != 0x6) goto -0xa <vli_clear+0x6 : 10b4ca >
  10b4d4:    80 00             	rts			  ## uECC.c:509:1


muladd:
  10b4d6:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:660:0
  10b4d8:    37 60             	r7 = [r3+0x0] 			  ## uECC.c:688:40
  10b4da:    26 60             	r6 = [r2+0x0] 			  ## uECC.c:688:66
  10b4dc:    64 15             	r5_r4 = r7_r6
  10b4de:    fc e1 10 40       	r5_r4 += r1 * r0 (u)
  10b4e2:    c0 1f             	r0 = r4 - r6
  10b4e4:    b8 e0 52 07       	r0 = r5 - r7 - !c
  10b4e8:    64 e0 00 15       	r1 = psr
  10b4ec:    40 21             	r0 = 0x1
  10b4ee:    31 ea 02 00       	if ((r1 & 0x2) != 0) {
  10b4f2:    40 20             		r0 = 0x0
                               	}
  10b4f4:    01 25             	r1 = [sp+20]
  10b4f6:    68 e8 00 10       	[r1+0x0] += r0			  ## uECC.c:690:9
  10b4fa:    b5 60             	[r3+0x0] = r5			  ## uECC.c:691:9
  10b4fc:    a4 60             	[r2+0x0] = r4			  ## uECC.c:692:9
  10b4fe:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:694:1


vli_cmp:
  10b500:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:581:0
  10b502:    42 25             	r2 = 0x5			  ## uECC.c:581:0
  10b504:    82 fd 0b 00       	ifs (r2 < 0x0) goto 0x16 <vli_cmp+0x1E : 10b51e >			  ## uECC.c:581:0
  10b508:    d8 ec 1a 32       	r3 = [r1+r2<<2]			  ## uECC.c:584:23
  10b50c:    d8 ec 0a 42       	r4 = [r0+r2<<2]			  ## uECC.c:584:13
  10b510:    03 ec 07 40       	if (r4 > r3) goto 0xe <vli_cmp+0x22 : 10b522 >			  ## uECC.c:584:13
  10b514:    fa 3f             	r2 += -0x1			  ## uECC.c:583:38
  10b516:    03 e9 f5 41       	if (r4 >= r3) goto -0x16 <vli_cmp+0x4 : 10b504 >
  10b51a:    10 3f             	r0 = -0x1
  10b51c:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:591:1
  10b51e:    40 20             	r0 = 0x0
  10b520:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:591:1
  10b522:    40 21             	r0 = 0x1
  10b524:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:591:1


vli_sub:
  10b526:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:640:0
  10b528:    44 20             	r4 = 0x0			  ## uECC.c:640:0
  10b52a:    43 20             	r3 = 0x0			  ## uECC.c:640:0
  10b52c:    04 90             	goto 0x20 <vli_sub+0x28 : 10b54e >			  ## uECC.c:640:0
  10b52e:    d8 ec 2a 64       	r6 = [r2+r4<<2]			  ## uECC.c:644:38
  10b532:    d8 ec 1a 54       	r5 = [r1+r4<<2]			  ## uECC.c:644:28
  10b536:    d6 1f             	r6 = r5 - r6			  ## uECC.c:644:36
  10b538:    ee 1e             	r6 = r6 - r3			  ## uECC.c:644:47
  10b53a:    d8 ec 0b 64       	[r0+r4<<2] = r6			  ## uECC.c:648:19
  10b53e:    47 21             	r7 = 0x1			  ## uECC.c:648:19
  10b540:    96 ec 00 05       	if (r6 <= r5) {			  ## uECC.c:648:19
  10b544:    47 20             		r7 = 0x0
                               	}			  ## uECC.c:646:28
  10b546:    96 e8 00 05       	if (r6 != r5) {			  ## uECC.c:646:28
  10b54a:    73 16             		r3 = r7
                               	}			  ## uECC.c:645:13
  10b54c:    c4 21             	r4 += 0x1			  ## uECC.c:643:33
  10b54e:    84 f8 ee 0d       	if (r4 != 0x6) goto -0x24 <vli_sub+0x8 : 10b52e >
  10b552:    30 16             	r0 = r3			  ## uECC.c:650:5
  10b554:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:650:5


vli_modMult_fast:
  10b556:    7e 04             	[--sp] = {rets, r14-r4}			  ## uECC.c:1694:0
  10b558:    e2 8a             	sp += -0x58			  ## uECC.c:1694:0
  10b55a:    28 16             	r8 = r2			  ## uECC.c:1694:0
  10b55c:    15 16             	r5 = r1			  ## uECC.c:1694:0
  10b55e:    0a 16             	r10 = r0			  ## uECC.c:1694:0
  10b560:    c1 14             	r9 = 0			  ## uECC.c:1694:0
  10b562:    d4 e9 55 90       	[sp+84] = r9			  ## uECC.c:701:17
  10b566:    d4 e9 51 90       	[sp+80] = r9			  ## uECC.c:702:17
  10b56a:    d4 e9 4d 90       	[sp+76] = r9			  ## uECC.c:703:17
  10b56e:    4e e0 01 00       	r14 = 0x1 <TLB_BEGIN : 0 >
  10b572:    8c 16             	r12 = r8
  10b574:    c3 14             	r11 = 0
  10b576:    c5 14             	r13 = 0
  10b578:    14 80             	goto 0x40 <vli_modMult_fast+0x64 : 10b5ba >
  10b57a:    44 20             	r4 = 0x0
  10b57c:    c7 16             	r7 = r12
  10b57e:    04 89             	goto 0x12 <vli_modMult_fast+0x3C : 10b592 >
  10b580:    d8 ec 5a 04       	r0 = [r5+r4<<2]			  ## uECC.c:709:20
  10b584:    79 05             	r1 = [r7++=-0x4] 			  ## uECC.c:709:29
  10b586:    ce 8c             	r6 = sp + 76			  ## uECC.c:709:29
  10b588:    ca 94             	r2 = sp + 84
  10b58a:    cb 90             	r3 = sp + 80
  10b58c:    86 20             	[sp] = r6			  ## uECC.c:709:13
  10b58e:    51 83             	call -0xba <muladd : 10b4d6 >			  ## uECC.c:709:13
  10b590:    c4 21             	r4 += 0x1			  ## uECC.c:708:29
  10b592:    84 e8 f5 e1       	if (r14 != r4) goto -0x16 <vli_modMult_fast+0x2A : 10b580 >
  10b596:    0c f1 04 c0       	r12 = r12 + 0x4  #			  ## uECC.c:707:5
  10b59a:    00 35             		 r0 = [sp+84]			  ## uECC.c:711:21
  10b59c:    d4 e9 50 b0       	r11 = [sp+80]			  ## uECC.c:712:14
  10b5a0:    0e f1 01 e0       	r14 = r14 + 0x1  #			  ## uECC.c:707:5
  10b5a4:    01 33             		 r1 = [sp+76]			  ## uECC.c:713:14
  10b5a6:    8a 84             	r2 = sp + 4
  10b5a8:    d8 ec 2b 0d       	[r2+r13<<2] = r0			  ## uECC.c:711:19
  10b5ac:    d4 e9 55 b0       	[sp+84] = r11			  ## uECC.c:712:12
  10b5b0:    0d f1 01 d0       	r13 = r13 + 0x1  #			  ## uECC.c:707:33
  10b5b4:    81 34             		 [sp+80] = r1			  ## uECC.c:713:12
  10b5b6:    d4 e9 4d 90       	[sp+76] = r9			  ## uECC.c:714:12
  10b5ba:    8d f8 de 0d       	if (r13 != 0x6) goto -0x44 <vli_modMult_fast+0x24 : 10b57a >
  10b5be:    09 e1 14 80       	r9 = r8 + 0x14			  ## uECC.c:704:20
  10b5c2:    4c e0 06 00       	r12 = 0x6 <TLB_BEGIN+0x6 : 6 >			  ## uECC.c:704:20
  10b5c6:    c0 14             	r8 = 0			  ## uECC.c:704:20
  10b5c8:    04 9e             	goto 0x3c <vli_modMult_fast+0xB0 : 10b606 >
  10b5ca:    37 e1 fb cf       	r7 = r12 + -0x5			  ## uECC.c:717:26
  10b5ce:    94 16             	r4 = r9
  10b5d0:    04 8a             	goto 0x14 <vli_modMult_fast+0x90 : 10b5e6 >
  10b5d2:    d8 ec 5a 07       	r0 = [r5+r7<<2]			  ## uECC.c:718:20
  10b5d6:    49 05             	r1 = [r4++=-0x4] 			  ## uECC.c:718:29
  10b5d8:    ce 8c             	r6 = sp + 76			  ## uECC.c:718:29
  10b5da:    ca 94             	r2 = sp + 84
  10b5dc:    cb 90             	r3 = sp + 80
  10b5de:    86 20             	[sp] = r6			  ## uECC.c:718:13
  10b5e0:    bf ea 79 ff       	call -0x10e <muladd : 10b4d6 >			  ## uECC.c:718:13
  10b5e4:    c7 21             	r7 += 0x1			  ## uECC.c:717:56
  10b5e6:    87 f8 f4 0d       	if (r7 != 0x6) goto -0x18 <vli_modMult_fast+0x7C : 10b5d2 >
  10b5ea:    00 35             	r0 = [sp+84]			  ## uECC.c:720:21
  10b5ec:    d4 e9 50 b0       	r11 = [sp+80]			  ## uECC.c:721:14
  10b5f0:    01 33             	r1 = [sp+76]			  ## uECC.c:722:14
  10b5f2:    8a 84             	r2 = sp + 4
  10b5f4:    d8 ec 2b 0c       	[r2+r12<<2] = r0			  ## uECC.c:720:19
  10b5f8:    d4 e9 55 b0       	[sp+84] = r11			  ## uECC.c:721:12
  10b5fc:    0c f1 01 c0       	r12 = r12 + 0x1  #			  ## uECC.c:717:21
  10b600:    81 34             		 [sp+80] = r1			  ## uECC.c:722:12
  10b602:    d4 e9 4d 80       	[sp+76] = r8			  ## uECC.c:723:12
  10b606:    8c f8 e0 17       	if (r12 != 0xb) goto -0x40 <vli_modMult_fast+0x74 : 10b5ca >
  10b60a:    d4 e9 31 b0       	[sp+48] = r11			  ## uECC.c:725:32
  10b60e:    89 84             	r1 = sp + 4
  10b610:    a0 16             	r0 = r10			  ## uECC.c:982:5
  10b612:    bf ea 4d ff       	call -0x166 <vli_set : 10b4b0 >			  ## uECC.c:982:5
  10b616:    c1 38             	r1 += 0x18			  ## uECC.c:984:19
  10b618:    ad 94             	r5 = sp + 52			  ## uECC.c:984:19
  10b61a:    50 16             	r0 = r5			  ## uECC.c:984:5
  10b61c:    bf ea 48 ff       	call -0x170 <vli_set : 10b4b0 >			  ## uECC.c:984:5
  10b620:    a0 16             	r0 = r10			  ## uECC.c:985:13
  10b622:    a1 16             	r1 = r10			  ## uECC.c:985:13
  10b624:    52 16             	r2 = r5			  ## uECC.c:985:13
  10b626:    bf ea 2b ff       	call -0x1aa <vli_add : 10b480 >			  ## uECC.c:985:13
  10b62a:    06 16             	r6 = r0			  ## uECC.c:985:13
  10b62c:    40 20             	r0 = 0x0			  ## uECC.c:987:12
  10b62e:    41 20             	r1 = 0x0			  ## uECC.c:987:12
  10b630:    d0 e9 35 00       	d[sp+52] = r1_r0			  ## uECC.c:987:12
  10b634:    d0 e9 1c 00       	r1_r0 = d[sp+28]			  ## uECC.c:988:14
  10b638:    d0 e9 24 20       	r3_r2 = d[sp+36]			  ## uECC.c:990:14
  10b63c:    d0 e9 3d 00       	d[sp+60] = r1_r0			  ## uECC.c:988:12
  10b640:    d0 e9 45 20       	d[sp+68] = r3_r2			  ## uECC.c:990:12
  10b644:    a0 16             	r0 = r10			  ## uECC.c:992:14
  10b646:    a1 16             	r1 = r10			  ## uECC.c:992:14
  10b648:    52 16             	r2 = r5			  ## uECC.c:992:14
  10b64a:    bf ea 19 ff       	call -0x1ce <vli_add : 10b480 >			  ## uECC.c:992:14
  10b64e:    84 dd             	r4 = r0 + r6  #			  ## uECC.c:992:11
  10b650:    01 2b             		 r1 = [sp+44]			  ## uECC.c:994:23
  10b652:    a0 d6             	r0 = r10  #			  ## uECC.c:997:14
  10b654:    81 2f             		 [sp+60] = r1			  ## uECC.c:994:21
  10b656:    81 2d             	[sp+52] = r1			  ## uECC.c:994:12
  10b658:    d4 e9 41 b0       	[sp+64] = r11			  ## uECC.c:995:21
  10b65c:    d4 e9 39 b0       	[sp+56] = r11			  ## uECC.c:995:12
  10b660:    41 20             	r1 = 0x0			  ## uECC.c:995:12
  10b662:    81 32             	[sp+72] = r1			  ## uECC.c:996:21
  10b664:    a1 d6             	r1 = r10  #			  ## uECC.c:997:14
  10b666:    81 31             		 [sp+68] = r1			  ## uECC.c:996:12
  10b668:    bf ea 0a ff       	call -0x1ec <vli_add : 10b480 >			  ## uECC.c:997:14
  10b66c:    04 18             	r4 += r0			  ## uECC.c:997:11
  10b66e:    c5 ff f0 bd 10 00 	r5 = 0x10bdf0 <curve_p : 10bdf0 >
  10b674:    04 85             	goto 0xa <vli_modMult_fast+0x12A : 10b680 >
  10b676:    a0 16             	r0 = r10			  ## uECC.c:1000:18
  10b678:    52 16             	r2 = r5			  ## uECC.c:1000:18
  10b67a:    bf ea 54 ff       	call -0x158 <vli_sub : 10b526 >			  ## uECC.c:1000:18
  10b67e:    44 1e             	r4 = r4 - r0			  ## uECC.c:1000:15
  10b680:    f4 5a             	if (r4 != 0) goto -0xc <vli_modMult_fast+0x120 : 10b676 >
  10b682:    50 16             	r0 = r5			  ## uECC.c:999:21
  10b684:    bf ea 3c ff       	call -0x188 <vli_cmp : 10b500 >			  ## uECC.c:999:21
  10b688:    80 f8 f5 03       	if (r0 != 0x1) goto -0x16 <vli_modMult_fast+0x120 : 10b676 >			  ## uECC.c:999:21
  10b68c:    02 96             	sp += 0x58
  10b68e:    5e 04             	{pc, r14-r4} = [sp++]			  ## uECC.c:1698:1


apply_z:
  10b690:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:1895:0
  10b692:    e2 9a             	sp += -0x18			  ## uECC.c:1895:0
  10b694:    24 16             	r4 = r2			  ## uECC.c:1895:0
  10b696:    15 16             	r5 = r1			  ## uECC.c:1895:0
  10b698:    06 16             	r6 = r0			  ## uECC.c:1895:0
  10b69a:    8f 80             	r7 = sp + 0			  ## uECC.c:1895:0
  10b69c:    70 16             	r0 = r7			  ## uECC.c:1898:5
  10b69e:    41 16             	r1 = r4			  ## uECC.c:1898:5
  10b6a0:    bf ea 59 ff       	call -0x14e <vli_modMult_fast : 10b556 >			  ## uECC.c:1898:5
  10b6a4:    60 16             	r0 = r6			  ## uECC.c:1899:5
  10b6a6:    61 16             	r1 = r6			  ## uECC.c:1899:5
  10b6a8:    72 16             	r2 = r7			  ## uECC.c:1899:5
  10b6aa:    bf ea 54 ff       	call -0x158 <vli_modMult_fast : 10b556 >			  ## uECC.c:1899:5
  10b6ae:    70 16             	r0 = r7			  ## uECC.c:1900:5
  10b6b0:    71 16             	r1 = r7			  ## uECC.c:1900:5
  10b6b2:    42 16             	r2 = r4			  ## uECC.c:1900:5
  10b6b4:    bf ea 4f ff       	call -0x162 <vli_modMult_fast : 10b556 >			  ## uECC.c:1900:5
  10b6b8:    50 16             	r0 = r5			  ## uECC.c:1901:5
  10b6ba:    51 16             	r1 = r5			  ## uECC.c:1901:5
  10b6bc:    72 16             	r2 = r7			  ## uECC.c:1901:5
  10b6be:    bf ea 4a ff       	call -0x16c <vli_modMult_fast : 10b556 >			  ## uECC.c:1901:5
  10b6c2:    02 86             	sp += 0x18			  ## uECC.c:1901:5
  10b6c4:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:1902:1


vli_modAdd:
  10b6c6:    75 04             	[--sp] = {rets, r5, r4}			  ## uECC.c:821:0
  10b6c8:    04 16             	r4 = r0			  ## uECC.c:821:0
  10b6ca:    bf ea d9 fe       	call -0x24e <vli_add : 10b480 >			  ## uECC.c:822:25
  10b6ce:    c5 ff f0 bd 10 00 	r5 = 0x10bdf0 <curve_p : 10bdf0 >
  10b6d4:    80 45             	if (r0 != 0) goto 0xa <vli_modAdd+0x1A : 10b6e0 >
  10b6d6:    40 15             	r1_r0 = r5_r4			  ## uECC.c:823:18
  10b6d8:    bf ea 12 ff       	call -0x1dc <vli_cmp : 10b500 >			  ## uECC.c:823:18
  10b6dc:    80 fd 05 00       	ifs (r0 < 0x0) goto 0xa <vli_modAdd+0x24 : 10b6ea >			  ## uECC.c:823:18
  10b6e0:    40 16             	r0 = r4			  ## uECC.c:825:9
  10b6e2:    41 16             	r1 = r4			  ## uECC.c:825:9
  10b6e4:    52 16             	r2 = r5			  ## uECC.c:825:9
  10b6e6:    bf ea 1e ff       	call -0x1c4 <vli_sub : 10b526 >			  ## uECC.c:825:9
  10b6ea:    55 04             	{pc, r5, r4} = [sp++]			  ## uECC.c:827:1


vli_modSub:
  10b6ec:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:837:0
  10b6ee:    04 16             	r4 = r0			  ## uECC.c:837:0
  10b6f0:    bf ea 19 ff       	call -0x1ce <vli_sub : 10b526 >			  ## uECC.c:838:28
  10b6f4:    b0 e8 00 c0       	if (r0 != 0x0) {
  10b6f8:    c2 ff f0 bd 10 00 		r2 = 0x10bdf0 <curve_p : 10bdf0 >			  ## uECC.c:842:9
  10b6fe:    40 16             		r0 = r4			  ## uECC.c:842:9
  10b700:    41 16             		r1 = r4			  ## uECC.c:842:9
  10b702:    bf ea bd fe       		call -0x286
                               	} <vli_add : 10b480 >			  ## uECC.c:842:9
  10b706:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:844:1


vli_rshift1:
  10b708:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:607:0
  10b70a:    09 98             	r1 = r0 + 0x18			  ## uECC.c:611:9
  10b70c:    42 20             	r2 = 0x0
  10b70e:    04 86             	goto 0xc <vli_rshift1+0x14 : 10b71c >
  10b710:    13 7f             	r3 = [r1+-0x4] 			  ## uECC.c:613:28
  10b712:    b4 a1             	r4 = r3 >> 0x1			  ## uECC.c:614:22
  10b714:    42 19             	r2 |= r4			  ## uECC.c:614:28
  10b716:    92 7f             	[r1+-0x4] = r2			  ## uECC.c:614:14
  10b718:    f9 3c             	r1 += -0x4			  ## uECC.c:612:15
  10b71a:    32 bf             	r2 = r3 << 0x1f			  ## uECC.c:615:22
  10b71c:    00 ec f8 11       	if (r1 > r0) goto -0x10 <vli_rshift1+0x8 : 10b710 >
  10b720:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:617:1


XYcZ_addC:
  10b722:    7a 04             	[--sp] = {rets, r10-r4}			  ## uECC.c:1965:0
  10b724:    e2 8e             	sp += -0x48			  ## uECC.c:1965:0
  10b726:    37 16             	r7 = r3			  ## uECC.c:1965:0
  10b728:    25 16             	r5 = r2			  ## uECC.c:1965:0
  10b72a:    18 16             	r8 = r1			  ## uECC.c:1965:0
  10b72c:    09 16             	r9 = r0			  ## uECC.c:1965:0
  10b72e:    f8 e8 30 a0       	r10 = sp + 48			  ## uECC.c:1965:0
  10b732:    a0 16             	r0 = r10			  ## uECC.c:1971:5
  10b734:    51 16             	r1 = r5			  ## uECC.c:1971:5
  10b736:    92 16             	r2 = r9			  ## uECC.c:1971:5
  10b738:    61 99             	call -0x4e <vli_modSub : 10b6ec >			  ## uECC.c:1971:5
  10b73a:    a0 16             	r0 = r10			  ## uECC.c:1972:5
  10b73c:    a1 16             	r1 = r10			  ## uECC.c:1972:5
  10b73e:    a2 16             	r2 = r10			  ## uECC.c:1972:5
  10b740:    bf ea 09 ff       	call -0x1ee <vli_modMult_fast : 10b556 >			  ## uECC.c:1972:5
  10b744:    90 16             	r0 = r9			  ## uECC.c:1973:5
  10b746:    91 16             	r1 = r9			  ## uECC.c:1973:5
  10b748:    a2 16             	r2 = r10			  ## uECC.c:1973:5
  10b74a:    bf ea 04 ff       	call -0x1f8 <vli_modMult_fast : 10b556 >			  ## uECC.c:1973:5
  10b74e:    50 16             	r0 = r5			  ## uECC.c:1974:5
  10b750:    51 16             	r1 = r5			  ## uECC.c:1974:5
  10b752:    a2 16             	r2 = r10			  ## uECC.c:1974:5
  10b754:    bf ea ff fe       	call -0x202 <vli_modMult_fast : 10b556 >			  ## uECC.c:1974:5
  10b758:    a0 16             	r0 = r10			  ## uECC.c:1975:5
  10b75a:    71 16             	r1 = r7			  ## uECC.c:1975:5
  10b75c:    82 16             	r2 = r8			  ## uECC.c:1975:5
  10b75e:    51 93             	call -0x9a <vli_modAdd : 10b6c6 >			  ## uECC.c:1975:5
  10b760:    70 16             	r0 = r7			  ## uECC.c:1976:5
  10b762:    71 16             	r1 = r7			  ## uECC.c:1976:5
  10b764:    82 16             	r2 = r8			  ## uECC.c:1976:5
  10b766:    61 82             	call -0x7c <vli_modSub : 10b6ec >			  ## uECC.c:1976:5
  10b768:    8c 98             	r4 = sp + 24			  ## uECC.c:1976:5
  10b76a:    40 15             	r1_r0 = r5_r4			  ## uECC.c:1978:5
  10b76c:    92 16             	r2 = r9			  ## uECC.c:1978:5
  10b76e:    51 9e             	call -0x84 <vli_modSub : 10b6ec >			  ## uECC.c:1978:5
  10b770:    80 16             	r0 = r8			  ## uECC.c:1979:5
  10b772:    81 16             	r1 = r8			  ## uECC.c:1979:5
  10b774:    42 16             	r2 = r4			  ## uECC.c:1979:5
  10b776:    bf ea ee fe       	call -0x224 <vli_modMult_fast : 10b556 >			  ## uECC.c:1979:5
  10b77a:    40 16             	r0 = r4			  ## uECC.c:1980:5
  10b77c:    91 16             	r1 = r9			  ## uECC.c:1980:5
  10b77e:    52 16             	r2 = r5			  ## uECC.c:1980:5
  10b780:    51 82             	call -0xbc <vli_modAdd : 10b6c6 >			  ## uECC.c:1980:5
  10b782:    50 16             	r0 = r5			  ## uECC.c:1981:5
  10b784:    71 16             	r1 = r7			  ## uECC.c:1981:5
  10b786:    72 16             	r2 = r7			  ## uECC.c:1981:5
  10b788:    bf ea e5 fe       	call -0x236 <vli_modMult_fast : 10b556 >			  ## uECC.c:1981:5
  10b78c:    50 16             	r0 = r5			  ## uECC.c:1982:5
  10b78e:    51 16             	r1 = r5			  ## uECC.c:1982:5
  10b790:    42 16             	r2 = r4			  ## uECC.c:1982:5
  10b792:    51 8c             	call -0xa8 <vli_modSub : 10b6ec >			  ## uECC.c:1982:5
  10b794:    8e 80             	r6 = sp + 0			  ## uECC.c:1982:5
  10b796:    60 16             	r0 = r6			  ## uECC.c:1984:5
  10b798:    91 16             	r1 = r9			  ## uECC.c:1984:5
  10b79a:    52 16             	r2 = r5			  ## uECC.c:1984:5
  10b79c:    51 87             	call -0xb2 <vli_modSub : 10b6ec >			  ## uECC.c:1984:5
  10b79e:    70 16             	r0 = r7			  ## uECC.c:1985:5
  10b7a0:    71 16             	r1 = r7			  ## uECC.c:1985:5
  10b7a2:    62 16             	r2 = r6			  ## uECC.c:1985:5
  10b7a4:    bf ea d7 fe       	call -0x252 <vli_modMult_fast : 10b556 >			  ## uECC.c:1985:5
  10b7a8:    70 16             	r0 = r7			  ## uECC.c:1986:5
  10b7aa:    71 16             	r1 = r7			  ## uECC.c:1986:5
  10b7ac:    82 16             	r2 = r8			  ## uECC.c:1986:5
  10b7ae:    41 9e             	call -0xc4 <vli_modSub : 10b6ec >			  ## uECC.c:1986:5
  10b7b0:    60 16             	r0 = r6			  ## uECC.c:1988:5
  10b7b2:    a1 16             	r1 = r10			  ## uECC.c:1988:5
  10b7b4:    a2 16             	r2 = r10			  ## uECC.c:1988:5
  10b7b6:    bf ea ce fe       	call -0x264 <vli_modMult_fast : 10b556 >			  ## uECC.c:1988:5
  10b7ba:    60 16             	r0 = r6			  ## uECC.c:1989:5
  10b7bc:    61 16             	r1 = r6			  ## uECC.c:1989:5
  10b7be:    42 16             	r2 = r4			  ## uECC.c:1989:5
  10b7c0:    41 95             	call -0xd6 <vli_modSub : 10b6ec >			  ## uECC.c:1989:5
  10b7c2:    40 16             	r0 = r4			  ## uECC.c:1990:5
  10b7c4:    61 16             	r1 = r6			  ## uECC.c:1990:5
  10b7c6:    92 16             	r2 = r9			  ## uECC.c:1990:5
  10b7c8:    41 91             	call -0xde <vli_modSub : 10b6ec >			  ## uECC.c:1990:5
  10b7ca:    40 16             	r0 = r4			  ## uECC.c:1991:5
  10b7cc:    41 16             	r1 = r4			  ## uECC.c:1991:5
  10b7ce:    a2 16             	r2 = r10			  ## uECC.c:1991:5
  10b7d0:    bf ea c1 fe       	call -0x27e <vli_modMult_fast : 10b556 >			  ## uECC.c:1991:5
  10b7d4:    80 16             	r0 = r8			  ## uECC.c:1992:5
  10b7d6:    41 16             	r1 = r4			  ## uECC.c:1992:5
  10b7d8:    82 16             	r2 = r8			  ## uECC.c:1992:5
  10b7da:    41 88             	call -0xf0 <vli_modSub : 10b6ec >			  ## uECC.c:1992:5
  10b7dc:    90 16             	r0 = r9			  ## uECC.c:1994:5
  10b7de:    61 16             	r1 = r6			  ## uECC.c:1994:5
  10b7e0:    bf ea 66 fe       	call -0x334 <vli_set : 10b4b0 >			  ## uECC.c:1994:5
  10b7e4:    02 92             	sp += 0x48			  ## uECC.c:1994:5
  10b7e6:    5a 04             	{pc, r10-r4} = [sp++]			  ## uECC.c:1995:1


XYcZ_add:
  10b7e8:    78 04             	[--sp] = {rets, r8-r4}			  ## uECC.c:1935:0
  10b7ea:    e2 9a             	sp += -0x18			  ## uECC.c:1935:0
  10b7ec:    36 16             	r6 = r3			  ## uECC.c:1935:0
  10b7ee:    24 16             	r4 = r2			  ## uECC.c:1935:0
  10b7f0:    18 16             	r8 = r1			  ## uECC.c:1935:0
  10b7f2:    07 16             	r7 = r0			  ## uECC.c:1935:0
  10b7f4:    8d 80             	r5 = sp + 0			  ## uECC.c:1935:0
  10b7f6:    50 16             	r0 = r5			  ## uECC.c:1939:5
  10b7f8:    41 16             	r1 = r4			  ## uECC.c:1939:5
  10b7fa:    72 16             	r2 = r7			  ## uECC.c:1939:5
  10b7fc:    bf ea 76 ff       	call -0x114 <vli_modSub : 10b6ec >			  ## uECC.c:1939:5
  10b800:    50 16             	r0 = r5			  ## uECC.c:1940:5
  10b802:    51 16             	r1 = r5			  ## uECC.c:1940:5
  10b804:    52 16             	r2 = r5			  ## uECC.c:1940:5
  10b806:    bf ea a6 fe       	call -0x2b4 <vli_modMult_fast : 10b556 >			  ## uECC.c:1940:5
  10b80a:    70 16             	r0 = r7			  ## uECC.c:1941:5
  10b80c:    71 16             	r1 = r7			  ## uECC.c:1941:5
  10b80e:    52 16             	r2 = r5			  ## uECC.c:1941:5
  10b810:    bf ea a1 fe       	call -0x2be <vli_modMult_fast : 10b556 >			  ## uECC.c:1941:5
  10b814:    40 16             	r0 = r4			  ## uECC.c:1942:5
  10b816:    41 16             	r1 = r4			  ## uECC.c:1942:5
  10b818:    52 16             	r2 = r5			  ## uECC.c:1942:5
  10b81a:    bf ea 9c fe       	call -0x2c8 <vli_modMult_fast : 10b556 >			  ## uECC.c:1942:5
  10b81e:    60 16             	r0 = r6			  ## uECC.c:1943:5
  10b820:    61 16             	r1 = r6			  ## uECC.c:1943:5
  10b822:    82 16             	r2 = r8			  ## uECC.c:1943:5
  10b824:    bf ea 62 ff       	call -0x13c <vli_modSub : 10b6ec >			  ## uECC.c:1943:5
  10b828:    50 16             	r0 = r5			  ## uECC.c:1944:5
  10b82a:    61 16             	r1 = r6			  ## uECC.c:1944:5
  10b82c:    62 16             	r2 = r6			  ## uECC.c:1944:5
  10b82e:    bf ea 92 fe       	call -0x2dc <vli_modMult_fast : 10b556 >			  ## uECC.c:1944:5
  10b832:    50 16             	r0 = r5			  ## uECC.c:1946:5
  10b834:    51 16             	r1 = r5			  ## uECC.c:1946:5
  10b836:    72 16             	r2 = r7			  ## uECC.c:1946:5
  10b838:    bf ea 58 ff       	call -0x150 <vli_modSub : 10b6ec >			  ## uECC.c:1946:5
  10b83c:    50 16             	r0 = r5			  ## uECC.c:1947:5
  10b83e:    51 16             	r1 = r5			  ## uECC.c:1947:5
  10b840:    42 16             	r2 = r4			  ## uECC.c:1947:5
  10b842:    bf ea 53 ff       	call -0x15a <vli_modSub : 10b6ec >			  ## uECC.c:1947:5
  10b846:    40 16             	r0 = r4			  ## uECC.c:1948:5
  10b848:    41 16             	r1 = r4			  ## uECC.c:1948:5
  10b84a:    72 16             	r2 = r7			  ## uECC.c:1948:5
  10b84c:    bf ea 4e ff       	call -0x164 <vli_modSub : 10b6ec >			  ## uECC.c:1948:5
  10b850:    80 16             	r0 = r8			  ## uECC.c:1949:5
  10b852:    81 16             	r1 = r8			  ## uECC.c:1949:5
  10b854:    42 16             	r2 = r4			  ## uECC.c:1949:5
  10b856:    bf ea 7e fe       	call -0x304 <vli_modMult_fast : 10b556 >			  ## uECC.c:1949:5
  10b85a:    40 16             	r0 = r4			  ## uECC.c:1950:5
  10b85c:    71 16             	r1 = r7			  ## uECC.c:1950:5
  10b85e:    52 16             	r2 = r5			  ## uECC.c:1950:5
  10b860:    bf ea 44 ff       	call -0x178 <vli_modSub : 10b6ec >			  ## uECC.c:1950:5
  10b864:    60 16             	r0 = r6			  ## uECC.c:1951:5
  10b866:    61 16             	r1 = r6			  ## uECC.c:1951:5
  10b868:    42 16             	r2 = r4			  ## uECC.c:1951:5
  10b86a:    bf ea 74 fe       	call -0x318 <vli_modMult_fast : 10b556 >			  ## uECC.c:1951:5
  10b86e:    60 16             	r0 = r6			  ## uECC.c:1952:5
  10b870:    61 16             	r1 = r6			  ## uECC.c:1952:5
  10b872:    82 16             	r2 = r8			  ## uECC.c:1952:5
  10b874:    bf ea 3a ff       	call -0x18c <vli_modSub : 10b6ec >			  ## uECC.c:1952:5
  10b878:    40 15             	r1_r0 = r5_r4			  ## uECC.c:1954:5
  10b87a:    bf ea 19 fe       	call -0x3ce <vli_set : 10b4b0 >			  ## uECC.c:1954:5
  10b87e:    02 86             	sp += 0x18			  ## uECC.c:1954:5
  10b880:    58 04             	{pc, r8-r4} = [sp++]			  ## uECC.c:1955:1


EccPoint_mult:
  10b882:    7e 04             	[--sp] = {rets, r14-r4}			  ## uECC.c:2002:0
  10b884:    c2 84             	sp += -0xf0			  ## uECC.c:2002:0
  10b886:    35 16             	r5 = r3			  ## uECC.c:2002:0
  10b888:    2c 16             	r12 = r2			  ## uECC.c:2002:0
  10b88a:    1d 16             	r13 = r1			  ## uECC.c:2002:0
  10b88c:    08 16             	r8 = r0			  ## uECC.c:2002:0
  10b88e:    c8 88             	r0 = sp + 72			  ## uECC.c:2002:0
  10b890:    0e e1 18 00       	r14 = r0 + 0x18			  ## uECC.c:2010:13
  10b894:    e0 16             	r0 = r14			  ## uECC.c:2010:5
  10b896:    bf ea 0b fe       	call -0x3ea <vli_set : 10b4b0 >			  ## uECC.c:2010:5
  10b89a:    88 98             	r0 = sp + 24			  ## uECC.c:2010:5
  10b89c:    0b e1 18 00       	r11 = r0 + 0x18			  ## uECC.c:2011:13
  10b8a0:    09 e1 18 10       	r9 = r1 + 0x18			  ## uECC.c:2011:20
  10b8a4:    b0 16             	r0 = r11			  ## uECC.c:2011:5
  10b8a6:    91 16             	r1 = r9			  ## uECC.c:2011:5
  10b8a8:    bf ea 02 fe       	call -0x3fc <vli_set : 10b4b0 >			  ## uECC.c:2011:5
  10b8ac:    e8 98             	r0 = sp + 120
  10b8ae:    05 44             	if (r5 == 0) goto 0x8 <EccPoint_mult+0x36 : 10b8b8 >			  ## uECC.c:1912:9
  10b8b0:    51 16             	r1 = r5			  ## uECC.c:1913:9
  10b8b2:    bf ea fd fd       	call -0x406 <vli_set : 10b4b0 >			  ## uECC.c:1913:9
  10b8b6:    04 84             	goto 0x8 <EccPoint_mult+0x3E : 10b8c0 >			  ## uECC.c:1913:9
  10b8b8:    bf ea 04 fe       	call -0x3f8 <vli_clear : 10b4c4 >			  ## uECC.c:1915:9
  10b8bc:    40 21             	r0 = 0x1			  ## uECC.c:1916:14
  10b8be:    80 3e             	[sp+120] = r0			  ## uECC.c:1916:14
  10b8c0:    c8 88             	r0 = sp + 72
  10b8c2:    e1 16             	r1 = r14			  ## uECC.c:1919:5
  10b8c4:    bf ea f4 fd       	call -0x418 <vli_set : 10b4b0 >			  ## uECC.c:1919:5
  10b8c8:    88 98             	r0 = sp + 24			  ## uECC.c:1919:5
  10b8ca:    b1 16             	r1 = r11			  ## uECC.c:1920:5
  10b8cc:    bf ea f0 fd       	call -0x420 <vli_set : 10b4b0 >			  ## uECC.c:1920:5
  10b8d0:    ed 98             	r5 = sp + 120			  ## uECC.c:1920:5
  10b8d2:    e0 16             	r0 = r14			  ## uECC.c:1922:5
  10b8d4:    52 16             	r2 = r5			  ## uECC.c:1922:5
  10b8d6:    bf ea db fe       	call -0x24a <apply_z : 10b690 >			  ## uECC.c:1922:5
  10b8da:    50 16             	r0 = r5			  ## uECC.c:1852:9
  10b8dc:    bf ea b1 fd       	call -0x49e <vli_isZero : 10b442 >			  ## uECC.c:1852:9
  10b8e0:    ca ff f0 bd 10 00 	r10 = 0x10bdf0 <curve_p : 10bdf0 >			  ## uECC.c:1852:9
  10b8e6:    b0 5f             	if (r0 != 0) goto 0xfe <EccPoint_mult+0x164 : 10b9e6 >			  ## uECC.c:1852:9
  10b8e8:    f8 e8 a8 50       	r5 = sp + 168
  10b8ec:    50 16             	r0 = r5			  ## uECC.c:1856:5
  10b8ee:    b1 16             	r1 = r11			  ## uECC.c:1856:5
  10b8f0:    b2 16             	r2 = r11			  ## uECC.c:1856:5
  10b8f2:    bf ea 30 fe       	call -0x3a0 <vli_modMult_fast : 10b556 >			  ## uECC.c:1856:5
  10b8f6:    f8 e8 90 00       	r0 = sp + 144			  ## uECC.c:1856:5
  10b8fa:    e1 16             	r1 = r14			  ## uECC.c:1857:5
  10b8fc:    52 16             	r2 = r5			  ## uECC.c:1857:5
  10b8fe:    bf ea 2a fe       	call -0x3ac <vli_modMult_fast : 10b556 >			  ## uECC.c:1857:5
  10b902:    50 16             	r0 = r5			  ## uECC.c:1858:5
  10b904:    51 16             	r1 = r5			  ## uECC.c:1858:5
  10b906:    52 16             	r2 = r5			  ## uECC.c:1858:5
  10b908:    bf ea 25 fe       	call -0x3b6 <vli_modMult_fast : 10b556 >			  ## uECC.c:1858:5
  10b90c:    ed 98             	r5 = sp + 120			  ## uECC.c:1858:5
  10b90e:    b0 16             	r0 = r11			  ## uECC.c:1859:5
  10b910:    b1 16             	r1 = r11			  ## uECC.c:1859:5
  10b912:    52 16             	r2 = r5			  ## uECC.c:1859:5
  10b914:    bf ea 1f fe       	call -0x3c2 <vli_modMult_fast : 10b556 >			  ## uECC.c:1859:5
  10b918:    50 16             	r0 = r5			  ## uECC.c:1860:5
  10b91a:    51 16             	r1 = r5			  ## uECC.c:1860:5
  10b91c:    52 16             	r2 = r5			  ## uECC.c:1860:5
  10b91e:    bf ea 1a fe       	call -0x3cc <vli_modMult_fast : 10b556 >			  ## uECC.c:1860:5
  10b922:    e0 16             	r0 = r14			  ## uECC.c:1862:5
  10b924:    e1 16             	r1 = r14			  ## uECC.c:1862:5
  10b926:    52 16             	r2 = r5			  ## uECC.c:1862:5
  10b928:    bf ea cd fe       	call -0x266 <vli_modAdd : 10b6c6 >			  ## uECC.c:1862:5
  10b92c:    50 16             	r0 = r5			  ## uECC.c:1863:5
  10b92e:    51 16             	r1 = r5			  ## uECC.c:1863:5
  10b930:    52 16             	r2 = r5			  ## uECC.c:1863:5
  10b932:    bf ea c8 fe       	call -0x270 <vli_modAdd : 10b6c6 >			  ## uECC.c:1863:5
  10b936:    50 16             	r0 = r5			  ## uECC.c:1864:5
  10b938:    e1 16             	r1 = r14			  ## uECC.c:1864:5
  10b93a:    52 16             	r2 = r5			  ## uECC.c:1864:5
  10b93c:    bf ea d6 fe       	call -0x254 <vli_modSub : 10b6ec >			  ## uECC.c:1864:5
  10b940:    e0 16             	r0 = r14			  ## uECC.c:1865:5
  10b942:    e1 16             	r1 = r14			  ## uECC.c:1865:5
  10b944:    52 16             	r2 = r5			  ## uECC.c:1865:5
  10b946:    bf ea 06 fe       	call -0x3f4 <vli_modMult_fast : 10b556 >			  ## uECC.c:1865:5
  10b94a:    50 16             	r0 = r5			  ## uECC.c:1867:5
  10b94c:    e1 16             	r1 = r14			  ## uECC.c:1867:5
  10b94e:    e2 16             	r2 = r14			  ## uECC.c:1867:5
  10b950:    bf ea b9 fe       	call -0x28e <vli_modAdd : 10b6c6 >			  ## uECC.c:1867:5
  10b954:    e0 16             	r0 = r14			  ## uECC.c:1868:5
  10b956:    e1 16             	r1 = r14			  ## uECC.c:1868:5
  10b958:    52 16             	r2 = r5			  ## uECC.c:1868:5
  10b95a:    bf ea b4 fe       	call -0x298 <vli_modAdd : 10b6c6 >			  ## uECC.c:1868:5
  10b95e:    50 ee e0 00       	r0 = b[r14+0x0] (u)			  ## uECC.c:1869:9
  10b962:    50 e8 04 02       	if ((r0 & 0x1) != 0) goto 0x8 <EccPoint_mult+0xEC : 10b96e >			  ## uECC.c:1869:9
  10b966:    e0 16             	r0 = r14			  ## uECC.c:1874:9
  10b968:    bf ea ce fe       	call -0x264 <vli_rshift1 : 10b708 >			  ## uECC.c:1874:9
  10b96c:    04 8d             	goto 0x1a <EccPoint_mult+0x106 : 10b988 >			  ## uECC.c:1874:9
  10b96e:    e0 16             	r0 = r14			  ## uECC.c:1870:31
  10b970:    e1 16             	r1 = r14			  ## uECC.c:1870:31
  10b972:    a2 16             	r2 = r10			  ## uECC.c:1870:31
  10b974:    bf ea 84 fd       	call -0x4f8 <vli_add : 10b480 >			  ## uECC.c:1870:31
  10b978:    05 16             	r5 = r0			  ## uECC.c:1870:31
  10b97a:    e0 16             	r0 = r14			  ## uECC.c:1871:9
  10b97c:    bf ea c4 fe       	call -0x278 <vli_rshift1 : 10b708 >			  ## uECC.c:1871:9
  10b980:    50 bf             	r0 = r5 << 0x1f			  ## uECC.c:1872:39
  10b982:    c9 88             	r1 = sp + 72			  ## uECC.c:1872:39
  10b984:    64 e8 2c 10       	[r1+0x2c] |= r0			  ## uECC.c:1872:28
  10b988:    ed 98             	r5 = sp + 120
  10b98a:    50 16             	r0 = r5			  ## uECC.c:1878:5
  10b98c:    e1 16             	r1 = r14			  ## uECC.c:1878:5
  10b98e:    e2 16             	r2 = r14			  ## uECC.c:1878:5
  10b990:    bf ea e1 fd       	call -0x43e <vli_modMult_fast : 10b556 >			  ## uECC.c:1878:5
  10b994:    f8 e8 90 70       	r7 = sp + 144			  ## uECC.c:1878:5
  10b998:    50 16             	r0 = r5			  ## uECC.c:1879:5
  10b99a:    51 16             	r1 = r5			  ## uECC.c:1879:5
  10b99c:    72 16             	r2 = r7			  ## uECC.c:1879:5
  10b99e:    bf ea a5 fe       	call -0x2b6 <vli_modSub : 10b6ec >			  ## uECC.c:1879:5
  10b9a2:    50 16             	r0 = r5			  ## uECC.c:1880:5
  10b9a4:    51 16             	r1 = r5			  ## uECC.c:1880:5
  10b9a6:    72 16             	r2 = r7			  ## uECC.c:1880:5
  10b9a8:    bf ea a0 fe       	call -0x2c0 <vli_modSub : 10b6ec >			  ## uECC.c:1880:5
  10b9ac:    70 16             	r0 = r7			  ## uECC.c:1881:5
  10b9ae:    71 16             	r1 = r7			  ## uECC.c:1881:5
  10b9b0:    52 16             	r2 = r5			  ## uECC.c:1881:5
  10b9b2:    bf ea 9b fe       	call -0x2ca <vli_modSub : 10b6ec >			  ## uECC.c:1881:5
  10b9b6:    e0 16             	r0 = r14			  ## uECC.c:1882:5
  10b9b8:    e1 16             	r1 = r14			  ## uECC.c:1882:5
  10b9ba:    72 16             	r2 = r7			  ## uECC.c:1882:5
  10b9bc:    bf ea cb fd       	call -0x46a <vli_modMult_fast : 10b556 >			  ## uECC.c:1882:5
  10b9c0:    f8 e8 a8 70       	r7 = sp + 168			  ## uECC.c:1882:5
  10b9c4:    70 16             	r0 = r7			  ## uECC.c:1883:5
  10b9c6:    e1 16             	r1 = r14			  ## uECC.c:1883:5
  10b9c8:    72 16             	r2 = r7			  ## uECC.c:1883:5
  10b9ca:    bf ea 8f fe       	call -0x2e2 <vli_modSub : 10b6ec >			  ## uECC.c:1883:5
  10b9ce:    e0 16             	r0 = r14			  ## uECC.c:1885:5
  10b9d0:    51 16             	r1 = r5			  ## uECC.c:1885:5
  10b9d2:    bf ea 6d fd       	call -0x526 <vli_set : 10b4b0 >			  ## uECC.c:1885:5
  10b9d6:    50 16             	r0 = r5			  ## uECC.c:1886:5
  10b9d8:    b1 16             	r1 = r11			  ## uECC.c:1886:5
  10b9da:    bf ea 69 fd       	call -0x52e <vli_set : 10b4b0 >			  ## uECC.c:1886:5
  10b9de:    b0 16             	r0 = r11			  ## uECC.c:1887:5
  10b9e0:    71 16             	r1 = r7			  ## uECC.c:1887:5
  10b9e2:    bf ea 65 fd       	call -0x536 <vli_set : 10b4b0 >			  ## uECC.c:1887:5
  10b9e6:    c8 88             	r0 = sp + 72
  10b9e8:    89 98             	r1 = sp + 24
  10b9ea:    ea 98             	r2 = sp + 120
  10b9ec:    bf ea 50 fe       	call -0x360 <apply_z : 10b690 >			  ## uECC.c:1924:5
  10b9f0:    6d 3f             	r5 = 0xbf
  10b9f2:    14 87             	goto 0x4e <EccPoint_mult+0x1C0 : 10ba42 >
  10b9f4:    61 e1 1f 50       	r1 = r5 & 0x1F			  ## uECC.c:530:72
  10b9f8:    40 21             	r0 = 0x1			  ## uECC.c:530:72
  10b9fa:    c8 e1 00 11       	r1 = r0 << r1			  ## uECC.c:530:64
  10b9fe:    da a5             	r2 = r5 >>> 0x5			  ## uECC.c:530:21
  10ba00:    d8 ec ca 22       	r2 = [r12+r2<<2]			  ## uECC.c:530:13
  10ba04:    43 21             	r3 = 0x1			  ## uECC.c:2019:24
  10ba06:    12 ea 00 01       	if ((r2 & r1) == 0) {			  ## uECC.c:2019:24
  10ba0a:    43 20             		r3 = 0x0
                               	}			  ## uECC.c:2019:24
  10ba0c:    e6 e1 18 30       	r6 = r3 * 0x18			  ## uECC.c:2019:19
  10ba10:    cb 88             	r3 = sp + 72			  ## uECC.c:2019:19
  10ba12:    b4 e0 30 b6       	r11 = r3 + r6			  ## uECC.c:2019:19
  10ba16:    8c 98             	r4 = sp + 24			  ## uECC.c:2019:19
  10ba18:    c7 1d             	r7 = r4 + r6			  ## uECC.c:2019:31
  10ba1a:    12 ea 80 01       	if ((r2 & r1) != 0) {			  ## uECC.c:2019:31
  10ba1e:    40 20             		r0 = 0x0
                               	}			  ## uECC.c:2018:14
  10ba20:    e0 e1 18 00       	r0 = r0 * 0x18			  ## uECC.c:2019:43
  10ba24:    36 1c             	r6 = r3 + r0			  ## uECC.c:2019:43
  10ba26:    04 18             	r4 += r0			  ## uECC.c:2019:51
  10ba28:    b0 16             	r0 = r11			  ## uECC.c:2019:9
  10ba2a:    71 16             	r1 = r7			  ## uECC.c:2019:9
  10ba2c:    62 16             	r2 = r6			  ## uECC.c:2019:9
  10ba2e:    43 16             	r3 = r4			  ## uECC.c:2019:9
  10ba30:    bf ea 77 fe       	call -0x312 <XYcZ_addC : 10b722 >			  ## uECC.c:2019:9
  10ba34:    60 16             	r0 = r6			  ## uECC.c:2020:9
  10ba36:    41 16             	r1 = r4			  ## uECC.c:2020:9
  10ba38:    b2 16             	r2 = r11			  ## uECC.c:2020:9
  10ba3a:    73 16             	r3 = r7			  ## uECC.c:2020:9
  10ba3c:    bf ea d4 fe       	call -0x258 <XYcZ_add : 10b7e8 >			  ## uECC.c:2020:9
  10ba40:    fd 3f             	r5 += -0x1			  ## uECC.c:2017:34
  10ba42:    05 fd d7 03       	ifs (r5 >= 0x1) goto -0x52 <EccPoint_mult+0x172 : 10b9f4 >
  10ba46:    d0 ec c0 00       	r0 = [r12+0x0]			  ## uECC.c:530:13
  10ba4a:    60 e1 01 00       	r0 = r0 & 0x1			  ## uECC.c:530:46
  10ba4e:    e1 e1 18 00       	r1 = r0 * 0x18			  ## uECC.c:2024:15
  10ba52:    cd 88             	r5 = sp + 72			  ## uECC.c:2024:15
  10ba54:    5f 1c             	r7 = r5 + r1			  ## uECC.c:2024:15
  10ba56:    8a 98             	r2 = sp + 24			  ## uECC.c:2024:15
  10ba58:    2c 1c             	r4 = r2 + r1			  ## uECC.c:2024:27
  10ba5a:    38 20             	r0 ^= 0x1			  ## uECC.c:2023:10
  10ba5c:    e0 e1 18 00       	r0 = r0 * 0x18			  ## uECC.c:2024:39
  10ba60:    b4 e0 50 b0       	r11 = r5 + r0			  ## uECC.c:2024:39
  10ba64:    b4 e0 20 c0       	r12 = r2 + r0			  ## uECC.c:2024:47
  10ba68:    70 16             	r0 = r7			  ## uECC.c:2024:5
  10ba6a:    41 16             	r1 = r4			  ## uECC.c:2024:5
  10ba6c:    b2 16             	r2 = r11			  ## uECC.c:2024:5
  10ba6e:    c3 16             	r3 = r12			  ## uECC.c:2024:5
  10ba70:    bf ea 57 fe       	call -0x352 <XYcZ_addC : 10b722 >			  ## uECC.c:2024:5
  10ba74:    8e 80             	r6 = sp + 0			  ## uECC.c:2024:5
  10ba76:    60 16             	r0 = r6			  ## uECC.c:2027:5
  10ba78:    e1 16             	r1 = r14			  ## uECC.c:2027:5
  10ba7a:    52 16             	r2 = r5			  ## uECC.c:2027:5
  10ba7c:    bf ea 36 fe       	call -0x394 <vli_modSub : 10b6ec >			  ## uECC.c:2027:5
  10ba80:    60 16             	r0 = r6			  ## uECC.c:2028:5
  10ba82:    61 16             	r1 = r6			  ## uECC.c:2028:5
  10ba84:    42 16             	r2 = r4			  ## uECC.c:2028:5
  10ba86:    bf ea 66 fd       	call -0x534 <vli_modMult_fast : 10b556 >			  ## uECC.c:2028:5
  10ba8a:    60 16             	r0 = r6			  ## uECC.c:2029:5
  10ba8c:    61 16             	r1 = r6			  ## uECC.c:2029:5
  10ba8e:    d2 16             	r2 = r13			  ## uECC.c:2029:5
  10ba90:    bf ea 61 fd       	call -0x53e <vli_modMult_fast : 10b556 >			  ## uECC.c:2029:5
  10ba94:    60 16             	r0 = r6			  ## uECC.c:1728:9
  10ba96:    bf ea d4 fc       	call -0x658 <vli_isZero : 10b442 >			  ## uECC.c:1728:9
  10ba9a:    00 44             	if (r0 == 0) goto 0x8 <EccPoint_mult+0x222 : 10baa4 >			  ## uECC.c:1728:9
  10ba9c:    88 80             	r0 = sp + 0
  10ba9e:    bf ea 11 fd       	call -0x5de <vli_clear : 10b4c4 >			  ## uECC.c:1729:9
  10baa2:    54 85             	goto 0x14a <EccPoint_mult+0x36C : 10bbee >			  ## uECC.c:1729:9
  10baa4:    f8 e8 a8 00       	r0 = sp + 168
  10baa8:    89 80             	r1 = sp + 0
  10baaa:    bf ea 01 fd       	call -0x5fe <vli_set : 10b4b0 >			  ## uECC.c:1733:5
  10baae:    f8 e8 90 00       	r0 = sp + 144			  ## uECC.c:1733:5
  10bab2:    a1 16             	r1 = r10			  ## uECC.c:1734:5
  10bab4:    bf ea fc fc       	call -0x608 <vli_set : 10b4b0 >			  ## uECC.c:1734:5
  10bab8:    f8 e8 d8 50       	r5 = sp + 216			  ## uECC.c:1734:5
  10babc:    50 16             	r0 = r5			  ## uECC.c:1735:5
  10babe:    bf ea 01 fd       	call -0x5fe <vli_clear : 10b4c4 >			  ## uECC.c:1735:5
  10bac2:    40 21             	r0 = 0x1			  ## uECC.c:1736:10
  10bac4:    f8 e8 c0 d0       	r13 = sp + 192			  ## uECC.c:1736:10
  10bac8:    d0 d6             	r0 = r13  #			  ## uECC.c:1737:5
  10baca:    a0 36             		 [sp+216] = r0			  ## uECC.c:1736:10
  10bacc:    bf ea fa fc       	call -0x60c <vli_clear : 10b4c4 >			  ## uECC.c:1737:5
  10bad0:    44 81             	goto 0x102 <EccPoint_mult+0x352 : 10bbd4 >			  ## uECC.c:1737:5
  10bad2:    dc e9 a8 10       	r1 = b[sp+168] (u)			  ## uECC.c:1740:13
  10bad6:    51 e8 05 02       	if ((r1 & 0x1) != 0) goto 0xa <EccPoint_mult+0x262 : 10bae4 >			  ## uECC.c:1740:13
  10bada:    f8 e8 a8 00       	r0 = sp + 168
  10bade:    bf ea 13 fe       	call -0x3da <vli_rshift1 : 10b708 >			  ## uECC.c:1741:13
  10bae2:    14 8a             	goto 0x54 <EccPoint_mult+0x2B6 : 10bb38 >			  ## uECC.c:1741:13
  10bae4:    dc e9 90 10       	r1 = b[sp+144] (u)			  ## uECC.c:1749:20
  10bae8:    51 e8 05 02       	if ((r1 & 0x1) != 0) goto 0xa <EccPoint_mult+0x274 : 10baf6 >			  ## uECC.c:1749:20
  10baec:    f8 e8 90 00       	r0 = sp + 144
  10baf0:    bf ea 0a fe       	call -0x3ec <vli_rshift1 : 10b708 >			  ## uECC.c:1750:13
  10baf4:    24 98             	goto 0xb0 <EccPoint_mult+0x324 : 10bba6 >			  ## uECC.c:1750:13
  10baf6:    80 fd 37 02       	ifs (r0 < 0x1) goto 0x6e <EccPoint_mult+0x2E6 : 10bb68 >			  ## uECC.c:1758:20
  10bafa:    f8 e8 a8 10       	r1 = sp + 168
  10bafe:    f8 e8 90 20       	r2 = sp + 144
  10bb02:    10 16             	r0 = r1			  ## uECC.c:1759:13
  10bb04:    bf ea 0f fd       	call -0x5e2 <vli_sub : 10b526 >			  ## uECC.c:1759:13
  10bb08:    10 16             	r0 = r1			  ## uECC.c:1760:13
  10bb0a:    bf ea fd fd       	call -0x406 <vli_rshift1 : 10b708 >			  ## uECC.c:1760:13
  10bb0e:    f8 e8 d8 00       	r0 = sp + 216			  ## uECC.c:1760:13
  10bb12:    f8 e8 c0 10       	r1 = sp + 192			  ## uECC.c:1760:13
  10bb16:    bf ea f3 fc       	call -0x61a <vli_cmp : 10b500 >			  ## uECC.c:1761:17
  10bb1a:    70 fe 06 fe       	ifs (r0 > -0x1) goto 0xc <EccPoint_mult+0x2A8 : 10bb2a >			  ## uECC.c:1761:17
  10bb1e:    f8 e8 d8 00       	r0 = sp + 216
  10bb22:    01 16             	r1 = r0			  ## uECC.c:1762:17
  10bb24:    a2 16             	r2 = r10			  ## uECC.c:1762:17
  10bb26:    bf ea ab fc       	call -0x6aa <vli_add : 10b480 >			  ## uECC.c:1762:17
  10bb2a:    f8 e8 d8 00       	r0 = sp + 216
  10bb2e:    f8 e8 c0 20       	r2 = sp + 192
  10bb32:    01 16             	r1 = r0			  ## uECC.c:1764:13
  10bb34:    bf ea f7 fc       	call -0x612 <vli_sub : 10b526 >			  ## uECC.c:1764:13
  10bb38:    dc e9 d8 00       	r0 = b[sp+216] (u)
  10bb3c:    50 e8 05 02       	if ((r0 & 0x1) != 0) goto 0xa <EccPoint_mult+0x2C8 : 10bb4a >
  10bb40:    f8 e8 d8 00       	r0 = sp + 216
  10bb44:    bf ea e0 fd       	call -0x440 <vli_rshift1 : 10b708 >
  10bb48:    24 85             	goto 0x8a <EccPoint_mult+0x352 : 10bbd4 >
  10bb4a:    f8 e8 d8 10       	r1 = sp + 216
  10bb4e:    10 16             	r0 = r1
  10bb50:    a2 16             	r2 = r10
  10bb52:    bf ea 95 fc       	call -0x6d6 <vli_add : 10b480 >
  10bb56:    06 16             	r6 = r0
  10bb58:    10 16             	r0 = r1
  10bb5a:    bf ea d5 fd       	call -0x456 <vli_rshift1 : 10b708 >
  10bb5e:    b6 e8 00 00       	if (r6 != 0x0) {
  10bb62:    05 ef 00 54       		[r5+0x14] |= 0x80000000
                               	}
  10bb66:    14 96             	goto 0x6c <EccPoint_mult+0x352 : 10bbd4 >
  10bb68:    f8 e8 90 10       	r1 = sp + 144
  10bb6c:    f8 e8 a8 20       	r2 = sp + 168
  10bb70:    10 16             	r0 = r1			  ## uECC.c:1773:13
  10bb72:    bf ea d8 fc       	call -0x650 <vli_sub : 10b526 >			  ## uECC.c:1773:13
  10bb76:    10 16             	r0 = r1			  ## uECC.c:1774:13
  10bb78:    bf ea c6 fd       	call -0x474 <vli_rshift1 : 10b708 >			  ## uECC.c:1774:13
  10bb7c:    f8 e8 c0 00       	r0 = sp + 192			  ## uECC.c:1774:13
  10bb80:    f8 e8 d8 10       	r1 = sp + 216			  ## uECC.c:1774:13
  10bb84:    bf ea bc fc       	call -0x688 <vli_cmp : 10b500 >			  ## uECC.c:1775:17
  10bb88:    70 fe 06 fe       	ifs (r0 > -0x1) goto 0xc <EccPoint_mult+0x316 : 10bb98 >			  ## uECC.c:1775:17
  10bb8c:    f8 e8 c0 00       	r0 = sp + 192
  10bb90:    01 16             	r1 = r0			  ## uECC.c:1776:17
  10bb92:    a2 16             	r2 = r10			  ## uECC.c:1776:17
  10bb94:    bf ea 74 fc       	call -0x718 <vli_add : 10b480 >			  ## uECC.c:1776:17
  10bb98:    f8 e8 c0 00       	r0 = sp + 192
  10bb9c:    f8 e8 d8 20       	r2 = sp + 216
  10bba0:    01 16             	r1 = r0			  ## uECC.c:1778:13
  10bba2:    bf ea c0 fc       	call -0x680 <vli_sub : 10b526 >			  ## uECC.c:1778:13
  10bba6:    dc e9 c0 00       	r0 = b[sp+192] (u)
  10bbaa:    50 e8 05 02       	if ((r0 & 0x1) != 0) goto 0xa <EccPoint_mult+0x336 : 10bbb8 >
  10bbae:    f8 e8 c0 00       	r0 = sp + 192
  10bbb2:    bf ea a9 fd       	call -0x4ae <vli_rshift1 : 10b708 >
  10bbb6:    04 8e             	goto 0x1c <EccPoint_mult+0x352 : 10bbd4 >
  10bbb8:    f8 e8 c0 10       	r1 = sp + 192
  10bbbc:    10 16             	r0 = r1
  10bbbe:    a2 16             	r2 = r10
  10bbc0:    bf ea 5e fc       	call -0x744 <vli_add : 10b480 >
  10bbc4:    06 16             	r6 = r0
  10bbc6:    10 16             	r0 = r1
  10bbc8:    bf ea 9e fd       	call -0x4c4 <vli_rshift1 : 10b708 >
  10bbcc:    b6 e8 00 00       	if (r6 != 0x0) {
  10bbd0:    05 ef 00 d4       		[r13+0x14] |= 0x80000000
                               	}
  10bbd4:    f8 e8 a8 00       	r0 = sp + 168
  10bbd8:    f8 e8 90 10       	r1 = sp + 144
  10bbdc:    bf ea 90 fc       	call -0x6e0 <vli_cmp : 10b500 >			  ## uECC.c:1738:25
  10bbe0:    80 f8 77 01       	if (r0 != 0x0) goto -0x112 <EccPoint_mult+0x250 : 10bad2 >
  10bbe4:    88 80             	r0 = sp + 0
  10bbe6:    f8 e8 d8 10       	r1 = sp + 216
  10bbea:    bf ea 61 fc       	call -0x73e <vli_set : 10b4b0 >			  ## uECC.c:1788:5
  10bbee:    8d 80             	r5 = sp + 0
  10bbf0:    50 16             	r0 = r5			  ## uECC.c:2031:5
  10bbf2:    51 16             	r1 = r5			  ## uECC.c:2031:5
  10bbf4:    92 16             	r2 = r9			  ## uECC.c:2031:5
  10bbf6:    bf ea ae fc       	call -0x6a4 <vli_modMult_fast : 10b556 >			  ## uECC.c:2031:5
  10bbfa:    50 16             	r0 = r5			  ## uECC.c:2032:5
  10bbfc:    51 16             	r1 = r5			  ## uECC.c:2032:5
  10bbfe:    72 16             	r2 = r7			  ## uECC.c:2032:5
  10bc00:    bf ea a9 fc       	call -0x6ae <vli_modMult_fast : 10b556 >			  ## uECC.c:2032:5
  10bc04:    b0 16             	r0 = r11			  ## uECC.c:2035:5
  10bc06:    c1 16             	r1 = r12			  ## uECC.c:2035:5
  10bc08:    72 16             	r2 = r7			  ## uECC.c:2035:5
  10bc0a:    43 16             	r3 = r4			  ## uECC.c:2035:5
  10bc0c:    bf ea ec fd       	call -0x428 <XYcZ_add : 10b7e8 >			  ## uECC.c:2035:5
  10bc10:    cc 88             	r4 = sp + 72			  ## uECC.c:2035:5
  10bc12:    8e 98             	r6 = sp + 24			  ## uECC.c:2035:5
  10bc14:    40 16             	r0 = r4			  ## uECC.c:2036:5
  10bc16:    61 16             	r1 = r6			  ## uECC.c:2036:5
  10bc18:    52 16             	r2 = r5			  ## uECC.c:2036:5
  10bc1a:    bf ea 39 fd       	call -0x58e <apply_z : 10b690 >			  ## uECC.c:2036:5
  10bc1e:    80 16             	r0 = r8			  ## uECC.c:2038:5
  10bc20:    41 16             	r1 = r4			  ## uECC.c:2038:5
  10bc22:    bf ea 45 fc       	call -0x776 <vli_set : 10b4b0 >			  ## uECC.c:2038:5
  10bc26:    c0 38             	r0 += 0x18			  ## uECC.c:2039:13
  10bc28:    61 16             	r1 = r6			  ## uECC.c:2039:5
  10bc2a:    bf ea 41 fc       	call -0x77e <vli_set : 10b4b0 >			  ## uECC.c:2039:5
  10bc2e:    22 9c             	sp += 0xf0			  ## uECC.c:2039:5
  10bc30:    5e 04             	{pc, r14-r4} = [sp++]			  ## uECC.c:2040:1


vli_nativeToBytes:
  10bc32:    74 04             	[--sp] = {rets, r4}			  ## uECC.c:2235:0
  10bc34:    42 20             	r2 = 0x0			  ## uECC.c:2235:0
  10bc36:    04 8c             	goto 0x18 <vli_nativeToBytes+0x1E : 10bc50 >			  ## uECC.c:2235:0
  10bc38:    84 dc             	r4 = r0 + r2  #			  ## uECC.c:2239:20
  10bc3a:    1b 43             		 r3 = b[r1+0x3] (u)			  ## uECC.c:2239:20
  10bc3c:    5a ee 44 31       	b[++r4=0x14] = r3			  ## uECC.c:2239:18
  10bc40:    1b 61             	r3 = h[r1+0x2] (u)			  ## uECC.c:2240:20
  10bc42:    cb 41             	b[r4+0x1] = r3			  ## uECC.c:2240:18
  10bc44:    13 60             	r3 = [r1+0x0] 			  ## uECC.c:2241:20
  10bc46:    b3 a8             	r3 = r3 >> 0x8			  ## uECC.c:2241:30
  10bc48:    cb 42             	b[r4+0x2] = r3			  ## uECC.c:2241:18
  10bc4a:    13 05             	r3 = [r1++=0x4] 			  ## uECC.c:2242:20
  10bc4c:    cb 43             	b[r4+0x3] = r3			  ## uECC.c:2242:18
  10bc4e:    fa 3c             	r2 += -0x4			  ## uECC.c:2237:5
  10bc50:    f2 f8 f2 d1       	if (r2 != -0x18) goto -0x1c <vli_nativeToBytes+0x6 : 10bc38 >
  10bc54:    54 04             	{pc, r4} = [sp++]			  ## uECC.c:2244:1


EccPoint_isZero:
  10bc56:    10 04             	[--sp] = rets			  ## uECC.c:1796:0
  10bc58:    03 16             	r3 = r0			  ## uECC.c:1796:0
  10bc5a:    bf ea f2 fb       	call -0x81c <vli_isZero : 10b442 >			  ## uECC.c:1797:13
  10bc5e:    30 e8 00 40       	if (r0 == 0x0) {			  ## uECC.c:1797:13
  10bc62:    40 20             		r0 = 0x0			  ## uECC.c:1797:13
  10bc64:    00 04             		pc = [sp++]
                               	}			  ## uECC.c:1797:5
  10bc66:    38 98             	r0 = r3 + 0x18			  ## uECC.c:1797:48
  10bc68:    bf ea eb fb       	call -0x82a <vli_isZero : 10b442 >			  ## uECC.c:1797:37
  10bc6c:    01 16             	r1 = r0			  ## uECC.c:1797:37
  10bc6e:    40 21             	r0 = 0x1			  ## uECC.c:1797:34
  10bc70:    31 e8 00 00       	if (r1 == 0x0) {			  ## uECC.c:1797:34
  10bc74:    10 16             		r0 = r1
                               	}			  ## uECC.c:1797:34
  10bc76:    00 04             	pc = [sp++]			  ## uECC.c:1797:5


uECC_shared_secret:
  10bc78:    78 04             	[--sp] = {rets, r8-r4}			  ## uECC.c:2308:0
  10bc7a:    c2 94             	sp += -0xb0			  ## uECC.c:2308:0
  10bc7c:    06 16             	r6 = r0			  ## uECC.c:2308:0
  10bc7e:    a8 98             	r0 = sp + 56			  ## uECC.c:2308:0
  10bc80:    28 d6             	r8 = r2  #			  ## uECC.c:2308:0
  10bc82:    80 26             		 [sp+24] = r0			  ## uECC.c:2313:26
  10bc84:    a8 80             	r0 = sp + 32			  ## uECC.c:2313:26
  10bc86:    13 d6             	r3 = r1  #
  10bc88:    80 27             		 [sp+28] = r0			  ## uECC.c:2313:26
  10bc8a:    44 20             	r4 = 0x0
  10bc8c:    c7 ff 00 3b 1e 00 	r7 = 0x1e3b00 <__stub_VecMinScalar_float_c_f_c+0xD3B04 : 1e3b00 >
  10bc92:    04 8f             	goto 0x1e <uECC_shared_secret+0x3A : 10bcb2 >
  10bc94:    40 20             	r0 = 0x0
  10bc96:    04 85             	goto 0xa <uECC_shared_secret+0x2A : 10bca2 >
  10bc98:    71 60             	r1 = [r7+0x0] 			  ## uECC.c:477:28
  10bc9a:    8a 80             	r2 = sp + 0			  ## uECC.c:477:28
  10bc9c:    d8 ee 21 10       	b[r2+r0] = r1			  ## uECC.c:477:17
  10bca0:    c0 21             	r0 += 0x1			  ## uECC.c:476:36
  10bca2:    80 f8 f9 31       	if (r0 != 0x18) goto -0xe <uECC_shared_secret+0x20 : 10bc98 >
  10bca6:    8d 80             	r5 = sp + 0
  10bca8:    50 16             	r0 = r5			  ## uECC.c:2323:67
  10bcaa:    bf ea ca fb       	call -0x86c <vli_isZero : 10b442 >			  ## uECC.c:2323:67
  10bcae:    00 44             	if (r0 == 0) goto 0x8 <uECC_shared_secret+0x40 : 10bcb8 >			  ## uECC.c:2323:67
  10bcb0:    c4 21             	r4 += 0x1			  ## uECC.c:2322:40
  10bcb2:    84 fc ef 7f       	if (r4 <= 0x3f) goto -0x22 <uECC_shared_secret+0x1C : 10bc94 >
  10bcb6:    45 20             	r5 = 0x0
  10bcb8:    ac 98             	r4 = sp + 56
  10bcba:    40 16             	r0 = r4			  ## uECC.c:2329:5
  10bcbc:    31 16             	r1 = r3			  ## uECC.c:2329:5
  10bcbe:    bf ea cb fb       	call -0x86a <vli_bytesToNative : 10b458 >			  ## uECC.c:2329:5
  10bcc2:    f8 e8 80 70       	r7 = sp + 128			  ## uECC.c:2329:5
  10bcc6:    70 16             	r0 = r7			  ## uECC.c:2330:5
  10bcc8:    61 16             	r1 = r6			  ## uECC.c:2330:5
  10bcca:    bf ea c5 fb       	call -0x876 <vli_bytesToNative : 10b458 >			  ## uECC.c:2330:5
  10bcce:    78 98             	r0 = r7 + 0x18			  ## uECC.c:2331:23
  10bcd0:    69 98             	r1 = r6 + 0x18			  ## uECC.c:2331:44
  10bcd2:    bf ea c1 fb       	call -0x87e <vli_bytesToNative : 10b458 >			  ## uECC.c:2331:5
  10bcd6:    c2 ff a8 bd 10 00 	r2 = 0x10bda8 <curve_n : 10bda8 >			  ## uECC.c:2339:13
  10bcdc:    40 16             	r0 = r4			  ## uECC.c:2339:13
  10bcde:    41 16             	r1 = r4			  ## uECC.c:2339:13
  10bce0:    bf ea ce fb       	call -0x864 <vli_add : 10b480 >			  ## uECC.c:2339:13
  10bce4:    06 16             	r6 = r0			  ## uECC.c:2339:13
  10bce6:    a8 80             	r0 = sp + 32
  10bce8:    bf ea ca fb       	call -0x86c <vli_add : 10b480 >			  ## uECC.c:2340:5
  10bcec:    44 21             	r4 = 0x1			  ## uECC.c:2340:5
  10bcee:    40 21             	r0 = 0x1			  ## uECC.c:2341:41
  10bcf0:    b6 e8 00 00       	if (r6 != 0x0) {			  ## uECC.c:2341:41
  10bcf4:    40 20             		r0 = 0x0
                               	}			  ## uECC.c:2341:41
  10bcf6:    89 98             	r1 = sp + 24			  ## uECC.c:2341:41
  10bcf8:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## uECC.c:2341:38
  10bcfc:    ce 90             	r6 = sp + 80			  ## uECC.c:2341:38
  10bcfe:    60 15             	r1_r0 = r7_r6			  ## uECC.c:2341:5
  10bd00:    53 16             	r3 = r5			  ## uECC.c:2341:5
  10bd02:    bf ea be fd       	call -0x484 <EccPoint_mult : 10b882 >			  ## uECC.c:2341:5
  10bd06:    80 16             	r0 = r8			  ## uECC.c:2344:5
  10bd08:    61 16             	r1 = r6			  ## uECC.c:2344:5
  10bd0a:    41 93             	call -0xda <vli_nativeToBytes : 10bc32 >			  ## uECC.c:2344:5
  10bd0c:    60 16             	r0 = r6			  ## uECC.c:2345:13
  10bd0e:    51 83             	call -0xba <EccPoint_isZero : 10bc56 >			  ## uECC.c:2345:13
  10bd10:    b0 e8 00 00       	if (r0 != 0x0) {			  ## uECC.c:2345:13
  10bd14:    44 20             		r4 = 0x0
                               	}			  ## uECC.c:2345:12
  10bd16:    40 16             	r0 = r4			  ## uECC.c:2345:5
  10bd18:    22 8c             	sp += 0xb0			  ## uECC.c:2345:5
  10bd1a:    58 04             	{pc, r8-r4} = [sp++]			  ## uECC.c:2345:5


uECC_compute_public_key:
  10bd1c:    77 04             	[--sp] = {rets, r7-r4}			  ## uECC.c:2417:0
  10bd1e:    e2 80             	sp += -0x80			  ## uECC.c:2417:0
  10bd20:    14 16             	r4 = r1			  ## uECC.c:2417:0
  10bd22:    01 16             	r1 = r0			  ## uECC.c:2417:0
  10bd24:    ad 90             	r5 = sp + 48			  ## uECC.c:2417:0
  10bd26:    50 16             	r0 = r5			  ## uECC.c:2421:5
  10bd28:    bf ea 96 fb       	call -0x8d4 <vli_bytesToNative : 10b458 >			  ## uECC.c:2421:5
  10bd2c:    e8 88             	r0 = sp + 104			  ## uECC.c:2421:5
  10bd2e:    80 32             	[sp+72] = r0			  ## uECC.c:2046:26
  10bd30:    c8 90             	r0 = sp + 80			  ## uECC.c:2046:26
  10bd32:    50 d6             	r0 = r5  #			  ## uECC.c:2050:9
  10bd34:    80 33             		 [sp+76] = r0			  ## uECC.c:2046:26
  10bd36:    bf ea 84 fb       	call -0x8f8 <vli_isZero : 10b442 >			  ## uECC.c:2050:9
  10bd3a:    90 52             	if (r0 != 0) goto 0x64 <uECC_compute_public_key+0x84 : 10bda0 >
  10bd3c:    c5 ff a8 bd 10 00 	r5 = 0x10bda8 <curve_n : 10bda8 >
  10bd42:    a9 90             	r1 = sp + 48
  10bd44:    50 16             	r0 = r5			  ## uECC.c:2061:9
  10bd46:    bf ea db fb       	call -0x84a <vli_cmp : 10b500 >			  ## uECC.c:2061:9
  10bd4a:    80 f8 29 02       	if (r0 != 0x1) goto 0x52 <uECC_compute_public_key+0x84 : 10bda0 >			  ## uECC.c:2061:9
  10bd4e:    ee 88             	r6 = sp + 104
  10bd50:    a9 90             	r1 = sp + 48
  10bd52:    60 16             	r0 = r6			  ## uECC.c:2067:13
  10bd54:    52 16             	r2 = r5			  ## uECC.c:2067:13
  10bd56:    bf ea 93 fb       	call -0x8da <vli_add : 10b480 >			  ## uECC.c:2067:13
  10bd5a:    07 16             	r7 = r0			  ## uECC.c:2067:13
  10bd5c:    c8 90             	r0 = sp + 80
  10bd5e:    61 16             	r1 = r6			  ## uECC.c:2068:5
  10bd60:    bf ea 8e fb       	call -0x8e4 <vli_add : 10b480 >			  ## uECC.c:2068:5
  10bd64:    45 20             	r5 = 0x0			  ## uECC.c:2068:5
  10bd66:    40 21             	r0 = 0x1			  ## uECC.c:2069:40
  10bd68:    b7 e8 00 00       	if (r7 != 0x0) {			  ## uECC.c:2069:40
  10bd6c:    40 20             		r0 = 0x0
                               	}			  ## uECC.c:2069:40
  10bd6e:    c9 88             	r1 = sp + 72			  ## uECC.c:2069:40
  10bd70:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## uECC.c:2069:37
  10bd74:    8e 80             	r6 = sp + 0			  ## uECC.c:2069:37
  10bd76:    c1 ff c0 bd 10 00 	r1 = 0x10bdc0 <curve_G : 10bdc0 >			  ## uECC.c:2069:5
  10bd7c:    43 20             	r3 = 0x0			  ## uECC.c:2069:5
  10bd7e:    60 16             	r0 = r6			  ## uECC.c:2069:5
  10bd80:    bf ea 7f fd       	call -0x502 <EccPoint_mult : 10b882 >			  ## uECC.c:2069:5
  10bd84:    60 16             	r0 = r6			  ## uECC.c:2072:9
  10bd86:    bf ea 66 ff       	call -0x134 <EccPoint_isZero : 10bc56 >			  ## uECC.c:2072:9
  10bd8a:    80 4b             	if (r0 != 0) goto 0x16 <uECC_compute_public_key+0x86 : 10bda2 >			  ## uECC.c:2072:9
  10bd8c:    8d 80             	r5 = sp + 0
  10bd8e:    40 15             	r1_r0 = r5_r4			  ## uECC.c:2427:5
  10bd90:    bf ea 4f ff       	call -0x162 <vli_nativeToBytes : 10bc32 >			  ## uECC.c:2427:5
  10bd94:    48 98             	r0 = r4 + 0x18			  ## uECC.c:2428:34
  10bd96:    59 98             	r1 = r5 + 0x18			  ## uECC.c:2428:48
  10bd98:    bf ea 4b ff       	call -0x16a <vli_nativeToBytes : 10bc32 >			  ## uECC.c:2428:5
  10bd9c:    45 21             	r5 = 0x1			  ## uECC.c:2428:5
  10bd9e:    04 81             	goto 0x2 <uECC_compute_public_key+0x86 : 10bda2 >			  ## uECC.c:2428:5
  10bda0:    45 20             	r5 = 0x0
  10bda2:    50 16             	r0 = r5			  ## uECC.c:2430:1
  10bda4:    22 80             	sp += 0x80			  ## uECC.c:2430:1
  10bda6:    57 04             	{pc, r7-r4} = [sp++]			  ## uECC.c:2430:1


curve_n:
  10bda8:	 31 28 d2 b4 b1 c9 6b 14         1(....k.
  10bdb0:	 36 f8 de 99 ff ff ff ff         6.......
  10bdb8:	 ff ff ff ff ff ff ff ff         ........


curve_G:
  10bdc0:	 12 10 ff 82 fd 0a ff f4         ........
  10bdc8:	 00 88 a1 43 eb 20 bf 7c         ...C. .|
  10bdd0:	 f6 90 30 b0 0e a8 8d 18         ..0.....
  10bdd8:	 11 48 79 1e a1 77 f9 73         .Hy..w.s
  10bde0:	 d5 cd 24 6b ed 11 10 63         ..$k...c
  10bde8:	 78 da c8 ff 95 2b 19 07         x....+..


curve_p:
  10bdf0:	 ff ff ff ff ff ff ff ff         ........
  10bdf8:	 fe ff ff ff ff ff ff ff         ........
  10be00:	 ff ff ff ff ff ff ff ff         ........


find_max_exp_index:
  10be08:    88 17             	r0 = r0.l (s)			  ## bigint.c:1397:0
  10be0a:    f9 3c             	r1 += -0x4			  ## bigint.c:1400:17
  10be0c:    d8 ec 1a 20       	r2 = [r1+r0<<2]			  ## bigint.c:1400:17
  10be10:    60 e0 00 34       	r3 = 0x80000000
  10be14:    41 20             	r1 = 0x0
  10be16:    23 fb 06 00       	if ((r3 & r2) != 0) goto 0xc <find_max_exp_index+0x1E : 10be26 >			  ## bigint.c:1405:13
  10be1a:    c1 21             	r1 += 0x1			  ## bigint.c:1410:18
  10be1c:    b3 a1             	r3 = r3 >> 0x1			  ## bigint.c:1409:15
  10be1e:    81 f8 fa 41       	if (r1 != 0x20) goto -0xc <find_max_exp_index+0xE : 10be16 >
  10be22:    10 3f             	r0 = -0x1
  10be24:    80 00             	rts			  ## bigint.c:1413:1
  10be26:    00 a5             	r0 = r0 << 0x5			  ## bigint.c:1406:42
  10be28:    f8 3f             	r0 += -0x1			  ## bigint.c:1406:13
  10be2a:    08 1e             	r0 = r0 - r1			  ## bigint.c:1406:13
  10be2c:    80 00             	rts			  ## bigint.c:1413:1


trim:
  10be2e:    02 63             	r2 = [r0+0xc] 			  ## bigint.c:1458:0
  10be30:    09 62             	r1 = h[r0+0x4] (u)			  ## bigint.c:1458:0
  10be32:    fa 3c             	r2 += -0x4			  ## bigint.c:1458:0
  10be34:    04 85             	goto 0xa <trim+0x12 : 10be40 >			  ## bigint.c:1458:0
  10be36:    d8 ec 2a 33       	r3 = [r2+r3<<2]			  ## bigint.c:1461:13
  10be3a:    83 45             	if (r3 != 0) goto 0xa <trim+0x18 : 10be46 >			  ## bigint.c:1461:13
  10be3c:    f9 3f             	r1 += -0x1			  ## bigint.c:1462:17
  10be3e:    89 62             	h[r0+0x4] = r1			  ## bigint.c:1462:17
  10be40:    9b 17             	r3 = r1.l (s)			  ## bigint.c:1461:23
  10be42:    03 fd f8 05       	ifs (r3 >= 0x2) goto -0x10 <trim+0x8 : 10be36 >			  ## bigint.c:1461:23
  10be46:    80 00             	rts			  ## bigint.c:1465:5


more_comps:
  10be48:    75 04             	[--sp] = {rets, r5, r4}			  ## bigint.c:1336:0
  10be4a:    04 15             	r5_r4 = r1_r0			  ## bigint.c:1336:0
  10be4c:    54 ed 44 20       	r2 = h[r4+0x4] (s)			  ## bigint.c:1342:13
  10be50:    05 ed 08 20       	ifs (r2 >= r5) goto 0x10 <more_comps+0x1C : 10be64 >
  10be54:    40 63             	r0 = [r4+0xc] 			  ## bigint.c:1343:21
  10be56:    21 a2             	r1 = r2 << 0x2			  ## bigint.c:1343:17
  10be58:    10 18             	r0 += r1			  ## bigint.c:1343:17
  10be5a:    d1 1e             	r1 = r5 - r2			  ## bigint.c:1343:44
  10be5c:    12 a2             	r2 = r1 << 0x2			  ## bigint.c:1343:55
  10be5e:    41 20             	r1 = 0x0			  ## bigint.c:1343:9
  10be60:    bf ea e3 c5       	call -0x743a <memset : 104a2a >			  ## bigint.c:1343:9
  10be64:    cd 62             	h[r4+0x4] = r5			  ## bigint.c:1346:14
  10be66:    55 04             	{pc, r5, r4} = [sp++]			  ## bigint.c:1347:1


bi_lshift:
  10be68:    79 04             	[--sp] = {rets, r9-r4}			  ## bigint.c:205:0
  10be6a:    09 16             	r9 = r0			  ## bigint.c:205:0
  10be6c:    81 fd 4d 02       	ifs (r1 < 0x1) goto 0x9a <bi_lshift+0xA2 : 10bf0a >			  ## bigint.c:205:0
  10be70:    9b d9             	r3 = ~r1  #			  ## bigint.c:209:9
  10be72:    02 63             		 r2 = [r0+0xc] 			  ## bigint.c:207:19
  10be74:    54 ed 04 00       	r0 = h[r0+0x4] (s)			  ## bigint.c:207:25
  10be78:    fa 3c             	r2 += -0x4			  ## bigint.c:207:16
  10be7a:    d8 ec 2a 20       	r2 = [r2+r0<<2]			  ## bigint.c:207:16
  10be7e:    b3 ee df 0f       	ifs (r3 <= -0x21) {
  10be82:    43 e0 df ff       		r3 = -0x21
                               	} <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFE2 : ffffffffffffffde >			  ## bigint.c:209:9
  10be86:    13 18             	r3 += r1			  ## bigint.c:209:9
  10be88:    cb 20             	r3 += 0x20			  ## bigint.c:209:9
  10be8a:    c0 e1 35 88       	r8 = r3 >> 0x5			  ## bigint.c:209:9
  10be8e:    c0 e1 85 30       	r3 = r8 << 0x5			  ## bigint.c:209:9
  10be92:    9e 1e             	r6 = r1 - r3			  ## bigint.c:209:9
  10be94:    41 20             	r1 = 0x0			  ## bigint.c:209:9
  10be96:    60 e0 00 34       	r3 = 0x80000000			  ## bigint.c:209:9
  10be9a:    04 84             	goto 0x8 <bi_lshift+0x3C : 10bea4 >			  ## bigint.c:209:9
  10be9c:    23 fb 05 00       	if ((r3 & r2) != 0) goto 0xa <bi_lshift+0x42 : 10beaa >
  10bea0:    c1 21             	r1 += 0x1			  ## bigint.c:220:29
  10bea2:    b3 a1             	r3 = r3 >> 0x1			  ## bigint.c:226:14
  10bea4:    86 ed fa 11       	ifs (r1 < r6) goto -0xc <bi_lshift+0x34 : 10be9c >
  10bea8:    04 85             	goto 0xa <bi_lshift+0x4C : 10beb4 >
  10beaa:    09 81             	r1 = r0 + 0x1			  ## bigint.c:223:35
  10beac:    90 16             	r0 = r9			  ## bigint.c:223:13
  10beae:    61 8c             	call -0x68 <more_comps : 10be48 >			  ## bigint.c:223:13
  10beb0:    50 ed 94 00       	r0 = h[r9+0x4] (u)
  10beb4:    8f 17             	r7 = r0.l (s)
  10beb6:    a0 e0 20 60       	r0 = 0x20 - r6			  ## bigint.c:228:26
  10beba:    41 20             	r1 = 0x0
  10bebc:    42 20             	r2 = 0x0
  10bebe:    04 8c             	goto 0x18 <bi_lshift+0x70 : 10bed8 >
  10bec0:    d0 ec 9c 30       	r3 = [r9+0xc]			  ## bigint.c:231:18
  10bec4:    d8 ec 3a 52       	r5 = [r3+r2<<2]			  ## bigint.c:231:15
  10bec8:    c8 e1 50 46       	r4 = r5 << r6			  ## bigint.c:232:21
  10becc:    41 19             	r1 |= r4			  ## bigint.c:233:21
  10bece:    d8 ec 3b 12       	[r3+r2<<2] = r1			  ## bigint.c:233:21
  10bed2:    c8 e1 52 10       	r1 = r5 >> r0			  ## bigint.c:231:27
  10bed6:    c2 21             	r2 += 0x1			  ## bigint.c:230:31
  10bed8:    87 ed f2 21       	ifs (r2 < r7) goto -0x1c <bi_lshift+0x58 : 10bec0 >
  10bedc:    08 f8 15 00       	if (r8 == 0x0) goto 0x2a <bi_lshift+0xA2 : 10bf0a >
  10bee0:    b4 e0 70 18       	r1 = r7 + r8			  ## bigint.c:849:31
  10bee4:    90 16             	r0 = r9			  ## bigint.c:849:5
  10bee6:    51 90             	call -0xa0 <more_comps : 10be48 >			  ## bigint.c:849:5
  10bee8:    d0 ec 9c 00       	r0 = [r9+0xc]			  ## bigint.c:851:15
  10beec:    c0 e1 82 20       	r2 = r8 << 0x2			  ## bigint.c:854:5
  10bef0:    81 1c             	r1 = r0 + r2			  ## bigint.c:851:15
  10bef2:    f9 3c             	r1 += -0x4			  ## bigint.c:854:5
  10bef4:    33 e1 fc 0f       	r3 = r0 + -0x4			  ## bigint.c:854:5
  10bef8:    d8 ec 3a 47       	r4 = [r3+r7<<2]			  ## bigint.c:855:16
  10befc:    d8 ec 1b 47       	[r1+r7<<2] = r4			  ## bigint.c:855:14
  10bf00:    07 ea fa ff       	if (--r7 != 0) goto -0xc <bi_lshift+0x90 : 10bef8 >			  ## bigint.c:856:5
  10bf04:    41 20             	r1 = 0x0			  ## bigint.c:858:5
  10bf06:    bf ea 90 c5       	call -0x74e0 <memset : 104a2a >			  ## bigint.c:858:5
  10bf0a:    59 04             	{pc, r9-r4} = [sp++]			  ## bigint.c:237:1


bi_rshift:
  10bf0c:    79 04             	[--sp] = {rets, r9-r4}			  ## bigint.c:175:0
  10bf0e:    81 fd 1c 02       	ifs (r1 < 0x1) goto 0x38 <bi_rshift+0x3E : 10bf4a >			  ## bigint.c:175:0
  10bf12:    9a 19             	r2 = ~r1			  ## bigint.c:180:9
  10bf14:    b2 ee df 0f       	ifs (r2 <= -0x21) {			  ## bigint.c:180:9
  10bf18:    42 e0 df ff       		r2 = -0x21
                               	} <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFE2 : ffffffffffffffde >			  ## bigint.c:180:9
  10bf1c:    12 18             	r2 += r1			  ## bigint.c:180:9
  10bf1e:    54 ed 04 60       	r6 = h[r0+0x4] (s)			  ## bigint.c:815:13
  10bf22:    03 f1 20 20       	r3 = r2 + 0x20  #			  ## bigint.c:180:9
  10bf26:    02 63             		 r2 = [r0+0xc] 			  ## bigint.c:816:20
  10bf28:    b4 a5             	r4 = r3 >> 0x5			  ## bigint.c:180:9
  10bf2a:    65 1f             	r5 = r6 - r4			  ## bigint.c:815:23
  10bf2c:    43 a5             	r3 = r4 << 0x5			  ## bigint.c:180:9
  10bf2e:    85 fd 0e 02       	ifs (r5 < 0x1) goto 0x1c <bi_rshift+0x42 : 10bf4e >			  ## bigint.c:180:9
  10bf32:    b8 e1 40 60       	r8 = uextra(r6, p:0x0, l:0x10)			  ## bigint.c:815:18
  10bf36:    27 16             	r7 = r2			  ## bigint.c:815:18
  10bf38:    d8 ec 7a 64       	r6 = [r7+r4<<2]			  ## bigint.c:828:16
  10bf3c:    fd 3f             	r5 += -0x1			  ## bigint.c:829:14
  10bf3e:    f6 05             	[r7++=0x4] = r6			  ## bigint.c:828:14
  10bf40:    05 fe fa 01       	ifs (r5 > 0x0) goto -0xc <bi_rshift+0x2C : 10bf38 >			  ## bigint.c:829:5
  10bf44:    b4 e0 82 44       	r4 = r8 - r4			  ## bigint.c:831:15
  10bf48:    04 85             	goto 0xa <bi_rshift+0x48 : 10bf54 >
  10bf4a:    40 20             	r0 = 0x0
  10bf4c:    59 04             	{pc, r9-r4} = [sp++]			  ## bigint.c:203:1
  10bf4e:    40 ea 00 20       	[r2+0x0] = 0x0			  ## bigint.c:822:23
  10bf52:    44 21             	r4 = 0x1			  ## bigint.c:822:23
  10bf54:    99 de             	r1 = r1 - r3  #			  ## bigint.c:180:9
  10bf56:    8c 62             		 h[r0+0x4] = r4			  ## bigint.c:823:19
  10bf58:    43 20             	r3 = 0x0
  10bf5a:    45 20             	r5 = 0x0
  10bf5c:    04 85             	goto 0xa <bi_rshift+0x5C : 10bf68 >
  10bf5e:    46 21             	r6 = 0x1			  ## bigint.c:194:14
  10bf60:    a6 e1 fc 30       	r6 <= insert(r3, p:0x1, l:0x1f)			  ## bigint.c:194:14
  10bf64:    c5 21             	r5 += 0x1			  ## bigint.c:192:29
  10bf66:    63 16             	r3 = r6
  10bf68:    81 ed f9 51       	ifs (r5 < r1) goto -0xe <bi_rshift+0x52 : 10bf5e >			  ## bigint.c:192:5
  10bf6c:    b8 e1 41 40       	r8 = sextra(r4, p:0x0, l:0x10)			  ## bigint.c:191:25
  10bf70:    c0 e1 82 50       	r5 = r8 << 0x2			  ## bigint.c:191:25
  10bf74:    52 18             	r2 += r5
  10bf76:    fa 3c             	r2 += -0x4
  10bf78:    a9 e0 20 10       	r9 = 0x20 - r1
  10bf7c:    86 14             	r7_r6 = 0
  10bf7e:    04 8a             	goto 0x14 <bi_rshift+0x88 : 10bf94 >
  10bf80:    c8 f1 70 79       	r7 = r7 << r9  #			  ## bigint.c:199:28
  10bf84:    24 60             		 r4 = [r2+0x0] 			  ## bigint.c:197:15
  10bf86:    c8 e1 42 51       	r5 = r4 >> r1			  ## bigint.c:198:17
  10bf8a:    75 19             	r5 |= r7			  ## bigint.c:199:19
  10bf8c:    90 f1 42 73       	r7 = r4 & r3  #			  ## bigint.c:197:23
  10bf90:    ad 05             		 [r2++=-0x4] = r5			  ## bigint.c:199:19
  10bf92:    c6 21             	r6 += 0x1			  ## bigint.c:196:31
  10bf94:    88 ed f4 61       	ifs (r6 < r8) goto -0x18 <bi_rshift+0x74 : 10bf80 >
  10bf98:    39 04             	{rets, r9-r4} = [sp++]			  ## bigint.c:202:12
  10bf9a:    a7 89             	goto -0x16e <trim : 10be2e >			  ## bigint.c:202:12


bi_xor:
  10bf9c:    76 04             	[--sp] = {rets, r6-r4}			  ## bigint.c:114:0
  10bf9e:    04 15             	r5_r4 = r1_r0			  ## bigint.c:114:0
  10bfa0:    54 ed 54 00       	r0 = h[r5+0x4] (s)			  ## bigint.c:115:30
  10bfa4:    54 ed 44 10       	r1 = h[r4+0x4] (s)			  ## bigint.c:115:18
  10bfa8:    42 16             	r2 = r4			  ## bigint.c:115:13
  10bfaa:    91 ee 00 00       	ifs (r1 <= r0) {			  ## bigint.c:115:13
  10bfae:    52 16             		r2 = r5
                               	}			  ## bigint.c:115:13
  10bfb0:    54 ed 24 60       	r6 = h[r2+0x4] (s)			  ## bigint.c:115:13
  10bfb4:    91 ee 00 10       	ifs (r1 <= r0) {
  10bfb8:    40 16             		r0 = r4
                               	} else {			  ## bigint.c:119:9
  10bfba:    50 16             		r0 = r5
                               	}			  ## bigint.c:117:9
  10bfbc:    61 16             	r1 = r6			  ## bigint.c:117:9
  10bfbe:    bf ea 43 ff       	call -0x17a <more_comps : 10be48 >			  ## bigint.c:117:9
  10bfc2:    30 e1 ff 6f       	r0 = r6 + -0x1			  ## bigint.c:115:9
  10bfc6:    04 89             	goto 0x12 <bi_xor+0x3E : 10bfda >			  ## bigint.c:115:9
  10bfc8:    51 63             	r1 = [r5+0xc] 			  ## bigint.c:122:35
  10bfca:    42 63             	r2 = [r4+0xc] 			  ## bigint.c:122:14
  10bfcc:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## bigint.c:122:30
  10bfd0:    03 a2             	r3 = r0 << 0x2			  ## bigint.c:122:30
  10bfd2:    32 18             	r2 += r3			  ## bigint.c:122:27
  10bfd4:    64 e8 01 21       	[r2+0x0] ^= r1			  ## bigint.c:122:27
  10bfd8:    f8 3f             	r0 += -0x1			  ## bigint.c:121:5
  10bfda:    f0 f8 f5 ff       	if (r0 != -0x1) goto -0x16 <bi_xor+0x2C : 10bfc8 >
  10bfde:    40 16             	r0 = r4			  ## bigint.c:125:5
  10bfe0:    56 04             	{pc, r6-r4} = [sp++]			  ## bigint.c:125:5


bi_free:
  10bfe2:    01 53             	if (r1 == 0) goto 0x26 <bi_free+0x28 : 10c00a >			  ## bigint.c:489:0
  10bfe4:    12 63             	r2 = [r1+0xc] 			  ## bigint.c:492:27
  10bfe6:    02 51             	if (r2 == 0) goto 0x22 <bi_free+0x28 : 10c00a >			  ## bigint.c:492:27
  10bfe8:    12 62             	r2 = [r1+0x8] 			  ## bigint.c:495:13
  10bfea:    c3 ff aa 55 ff 7f 	r3 = 0x7fff55aa <__stub_VecMinScalar_float_c_f_c+0x7FEE55AE : 7fff55aa >			  ## bigint.c:495:18
  10bff0:    03 e8 0b 20       	if (r2 == r3) goto 0x16 <bi_free+0x28 : 10c00a >			  ## bigint.c:495:18
  10bff4:    fa 3f             	r2 += -0x1			  ## bigint.c:499:9
  10bff6:    92 62             	[r1+0x8] = r2			  ## bigint.c:499:9
  10bff8:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <bi_free+0x28 : 10c00a >			  ## bigint.c:499:9
  10bffc:    02 61             	r2 = [r0+0x4] 			  ## bigint.c:505:21
  10bffe:    92 60             	[r1+0x0] = r2			  ## bigint.c:505:14
  10c000:    81 61             	[r0+0x4] = r1			  ## bigint.c:506:20
  10c002:    cc eb 01 00       	[r0+0x30] += 0x1			  ## bigint.c:507:20
  10c006:    cb eb ff 0f       	[r0+0x2c] += -0x1			  ## bigint.c:509:9
  10c00a:    80 00             	rts			  ## bigint.c:518:1


bi_poly_mod2:
  10c00c:    78 04             	[--sp] = {rets, r8-r4}			  ## bigint.c:55:0
  10c00e:    24 16             	r4 = r2			  ## bigint.c:55:0
  10c010:    15 d6             	r5 = r1  #			  ## bigint.c:55:0
  10c012:    42 63             		 r2 = [r4+0xc] 			  ## bigint.c:55:0
  10c014:    08 d6             	r8 = r0  #			  ## bigint.c:55:0
  10c016:    4b 62             		 r3 = h[r4+0x4] (u)			  ## bigint.c:56:18
  10c018:    30 16             	r0 = r3			  ## bigint.c:56:18
  10c01a:    21 16             	r1 = r2			  ## bigint.c:56:18
  10c01c:    bf ea f4 fe       	call -0x218 <find_max_exp_index : 10be08 >			  ## bigint.c:56:18
  10c020:    07 16             	r7 = r0			  ## bigint.c:56:18
  10c022:    14 82             	goto 0x44 <bi_poly_mod2+0x5C : 10c068 >
  10c024:    50 16             	r0 = r5			  ## bigint.c:101:5
  10c026:    bf ea 02 ff       	call -0x1fc <trim : 10be2e >			  ## bigint.c:101:5
  10c02a:    40 16             	r0 = r4			  ## bigint.c:102:5
  10c02c:    bf ea ff fe       	call -0x202 <trim : 10be2e >			  ## bigint.c:102:5
  10c030:    51 63             	r1 = [r5+0xc] 			  ## bigint.c:102:5
  10c032:    58 62             	r0 = h[r5+0x4] (u)			  ## bigint.c:103:10
  10c034:    bf ea e8 fe       	call -0x230 <find_max_exp_index : 10be08 >			  ## bigint.c:103:10
  10c038:    06 d6             	r6 = r0  #			  ## bigint.c:103:10
  10c03a:    41 63             		 r1 = [r4+0xc] 			  ## bigint.c:103:10
  10c03c:    4a 62             	r2 = h[r4+0x4] (u)			  ## bigint.c:104:10
  10c03e:    20 16             	r0 = r2			  ## bigint.c:104:10
  10c040:    bf ea e2 fe       	call -0x23c <find_max_exp_index : 10be08 >			  ## bigint.c:104:10
  10c044:    61 1e             	r1 = r6 - r0			  ## bigint.c:105:13
  10c046:    81 fd 04 02       	ifs (r1 < 0x1) goto 0x8 <bi_poly_mod2+0x46 : 10c052 >			  ## bigint.c:106:9
  10c04a:    40 16             	r0 = r4			  ## bigint.c:107:9
  10c04c:    bf ea 0c ff       	call -0x1e8 <bi_lshift : 10be68 >			  ## bigint.c:107:9
  10c050:    04 85             	goto 0xa <bi_poly_mod2+0x50 : 10c05c >
  10c052:    a1 e0 00 10       	r1 = 0x0 - r1			  ## bigint.c:109:30
  10c056:    40 16             	r0 = r4			  ## bigint.c:109:15
  10c058:    bf ea 58 ff       	call -0x150 <bi_rshift : 10bf0c >			  ## bigint.c:109:15
  10c05c:    50 16             	r0 = r5			  ## bigint.c:59:15
  10c05e:    41 16             	r1 = r4			  ## bigint.c:59:15
  10c060:    41 9d             	call -0xc6 <bi_xor : 10bf9c >			  ## bigint.c:59:15
  10c062:    50 16             	r0 = r5			  ## bigint.c:60:9
  10c064:    bf ea e3 fe       	call -0x23a <trim : 10be2e >			  ## bigint.c:60:9
  10c068:    51 63             	r1 = [r5+0xc] 
  10c06a:    58 62             	r0 = h[r5+0x4] (u)			  ## bigint.c:57:12
  10c06c:    bf ea cc fe       	call -0x268 <find_max_exp_index : 10be08 >			  ## bigint.c:57:12
  10c070:    07 ed d8 01       	ifs (r0 >= r7) goto -0x50 <bi_poly_mod2+0x18 : 10c024 >			  ## bigint.c:57:12
  10c074:    80 16             	r0 = r8			  ## bigint.c:62:5
  10c076:    41 16             	r1 = r4			  ## bigint.c:62:5
  10c078:    51 94             	call -0x98 <bi_free : 10bfe2 >			  ## bigint.c:62:5
  10c07a:    50 16             	r0 = r5			  ## bigint.c:63:5
  10c07c:    58 04             	{pc, r8-r4} = [sp++]			  ## bigint.c:63:5


alloc:
  10c07e:    76 04             	[--sp] = {rets, r6-r4}			  ## bigint.c:1354:0
  10c080:    04 16             	r4 = r0			  ## bigint.c:1354:0
  10c082:    16 d6             	r6 = r1  #			  ## bigint.c:1354:0
  10c084:    45 61             		 r5 = [r4+0x4] 			  ## bigint.c:1358:14
  10c086:    05 48             	if (r5 == 0) goto 0x10 <alloc+0x1A : 10c098 >			  ## bigint.c:1358:9
  10c088:    50 60             	r0 = [r5+0x0] 			  ## bigint.c:1360:31
  10c08a:    50 d6             	r0 = r5  #			  ## bigint.c:1370:9
  10c08c:    c0 61             		 [r4+0x4] = r0			  ## bigint.c:1360:24
  10c08e:    cc eb ff 4f       	[r4+0x30] += -0x1			  ## bigint.c:1361:24
  10c092:    bf ea d9 fe       	call -0x24e <more_comps : 10be48 >			  ## bigint.c:1370:9
  10c096:    04 8a             	goto 0x14 <alloc+0x2E : 10c0ac >			  ## bigint.c:1370:9
  10c098:    45 6f             	r5 = [r4+0x3c] 			  ## bigint.c:1373:30
  10c09a:    58 90             	r0 = r5 + 0x10			  ## bigint.c:1374:23
  10c09c:    00 f1 48 50       	r0 = r5 + 0x48  #			  ## bigint.c:1376:23
  10c0a0:    d0 63             		 [r5+0xc] = r0			  ## bigint.c:1375:20
  10c0a2:    c0 6f             	[r4+0x3c] = r0			  ## bigint.c:1376:23
  10c0a4:    40 2e             	r0 = 0xe			  ## bigint.c:1377:24
  10c0a6:    d8 63             	h[r5+0x6] = r0			  ## bigint.c:1377:24
  10c0a8:    d0 eb 48 40       	[r4+0x40] += 0x48			  ## bigint.c:1378:23
  10c0ac:    50 d6             	r0 = r5  #			  ## bigint.c:1389:5
  10c0ae:    de 62             		 h[r5+0x4] = r6			  ## bigint.c:1382:15
  10c0b0:    42 ea 01 50       	[r5+0x8] = 0x1			  ## bigint.c:1383:15
  10c0b4:    40 ea 00 50       	[r5+0x0] = 0x0			  ## bigint.c:1384:15
  10c0b8:    cb eb 01 40       	[r4+0x2c] += 0x1			  ## bigint.c:1385:22
  10c0bc:    56 04             	{pc, r6-r4} = [sp++]			  ## bigint.c:1389:5


bi_poly_mul:
  10c0be:    7b 04             	[--sp] = {rets, r11-r4}			  ## bigint.c:66:0
  10c0c0:    25 16             	r5 = r2			  ## bigint.c:66:0
  10c0c2:    08 d5             	r9_r8 = r1_r0  #			  ## bigint.c:66:0
  10c0c4:    52 63             		 r2 = [r5+0xc] 			  ## bigint.c:66:0
  10c0c6:    21 d6             	r1 = r2  #			  ## bigint.c:67:18
  10c0c8:    5b 62             		 r3 = h[r5+0x4] (u)			  ## bigint.c:67:18
  10c0ca:    30 16             	r0 = r3			  ## bigint.c:67:18
  10c0cc:    bf ea 9c fe       	call -0x2c8 <find_max_exp_index : 10be08 >			  ## bigint.c:67:18
  10c0d0:    0a 16             	r10 = r0			  ## bigint.c:67:18
  10c0d2:    86 14             	r7_r6 = 0
  10c0d4:    44 20             	r4 = 0x0
  10c0d6:    c3 14             	r11 = 0
  10c0d8:    14 87             	goto 0x4e <bi_poly_mul+0x6A : 10c128 >
  10c0da:    50 63             	r0 = [r5+0xc] 			  ## bigint.c:75:18
  10c0dc:    08 40             	r0 = b[r0+0x0] (u)			  ## bigint.c:75:13
  10c0de:    50 e8 1d 00       	if ((r0 & 0x1) == 0) goto 0x3a <bi_poly_mul+0x5E : 10c11c >			  ## bigint.c:75:13
  10c0e2:    07 49             	if (r7 == 0) goto 0x12 <bi_poly_mul+0x38 : 10c0f6 >
  10c0e4:    61 1f             	r1 = r6 - r4			  ## bigint.c:84:17
  10c0e6:    b0 16             	r0 = r11			  ## bigint.c:84:17
  10c0e8:    bf ea be fe       	call -0x284 <bi_lshift : 10be68 >			  ## bigint.c:84:17
  10c0ec:    90 16             	r0 = r9			  ## bigint.c:86:23
  10c0ee:    b1 16             	r1 = r11			  ## bigint.c:86:23
  10c0f0:    bf ea 54 ff       	call -0x158 <bi_xor : 10bf9c >			  ## bigint.c:86:23
  10c0f4:    04 91             	goto 0x22 <bi_poly_mul+0x5A : 10c118 >			  ## bigint.c:86:23
  10c0f6:    90 16             	r0 = r9			  ## bigint.c:77:17
  10c0f8:    61 16             	r1 = r6			  ## bigint.c:77:17
  10c0fa:    bf ea b5 fe       	call -0x296 <bi_lshift : 10be68 >			  ## bigint.c:77:17
  10c0fe:    54 ed 94 10       	r1 = h[r9+0x4] (s)			  ## bigint.c:540:30
  10c102:    80 16             	r0 = r8			  ## bigint.c:540:19
  10c104:    51 9c             	call -0x88 <alloc : 10c07e >			  ## bigint.c:540:19
  10c106:    0b d6             	r11 = r0  #			  ## bigint.c:540:19
  10c108:    00 63             		 r0 = [r0+0xc] 			  ## bigint.c:543:17
  10c10a:    d0 ec 9c 10       	r1 = [r9+0xc]			  ## bigint.c:543:28
  10c10e:    54 ed 94 20       	r2 = h[r9+0x4] (s)			  ## bigint.c:543:35
  10c112:    22 a2             	r2 = r2 << 0x2			  ## bigint.c:543:44
  10c114:    bf ea 14 c4       	call -0x77d8 <memmove : 104940 >			  ## bigint.c:543:5
  10c118:    47 21             	r7 = 0x1
  10c11a:    64 16             	r4 = r6
  10c11c:    41 21             	r1 = 0x1			  ## bigint.c:90:15
  10c11e:    50 16             	r0 = r5			  ## bigint.c:90:15
  10c120:    bf ea f4 fe       	call -0x218 <bi_rshift : 10bf0c >			  ## bigint.c:90:15
  10c124:    05 16             	r5 = r0			  ## bigint.c:90:15
  10c126:    c6 21             	r6 += 0x1			  ## bigint.c:74:54
  10c128:    8a ee d7 61       	ifs (r6 <= r10) goto -0x52 <bi_poly_mul+0x1C : 10c0da >
  10c12c:    80 16             	r0 = r8			  ## bigint.c:92:5
  10c12e:    b1 16             	r1 = r11			  ## bigint.c:92:5
  10c130:    bf ea 57 ff       	call -0x152 <bi_free : 10bfe2 >			  ## bigint.c:92:5
  10c134:    51 16             	r1 = r5			  ## bigint.c:93:5
  10c136:    bf ea 54 ff       	call -0x158 <bi_free : 10bfe2 >			  ## bigint.c:93:5
  10c13a:    90 16             	r0 = r9			  ## bigint.c:94:5
  10c13c:    5b 04             	{pc, r11-r4} = [sp++]			  ## bigint.c:94:5


bi_wirte_to_byte:
  10c13e:    74 04             	[--sp] = {rets, r4}			  ## bigint.c:128:0
  10c140:    54 ed 04 20       	r2 = h[r0+0x4] (s)			  ## bigint.c:129:29
  10c144:    00 63             	r0 = [r0+0xc] 			  ## bigint.c:129:21
  10c146:    23 a2             	r3 = r2 << 0x2			  ## bigint.c:129:27
  10c148:    30 18             	r0 += r3			  ## bigint.c:129:27
  10c14a:    04 8d             	goto 0x1a <bi_wirte_to_byte+0x28 : 10c166 >			  ## bigint.c:129:27
  10c14c:    f8 3c             	r0 += -0x4
  10c14e:    43 20             	r3 = 0x0
  10c150:    04 86             	goto 0xc <bi_wirte_to_byte+0x20 : 10c15e >
  10c152:    0c 43             	r4 = b[r0+0x3] (u)			  ## bigint.c:135:39
  10c154:    d8 ee 11 43       	b[r1+r3] = r4			  ## bigint.c:135:20
  10c158:    6c e8 00 08       	[r0+0x0] <<= 0x8			  ## bigint.c:136:18
  10c15c:    c3 21             	r3 += 0x1			  ## bigint.c:134:42
  10c15e:    83 f8 f8 09       	if (r3 != 0x4) goto -0x10 <bi_wirte_to_byte+0x14 : 10c152 >
  10c162:    fa 3f             	r2 += -0x1			  ## bigint.c:139:13
  10c164:    c1 24             	r1 += 0x4			  ## bigint.c:127:50
  10c166:    02 fd f1 03       	ifs (r2 >= 0x1) goto -0x1e <bi_wirte_to_byte+0xE : 10c14c >
  10c16a:    54 04             	{pc, r4} = [sp++]			  ## bigint.c:141:1


bi_read_from_byte:
  10c16c:    76 04             	[--sp] = {rets, r6-r4}			  ## bigint.c:143:0
  10c16e:    24 16             	r4 = r2			  ## bigint.c:143:0
  10c170:    15 16             	r5 = r1			  ## bigint.c:143:0
  10c172:    41 24             	r1 = 0x4			  ## bigint.c:143:0
  10c174:    f4 e1 41 11       	r1 = r4 / r1 (s)			  ## bigint.c:144:34
  10c178:    41 82             	call -0xfc <alloc : 10c07e >			  ## bigint.c:144:19
  10c17a:    06 16             	r6 = r0			  ## bigint.c:144:19
  10c17c:    54 ed 64 00       	r0 = h[r6+0x4] (s)			  ## bigint.c:145:28
  10c180:    61 63             	r1 = [r6+0xc] 			  ## bigint.c:145:20
  10c182:    00 a2             	r0 = r0 << 0x2			  ## bigint.c:145:26
  10c184:    10 18             	r0 += r1			  ## bigint.c:145:26
  10c186:    04 8f             	goto 0x1e <bi_read_from_byte+0x3A : 10c1a6 >			  ## bigint.c:145:26
  10c188:    f8 3c             	r0 += -0x4
  10c18a:    41 20             	r1 = 0x0
  10c18c:    42 20             	r2 = 0x0
  10c18e:    04 86             	goto 0xc <bi_read_from_byte+0x30 : 10c19c >
  10c190:    d8 ee 50 32       	r3 = b[r5+r2] (u)			  ## bigint.c:152:20
  10c194:    a3 e1 60 14       	r3 <= insert(r1, p:0x8, l:0x18)			  ## bigint.c:152:17
  10c198:    c2 21             	r2 += 0x1			  ## bigint.c:150:42
  10c19a:    31 16             	r1 = r3
  10c19c:    82 f8 f8 09       	if (r2 != 0x4) goto -0x10 <bi_read_from_byte+0x24 : 10c190 >
  10c1a0:    81 60             	[r0+0x0] = r1			  ## bigint.c:154:14
  10c1a2:    fc 3c             	r4 += -0x4			  ## bigint.c:155:13
  10c1a4:    c5 24             	r5 += 0x4			  ## bigint.c:147:9
  10c1a6:    04 fd ef 03       	ifs (r4 >= 0x1) goto -0x22 <bi_read_from_byte+0x1C : 10c188 >
  10c1aa:    60 16             	r0 = r6			  ## bigint.c:157:5
  10c1ac:    bf ea 3f fe       	call -0x382 <trim : 10be2e >			  ## bigint.c:157:5
  10c1b0:    60 16             	r0 = r6			  ## bigint.c:158:5
  10c1b2:    56 04             	{pc, r6-r4} = [sp++]			  ## bigint.c:158:5


bi_initialize:
  10c1b4:    76 04             	[--sp] = {rets, r6-r4}			  ## bigint.c:381:0
  10c1b6:    14 16             	r4 = r1			  ## bigint.c:381:0
  10c1b8:    05 16             	r5 = r0			  ## bigint.c:381:0
  10c1ba:    41 20             	r1 = 0x0			  ## bigint.c:383:5
  10c1bc:    52 24             	r2 = 0x44			  ## bigint.c:383:5
  10c1be:    46 20             	r6 = 0x0			  ## bigint.c:383:5
  10c1c0:    bf ea 33 c4       	call -0x779a <memset : 104a2a >			  ## bigint.c:383:5
  10c1c4:    50 d6             	r0 = r5  #			  ## bigint.c:386:21
  10c1c6:    d4 6f             		 [r5+0x3c] = r4			  ## bigint.c:384:19
  10c1c8:    41 22             	r1 = 0x2			  ## bigint.c:386:21
  10c1ca:    bf ea 58 ff       	call -0x150 <alloc : 10c07e >			  ## bigint.c:386:21
  10c1ce:    d0 62             	[r5+0x8] = r0			  ## bigint.c:386:19
  10c1d0:    01 63             	r1 = [r0+0xc] 			  ## bigint.c:387:20
  10c1d2:    96 60             	[r1+0x0] = r6			  ## bigint.c:387:29
  10c1d4:    41 ea 01 10       	[r1+0x4] = 0x1			  ## bigint.c:388:29
  10c1d8:    c1 ff aa 55 ff 7f 	r1 = 0x7fff55aa <__stub_VecMinScalar_float_c_f_c+0x7FEE55AE : 7fff55aa >			  ## bigint.c:462:14
  10c1de:    81 62             	[r0+0x8] = r1			  ## bigint.c:462:14
  10c1e0:    56 04             	{pc, r6-r4} = [sp++]			  ## bigint.c:391:1


bi_terminate:
  10c1e2:    01 62             	r1 = [r0+0x8] 			  ## bigint.c:401:0
  10c1e4:    42 ea 01 10       	[r1+0x8] = 0x1			  ## bigint.c:479:14
  10c1e8:    77 9c             	goto -0x208 <bi_free : 10bfe2 >			  ## bigint.c:403:5
  10c1ea:    00 00             	nop


quantize_intervals_LF:
  10c1ec:	 24 d9 ff ff dc 26 00 00         $....&..
  10c1f4:	 a4 74 00 00 90 c2 00 00         .t......
  10c1fc:	 be 10 01 00 46 5f 01 00         ....F_..
  10c204:	 40 ae 01 00 c6 fd 01 00         @.......
  10c20c:	 f2 4d 02 00 da 9e 02 00         .M......
  10c214:	 9a f0 02 00 48 43 03 00         ....HC..
  10c21c:	 00 97 03 00 d6 eb 03 00         ........
  10c224:	 e6 41 04 00 48 99 04 00         .A..H...
  10c22c:	 16 f2 04 00 6c 4c 05 00         ....lL..
  10c234:	 66 a8 05 00 1e 06 06 00         f.......
  10c23c:	 b2 65 06 00 42 c7 06 00         .e..B...
  10c244:	 ee 2a 07 00 d8 90 07 00         .*......
  10c24c:	 28 f9 07 00 02 64 08 00         (....d..
  10c254:	 90 d1 08 00 00 42 09 00         .....B..
  10c25c:	 82 b5 09 00 4c 2c 0a 00         ....L,..
  10c264:	 96 a6 0a 00 9e 24 0b 00         .....$..
  10c26c:	 aa a6 0b 00 06 2d 0c 00         .....-..
  10c274:	 02 b8 0c 00 fe 47 0d 00         .....G..
  10c27c:	 60 dd 0d 00 98 78 0e 00         `....x..
  10c284:	 2c 1a 0f 00 aa c2 0f 00         ,.......
  10c28c:	 bc 72 10 00 1e 2b 11 00         .r...+..
  10c294:	 ac ec 11 00 62 b8 12 00         ....b...
  10c29c:	 6c 8f 13 00 24 73 14 00         l...$s..
  10c2a4:	 2c 65 15 00 7a 67 16 00         ,e..zg..
  10c2ac:	 6e 7c 17 00 fa a6 18 00         n|......
  10c2b4:	 d2 ea 19 00 aa 4c 1b 00         .....L..
  10c2bc:	 b0 d2 1c 00 28 85 1e 00         ....(...
  10c2c4:	 84 6f 20 00 36 a2 22 00         .o .6.".
  10c2cc:	 0e 36 25 00 e4 52 28 00         .6%..R(.
  10c2d4:	 06 3e 2c 00 e8 7c 31 00         .>,..|1.
  10c2dc:	 1e 29 39 00 62 33 45 00         .)9.b3E.
  10c2e4:	 62 6d 56 00 d8 5f 6c 00         bmV.._l.
  10c2ec:	 b6 c3 87 00                     ....


invert_quantize_dither_factors_LF:
  10c2f0:	 dc 26 00 00 dc 26 00 00         .&...&..
  10c2f8:	 ea 26 00 00 04 27 00 00         .&...'..
  10c300:	 2a 27 00 00 5e 27 00 00         *'..^'..
  10c308:	 9e 27 00 00 ea 27 00 00         .'...'..
  10c310:	 42 28 00 00 a8 28 00 00         B(...(..
  10c318:	 18 29 00 00 96 29 00 00         .)...)..
  10c320:	 20 2a 00 00 b6 2a 00 00          *...*..
  10c328:	 5a 2b 00 00 0a 2c 00 00         Z+...,..
  10c330:	 c6 2c 00 00 90 2d 00 00         .,...-..
  10c338:	 68 2e 00 00 50 2f 00 00         h...P/..
  10c340:	 46 30 00 00 4a 31 00 00         F0..J1..
  10c348:	 62 32 00 00 8a 33 00 00         b2...3..
  10c350:	 c6 34 00 00 14 36 00 00         .4...6..
  10c358:	 7a 37 00 00 f6 38 00 00         z7...8..
  10c360:	 8c 3a 00 00 3e 3c 00 00         .:..><..
  10c368:	 0c 3e 00 00 fc 3f 00 00         .>...?..
  10c370:	 10 42 00 00 4c 44 00 00         .B..LD..
  10c378:	 b2 46 00 00 4a 49 00 00         .F..JI..
  10c380:	 18 4c 00 00 22 4f 00 00         .L.."O..
  10c388:	 72 52 00 00 0e 56 00 00         rR...V..
  10c390:	 04 5a 00 00 5e 5e 00 00         .Z..^^..
  10c398:	 2e 63 00 00 88 68 00 00         .c...h..
  10c3a0:	 82 6e 00 00 38 75 00 00         .n..8u..
  10c3a8:	 d2 7c 00 00 7c 85 00 00         .|..|...
  10c3b0:	 78 8f 00 00 14 9b 00 00         x.......
  10c3b8:	 c2 a8 00 00 16 b9 00 00         ........
  10c3c0:	 ee cc 00 00 8a e5 00 00         ........
  10c3c8:	 d2 04 01 00 e0 2d 01 00         .....-..
  10c3d0:	 fa 65 01 00 dc b6 01 00         .e......
  10c3d8:	 44 34 02 00 9e 0a 03 00         D4......
  10c3e0:	 98 a1 04 00 aa 68 07 00         .....h..
  10c3e8:	 56 d1 09 00 22 21 0c 00         V..."!..
  10c3f0:	 bc 42 0f 00                     .B..


quantize_dither_factors_LF:
  10c3f4:	 00 00 00 00 04 00 00 00         ........
  10c3fc:	 07 00 00 00 0a 00 00 00         ........
  10c404:	 0d 00 00 00 10 00 00 00         ........
  10c40c:	 13 00 00 00 16 00 00 00         ........
  10c414:	 1a 00 00 00 1c 00 00 00         ........
  10c41c:	 20 00 00 00 23 00 00 00          ...#...
  10c424:	 26 00 00 00 29 00 00 00         &...)...
  10c42c:	 2c 00 00 00 2f 00 00 00         ,.../...
  10c434:	 33 00 00 00 36 00 00 00         3...6...
  10c43c:	 3a 00 00 00 3e 00 00 00         :...>...
  10c444:	 41 00 00 00 46 00 00 00         A...F...
  10c44c:	 4a 00 00 00 4f 00 00 00         J...O...
  10c454:	 54 00 00 00 5a 00 00 00         T...Z...
  10c45c:	 5f 00 00 00 66 00 00 00         _...f...
  10c464:	 6d 00 00 00 74 00 00 00         m...t...
  10c46c:	 7c 00 00 00 85 00 00 00         |.......
  10c474:	 8f 00 00 00 9a 00 00 00         ........
  10c47c:	 a6 00 00 00 b4 00 00 00         ........
  10c484:	 c3 00 00 00 d4 00 00 00         ........
  10c48c:	 e7 00 00 00 fe 00 00 00         ........
  10c494:	 17 01 00 00 34 01 00 00         ....4...
  10c49c:	 57 01 00 00 7f 01 00 00         W.......
  10c4a4:	 ae 01 00 00 e7 01 00 00         ........
  10c4ac:	 2b 02 00 00 7f 02 00 00         +.......
  10c4b4:	 e7 02 00 00 6c 03 00 00         ....l...
  10c4bc:	 15 04 00 00 f6 04 00 00         ........
  10c4c4:	 27 06 00 00 d2 07 00 00         '.......
  10c4cc:	 44 0a 00 00 07 0e 00 00         D.......
  10c4d4:	 39 14 00 00 5a 1f 00 00         9...Z...
  10c4dc:	 97 35 00 00 bf 65 00 00         .5...e..
  10c4e4:	 c5 b1 00 00 2b 9a 00 00         ....+...
  10c4ec:	 f3 93 00 00 67 c8 00 00         ....g...
  10c4f4:	 00 00 00 00                     ....


quantize_factor_select_offset_LF:
  10c4f8:	 00 00 eb ff ed ff ef ff         ........
  10c500:	 f1 ff f4 ff f6 ff f8 ff         ........
  10c508:	 fa ff fc ff ff ff 01 00         ........
  10c510:	 03 00 06 00 08 00 0a 00         ........
  10c518:	 0d 00 0f 00 12 00 14 00         ........
  10c520:	 17 00 1a 00 1d 00 1f 00         ........
  10c528:	 22 00 25 00 28 00 2b 00         ".%.(.+.
  10c530:	 2f 00 32 00 35 00 39 00         /.2.5.9.
  10c538:	 3c 00 40 00 44 00 48 00         <.@.D.H.
  10c540:	 4c 00 50 00 55 00 59 00         L.P.U.Y.
  10c548:	 5e 00 63 00 69 00 6e 00         ^.c.i.n.
  10c550:	 74 00 7b 00 81 00 88 00         t.{.....
  10c558:	 90 00 98 00 a1 00 ab 00         ........
  10c560:	 b6 00 c2 00 cf 00 df 00         ........
  10c568:	 f1 00 07 01 23 01 48 01         ....#.H.
  10c570:	 7e 01 d3 01 0a 02 0a 02         ~.......
  10c578:	 0a 02 00 00                     ....


hd_quantize_intervals_LF:
  10c57c:	 7c f6 ff ff 84 09 00 00         |.......
  10c584:	 8c 1c 00 00 94 2f 00 00         ...../..
  10c58c:	 9e 42 00 00 aa 55 00 00         .B...U..
  10c594:	 b6 68 00 00 c6 7b 00 00         .h...{..
  10c59c:	 d6 8e 00 00 ea a1 00 00         ........
  10c5a4:	 02 b5 00 00 1e c8 00 00         ........
  10c5ac:	 3c db 00 00 60 ee 00 00         <...`...
  10c5b4:	 88 01 01 00 b4 14 01 00         ........
  10c5bc:	 e6 27 01 00 1e 3b 01 00         .'...;..
  10c5c4:	 5e 4e 01 00 a2 61 01 00         ^N...a..
  10c5cc:	 ee 74 01 00 42 88 01 00         .t..B...
  10c5d4:	 9c 9b 01 00 00 af 01 00         ........
  10c5dc:	 6c c2 01 00 e0 d5 01 00         l.......
  10c5e4:	 5e e9 01 00 e4 fc 01 00         ^.......
  10c5ec:	 76 10 02 00 10 24 02 00         v....$..
  10c5f4:	 b6 37 02 00 66 4b 02 00         .7..fK..
  10c5fc:	 22 5f 02 00 ea 72 02 00         "_...r..
  10c604:	 be 86 02 00 9e 9a 02 00         ........
  10c60c:	 8c ae 02 00 86 c2 02 00         ........
  10c614:	 8e d6 02 00 a2 ea 02 00         ........
  10c61c:	 c6 fe 02 00 fa 12 03 00         ........
  10c624:	 3a 27 03 00 8a 3b 03 00         :'...;..
  10c62c:	 ec 4f 03 00 5c 64 03 00         .O..\d..
  10c634:	 dc 78 03 00 6e 8d 03 00         .x..n...
  10c63c:	 10 a2 03 00 c4 b6 03 00         ........
  10c644:	 8a cb 03 00 62 e0 03 00         ....b...
  10c64c:	 4e f5 03 00 4a 0a 04 00         N...J...
  10c654:	 5c 1f 04 00 80 34 04 00         \....4..
  10c65c:	 ba 49 04 00 06 5f 04 00         .I..._..
  10c664:	 68 74 04 00 e0 89 04 00         ht......
  10c66c:	 6c 9f 04 00 10 b5 04 00         l.......
  10c674:	 c8 ca 04 00 98 e0 04 00         ........
  10c67c:	 80 f6 04 00 7e 0c 05 00         ....~...
  10c684:	 94 22 05 00 c4 38 05 00         ."...8..
  10c68c:	 0c 4f 05 00 6c 65 05 00         .O..le..
  10c694:	 e6 7b 05 00 7a 92 05 00         .{..z...
  10c69c:	 2a a9 05 00 f4 bf 05 00         *.......
  10c6a4:	 d8 d6 05 00 d8 ed 05 00         ........
  10c6ac:	 f6 04 06 00 2e 1c 06 00         ........
  10c6b4:	 84 33 06 00 f8 4a 06 00         .3...J..
  10c6bc:	 8a 62 06 00 3a 7a 06 00         .b..:z..
  10c6c4:	 08 92 06 00 f6 a9 06 00         ........
  10c6cc:	 04 c2 06 00 32 da 06 00         ....2...
  10c6d4:	 82 f2 06 00 f2 0a 07 00         ........
  10c6dc:	 84 23 07 00 38 3c 07 00         .#..8<..
  10c6e4:	 10 55 07 00 0a 6e 07 00         .U...n..
  10c6ec:	 2a 87 07 00 6c a0 07 00         *...l...
  10c6f4:	 d4 b9 07 00 62 d3 07 00         ....b...
  10c6fc:	 16 ed 07 00 f0 06 08 00         ........
  10c704:	 f2 20 08 00 1c 3b 08 00         . ...;..
  10c70c:	 70 55 08 00 ec 6f 08 00         pU...o..
  10c714:	 90 8a 08 00 60 a5 08 00         ....`...
  10c71c:	 5c c0 08 00 82 db 08 00         \.......
  10c724:	 d6 f6 08 00 58 12 09 00         ....X...
  10c72c:	 06 2e 09 00 e4 49 09 00         .....I..
  10c734:	 f0 65 09 00 2c 82 09 00         .e..,...
  10c73c:	 9a 9e 09 00 3a bb 09 00         ....:...
  10c744:	 0c d8 09 00 10 f5 09 00         ........
  10c74c:	 4a 12 0a 00 b8 2f 0a 00         J..../..
  10c754:	 5c 4d 0a 00 38 6b 0a 00         \M..8k..
  10c75c:	 4a 89 0a 00 96 a7 0a 00         J.......
  10c764:	 1a c6 0a 00 da e4 0a 00         ........
  10c76c:	 d4 03 0b 00 0c 23 0b 00         .....#..
  10c774:	 80 42 0b 00 34 62 0b 00         .B..4b..
  10c77c:	 28 82 0b 00 5c a2 0b 00         (...\...
  10c784:	 d2 c2 0b 00 8c e3 0b 00         ........
  10c78c:	 8a 04 0c 00 cc 25 0c 00         .....%..
  10c794:	 56 47 0c 00 2a 69 0c 00         VG..*i..
  10c79c:	 46 8b 0c 00 ac ad 0c 00         F.......
  10c7a4:	 5e d0 0c 00 60 f3 0c 00         ^...`...
  10c7ac:	 b0 16 0d 00 50 3a 0d 00         ....P:..
  10c7b4:	 44 5e 0d 00 8a 82 0d 00         D^......
  10c7bc:	 26 a7 0d 00 1a cc 0d 00         &.......
  10c7c4:	 66 f1 0d 00 0e 17 0e 00         f.......
  10c7cc:	 12 3d 0e 00 74 63 0e 00         .=..tc..
  10c7d4:	 36 8a 0e 00 5c b1 0e 00         6...\...
  10c7dc:	 e6 d8 0e 00 d6 00 0f 00         ........
  10c7e4:	 2e 29 0f 00 f4 51 0f 00         .)...Q..
  10c7ec:	 26 7b 0f 00 c8 a4 0f 00         &{......
  10c7f4:	 dc ce 0f 00 66 f9 0f 00         ....f...
  10c7fc:	 66 24 10 00 e2 4f 10 00         f$...O..
  10c804:	 dc 7b 10 00 56 a8 10 00         .{..V...
  10c80c:	 52 d5 10 00 d6 02 11 00         R.......
  10c814:	 e4 30 11 00 7e 5f 11 00         .0..~_..
  10c81c:	 aa 8e 11 00 6a be 11 00         ....j...
  10c824:	 c4 ee 11 00 b8 1f 12 00         ........
  10c82c:	 4e 51 12 00 88 83 12 00         NQ......
  10c834:	 6a b6 12 00 fc e9 12 00         j.......
  10c83c:	 40 1e 13 00 3a 53 13 00         @...:S..
  10c844:	 f2 88 13 00 6c bf 13 00         ....l...
  10c84c:	 ae f6 13 00 c0 2e 14 00         ........
  10c854:	 a4 67 14 00 62 a1 14 00         .g..b...
  10c85c:	 04 dc 14 00 8c 17 15 00         ........
  10c864:	 06 54 15 00 76 91 15 00         .T..v...
  10c86c:	 e6 cf 15 00 60 0f 16 00         ....`...
  10c874:	 ec 4f 16 00 92 91 16 00         .O......
  10c87c:	 5e d4 16 00 5a 18 17 00         ^...Z...
  10c884:	 90 5d 17 00 0e a4 17 00         .]......
  10c88c:	 de eb 17 00 0e 35 18 00         .....5..
  10c894:	 ae 7f 18 00 ca cb 18 00         ........
  10c89c:	 72 19 19 00 b8 68 19 00         r....h..
  10c8a4:	 ac b9 19 00 64 0c 1a 00         ....d...
  10c8ac:	 f2 60 1a 00 6a b7 1a 00         .`..j...
  10c8b4:	 e6 0f 1b 00 7c 6a 1b 00         ....|j..
  10c8bc:	 48 c7 1b 00 68 26 1c 00         H...h&..
  10c8c4:	 f8 87 1c 00 1c ec 1c 00         ........
  10c8cc:	 f4 52 1d 00 aa bc 1d 00         .R......
  10c8d4:	 68 29 1e 00 5a 99 1e 00         h)..Z...
  10c8dc:	 b4 0c 1f 00 aa 83 1f 00         ........
  10c8e4:	 7e fe 1f 00 6c 7d 20 00         ~...l} .
  10c8ec:	 c0 00 21 00 cc 88 21 00         ..!...!.
  10c8f4:	 e8 15 22 00 78 a8 22 00         ..".x.".
  10c8fc:	 f0 40 23 00 ca df 23 00         .@#...#.
  10c904:	 9a 85 24 00 fe 32 25 00         ..$..2%.
  10c90c:	 b4 e8 25 00 8e a7 26 00         ..%...&.
  10c914:	 86 70 27 00 bc 44 28 00         .p'..D(.
  10c91c:	 82 25 29 00 6a 14 2a 00         .%).j.*.
  10c924:	 56 13 2b 00 8c 24 2c 00         V.+..$,.
  10c92c:	 d6 4a 2d 00 a8 89 2e 00         .J-.....
  10c934:	 60 e5 2f 00 98 63 31 00         `./..c1.
  10c93c:	 a0 0b 33 00 3c e7 34 00         ..3.<.4.
  10c944:	 ba 03 37 00 a2 73 39 00         ..7..s9.
  10c94c:	 08 51 3c 00 2a c0 3f 00         .Q<.*.?.
  10c954:	 52 ef 43 00 be 0b 49 00         R.C...I.
  10c95c:	 da 26 4f 00 18 2b 56 00         .&O..+V.
  10c964:	 10 fb 5d 00 06 8c 66 00         ..]...f.
  10c96c:	 28 e4 6f 00 20 12 7a 00         (.o. .z.
  10c974:	 88 28 85 00 48 3c 91 00         .(..H<..
  10c97c:	 54 64 9e 00                     Td..


exception_irq_handler:
  10c980:    58 e9 2f 38       	[--sp] = {ssp, usp, icfg, psr, rets, retx, rete, reti}			  ## startup.S:83:0
  10c984:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## startup.S:84:0
  10c988:    64 e0 00 0e       	r0 = sp			  ## startup.S:85:0
  10c98c:    80 ea c9 00       	call 0x192 <exception_analyze : 10cb22 >			  ## startup.S:86:0
  10c990:    f7 9f             	goto -0x2 <exception_irq_handler+0x10 : 10c990 >			  ## startup.S:88:0


the_debug_isr:
  10c992:    d8 e8 01 00       	[--sp] = {r0}			  ## debug_stub.S:16:0
  10c996:    64 e0 00 0e       	r0 = sp			  ## debug_stub.S:17:0
  10c99a:    ee ff 8c bc 02 00 	sp = 0x2bc8c			  ## debug_stub.S:18:0
  10c9a0:    58 e9 ff 7f       	[--sp] = {sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti}			  ## debug_stub.S:20:0
  10c9a4:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## debug_stub.S:21:0
  10c9a8:    01 60             	r1 = [r0+0x0] 			  ## debug_stub.S:41:0
  10c9aa:    81 20             	[sp] = r1			  ## debug_stub.S:42:0
  10c9ac:    08 84             	r0 = r0 + 0x4			  ## debug_stub.S:44:0
  10c9ae:    80 3e             	[sp+120] = r0			  ## debug_stub.S:45:0
  10c9b0:    64 e0 00 0e       	r0 = sp			  ## debug_stub.S:46:0
  10c9b4:    c1 ff 80 e0 1b 00 	r1 = 0x1be080 <__stub_VecMinScalar_float_c_f_c+0xAE084 : 1be080 >			  ## debug_stub.S:47:0
  10c9ba:    90 61             	[r1+0x4] = r0			  ## debug_stub.S:48:0
  10c9bc:    12 60             	r2 = [r1+0x0] 			  ## debug_stub.S:50:0
  10c9be:    ba 3f             	r2 &= 0x7fffffff			  ## debug_stub.S:51:0
  10c9c0:    92 60             	[r1+0x0] = r2			  ## debug_stub.S:52:0
  10c9c2:    4a 20             	r2 = 0x20			  ## debug_stub.S:55:0
  10c9c4:    00 00             	nop			  ## debug_stub.S:57:0
  10c9c6:    02 ea fd ff       	if (--r2 != 0) goto -0x6 <the_debug_isr+0x32 : 10c9c4 >			  ## debug_stub.S:58:0
  10c9ca:    10 60             	r0 = [r1+0x0] 			  ## debug_stub.S:59:0
  10c9cc:    50 e8 f9 f9       	if ((r0 & 0x80000000) == 0) goto -0xe <the_debug_isr+0x30 : 10c9c2 >			  ## debug_stub.S:61:0
  10c9d0:    d4 e8 ff ff       	{r15-r0} = [sp++]			  ## debug_stub.S:64:0
  10c9d4:    50 e9 ff 7f       	{sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti} = [sp++]			  ## debug_stub.S:65:0
  10c9d8:    83 00             	rte			  ## debug_stub.S:67:0


_startup:
  10c9da:    ed ff 20 8c 02 00 	ssp = 0x28c20			  ## startup.S:31:0
  10c9e0:    41 14             	sp = ssp			  ## startup.S:32:0
  10c9e2:    ec ff 20 90 02 00 	usp = 0x29020			  ## startup.S:33:0
  10c9e8:    80 14             	r1_r0 = 0			  ## startup.S:34:0
  10c9ea:    82 14             	r3_r2 = 0			  ## startup.S:35:0
  10c9ec:    84 14             	r5_r4 = 0			  ## startup.S:36:0
  10c9ee:    86 14             	r7_r6 = 0			  ## startup.S:37:0
  10c9f0:    88 14             	r9_r8 = 0			  ## startup.S:38:0
  10c9f2:    8a 14             	r11_r10 = 0			  ## startup.S:39:0
  10c9f4:    8c 14             	r13_r12 = 0			  ## startup.S:40:0
  10c9f6:    8e 14             	r15_r14 = 0			  ## startup.S:41:0
  10c9f8:    64 e0 80 05       	psr = r0			  ## startup.S:43:0
  10c9fc:    64 e0 80 01       	rete = r0			  ## startup.S:44:0
  10ca00:    64 e0 80 02       	retx = r0			  ## startup.S:45:0
  10ca04:    64 e0 80 03       	rets = r0			  ## startup.S:46:0
  10ca08:    64 e0 80 00       	reti = r0			  ## startup.S:47:0
  10ca0c:    80 ea 50 0a       	call 0x14a0 <switch_to_hrc_asm : 10deb0 >			  ## startup.S:48:0
  10ca10:    e0 ff 18 ca 10 00 	reti = 0x10ca18			  ## startup.S:50:0
  10ca16:    81 00             	rti			  ## startup.S:51:0


_user_mode:
  10ca18:    80 ea 27 16       	call 0x2c4e <p11_boot : 10f66a >			  ## startup.S:54:0
  10ca1c:    80 ea 4d 00       	call 0x9a <boot_poweroff : 10caba >			  ## startup.S:55:0
  10ca20:    40 20             	r0 = 0x0			  ## startup.S:56:0
  10ca22:    c1 ff 20 88 02 00 	r1 = 0x28820 <stack_bss_begin : 28820 >			  ## startup.S:57:0
  10ca28:    c2 ff 00 08 00 00 	r2 = 0x800 <stack_bss_size : 800 >			  ## startup.S:58:0
  10ca2e:    a2 a2             	r2 = r2 >> 0x2			  ## startup.S:59:0
  10ca30:    02 03             	rep 0x2 r2 {			  ## startup.S:61:0
  10ca32:    90 05             		[r1++=0x4] = r0
                               	}			  ## startup.S:62:0
  10ca34:    02 fc fc 01       	if (r2 > 0x0) goto -0x8 <_user_mode+0x18 : 10ca30 >			  ## startup.S:63:0
  10ca38:    40 20             	r0 = 0x0			  ## startup.S:66:0
  10ca3a:    c1 ff c0 93 02 00 	r1 = 0x293c0 <var_bss_begin : 293c0 >			  ## startup.S:67:0
  10ca40:    c2 ff 08 01 00 00 	r2 = 0x108 <var_bss_size : 108 >			  ## startup.S:68:0
  10ca46:    a2 a2             	r2 = r2 >> 0x2			  ## startup.S:69:0
  10ca48:    02 03             	rep 0x2 r2 {			  ## startup.S:71:0
  10ca4a:    90 05             		[r1++=0x4] = r0
                               	}			  ## startup.S:72:0
  10ca4c:    02 fc fc 01       	if (r2 > 0x0) goto -0x8 <_user_mode+0x30 : 10ca48 >			  ## startup.S:73:0
  10ca50:    80 ea 02 01       	call 0x204 <p33_softflag_boot : 10cc58 >			  ## startup.S:76:0
  10ca54:    c0 ea ef 08       	goto 0x11de <main : 10dc36 >			  ## startup.S:77:0


write_32:
  10ca58:    42 20             	r2 = 0x0			  ## boot_poweroff.c:39:0
  10ca5a:    04 84             	goto 0x8 <write_32+0xC : 10ca64 >			  ## boot_poweroff.c:39:0
  10ca5c:    d8 ee 01 12       	b[r0+r2] = r1			  ## boot_poweroff.c:41:14
  10ca60:    c2 21             	r2 += 0x1			  ## boot_poweroff.c:40:29
  10ca62:    91 a8             	r1 = r1 >> 0x8			  ## boot_poweroff.c:42:11
  10ca64:    82 f8 fa 09       	if (r2 != 0x4) goto -0xc <write_32+0x4 : 10ca5c >			  ## boot_poweroff.c:40:5
  10ca68:    80 00             	rts			  ## boot_poweroff.c:44:1


lp_signature_set:
  10ca6a:    76 04             	[--sp] = {rets, r6-r4}			  ## boot_poweroff.c:57:0
  10ca6c:    25 16             	r5 = r2			  ## boot_poweroff.c:57:0
  10ca6e:    16 16             	r6 = r1			  ## boot_poweroff.c:57:0
  10ca70:    04 16             	r4 = r0			  ## boot_poweroff.c:57:0
  10ca72:    c0 ff fc 0f 1a 00 	r0 = 0x1a0ffc <__stub_VecMinScalar_float_c_f_c+0x91000 : 1a0ffc >			  ## boot_poweroff.c:65:5
  10ca78:    41 16             	r1 = r4			  ## boot_poweroff.c:65:5
  10ca7a:    71 8e             	call -0x24 <write_32 : 10ca58 >			  ## boot_poweroff.c:65:5
  10ca7c:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:66:5
  10ca7e:    61 16             	r1 = r6			  ## boot_poweroff.c:66:5
  10ca80:    71 8b             	call -0x2a <write_32 : 10ca58 >			  ## boot_poweroff.c:66:5
  10ca82:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:67:5
  10ca84:    51 16             	r1 = r5			  ## boot_poweroff.c:67:5
  10ca86:    71 88             	call -0x30 <write_32 : 10ca58 >			  ## boot_poweroff.c:67:5
  10ca88:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:68:5
  10ca8a:    31 16             	r1 = r3			  ## boot_poweroff.c:68:5
  10ca8c:    71 85             	call -0x36 <write_32 : 10ca58 >			  ## boot_poweroff.c:68:5
  10ca8e:    f8 3c             	r0 += -0x4			  ## boot_poweroff.c:69:5
  10ca90:    c1 ff ef 27 12 ab 	r1 = 0xab1227ef <__stub_VecMinScalar_float_c_f_c+0xAB0127F2 : ab1227ee >			  ## boot_poweroff.c:69:5
  10ca96:    71 80             	call -0x40 <write_32 : 10ca58 >			  ## boot_poweroff.c:69:5
  10ca98:    68 2f             	r0 = 0xaf			  ## boot_poweroff.c:71:5
  10ca9a:    c8 47             	b[r4+0x7] = r0			  ## boot_poweroff.c:71:5
  10ca9c:    68 36             	r0 = 0xb6			  ## boot_poweroff.c:71:5
  10ca9e:    c8 46             	b[r4+0x6] = r0			  ## boot_poweroff.c:71:5
  10caa0:    78 34             	r0 = 0xf4			  ## boot_poweroff.c:71:5
  10caa2:    c8 45             	b[r4+0x5] = r0			  ## boot_poweroff.c:71:5
  10caa4:    70 26             	r0 = 0xc6			  ## boot_poweroff.c:71:5
  10caa6:    c8 44             	b[r4+0x4] = r0			  ## boot_poweroff.c:71:5
  10caa8:    70 39             	r0 = 0xd9			  ## boot_poweroff.c:71:5
  10caaa:    c8 43             	b[r4+0x3] = r0			  ## boot_poweroff.c:71:5
  10caac:    70 2b             	r0 = 0xcb			  ## boot_poweroff.c:71:5
  10caae:    c8 42             	b[r4+0x2] = r0			  ## boot_poweroff.c:71:5
  10cab0:    78 2c             	r0 = 0xec			  ## boot_poweroff.c:71:5
  10cab2:    c8 41             	b[r4+0x1] = r0			  ## boot_poweroff.c:71:5
  10cab4:    68 3f             	r0 = 0xbf			  ## boot_poweroff.c:71:5
  10cab6:    c8 40             	b[r4+0x0] = r0			  ## boot_poweroff.c:71:5
  10cab8:    56 04             	{pc, r6-r4} = [sp++]			  ## boot_poweroff.c:72:1


boot_poweroff:
  10caba:    74 04             	[--sp] = {rets, r4}			  ## boot_poweroff.c:74:0
  10cabc:    c0 ff 8a 1f 1a 00 	r0 = 0x1a1f8a <__stub_VecMinScalar_float_c_f_c+0x91F8E : 1a1f8a >			  ## boot_poweroff.c:75:9
  10cac2:    54 ee 00 00       	r0 = b[r0+0x0] (s)			  ## boot_poweroff.c:75:9
  10cac6:    80 fd 2b 00       	ifs (r0 < 0x0) goto 0x56 <boot_poweroff+0x66 : 10cb20 >			  ## boot_poweroff.c:75:9
  10caca:    c0 ff ec 0f 1a 00 	r0 = 0x1a0fec <__stub_VecMinScalar_float_c_f_c+0x90FF0 : 1a0fec >			  ## boot_poweroff.c:79:9
  10cad0:    80 ea 07 16       	call 0x2c0e <read_32 : 10f6e2 >			  ## boot_poweroff.c:79:9
  10cad4:    c1 ff ef 27 12 ab 	r1 = 0xab1227ef <__stub_VecMinScalar_float_c_f_c+0xAB0127F2 : ab1227ee >			  ## boot_poweroff.c:79:33
  10cada:    81 e8 21 00       	if (r0 != r1) goto 0x42 <boot_poweroff+0x66 : 10cb20 >			  ## boot_poweroff.c:79:33
  10cade:    c0 ff c0 00 1e 00 	r0 = 0x1e00c0 <__stub_VecMinScalar_float_c_f_c+0xD00C4 : 1e00c0 >			  ## boot_poweroff.c:83:17
  10cae4:    00 60             	r0 = [r0+0x0] 			  ## boot_poweroff.c:83:17
  10cae6:    80 f8 1b 80       	if (r0 != 0x40) goto 0x36 <boot_poweroff+0x66 : 10cb20 >			  ## boot_poweroff.c:83:17
  10caea:    c0 ff 38 18 1a 00 	r0 = 0x1a1838 <__stub_VecMinScalar_float_c_f_c+0x9183C : 1a1838 >			  ## boot_poweroff.c:87:11
  10caf0:    08 40             	r0 = b[r0+0x0] (u)			  ## boot_poweroff.c:87:11
  10caf2:    50 e8 15 08       	if ((r0 & 0x2) == 0) goto 0x2a <boot_poweroff+0x66 : 10cb20 >			  ## boot_poweroff.c:87:11
  10caf6:    c0 ff fc 0f 1a 00 	r0 = 0x1a0ffc <__stub_VecMinScalar_float_c_f_c+0x91000 : 1a0ffc >			  ## boot_poweroff.c:91:32
  10cafc:    80 ea f1 15       	call 0x2be2 <read_32 : 10f6e2 >			  ## boot_poweroff.c:91:32
  10cb00:    04 16             	r4 = r0			  ## boot_poweroff.c:91:32
  10cb02:    c1 ff 08 f7 10 00 	r1 = 0x10f708 <nvram_boot_tag : 10f708 >			  ## boot_poweroff.c:93:9
  10cb08:    42 28             	r2 = 0x8			  ## boot_poweroff.c:93:9
  10cb0a:    bf ea fd be       	call -0x8206 <memcmp : 104908 >			  ## boot_poweroff.c:93:9
  10cb0e:    80 48             	if (r0 != 0) goto 0x10 <boot_poweroff+0x66 : 10cb20 >			  ## boot_poweroff.c:93:9
  10cb10:    50 35             	r0 = 0x55			  ## boot_poweroff.c:97:23
  10cb12:    c8 40             	b[r4+0x0] = r0			  ## boot_poweroff.c:97:23
  10cb14:    c0 ff f8 0f 1a 00 	r0 = 0x1a0ff8 <__stub_VecMinScalar_float_c_f_c+0x90FFC : 1a0ff8 >			  ## boot_poweroff.c:98:21
  10cb1a:    80 ea e2 15       	call 0x2bc4 <read_32 : 10f6e2 >			  ## boot_poweroff.c:98:21
  10cb1e:    c0 00             	call r0			  ## boot_poweroff.c:99:5
  10cb20:    54 04             	{pc, r4} = [sp++]			  ## boot_poweroff.c:100:1


exception_analyze:
  10cb22:    c1 ff ec bc 02 00 	r1 = 0x2bcec <exception_irq_hook : 2bcec >			  ## boot_init.c:41:0
  10cb28:    11 60             	r1 = [r1+0x0] 			  ## boot_init.c:42:9
  10cb2a:    b1 e8 00 00       	if (r1 != 0x0) {			  ## boot_init.c:42:9
  10cb2e:    c1 00             		call r1
                               	}			  ## boot_init.c:43:9
  10cb30:    bf ea 59 c0       	call -0x7f4e <chip_reset : 104be6 >			  ## boot_init.c:47:5


HWI_Install:
  10cb34:    74 04             	[--sp] = {rets, r4}			  ## irq.c:15:0
  10cb36:    c3 ff 00 bf 02 00 	r3 = 0x2bf00 <_IRQ_MEM_ADDR : 2bf00 >			  ## irq.c:19:5
  10cb3c:    d8 ec 3b 10       	[r3+r0<<2] = r1			  ## irq.c:19:20
  10cb40:    01 a2             	r1 = r0 << 0x2			  ## irq.c:17:41
  10cb42:    61 e1 1c 10       	r1 = r1 & 0x1C			  ## irq.c:17:41
  10cb46:    43 2f             	r3 = 0xf			  ## irq.c:17:41
  10cb48:    13 1a             	r3 <<= r1			  ## irq.c:24:35
  10cb4a:    80 a3             	r0 = r0 >> 0x3			  ## irq.c:16:36
  10cb4c:    c4 ff 00 e1 1b 00 	r4 = 0x1be100 <__stub_VecMinScalar_float_c_f_c+0xAE104 : 1be100 >			  ## irq.c:28:27
  10cb52:    a4 e1 14 01       	r4 <= insert(r0, p:0x2, l:0x5)			  ## irq.c:28:27
  10cb56:    bf ea 9b c0       	call -0x7eca <local_irq_disable : 104c90 >			  ## irq.c:22:5
  10cb5a:    40 60             	r0 = [r4+0x0] 			  ## irq.c:28:27
  10cb5c:    90 e1 03 03       	r0 = r0 & ~r3			  ## irq.c:28:46
  10cb60:    22 a1             	r2 = r2 << 0x1			  ## irq.c:23:49
  10cb62:    62 e1 0e 20       	r2 = r2 & 0xE			  ## irq.c:23:49
  10cb66:    32 20             	r2 |= 0x1			  ## irq.c:23:55
  10cb68:    c8 e1 20 11       	r1 = r2 << r1			  ## irq.c:25:39
  10cb6c:    10 19             	r0 |= r1			  ## irq.c:28:58
  10cb6e:    c0 60             	[r4+0x0] = r0			  ## irq.c:28:24
  10cb70:    bf ea 95 c0       	call -0x7ed6 <local_irq_enable : 104c9e >			  ## irq.c:30:5
  10cb74:    54 04             	{pc, r4} = [sp++]			  ## irq.c:31:1


udelay:
  10cb76:    c1 ff 00 04 1e 00 	r1 = 0x1e0400 <__stub_VecMinScalar_float_c_f_c+0xD0404 : 1e0400 >			  ## timer.c:11:0
  10cb7c:    40 ea 80 1c       	[r1+0x0] = 0x4000			  ## timer.c:18:20
  10cb80:    41 ea 00 10       	[r1+0x4] = 0x0			  ## timer.c:19:20
  10cb84:    e0 e1 05 00       	r0 = r0 * 0x5			  ## timer.c:20:44
  10cb88:    40 f0 11 10       	r0 = 0x1011  # <usb_code_size+0x4D5 : 1010 >			  ## timer.c:21:20
  10cb8c:    90 62             		 [r1+0x8] = r0			  ## timer.c:20:20
  10cb8e:    90 60             	[r1+0x0] = r0			  ## timer.c:21:20
  10cb90:    10 60             	r0 = [r1+0x0] 			  ## timer.c:22:24
  10cb92:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <udelay+0x1A : 10cb90 >			  ## timer.c:22:5
  10cb96:    40 ea 80 1c       	[r1+0x0] = 0x4000			  ## timer.c:23:20
  10cb9a:    80 00             	rts			  ## timer.c:25:1


spi_cs_pu:
  10cb9c:    74 04             	[--sp] = {rets, r4}			  ## spi0.c:217:0
  10cb9e:    c2 ff 10 53 1e 00 	r2 = 0x1e5310 <__stub_VecMinScalar_float_c_f_c+0xD5314 : 1e5310 >			  ## spi0.c:217:0
  10cba4:    23 60             	r3 = [r2+0x0] 			  ## spi0.c:217:0
  10cba6:    b0 e8 01 60       	if (r0 != 0x1) {			  ## spi0.c:217:0
  10cbaa:    40 21             		r0 = 0x1			  ## spi0.c:217:0
  10cbac:    14 3e             		r4 = -0x2
                               	} else {			  ## spi0.c:217:0
  10cbae:    40 28             		r0 = 0x8			  ## spi0.c:217:0
  10cbb0:    14 37             		r4 = -0x9
                               	}			  ## spi0.c:217:0
  10cbb2:    b4 19             	r4 &= r3			  ## spi0.c:217:0
  10cbb4:    30 19             	r0 |= r3			  ## spi0.c:217:0
  10cbb6:    31 e8 00 00       	if (r1 == 0x0) {			  ## spi0.c:217:0
  10cbba:    40 16             		r0 = r4
                               	}			  ## spi0.c:217:0
  10cbbc:    a0 60             	[r2+0x0] = r0			  ## spi0.c:217:0
  10cbbe:    54 04             	{pc, r4} = [sp++]			  ## spi0.c:231:1


mdelay:
  10cbc0:    10 04             	[--sp] = rets			  ## timer.c:28:0
  10cbc2:    02 16             	r2 = r0			  ## timer.c:28:0
  10cbc4:    04 84             	goto 0x8 <mdelay+0xE : 10cbce >			  ## timer.c:28:0
  10cbc6:    40 e0 e8 03       	r0 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >			  ## timer.c:30:9
  10cbca:    61 95             	call -0x56 <udelay : 10cb76 >			  ## timer.c:30:9
  10cbcc:    fa 3f             	r2 += -0x1			  ## timer.c:29:5
  10cbce:    f2 5b             	if (r2 != 0) goto -0xa <mdelay+0x6 : 10cbc6 >			  ## timer.c:29:5
  10cbd0:    00 04             	pc = [sp++]			  ## timer.c:32:1


flash_poweron:
  10cbd2:    76 04             	[--sp] = {rets, r6-r4}			  ## norflash.c:388:0
  10cbd4:    14 16             	r4 = r1			  ## norflash.c:388:0
  10cbd6:    05 16             	r5 = r0			  ## norflash.c:388:0
  10cbd8:    c6 ff 00 53 1e 00 	r6 = 0x1e5300 <__stub_VecMinScalar_float_c_f_c+0xD5304 : 1e5300 >			  ## norflash.c:388:0
  10cbde:    55 e8 1c 00       	if ((r5 & 0x1) == 0) goto 0x38 <flash_poweron+0x48 : 10cc1a >			  ## norflash.c:388:0
  10cbe2:    60 60             	r0 = [r6+0x0] 			  ## norflash.c:394:23
  10cbe4:    50 e8 37 22       	if ((r0 & 0x10) != 0) goto 0x6e <flash_poweron+0x84 : 10cc56 >			  ## norflash.c:394:23
  10cbe8:    40 21             	r0 = 0x1			  ## norflash.c:397:9
  10cbea:    41 21             	r1 = 0x1			  ## norflash.c:397:9
  10cbec:    61 97             	call -0x52 <spi_cs_pu : 10cb9c >			  ## norflash.c:397:9
  10cbee:    c5 ef 10 60       	[r6+0x14] &= 0xFFFFFFEF			  ## norflash.c:399:23
  10cbf2:    04 ef 10 60       	[r6+0x10] |= 0x10			  ## norflash.c:400:23
  10cbf6:    02 ef 10 60       	[r6+0x8] |= 0x10			  ## norflash.c:401:23
  10cbfa:    c7 ef 10 60       	[r6+0x1c] &= 0xFFFFFFEF			  ## norflash.c:403:23
  10cbfe:    c6 ef 10 60       	[r6+0x18] &= 0xFFFFFFEF			  ## norflash.c:404:23
  10cc02:    00 ef 10 60       	[r6+0x0] |= 0x10			  ## norflash.c:405:23
  10cc06:    c2 ef 10 60       	[r6+0x8] &= 0xFFFFFFEF			  ## norflash.c:406:23
  10cc0a:    40 34             	r0 = 0x14			  ## norflash.c:408:9
  10cc0c:    51 94             	call -0x98 <udelay : 10cb76 >			  ## norflash.c:408:9
  10cc0e:    07 ef 10 60       	[r6+0x1c] |= 0x10			  ## norflash.c:410:23
  10cc12:    06 ef 10 60       	[r6+0x18] |= 0x10			  ## norflash.c:411:23
  10cc16:    40 16             	r0 = r4			  ## norflash.c:412:9
  10cc18:    61 93             	call -0x5a <mdelay : 10cbc0 >			  ## norflash.c:412:9
  10cc1a:    55 e8 1c 08       	if ((r5 & 0x2) == 0) goto 0x38 <flash_poweron+0x84 : 10cc56 >
  10cc1e:    60 60             	r0 = [r6+0x0] 			  ## norflash.c:417:23
  10cc20:    50 e8 19 2a       	if ((r0 & 0x20) != 0) goto 0x32 <flash_poweron+0x84 : 10cc56 >			  ## norflash.c:417:23
  10cc24:    40 22             	r0 = 0x2			  ## norflash.c:420:9
  10cc26:    41 21             	r1 = 0x1			  ## norflash.c:420:9
  10cc28:    51 99             	call -0x8e <spi_cs_pu : 10cb9c >			  ## norflash.c:420:9
  10cc2a:    c5 ef 20 60       	[r6+0x14] &= 0xFFFFFFDF			  ## norflash.c:422:23
  10cc2e:    04 ef 20 60       	[r6+0x10] |= 0x20			  ## norflash.c:423:23
  10cc32:    02 ef 20 60       	[r6+0x8] |= 0x20			  ## norflash.c:424:23
  10cc36:    c7 ef 20 60       	[r6+0x1c] &= 0xFFFFFFDF			  ## norflash.c:426:23
  10cc3a:    c6 ef 20 60       	[r6+0x18] &= 0xFFFFFFDF			  ## norflash.c:427:23
  10cc3e:    00 ef 20 60       	[r6+0x0] |= 0x20			  ## norflash.c:428:23
  10cc42:    c2 ef 20 60       	[r6+0x8] &= 0xFFFFFFDF			  ## norflash.c:429:23
  10cc46:    40 34             	r0 = 0x14			  ## norflash.c:431:9
  10cc48:    41 96             	call -0xd4 <udelay : 10cb76 >			  ## norflash.c:431:9
  10cc4a:    07 ef 20 60       	[r6+0x1c] |= 0x20			  ## norflash.c:433:23
  10cc4e:    06 ef 20 60       	[r6+0x18] |= 0x20			  ## norflash.c:434:23
  10cc52:    40 16             	r0 = r4			  ## norflash.c:435:9
  10cc54:    51 95             	call -0x96 <mdelay : 10cbc0 >			  ## norflash.c:435:9
  10cc56:    56 04             	{pc, r6-r4} = [sp++]			  ## norflash.c:437:1


p33_softflag_boot:
  10cc58:    76 04             	[--sp] = {rets, r6-r4}			  ## boot_init.c:196:0
  10cc5a:    64 e0 00 0b       	r0 = icfg			  ## boot_init.c:198:5
  10cc5e:    30 29             	r0 |= 0x200			  ## boot_init.c:199:9
  10cc60:    64 e0 80 0b       	icfg = r0			  ## boot_init.c:200:5
  10cc64:    bf ea 0e c0       	call -0x7fe4 <os_code_begin : 104c84 >			  ## boot_init.c:202:5
  10cc68:    bf ea 12 c0       	call -0x7fdc <local_irq_disable : 104c90 >			  ## boot_init.c:203:5
  10cc6c:    bf ea 17 c0       	call -0x7fd2 <local_irq_enable : 104c9e >			  ## boot_init.c:204:5
  10cc70:    c0 ff 04 bc 02 00 	r0 = 0x2bc04 <boot_arg_list : 2bc04 >			  ## clock.c:247:27
  10cc76:    44 23             	r4 = 0x3			  ## clock.c:241:28
  10cc78:    8c 41             	b[r0+0x1] = r4			  ## clock.c:241:28
  10cc7a:    c1 ff 00 2d 31 01 	r1 = 0x1312d00 <__stub_VecMinScalar_float_c_f_c+0x1202D04 : 1312d00 >			  ## clock.c:245:28
  10cc80:    81 61             	[r0+0x4] = r1			  ## clock.c:245:28
  10cc82:    81 62             	[r0+0x8] = r1			  ## clock.c:247:27
  10cc84:    c0 ff ec bc 02 00 	r0 = 0x2bcec <exception_irq_hook : 2bcec >			  ## boot_init.c:53:24
  10cc8a:    45 20             	r5 = 0x0			  ## boot_init.c:53:24
  10cc8c:    85 60             	[r0+0x0] = r5			  ## boot_init.c:53:24
  10cc8e:    c1 ff 80 c9 10 00 	r1 = 0x10c980 <exception_irq_handler : 10c980 >			  ## boot_init.c:54:5
  10cc94:    40 21             	r0 = 0x1			  ## boot_init.c:54:5
  10cc96:    42 27             	r2 = 0x7			  ## boot_init.c:54:5
  10cc98:    46 21             	r6 = 0x1			  ## boot_init.c:54:5
  10cc9a:    bf ea 4b ff       	call -0x16a <HWI_Install : 10cb34 >			  ## boot_init.c:54:5
  10cc9e:    c0 ff 00 e2 1b 00 	r0 = 0x1be200 <__stub_VecMinScalar_float_c_f_c+0xAE204 : 1be200 >			  ## boot_init.c:55:24
  10cca4:    85 60             	[r0+0x0] = r5			  ## boot_init.c:55:24
  10cca6:    c0 ff 11 18 1a 00 	r0 = 0x1a1811 <__stub_VecMinScalar_float_c_f_c+0x91814 : 1a1810 >			  ## boot_init.c:55:24
  10ccac:    54 ee 0f 31       	r3 = b[r0+0x1f] (s)			  ## boot_init.c:212:9
  10ccb0:    c2 ff f8 bb 02 00 	r2 = 0x2bbf8 <g_boot_soft_flag : 2bbf8 >			  ## boot_init.c:212:9
  10ccb6:    c1 ff 00 bc 02 00 	r1 = 0x2bc00 <g_spi_boot_port : 2bc00 >			  ## boot_init.c:212:9
  10ccbc:    f3 fe 20 fe       	ifs (r3 <= -0x1) goto 0x40 <p33_softflag_boot+0xA8 : 10cd00 >			  ## boot_init.c:212:9
  10ccc0:    04 f1 27 00       	r4 = r0 + 0x27  #
  10ccc4:    a5 61             		 [r2+0x4] = r5			  ## boot_init.c:219:34
  10ccc6:    4b 40             	r3 = b[r4+0x0] (u)			  ## boot_init.c:220:40
  10ccc8:    ab 40             	b[r2+0x0] = r3			  ## boot_init.c:220:38
  10ccca:    4c 41             	r4 = b[r4+0x1] (u)			  ## boot_init.c:221:40
  10cccc:    04 f1 39 00       	r4 = r0 + 0x39  #			  ## boot_init.c:221:40
  10ccd0:    ac 41             		 b[r2+0x1] = r4			  ## boot_init.c:221:38
  10ccd2:    4d 40             	r5 = b[r4+0x0] (u)			  ## boot_init.c:222:40
  10ccd4:    ad 42             	b[r2+0x2] = r5			  ## boot_init.c:222:38
  10ccd6:    4c 41             	r4 = b[r4+0x1] (u)			  ## boot_init.c:223:40
  10ccd8:    b4 f1 04 31       	r4 = uextra(r3, p:0x2, l:0x1)  #			  ## boot_init.c:71:9
  10ccdc:    ac 43             		 b[r2+0x3] = r4			  ## boot_init.c:71:9
  10ccde:    c4 21             	r4 += 0x1			  ## boot_init.c:71:9
  10cce0:    9c 40             	b[r1+0x0] = r4			  ## boot_init.c:66:21
  10cce2:    53 e8 0a 20       	if ((r3 & 0x10) == 0) goto 0x14 <p33_softflag_boot+0xA2 : 10ccfa >			  ## boot_init.c:66:21
  10cce6:    01 e1 84 00       	r1 = r0 + 0x84
  10ccea:    1b 48             	r3 = b[r1+0x8] (u)			  ## boot_init.c:233:22
  10ccec:    33 27             	r3 |= 0x80			  ## boot_init.c:233:22
  10ccee:    9b 48             	b[r1+0x8] = r3			  ## boot_init.c:233:22
  10ccf0:    1b 40             	r3 = b[r1+0x0] (u)			  ## boot_init.c:234:21
  10ccf2:    73 e1 38 30       	r3 = r3 & 0xFFFFFFC7			  ## boot_init.c:234:21
  10ccf6:    9b 40             	b[r1+0x0] = r3			  ## boot_init.c:234:21
  10ccf8:    2b 40             	r3 = b[r2+0x0] (u)			  ## boot_init.c:234:21
  10ccfa:    53 e8 07 00       	if ((r3 & 0x1) == 0) goto 0xe <p33_softflag_boot+0xB4 : 10cd0c >
  10ccfe:    04 8d             	goto 0x1a <p33_softflag_boot+0xC2 : 10cd1a >
  10cd00:    a6 61             	[r2+0x4] = r6			  ## boot_init.c:213:34
  10cd02:    ad 40             	b[r2+0x0] = r5			  ## boot_init.c:214:38
  10cd04:    ad 41             	b[r2+0x1] = r5			  ## boot_init.c:215:38
  10cd06:    ad 42             	b[r2+0x2] = r5			  ## boot_init.c:216:38
  10cd08:    ad 43             	b[r2+0x3] = r5			  ## boot_init.c:216:38
  10cd0a:    9c 40             	b[r1+0x0] = r4			  ## boot_init.c:66:21
  10cd0c:    41 3c             	r1 = 0x1c			  ## wdt.c:5:18
  10cd0e:    03 e1 77 07       	r3 = r0 + 0x777			  ## wdt.c:5:18
  10cd12:    b9 40             	b[r3+0x0] = r1			  ## wdt.c:5:18
  10cd14:    41 20             	r1 = 0x0			  ## wdt.c:6:18
  10cd16:    b9 41             	b[r3+0x1] = r1			  ## wdt.c:6:18
  10cd18:    2b 40             	r3 = b[r2+0x0] (u)			  ## wdt.c:6:18
  10cd1a:    53 e8 0a 18       	if ((r3 & 0x8) == 0) goto 0x14 <p33_softflag_boot+0xDA : 10cd32 >
  10cd1e:    09 40             	r1 = b[r0+0x0] (u)			  ## boot_init.c:244:21
  10cd20:    71 e1 05 10       	r1 = r1 & 0xFFFFFFFA			  ## boot_init.c:244:21
  10cd24:    89 40             	b[r0+0x0] = r1			  ## boot_init.c:244:21
  10cd26:    09 40             	r1 = b[r0+0x0] (u)			  ## boot_init.c:245:21
  10cd28:    31 20             	r1 |= 0x1			  ## boot_init.c:245:21
  10cd2a:    89 40             	b[r0+0x0] = r1			  ## boot_init.c:245:21
  10cd2c:    09 40             	r1 = b[r0+0x0] (u)			  ## boot_init.c:246:21
  10cd2e:    31 22             	r1 |= 0x4			  ## boot_init.c:246:21
  10cd30:    89 40             	b[r0+0x0] = r1			  ## boot_init.c:246:21
  10cd32:    20 61             	r0 = [r2+0x4] 			  ## boot_init.c:250:26
  10cd34:    b0 4f             	if (r0 != 0) goto 0xde <.GJTIE13_0_0_+0xC2 : 10ce14 >			  ## boot_init.c:250:26
  10cd36:    28 41             	r0 = b[r2+0x1] (u)			  ## boot_init.c:156:53
  10cd38:    80 a5             	r0 = r0 >> 0x5			  ## boot_init.c:156:53
  10cd3a:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## boot_init.c:83:5
  10cd3e:    c0 ff 00 59 1e 00 	r0 = 0x1e5900 <__stub_VecMinScalar_float_c_f_c+0xD5904 : 1e5900 >			  ## boot_init.c:83:5
  10cd44:    01 fc 0c 0c       	if (r1 > 0x6) goto 0x18 <.GJTIE13_0_0_+0xE : 10cd60 >			  ## boot_init.c:83:5
  10cd48:    01 01             	tbb [r1]


.GJTIS13_0_0_:
  10cd4a:    04     < 4 : 0x4 >
  10cd4b:    12     < 18 : 0x12 >
  10cd4c:    19     < 25 : 0x19 >
  10cd4d:    1c     < 28 : 0x1C >
  10cd4e:    21     < 33 : 0x21 >
  10cd4f:    26     < 38 : 0x26 >
  10cd50:    2d     < 45 : 0x2D >
  10cd51:    00     < 0 : 0x0 >
  10cd52:    04 ef 01 00       	[r0+0x10] |= 0x1			  ## boot_init.c:90:19
  10cd56:    c5 ef 01 00       	[r0+0x14] &= 0xFFFFFFFE			  ## boot_init.c:91:19
  10cd5a:    02 ef 01 00       	[r0+0x8] |= 0x1			  ## boot_init.c:92:19
  10cd5e:    14 8a             	goto 0x54 <.GJTIE13_0_0_+0x62 : 10cdb4 >			  ## boot_init.c:92:19
  10cd60:    02 ef 01 00       	[r0+0x8] |= 0x1			  ## boot_init.c:85:19
  10cd64:    c4 ef 01 00       	[r0+0x10] &= 0xFFFFFFFE			  ## boot_init.c:86:19
  10cd68:    c5 ef 01 00       	[r0+0x14] &= 0xFFFFFFFE			  ## boot_init.c:87:19
  10cd6c:    14 83             	goto 0x46 <.GJTIE13_0_0_+0x62 : 10cdb4 >			  ## boot_init.c:87:19
  10cd6e:    05 ef 01 00       	[r0+0x14] |= 0x1			  ## boot_init.c:95:19
  10cd72:    c4 ef 01 00       	[r0+0x10] &= 0xFFFFFFFE			  ## boot_init.c:96:19
  10cd76:    02 ef 01 00       	[r0+0x8] |= 0x1			  ## boot_init.c:97:19
  10cd7a:    04 9c             	goto 0x38 <.GJTIE13_0_0_+0x62 : 10cdb4 >			  ## boot_init.c:97:19
  10cd7c:    c0 ef 01 00       	[r0+0x0] &= 0xFFFFFFFE			  ## boot_init.c:100:19
  10cd80:    04 93             	goto 0x26 <.GJTIE13_0_0_+0x56 : 10cda8 >			  ## boot_init.c:100:19
  10cd82:    c0 ef 01 00       	[r0+0x0] &= 0xFFFFFFFE			  ## boot_init.c:106:19
  10cd86:    06 ef 01 00       	[r0+0x18] |= 0x1			  ## boot_init.c:107:19
  10cd8a:    04 90             	goto 0x20 <.GJTIE13_0_0_+0x5A : 10cdac >			  ## boot_init.c:107:19
  10cd8c:    c0 ef 01 00       	[r0+0x0] &= 0xFFFFFFFE			  ## boot_init.c:112:19
  10cd90:    c6 ef 01 00       	[r0+0x18] &= 0xFFFFFFFE			  ## boot_init.c:113:19
  10cd94:    04 84             	goto 0x8 <.GJTIE13_0_0_+0x4C : 10cd9e >			  ## boot_init.c:113:19
  10cd96:    c0 ef 01 00       	[r0+0x0] &= 0xFFFFFFFE			  ## boot_init.c:118:19
  10cd9a:    06 ef 01 00       	[r0+0x18] |= 0x1			  ## boot_init.c:119:19
  10cd9e:    07 ef 01 00       	[r0+0x1c] |= 0x1
  10cda2:    04 86             	goto 0xc <.GJTIE13_0_0_+0x5E : 10cdb0 >
  10cda4:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## boot_init.c:124:19
  10cda8:    c6 ef 01 00       	[r0+0x18] &= 0xFFFFFFFE
  10cdac:    c7 ef 01 00       	[r0+0x1c] &= 0xFFFFFFFE
  10cdb0:    c2 ef 01 00       	[r0+0x8] &= 0xFFFFFFFE
  10cdb4:    29 41             	r1 = b[r2+0x1] (u)			  ## boot_init.c:158:41
  10cdb6:    73 e1 fc 10       	r3 = r1 & 0xFFFFFF03			  ## boot_init.c:158:5
  10cdba:    30 e1 00 0b       	r0 = r0 + -0x500			  ## boot_init.c:158:5
  10cdbe:    03 f8 06 04       	if (r3 == 0x2) goto 0xc <.GJTIE13_0_0_+0x7C : 10cdce >			  ## boot_init.c:158:5
  10cdc2:    03 f8 09 02       	if (r3 == 0x1) goto 0x12 <.GJTIE13_0_0_+0x86 : 10cdd8 >
  10cdc6:    83 50             	if (r3 != 0) goto 0x20 <.GJTIE13_0_0_+0x96 : 10cde8 >
  10cdc8:    c0 ef 10 00       	[r0+0x0] &= 0xFFFFFFEF			  ## boot_init.c:160:9
  10cdcc:    04 87             	goto 0xe <.GJTIE13_0_0_+0x8A : 10cddc >			  ## boot_init.c:160:9
  10cdce:    c0 ef 10 00       	[r0+0x0] &= 0xFFFFFFEF			  ## boot_init.c:170:9
  10cdd2:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:171:9
  10cdd4:    31 26             	r1 |= 0x40			  ## boot_init.c:171:9
  10cdd6:    04 84             	goto 0x8 <.GJTIE13_0_0_+0x8E : 10cde0 >			  ## boot_init.c:171:9
  10cdd8:    00 ef 10 00       	[r0+0x0] |= 0x10			  ## boot_init.c:165:9
  10cddc:    01 60             	r1 = [r0+0x0] 
  10cdde:    b9 26             	r1 &= 0xffffffbf
  10cde0:    81 60             	[r0+0x0] = r1
  10cde2:    00 ef 04 00       	[r0+0x0] |= 0x4
  10cde6:    29 41             	r1 = b[r2+0x1] (u)
  10cde8:    b1 e1 08 11       	r1 = uextra(r1, p:0x2, l:0x2)			  ## boot_init.c:176:5
  10cdec:    01 f8 06 04       	if (r1 == 0x2) goto 0xc <.GJTIE13_0_0_+0xAA : 10cdfc >			  ## boot_init.c:176:5
  10cdf0:    01 f8 09 02       	if (r1 == 0x1) goto 0x12 <.GJTIE13_0_0_+0xB4 : 10ce06 >
  10cdf4:    81 4f             	if (r1 != 0) goto 0x1e <.GJTIE13_0_0_+0xC2 : 10ce14 >
  10cdf6:    c0 ef 20 00       	[r0+0x0] &= 0xFFFFFFDF			  ## boot_init.c:178:9
  10cdfa:    04 87             	goto 0xe <.GJTIE13_0_0_+0xB8 : 10ce0a >			  ## boot_init.c:178:9
  10cdfc:    c0 ef 20 00       	[r0+0x0] &= 0xFFFFFFDF			  ## boot_init.c:188:9
  10ce00:    01 60             	r1 = [r0+0x0] 			  ## boot_init.c:189:9
  10ce02:    31 27             	r1 |= 0x80			  ## boot_init.c:189:9
  10ce04:    04 84             	goto 0x8 <.GJTIE13_0_0_+0xBC : 10ce0e >			  ## boot_init.c:189:9
  10ce06:    00 ef 20 00       	[r0+0x0] |= 0x20			  ## boot_init.c:183:9
  10ce0a:    01 60             	r1 = [r0+0x0] 
  10ce0c:    b9 27             	r1 &= 0xffffff7f
  10ce0e:    81 60             	[r0+0x0] = r1
  10ce10:    00 ef 08 00       	[r0+0x0] |= 0x8
  10ce14:    c0 ff d1 18 1a 00 	r0 = 0x1a18d1 <__stub_VecMinScalar_float_c_f_c+0x918D4 : 1a18d0 >
  10ce1a:    09 40             	r1 = b[r0+0x0] (u)			  ## boot_init.c:269:18
  10ce1c:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## boot_init.c:269:18
  10ce20:    89 40             	b[r0+0x0] = r1			  ## boot_init.c:269:18
  10ce22:    09 45             	r1 = b[r0+0x5] (u)			  ## boot_init.c:270:15
  10ce24:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## boot_init.c:270:15
  10ce28:    89 45             	b[r0+0x5] = r1			  ## boot_init.c:270:15
  10ce2a:    09 44             	r1 = b[r0+0x4] (u)			  ## boot_init.c:271:14
  10ce2c:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## boot_init.c:271:14
  10ce30:    89 44             	b[r0+0x4] = r1			  ## boot_init.c:271:14
  10ce32:    40 21             	r0 = 0x1			  ## boot_init.c:272:5
  10ce34:    bf ea 9f fe       	call -0x2c2 <udelay : 10cb76 >			  ## boot_init.c:272:5
  10ce38:    20 61             	r0 = [r2+0x4] 			  ## boot_init.c:274:27
  10ce3a:    80 45             	if (r0 != 0) goto 0xa <.GJTIE13_0_0_+0xF4 : 10ce46 >			  ## boot_init.c:274:27
  10ce3c:    28 40             	r0 = b[r2+0x0] (u)			  ## boot_init.c:274:78
  10ce3e:    50 e8 02 12       	if ((r0 & 0x4) != 0) goto 0x4 <.GJTIE13_0_0_+0xF4 : 10ce46 >			  ## boot_init.c:274:78
  10ce42:    40 21             	r0 = 0x1			  ## boot_init.c:275:9
  10ce44:    04 81             	goto 0x2 <.GJTIE13_0_0_+0xF6 : 10ce48 >			  ## boot_init.c:275:9
  10ce46:    40 22             	r0 = 0x2			  ## boot_init.c:277:9
  10ce48:    41 20             	r1 = 0x0
  10ce4a:    bf ea c2 fe       	call -0x27c <flash_poweron : 10cbd2 >
  10ce4e:    c0 ff 00 41 1e 00 	r0 = 0x1e4100 <__stub_VecMinScalar_float_c_f_c+0xD4104 : 1e4100 >
  10ce54:    42 ea 00 00       	[r0+0x8] = 0x0			  ## boot_flash.c:61:24
  10ce58:    c1 ff ff ff 00 00 	r1 = 0xffff <os_code_size+0xDEA9 : fffe >			  ## boot_flash.c:62:24
  10ce5e:    81 61             	[r0+0x4] = r1			  ## boot_flash.c:62:24
  10ce60:    40 ea 80 00       	[r0+0x0] = 0x80			  ## boot_flash.c:63:24
  10ce64:    56 04             	{pc, r6-r4} = [sp++]			  ## boot_init.c:282:1


change_capture_mode:
  10ce66:    c1 ff 00 05 1e 00 	r1 = 0x1e0500 <__stub_VecMinScalar_float_c_f_c+0xD0504 : 1e0500 >			  ## uart_key.c:67:0
  10ce6c:    40 ef 01 10       	[r1+0x0] ^= 0x1			  ## uart_key.c:68:18
  10ce70:    41 21             	r1 = 0x1			  ## uart_key.c:68:18
  10ce72:    b0 e8 02 00       	if (r0 != 0x2) {			  ## uart_key.c:68:18
  10ce76:    41 22             		r1 = 0x2
                               	}			  ## uart_key.c:70:14
  10ce78:    c0 ff c0 93 02 00 	r0 = 0x293c0 <var_bss_begin : 293c0 >			  ## uart_key.c:70:14
  10ce7e:    81 63             	[r0+0xc] = r1
  10ce80:    80 00             	rts			  ## uart_key.c:75:1


reset_status:
  10ce82:    c0 ff c0 93 02 00 	r0 = 0x293c0 <var_bss_begin : 293c0 >			  ## uart_key.c:90:0
  10ce88:    41 20             	r1 = 0x0			  ## uart_key.c:94:17
  10ce8a:    89 60             	h[r0+0x0] = r1			  ## uart_key.c:91:13
  10ce8c:    42 20             	r2 = 0x0			  ## uart_key.c:92:14
  10ce8e:    43 20             	r3 = 0x0			  ## uart_key.c:92:14
  10ce90:    50 ec 01 21       	d[r0+0x10] = r3_r2			  ## uart_key.c:92:14
  10ce94:    81 66             	[r0+0x18] = r1			  ## uart_key.c:94:17
  10ce96:    80 00             	rts			  ## uart_key.c:95:1


clk_get:
  10ce98:    76 04             	[--sp] = {rets, r6-r4}			  ## clock.c:252:0
  10ce9a:    04 16             	r4 = r0			  ## clock.c:252:0
  10ce9c:    c5 ff 20 fb 10 00 	r5 = 0x10fb20 <fCos_Tab+0x40C : 10fb20 >			  ## clock.c:252:0
  10cea2:    51 16             	r1 = r5			  ## clock.c:253:9
  10cea4:    bf ea e1 bd       	call -0x843e <strcmp : 104a6a >			  ## clock.c:253:9
  10cea8:    c6 ff 04 bc 02 00 	r6 = 0x2bc04 <boot_arg_list : 2bc04 >			  ## clock.c:253:9
  10ceae:    00 50             	if (r0 == 0) goto 0x20 <clk_get+0x38 : 10ced0 >			  ## clock.c:253:9
  10ceb0:    59 84             	r1 = r5 + 0x4			  ## clock.c:255:16
  10ceb2:    40 16             	r0 = r4			  ## clock.c:255:16
  10ceb4:    bf ea d9 bd       	call -0x844e <strcmp : 104a6a >			  ## clock.c:255:16
  10ceb8:    00 4d             	if (r0 == 0) goto 0x1a <clk_get+0x3C : 10ced4 >			  ## clock.c:255:16
  10ceba:    59 8d             	r1 = r5 + 0xd			  ## clock.c:257:16
  10cebc:    40 16             	r0 = r4			  ## clock.c:257:16
  10cebe:    bf ea d4 bd       	call -0x8458 <strcmp : 104a6a >			  ## clock.c:257:16
  10cec2:    b0 e8 00 10       	if (r0 != 0x0) {			  ## clock.c:257:16
  10cec6:    60 62             		r0 = [r6+0x8] 
                               	} else {			  ## clock.c:260:26
  10cec8:    c0 ff 00 36 6e 01 		r0 = 0x16e3600
                               	} <__stub_VecMinScalar_float_c_f_c+0x15D3604 : 16e3600 >			  ## clock.c:257:16
  10cece:    56 04             	{pc, r6-r4} = [sp++]			  ## clock.c:257:16
  10ced0:    68 88             	r0 = r6 + 0x8
  10ced2:    04 81             	goto 0x2 <clk_get+0x3E : 10ced6 >
  10ced4:    68 84             	r0 = r6 + 0x4
  10ced6:    00 60             	r0 = [r0+0x0] 
  10ced8:    56 04             	{pc, r6-r4} = [sp++]			  ## clock.c:261:1


set_cap_timeout:
  10ceda:    74 04             	[--sp] = {rets, r4}			  ## boot_mode.c:32:0
  10cedc:    c4 ff 00 06 1e 00 	r4 = 0x1e0600 <__stub_VecMinScalar_float_c_f_c+0xD0604 : 1e0600 >			  ## boot_mode.c:32:0
  10cee2:    40 ea 80 4c       	[r4+0x0] = 0x4000			  ## boot_mode.c:33:17
  10cee6:    41 ea 00 40       	[r4+0x4] = 0x0			  ## boot_mode.c:34:17
  10ceea:    c0 ff 20 fb 10 00 	r0 = 0x10fb20 <fCos_Tab+0x40C : 10fb20 >			  ## boot_mode.c:35:26
  10cef0:    61 93             	call -0x5a <clk_get : 10ce98 >			  ## boot_mode.c:35:26
  10cef2:    60 e0 7a 1c       	r1 = 0xFA00			  ## boot_mode.c:35:46
  10cef6:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## boot_mode.c:35:46
  10cefa:    e0 e1 0a 00       	r0 = r0 * 0xA			  ## boot_mode.c:35:22
  10cefe:    c0 62             	[r4+0x8] = r0			  ## boot_mode.c:35:17
  10cf00:    00 ef 31 40       	[r4+0x0] |= 0x31			  ## boot_mode.c:36:17
  10cf04:    54 04             	{pc, r4} = [sp++]			  ## boot_mode.c:37:1


capture_isr:
  10cf06:    e9 04             	[--sp] = {psr, rets, reti}			  ## uart_key.c:105:0
  10cf08:    d8 e8 ff 03       	[--sp] = {r9-r0}			  ## uart_key.c:105:0
  10cf0c:    c3 ff 00 05 1e 00 	r3 = 0x1e0500 <__stub_VecMinScalar_float_c_f_c+0xD0504 : 1e0500 >			  ## uart_key.c:105:0
  10cf12:    00 ef 80 3c       	[r3+0x0] |= 0x4000			  ## uart_key.c:106:5
  10cf16:    31 62             	r1 = [r3+0x8] 			  ## uart_key.c:109:15
  10cf18:    c4 ff c0 93 02 00 	r4 = 0x293c0 <var_bss_begin : 293c0 >
  10cf1e:    42 62             	r2 = [r4+0x8] 			  ## uart_key.c:112:21
  10cf20:    95 de             	r5 = r1 - r2  #			  ## uart_key.c:112:19
  10cf22:    c1 62             		 [r4+0x8] = r1			  ## uart_key.c:113:13
  10cf24:    40 63             	r0 = [r4+0xc] 			  ## uart_key.c:120:27
  10cf26:    00 f8 28 04       	if (r0 == 0x2) goto 0x50 <capture_isr+0x74 : 10cf7a >			  ## uart_key.c:120:9
  10cf2a:    80 f8 29 02       	if (r0 != 0x1) goto 0x52 <capture_isr+0x7A : 10cf80 >
  10cf2e:    40 23             	r0 = 0x3			  ## uart_key.c:121:9
  10cf30:    41 9a             	call -0xcc <change_capture_mode : 10ce66 >			  ## uart_key.c:121:9
  10cf32:    40 64             	r0 = [r4+0x10] 			  ## uart_key.c:122:13
  10cf34:    10 45             	if (r0 == 0) goto 0x4a <capture_isr+0x7A : 10cf80 >			  ## uart_key.c:122:13
  10cf36:    09 1d             	r1 = r0 + r5			  ## uart_key.c:127:25
  10cf38:    32 e1 18 1c       	r2 = r1 + -0x3e8			  ## uart_key.c:130:39
  10cf3c:    46 e0 99 3a       	r6 = 0x3a99 <os_code_size+0x1943 : 3a98 >			  ## uart_key.c:130:39
  10cf40:    06 e9 19 20       	if (r2 >= r6) goto 0x32 <capture_isr+0x70 : 10cf76 >			  ## uart_key.c:130:39
  10cf44:    42 65             	r2 = [r4+0x14] 			  ## uart_key.c:138:13
  10cf46:    12 41             	if (r2 == 0) goto 0x42 <capture_isr+0x84 : 10cf8a >
  10cf48:    46 66             	r6 = [r4+0x18] 			  ## uart_key.c:143:21
  10cf4a:    16 18             	r6 += r1			  ## uart_key.c:143:21
  10cf4c:    c6 66             	[r4+0x18] = r6			  ## uart_key.c:143:21
  10cf4e:    4f 60             	r7 = h[r4+0x0] (u)			  ## uart_key.c:144:17
  10cf50:    c7 21             	r7 += 0x1			  ## uart_key.c:144:17
  10cf52:    b4 f0 12 92       	r9 = r1 - r2  #			  ## uart_key.c:30:18
  10cf56:    cf 60             		 h[r4+0x0] = r7			  ## uart_key.c:144:17
  10cf58:    b4 e0 22 81       	r8 = r2 - r1			  ## uart_key.c:28:18
  10cf5c:    92 ec 00 01       	if (r2 <= r1) {			  ## uart_key.c:28:18
  10cf60:    98 16             		r8 = r9
                               	}			  ## uart_key.c:27:9
  10cf62:    f1 17             	r1 = r7.l (u)			  ## uart_key.c:147:58
  10cf64:    f4 e1 60 11       	r1 = r6 / r1 (u)			  ## uart_key.c:147:56
  10cf68:    e1 e1 0a 10       	r1 = r1 * 0xA			  ## uart_key.c:147:67
  10cf6c:    5a 24             	r2 = 0x64			  ## uart_key.c:147:72
  10cf6e:    f4 e1 10 12       	r1 = r1 / r2 (u)			  ## uart_key.c:147:72
  10cf72:    81 ec 0c 80       	if (r8 <= r1) goto 0x18 <capture_isr+0x88 : 10cf8e >			  ## uart_key.c:147:72
  10cf76:    41 85             	call -0xf6 <reset_status : 10ce82 >
  10cf78:    04 84             	goto 0x8 <capture_isr+0x7C : 10cf82 >
  10cf7a:    40 22             	r0 = 0x2			  ## uart_key.c:183:9
  10cf7c:    bf ea 73 ff       	call -0x11a <change_capture_mode : 10ce66 >			  ## uart_key.c:183:9
  10cf80:    c5 64             	[r4+0x10] = r5
  10cf82:    d4 e8 ff 03       	{r9-r0} = [sp++]			  ## uart_key.c:188:1
  10cf86:    a9 04             	{psr, rets, reti} = [sp++]			  ## uart_key.c:188:1
  10cf88:    81 00             	rti			  ## uart_key.c:188:1
  10cf8a:    c1 65             	[r4+0x14] = r1			  ## uart_key.c:139:24
  10cf8c:    f7 9a             	goto -0xc <capture_isr+0x7C : 10cf82 >			  ## uart_key.c:139:24
  10cf8e:    e1 e1 03 50       	r1 = r5 * 0x3			  ## uart_key.c:154:28
  10cf92:    81 ec 09 00       	if (r0 <= r1) goto 0x12 <capture_isr+0xA2 : 10cfa8 >			  ## uart_key.c:154:28
  10cf96:    e1 e1 05 50       	r1 = r5 * 0x5			  ## uart_key.c:155:28
  10cf9a:    01 e9 05 00       	if (r0 >= r1) goto 0xa <capture_isr+0xA2 : 10cfa8 >			  ## uart_key.c:155:28
  10cf9e:    49 61             	r1 = h[r4+0x2] (u)			  ## uart_key.c:157:28
  10cfa0:    40 21             	r0 = 0x1			  ## uart_key.c:157:28
  10cfa2:    a0 e1 fc 10       	r0 <= insert(r1, p:0x1, l:0x1f)			  ## uart_key.c:157:46
  10cfa6:    04 8a             	goto 0x14 <capture_isr+0xB6 : 10cfbc >			  ## uart_key.c:157:46
  10cfa8:    e1 e1 03 00       	r1 = r0 * 0x3			  ## uart_key.c:158:31
  10cfac:    05 e9 e3 11       	if (r1 >= r5) goto -0x3a <capture_isr+0x70 : 10cf76 >			  ## uart_key.c:158:31
  10cfb0:    e0 e1 05 00       	r0 = r0 * 0x5			  ## uart_key.c:159:30
  10cfb4:    85 ec df 01       	if (r0 <= r5) goto -0x42 <capture_isr+0x70 : 10cf76 >			  ## uart_key.c:159:30
  10cfb8:    48 61             	r0 = h[r4+0x2] (u)			  ## uart_key.c:161:28
  10cfba:    00 a1             	r0 = r0 << 0x1			  ## uart_key.c:161:40
  10cfbc:    c8 61             	h[r4+0x2] = r0
  10cfbe:    41 f0 af 68       	r1 = 0x68af  # <os_code_size+0x4759 : 68ae >			  ## uart_key.c:167:20
  10cfc2:    48 61             		 r0 = h[r4+0x2] (u)			  ## uart_key.c:167:23
  10cfc4:    81 e8 15 00       	if (r0 != r1) goto 0x2a <capture_isr+0xEC : 10cff2 >			  ## uart_key.c:167:13
  10cfc8:    c0 ff 88 56 1e 00 	r0 = 0x1e5688 <__stub_VecMinScalar_float_c_f_c+0xD568C : 1e5688 >			  ## uart_key.c:169:58
  10cfce:    44 20             	r4 = 0x0			  ## uart_key.c:169:58
  10cfd0:    00 f1 78 02       	r0 = r0 + 0x278  #			  ## uart_key.c:169:58
  10cfd4:    84 60             		 [r0+0x0] = r4			  ## uart_key.c:169:58
  10cfd6:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## uart_key.c:170:51
  10cfda:    c2 ef 01 00       	[r0+0x8] &= 0xFFFFFFFE			  ## uart_key.c:171:51
  10cfde:    40 22             	r0 = 0x2			  ## uart_key.c:172:13
  10cfe0:    bf ea ee fd       	call -0x424 <mdelay : 10cbc0 >			  ## uart_key.c:172:13
  10cfe4:    40 ea 80 3c       	[r3+0x0] = 0x4000			  ## uart_key.c:79:18
  10cfe8:    c0 ff 2c 57 1e 00 	r0 = 0x1e572c <__stub_VecMinScalar_float_c_f_c+0xD5730 : 1e572c >			  ## uart_key.c:80:26
  10cfee:    84 60             	[r0+0x0] = r4			  ## uart_key.c:80:26
  10cff0:    e7 88             	goto -0x70 <capture_isr+0x7C : 10cf82 >			  ## uart_key.c:80:26
  10cff2:    40 67             	r0 = [r4+0x1c] 			  ## uart_key.c:177:19
  10cff4:    09 81             	r1 = r0 + 0x1			  ## uart_key.c:177:19
  10cff6:    c1 67             	[r4+0x1c] = r1			  ## uart_key.c:177:19
  10cff8:    00 fc c2 c7       	if (r0 > 0x63) goto -0x7c <capture_isr+0x7A : 10cf80 >			  ## uart_key.c:177:19
  10cffc:    bf ea 6d ff       	call -0x126 <set_cap_timeout : 10ceda >			  ## uart_key.c:178:13
  10d000:    d7 9f             	goto -0x82 <capture_isr+0x7A : 10cf80 >			  ## uart_key.c:178:13


osc_clk_init:
  10d002:    c0 ff f3 f2 0f 00 	r0 = 0xff2f3 <$data.__3+0xB0B2 : ff2f2 >			  ## clock.c:135:0
  10d008:    c1 ff 20 19 1e 00 	r1 = 0x1e1920 <__stub_VecMinScalar_float_c_f_c+0xD1924 : 1e1920 >			  ## clock.c:61:23
  10d00e:    90 61             	[r1+0x4] = r0			  ## clock.c:61:23
  10d010:    c0 ff d2 9c 19 1f 	r0 = 0x1f199cd2 <__stub_VecMinScalar_float_c_f_c+0x1F089CD6 : 1f199cd2 >			  ## clock.c:62:23
  10d016:    90 60             	[r1+0x0] = r0			  ## clock.c:62:23
  10d018:    00 ef 01 10       	[r1+0x0] |= 0x1			  ## clock.c:63:22
  10d01c:    80 00             	rts			  ## clock.c:137:1


set_timer3_captrue_dp:
  10d01e:    c1 ff 00 54 1e 00 	r1 = 0x1e5400 <__stub_VecMinScalar_float_c_f_c+0xD5404 : 1e5400 >			  ## clock.c:308:0
  10d024:    00 ef 80 1d       	[r1+0x0] |= 0x1000			  ## clock.c:309:5
  10d028:    c2 ff 00 18 1e 00 	r2 = 0x1e1800 <__stub_VecMinScalar_float_c_f_c+0xD1804 : 1e1800 >			  ## clock.c:310:5
  10d02e:    00 ef 01 20       	[r2+0x0] |= 0x1			  ## clock.c:310:5
  10d032:    00 50             	if (r0 == 0) goto 0x20 <set_timer3_captrue_dp+0x36 : 10d054 >			  ## clock.c:310:5
  10d034:    00 ef 80 1f       	[r1+0x0] |= 0x100			  ## clock.c:312:9
  10d038:    00 ef 00 1f       	[r1+0x0] |= 0x200			  ## clock.c:313:9
  10d03c:    00 ef 04 10       	[r1+0x0] |= 0x4			  ## clock.c:314:9
  10d040:    00 ef 08 10       	[r1+0x0] |= 0x8			  ## clock.c:315:9
  10d044:    c0 ef 40 10       	[r1+0x0] &= 0xFFFFFFBF			  ## clock.c:316:9
  10d048:    c0 ef 80 10       	[r1+0x0] &= 0xFFFFFF7F			  ## clock.c:317:9
  10d04c:    00 ef 10 10       	[r1+0x0] |= 0x10			  ## clock.c:318:9
  10d050:    c0 ef 20 10       	[r1+0x0] &= 0xFFFFFFDF			  ## clock.c:319:9
  10d054:    48 21             	r0 = 0x21			  ## clock.c:322:26
  10d056:    d3 ec 1d 03       	[r1+0x33c] = r0			  ## clock.c:322:26
  10d05a:    20 e1 00 2f       	r0 = r2 + -0x1100			  ## clock.c:324:20
  10d05e:    40 ea 80 0c       	[r0+0x0] = 0x4000			  ## clock.c:324:20
  10d062:    80 00             	rts			  ## clock.c:325:1


check_key_type:
  10d064:    41 e0 ef 16       	r1 = 0x16ef <usb_code_size+0xBB3 : 16ee >			  ## boot_mode.c:49:0
  10d068:    10 e8 00 41       	if (r0 == r1) {			  ## boot_mode.c:50:9
  10d06c:    40 21             		r0 = 0x1			  ## boot_mode.c:50:9
  10d06e:    80 00             		rts
                               	}			  ## boot_mode.c:58:1
  10d070:    41 e0 af 68       	r1 = 0x68af <os_code_size+0x4759 : 68ae >			  ## boot_mode.c:58:1
  10d074:    01 e8 07 00       	if (r0 == r1) goto 0xe <check_key_type+0x22 : 10d086 >			  ## boot_mode.c:58:1
  10d078:    41 e0 7c 6b       	r1 = 0x6b7c <os_code_size+0x4A27 : 6b7c >
  10d07c:    90 e8 00 11       	if (r0 != r1) {
  10d080:    40 20             		r0 = 0x0
                               	} else {
  10d082:    40 25             		r0 = 0x5
                               	}
  10d084:    80 00             	rts			  ## boot_mode.c:58:1
  10d086:    40 24             	r0 = 0x4
  10d088:    80 00             	rts			  ## boot_mode.c:58:1


wdt_clr:
  10d08a:    c0 ff 88 1f 1a 00 	r0 = 0x1a1f88 <__stub_VecMinScalar_float_c_f_c+0x91F8C : 1a1f88 >			  ## wdt.c:10:0
  10d090:    09 40             	r1 = b[r0+0x0] (u)			  ## wdt.c:11:18
  10d092:    31 26             	r1 |= 0x40			  ## wdt.c:11:18
  10d094:    89 40             	b[r0+0x0] = r1			  ## wdt.c:11:18
  10d096:    80 00             	rts			  ## wdt.c:12:1


uart_set_dma_dir:
  10d098:    75 04             	[--sp] = {rets, r5, r4}			  ## uart_upgrade.c:23:0
  10d09a:    00 4b             	if (r0 == 0) goto 0x16 <uart_set_dma_dir+0x1A : 10d0b2 >			  ## uart_upgrade.c:23:0
  10d09c:    10 2f             	r0 = -0x11			  ## uart_upgrade.c:23:0
  10d09e:    c1 ff 04 20 1e 00 	r1 = 0x1e2004 <__stub_VecMinScalar_float_c_f_c+0xD2008 : 1e2004 >			  ## uart_upgrade.c:23:0
  10d0a4:    42 20             	r2 = 0x0			  ## uart_upgrade.c:23:0
  10d0a6:    4b 23             	r3 = 0x23			  ## uart_upgrade.c:23:0
  10d0a8:    44 21             	r4 = 0x1			  ## uart_upgrade.c:23:0
  10d0aa:    c5 ff 08 59 1e 00 	r5 = 0x1e5908 <__stub_VecMinScalar_float_c_f_c+0xD590C : 1e5908 >			  ## uart_upgrade.c:23:0
  10d0b0:    04 8a             	goto 0x14 <uart_set_dma_dir+0x2E : 10d0c6 >			  ## uart_upgrade.c:23:0
  10d0b2:    10 3e             	r0 = -0x2			  ## uart_upgrade.c:23:0
  10d0b4:    c1 ff 08 59 1e 00 	r1 = 0x1e5908 <__stub_VecMinScalar_float_c_f_c+0xD590C : 1e5908 >			  ## uart_upgrade.c:23:0
  10d0ba:    6a 27             	r2 = 0xa7			  ## uart_upgrade.c:23:0
  10d0bc:    43 20             	r3 = 0x0			  ## uart_upgrade.c:23:0
  10d0be:    44 30             	r4 = 0x10			  ## uart_upgrade.c:23:0
  10d0c0:    c5 ff 04 20 1e 00 	r5 = 0x1e2004 <__stub_VecMinScalar_float_c_f_c+0xD2008 : 1e2004 >			  ## uart_upgrade.c:23:0
  10d0c6:    64 e8 00 54       	[r5+0x0] |= r4			  ## uart_upgrade.c:23:0
  10d0ca:    c4 ff 88 56 1e 00 	r4 = 0x1e5688 <__stub_VecMinScalar_float_c_f_c+0xD568C : 1e5688 >			  ## uart_upgrade.c:23:0
  10d0d0:    d1 ec 41 32       	[r4+0x120] = r3			  ## uart_upgrade.c:23:0
  10d0d4:    c2 60             	[r4+0x0] = r2			  ## uart_upgrade.c:23:0
  10d0d6:    64 e8 02 10       	[r1+0x0] &= r0			  ## uart_upgrade.c:23:0
  10d0da:    55 04             	{pc, r5, r4} = [sp++]			  ## uart_upgrade.c:41:1


uart_rx_data:
  10d0dc:    75 04             	[--sp] = {rets, r5, r4}			  ## uart_upgrade.c:61:0
  10d0de:    14 16             	r4 = r1			  ## uart_upgrade.c:61:0
  10d0e0:    05 16             	r5 = r0			  ## uart_upgrade.c:61:0
  10d0e2:    61 93             	call -0x5a <wdt_clr : 10d08a >			  ## uart_upgrade.c:62:5
  10d0e4:    40 21             	r0 = 0x1			  ## uart_upgrade.c:63:5
  10d0e6:    61 98             	call -0x50 <uart_set_dma_dir : 10d098 >			  ## uart_upgrade.c:63:5
  10d0e8:    60 e0 f1 09       	r0 = 0x1E2000			  ## uart_upgrade.c:63:5
  10d0ec:    51 dd             	r1 = r5 + r4  #			  ## uart_upgrade.c:66:33
  10d0ee:    85 67             		 [r0+0x1c] = r5			  ## uart_upgrade.c:65:18
  10d0f0:    c1 23             	r1 += 0x3			  ## uart_upgrade.c:66:40
  10d0f2:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## uart_upgrade.c:66:49
  10d0f6:    81 68             	[r0+0x20] = r1			  ## uart_upgrade.c:66:18
  10d0f8:    84 69             	[r0+0x24] = r4			  ## uart_upgrade.c:68:17
  10d0fa:    20 00             	csync			  ## uart_upgrade.c:69:5
  10d0fc:    01 60             	r1 = [r0+0x0] 			  ## uart_upgrade.c:73:19
  10d0fe:    51 e8 fd 71       	if ((r1 & 0x4000) == 0) goto -0x6 <uart_rx_data+0x20 : 10d0fc >			  ## uart_upgrade.c:73:13
  10d102:    00 ef a0 0d       	[r0+0x0] |= 0x1400			  ## uart_upgrade.c:77:16
  10d106:    55 04             	{pc, r5, r4} = [sp++]			  ## uart_upgrade.c:79:1


chip_crc16:
  10d108:    c2 ff 00 35 1e 00 	r2 = 0x1e3500 <__stub_VecMinScalar_float_c_f_c+0xD3504 : 1e3500 >			  ## crc.c:3:0
  10d10e:    41 ea 00 20       	[r2+0x4] = 0x0			  ## crc.c:5:17
  10d112:    04 84             	goto 0x8 <chip_crc16+0x14 : 10d11c >			  ## crc.c:5:17
  10d114:    0b 40             	r3 = b[r0+0x0] (u)			  ## crc.c:8:24
  10d116:    a3 60             	[r2+0x0] = r3			  ## crc.c:8:22
  10d118:    c0 21             	r0 += 0x1			  ## crc.c:8:26
  10d11a:    f9 3f             	r1 += -0x1			  ## crc.c:7:15
  10d11c:    f1 5b             	if (r1 != 0) goto -0xa <chip_crc16+0xC : 10d114 >
  10d11e:    20 00             	csync			  ## crc.c:10:5
  10d120:    20 61             	r0 = [r2+0x4] 			  ## crc.c:12:20
  10d122:    80 17             	r0 = r0.l (u)			  ## crc.c:12:5
  10d124:    80 00             	rts			  ## crc.c:12:5


uart_cmd_verify:
  10d126:    74 04             	[--sp] = {rets, r4}			  ## uart_upgrade.c:114:0
  10d128:    c0 ff 40 93 02 00 	r0 = 0x29340 <ut_cmd : 29340 >			  ## uart_upgrade.c:114:0
  10d12e:    50 ee 00 11       	r1 = b[r0+0x10] (u)			  ## uart_upgrade.c:115:18
  10d132:    0c 4f             	r4 = b[r0+0xf] (u)			  ## uart_upgrade.c:115:18
  10d134:    a4 e1 20 14       	r4 <= insert(r1, p:0x8, l:0x8)			  ## uart_upgrade.c:115:18
  10d138:    34 e8 00 40       	if (r4 == 0x0) {			  ## uart_upgrade.c:115:18
  10d13c:    40 20             		r0 = 0x0			  ## uart_upgrade.c:120:1
  10d13e:    54 04             		{pc, r4} = [sp++]
                               	}			  ## uart_upgrade.c:120:1
  10d140:    c0 25             	r0 += 0x5			  ## uart_upgrade.c:116:30
  10d142:    41 2a             	r1 = 0xa			  ## uart_upgrade.c:116:30
  10d144:    71 81             	call -0x3e <chip_crc16 : 10d108 >			  ## uart_upgrade.c:116:30
  10d146:    01 16             	r1 = r0			  ## uart_upgrade.c:116:30
  10d148:    40 21             	r0 = 0x1			  ## uart_upgrade.c:116:27
  10d14a:    94 e8 00 01       	if (r4 != r1) {			  ## uart_upgrade.c:116:27
  10d14e:    40 20             		r0 = 0x0
                               	}			  ## uart_upgrade.c:116:27
  10d150:    54 04             	{pc, r4} = [sp++]			  ## uart_upgrade.c:115:9


CrcDecode:
  10d152:    77 04             	[--sp] = {rets, r7-r4}			  ## crc.c:28:0
  10d154:    c3 ff ff ff 00 00 	r3 = 0xffff <os_code_size+0xDEA9 : fffe >			  ## crc.c:36:17
  10d15a:    c2 ff 00 35 1e 00 	r2 = 0x1e3500 <__stub_VecMinScalar_float_c_f_c+0xD3504 : 1e3500 >
  10d160:    a3 61             	[r2+0x4] = r3			  ## crc.c:36:17
  10d162:    7b 3f             	r3 = 0xff			  ## crc.c:38:18
  10d164:    a3 60             	[r2+0x0] = r3			  ## crc.c:38:18
  10d166:    a3 60             	[r2+0x0] = r3			  ## crc.c:39:18
  10d168:    44 20             	r4 = 0x0			  ## crc.c:39:18
  10d16a:    c3 ff 68 fb 10 00 	r3 = 0x10fb68 <CrcDecode.keylcode : 10fb68 >			  ## crc.c:39:18
  10d170:    04 90             	goto 0x20 <CrcDecode+0x40 : 10d192 >			  ## crc.c:39:18
  10d172:    46 17             	r6 = r4.b0 (u)			  ## crc.c:43:24
  10d174:    d8 ee 60 53       	r5 = b[r6+r3] (u)			  ## crc.c:43:24
  10d178:    a5 60             	[r2+0x0] = r5			  ## crc.c:43:22
  10d17a:    20 00             	csync			  ## crc.c:49:9
  10d17c:    0d 40             	r5 = b[r0+0x0] (u)			  ## crc.c:50:24
  10d17e:    27 61             	r7 = [r2+0x4] 			  ## crc.c:50:51
  10d180:    7d 19             	r5 ^= r7			  ## crc.c:50:37
  10d182:    8d 40             	b[r0+0x0] = r5			  ## crc.c:50:22
  10d184:    4d 81             	r5 = r4 + 0x1			  ## crc.c:45:14
  10d186:    44 20             	r4 = 0x0			  ## crc.c:45:13
  10d188:    b6 ec 0e 00       	if (r6 <= 0xe) {			  ## crc.c:45:13
  10d18c:    54 16             		r4 = r5
                               	}			  ## crc.c:45:13
  10d18e:    c0 21             	r0 += 0x1			  ## crc.c:52:27
  10d190:    f9 3f             	r1 += -0x1			  ## crc.c:42:15
  10d192:    95 17             	r5 = r1.l (u)			  ## crc.c:42:5
  10d194:    f5 4e             	if (r5 != 0) goto -0x24 <CrcDecode+0x20 : 10d172 >			  ## crc.c:42:5
  10d196:    57 04             	{pc, r7-r4} = [sp++]			  ## crc.c:56:1


uart_recv_loader:
  10d198:    e2 9e             	sp += -0x8			  ## uart_upgrade.c:143:0
  10d19a:    40 25             	r0 = 0x5			  ## uart_upgrade.c:146:5
  10d19c:    44 25             	r4 = 0x5			  ## uart_upgrade.c:146:5
  10d19e:    bf ea 0f fd       	call -0x5e2 <mdelay : 10cbc0 >			  ## uart_upgrade.c:146:5
  10d1a2:    c6 ff 20 fb 10 00 	r6 = 0x10fb20 <fCos_Tab+0x40C : 10fb20 >			  ## uart_upgrade.c:146:5
  10d1a8:    68 4c             	r0 = b[r6+0xc] (u)			  ## uart_upgrade.c:57:5
  10d1aa:    61 62             	r1 = [r6+0x8] 			  ## uart_upgrade.c:57:5
  10d1ac:    de e9 04 00       	b[sp+4] = r0			  ## uart_upgrade.c:57:5
  10d1b0:    81 20             	[sp] = r1			  ## uart_upgrade.c:57:5
  10d1b2:    40 20             	r0 = 0x0			  ## uart_upgrade.c:45:5
  10d1b4:    bf ea 70 ff       	call -0x120 <uart_set_dma_dir : 10d098 >			  ## uart_upgrade.c:45:5
  10d1b8:    88 80             	r0 = sp + 0			  ## uart_upgrade.c:45:5
  10d1ba:    60 e0 f1 59       	r5 = 0x1E2000			  ## uart_upgrade.c:45:5
  10d1be:    d0 65             	[r5+0x14] = r0			  ## uart_upgrade.c:47:17
  10d1c0:    d4 66             	[r5+0x18] = r4			  ## uart_upgrade.c:48:17
  10d1c2:    20 00             	csync			  ## uart_upgrade.c:49:5
  10d1c4:    50 60             	r0 = [r5+0x0] 			  ## uart_upgrade.c:50:19
  10d1c6:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <uart_recv_loader+0x2C : 10d1c4 >			  ## uart_upgrade.c:50:5
  10d1ca:    00 ef 00 5d       	[r5+0x0] |= 0x2000			  ## uart_upgrade.c:52:16
  10d1ce:    40 22             	r0 = 0x2			  ## uart_upgrade.c:149:5
  10d1d0:    bf ea f6 fc       	call -0x614 <mdelay : 10cbc0 >			  ## uart_upgrade.c:149:5
  10d1d4:    c4 ff 40 93 02 00 	r4 = 0x29340 <ut_cmd : 29340 >			  ## uart_upgrade.c:149:5
  10d1da:    50 ee 42 01       	r0 = b[r4+0x12] (u)			  ## uart_upgrade.c:151:16
  10d1de:    30 e8 00 40       	if (r0 == 0x0) {			  ## uart_upgrade.c:151:16
  10d1e2:    40 2a             		r0 = 0xa			  ## uart_upgrade.c:151:16
  10d1e4:    52 ee 42 01       		b[r4+0x12] = r0
                               	}			  ## uart_upgrade.c:152:21
  10d1e8:    41 e0 10 27       	r1 = 0x2710 <os_code_size+0x5BB : 2710 >			  ## uart_upgrade.c:155:43
  10d1ec:    f0 e1 00 71       	r7 = r0 * r1			  ## uart_upgrade.c:155:43
  10d1f0:    68 8d             	r0 = r6 + 0xd			  ## uart_upgrade.c:155:19
  10d1f2:    bf ea 51 fe       	call -0x35e <clk_get : 10ce98 >			  ## uart_upgrade.c:155:19
  10d1f6:    f4 e1 00 07       	r0 = r0 / r7 (u)			  ## uart_upgrade.c:155:28
  10d1fa:    80 a2             	r0 = r0 >> 0x2			  ## uart_upgrade.c:155:53
  10d1fc:    f8 3f             	r0 += -0x1			  ## uart_upgrade.c:155:57
  10d1fe:    d0 62             	[r5+0x8] = r0			  ## uart_upgrade.c:155:16
  10d200:    bf ea 43 ff       	call -0x17a <wdt_clr : 10d08a >			  ## uart_upgrade.c:156:5
  10d204:    48 48             	r0 = b[r4+0x8] (u)			  ## uart_upgrade.c:157:25
  10d206:    4a 47             	r2 = b[r4+0x7] (u)			  ## uart_upgrade.c:157:25
  10d208:    a2 f1 20 04       	r2 <= insert(r0, p:0x8, l:0x8)  #			  ## uart_upgrade.c:157:25
  10d20c:    48 45             		 r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:157:25
  10d20e:    50 ee 46 80       	r8 = b[r4+0x6] (u)			  ## uart_upgrade.c:157:25
  10d212:    a0 f1 20 84       	r0 <= insert(r8, p:0x8, l:0x8)  #			  ## uart_upgrade.c:157:25
  10d216:    4e 4c             		 r6 = b[r4+0xc] (u)			  ## uart_upgrade.c:157:38
  10d218:    a0 f1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)  #			  ## uart_upgrade.c:157:25
  10d21c:    4f 4b             		 r7 = b[r4+0xb] (u)			  ## uart_upgrade.c:157:38
  10d21e:    a7 f1 20 64       	r7 <= insert(r6, p:0x8, l:0x8)  #			  ## uart_upgrade.c:157:38
  10d222:    4b 4a             		 r3 = b[r4+0xa] (u)			  ## uart_upgrade.c:157:38
  10d224:    49 49             	r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:157:38
  10d226:    a1 e1 20 34       	r1 <= insert(r3, p:0x8, l:0x8)			  ## uart_upgrade.c:157:38
  10d22a:    a1 e1 40 78       	r1 <= insert(r7, p:0x10, l:0x10)			  ## uart_upgrade.c:157:38
  10d22e:    bf ea 55 ff       	call -0x156 <uart_rx_data : 10d0dc >			  ## uart_upgrade.c:157:5
  10d232:    40 ea 00 50       	[r5+0x0] = 0x0			  ## uart_upgrade.c:159:16
  10d236:    49 48             	r1 = b[r4+0x8] (u)			  ## uart_upgrade.c:161:57
  10d238:    4a 47             	r2 = b[r4+0x7] (u)			  ## uart_upgrade.c:161:57
  10d23a:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:57
  10d23e:    4b 46             		 r3 = b[r4+0x6] (u)			  ## uart_upgrade.c:161:57
  10d240:    48 45             	r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:161:57
  10d242:    a0 f1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:57
  10d246:    4b 4b             		 r3 = b[r4+0xb] (u)			  ## uart_upgrade.c:161:70
  10d248:    a0 f1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)  #			  ## uart_upgrade.c:161:57
  10d24c:    4a 4c             		 r2 = b[r4+0xc] (u)			  ## uart_upgrade.c:161:70
  10d24e:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:70
  10d252:    4d 4a             		 r5 = b[r4+0xa] (u)			  ## uart_upgrade.c:161:70
  10d254:    49 49             	r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:161:70
  10d256:    a1 f1 20 54       	r1 <= insert(r5, p:0x8, l:0x8)  #			  ## uart_upgrade.c:161:70
  10d25a:    4e 4e             		 r6 = b[r4+0xe] (u)			  ## uart_upgrade.c:161:16
  10d25c:    a1 f1 40 38       	r1 <= insert(r3, p:0x10, l:0x10)  #			  ## uart_upgrade.c:161:70
  10d260:    4f 4d             		 r7 = b[r4+0xd] (u)			  ## uart_upgrade.c:161:16
  10d262:    bf ea 51 ff       	call -0x15e <chip_crc16 : 10d108 >			  ## uart_upgrade.c:161:31
  10d266:    a7 e1 20 64       	r7 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:161:16
  10d26a:    80 e8 20 70       	if (r7 != r0) goto 0x40 <uart_recv_loader+0x116 : 10d2ae >			  ## uart_upgrade.c:161:16
  10d26e:    50 ee 41 01       	r0 = b[r4+0x11] (u)			  ## uart_upgrade.c:173:16
  10d272:    50 e8 10 08       	if ((r0 & 0x2) == 0) goto 0x20 <uart_recv_loader+0xFE : 10d296 >			  ## uart_upgrade.c:173:16
  10d276:    4a 48             	r2 = b[r4+0x8] (u)			  ## uart_upgrade.c:174:34
  10d278:    4b 47             	r3 = b[r4+0x7] (u)			  ## uart_upgrade.c:174:34
  10d27a:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## uart_upgrade.c:174:34
  10d27e:    4d 46             		 r5 = b[r4+0x6] (u)			  ## uart_upgrade.c:174:34
  10d280:    48 45             	r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:174:34
  10d282:    a0 f1 20 54       	r0 <= insert(r5, p:0x8, l:0x8)  #			  ## uart_upgrade.c:174:34
  10d286:    4e 4a             		 r6 = b[r4+0xa] (u)			  ## uart_upgrade.c:174:9
  10d288:    a0 f1 40 38       	r0 <= insert(r3, p:0x10, l:0x10)  #			  ## uart_upgrade.c:174:34
  10d28c:    49 49             		 r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:174:9
  10d28e:    a1 e1 20 64       	r1 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:174:9
  10d292:    bf ea 5e ff       	call -0x144 <CrcDecode : 10d152 >			  ## uart_upgrade.c:174:9
  10d296:    48 48             	r0 = b[r4+0x8] (u)			  ## uart_upgrade.c:177:30
  10d298:    49 47             	r1 = b[r4+0x7] (u)			  ## uart_upgrade.c:177:30
  10d29a:    a1 f1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)  #			  ## uart_upgrade.c:177:30
  10d29e:    4a 46             		 r2 = b[r4+0x6] (u)			  ## uart_upgrade.c:177:30
  10d2a0:    40 d6             	r0 = r4  #			  ## uart_upgrade.c:177:5
  10d2a2:    4b 45             		 r3 = b[r4+0x5] (u)			  ## uart_upgrade.c:177:30
  10d2a4:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## uart_upgrade.c:177:30
  10d2a8:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## uart_upgrade.c:177:30
  10d2ac:    c3 00             	call r3			  ## uart_upgrade.c:177:5
  10d2ae:    bf ea 9a bc       	call -0x86cc <chip_reset : 104be6 >			  ## uart_upgrade.c:180:5


uart_upgrade_init:
  10d2b2:    76 04             	[--sp] = {rets, r6-r4}			  ## uart_upgrade.c:207:0
  10d2b4:    c1 ff 08 59 1e 00 	r1 = 0x1e5908 <__stub_VecMinScalar_float_c_f_c+0xD590C : 1e5908 >			  ## uart_upgrade.c:207:0
  10d2ba:    05 ef 01 10       	[r1+0x14] |= 0x1			  ## uart_upgrade.c:210:43
  10d2be:    02 ef 01 10       	[r1+0x8] |= 0x1			  ## uart_upgrade.c:211:43
  10d2c2:    c3 ef 01 10       	[r1+0xc] &= 0xFFFFFFFE			  ## uart_upgrade.c:212:43
  10d2c6:    00 ef 01 10       	[r1+0x0] |= 0x1			  ## uart_upgrade.c:213:43
  10d2ca:    31 e1 a0 1e       	r1 = r1 + -0x160			  ## uart_upgrade.c:214:26
  10d2ce:    40 ea 23 10       	[r1+0x0] = 0x23			  ## uart_upgrade.c:214:26
  10d2d2:    c1 ff 14 00 1e 00 	r1 = 0x1e0014 <__stub_VecMinScalar_float_c_f_c+0xD0018 : 1e0014 >			  ## uart_upgrade.c:214:26
  10d2d8:    c0 ef 40 1e       	[r1+0x0] &= 0xFFFFF3FF			  ## uart_upgrade.c:217:24
  10d2dc:    00 ef 80 1e       	[r1+0x0] |= 0x400			  ## uart_upgrade.c:218:24
  10d2e0:    60 e0 f1 69       	r6 = 0x1E2000			  ## uart_upgrade.c:218:24
  10d2e4:    40 ea 50 6d       	[r6+0x0] = 0x3400			  ## uart_upgrade.c:220:16
  10d2e8:    05 16             	r5 = r0			  ## uart_upgrade.c:220:16
  10d2ea:    c4 ff 2d fb 10 00 	r4 = 0x10fb2d <ack_cmd+0x4 : 10fb2c >
  10d2f0:    40 16             	r0 = r4			  ## uart_upgrade.c:222:19
  10d2f2:    bf ea d1 fd       	call -0x45e <clk_get : 10ce98 >			  ## uart_upgrade.c:222:19
  10d2f6:    60 e0 16 1c       	r1 = 0x9600			  ## uart_upgrade.c:222:36
  10d2fa:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:222:36
  10d2fe:    f8 3f             	r0 += -0x1			  ## uart_upgrade.c:222:40
  10d300:    e0 62             	[r6+0x8] = r0			  ## uart_upgrade.c:222:16
  10d302:    40 ea 43 60       	[r6+0x0] = 0x43			  ## uart_upgrade.c:224:16
  10d306:    00 ef 50 6d       	[r6+0x0] |= 0x3400			  ## uart_upgrade.c:225:16
  10d30a:    15 41             	if (r5 == 0) goto 0x42 <uart_upgrade_init+0x9C : 10d34e >			  ## uart_upgrade.c:225:16
  10d30c:    c1 ff de e4 10 00 	r1 = 0x10e4de <uart_isr : 10e4de >			  ## uart_upgrade.c:234:9
  10d312:    40 32             	r0 = 0x12			  ## uart_upgrade.c:234:9
  10d314:    42 23             	r2 = 0x3			  ## uart_upgrade.c:234:9
  10d316:    bf ea 0d fc       	call -0x7e6 <HWI_Install : 10cb34 >			  ## uart_upgrade.c:234:9
  10d31a:    40 16             	r0 = r4			  ## uart_upgrade.c:236:28
  10d31c:    bf ea bc fd       	call -0x488 <clk_get : 10ce98 >			  ## uart_upgrade.c:236:28
  10d320:    41 e0 e8 03       	r1 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >			  ## uart_upgrade.c:236:37
  10d324:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:236:37
  10d328:    e0 e1 05 00       	r0 = r0 * 0x5			  ## uart_upgrade.c:236:25
  10d32c:    e0 64             	[r6+0x10] = r0			  ## uart_upgrade.c:236:21
  10d32e:    40 21             	r0 = 0x1			  ## uart_upgrade.c:238:9
  10d330:    bf ea b2 fe       	call -0x29c <uart_set_dma_dir : 10d098 >			  ## uart_upgrade.c:238:9
  10d334:    00 ef 20 60       	[r6+0x0] |= 0x20			  ## uart_upgrade.c:240:20
  10d338:    c0 ff 80 93 02 00 	r0 = 0x29380 <uart_dma_buffer : 29380 >			  ## uart_upgrade.c:110:18
  10d33e:    e0 67             	[r6+0x1c] = r0			  ## uart_upgrade.c:109:18
  10d340:    d0 23             	r0 += 0x43			  ## uart_upgrade.c:110:18
  10d342:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## uart_upgrade.c:110:18
  10d346:    e0 68             	[r6+0x20] = r0			  ## uart_upgrade.c:110:18
  10d348:    49 ea 40 60       	[r6+0x24] = 0x40			  ## uart_upgrade.c:111:17
  10d34c:    56 04             	{pc, r6-r4} = [sp++]			  ## uart_upgrade.c:265:1
  10d34e:    c0 ff 40 93 02 00 	r0 = 0x29340 <ut_cmd : 29340 >			  ## uart_upgrade.c:251:5
  10d354:    41 35             	r1 = 0x15			  ## uart_upgrade.c:251:5
  10d356:    bf ea c1 fe       	call -0x27e <uart_rx_data : 10d0dc >			  ## uart_upgrade.c:251:5
  10d35a:    bf ea e4 fe       	call -0x238 <uart_cmd_verify : 10d126 >			  ## uart_upgrade.c:253:9
  10d35e:    80 42             	if (r0 != 0) goto 0x4 <uart_upgrade_init+0xB2 : 10d364 >			  ## uart_upgrade.c:253:9
  10d360:    bf ea 41 bc       	call -0x877e <chip_reset : 104be6 >			  ## uart_upgrade.c:264:5
  10d364:    bf ea 18 ff       	call -0x1d0 <uart_recv_loader : 10d198 >			  ## uart_upgrade.c:262:5


set_timer3_captrue_dp_disable:
  10d368:    b0 e8 00 40       	if (r0 != 0x0) {			  ## clock.c:327:0
  10d36c:    c0 ff 00 54 1e 00 		r0 = 0x1e5400 <__stub_VecMinScalar_float_c_f_c+0xD5404 : 1e5400 >			  ## clock.c:329:9
  10d372:    c0 ef 10 00       		[r0+0x0] &= 0xFFFFFFEF
                               	}			  ## clock.c:329:9
  10d376:    c0 ff 00 07 1e 00 	r0 = 0x1e0700 <__stub_VecMinScalar_float_c_f_c+0xD0704 : 1e0700 >			  ## clock.c:332:20
  10d37c:    40 ea 80 0c       	[r0+0x0] = 0x4000			  ## clock.c:332:20
  10d380:    80 00             	rts			  ## clock.c:333:1


check_usb_sof:
  10d382:    7f 04             	[--sp] = {rets, r15-r4}			  ## clock.c:336:0
  10d384:    c6 ff c0 93 02 00 	r6 = 0x293c0 <var_bss_begin : 293c0 >			  ## clock.c:336:0
  10d38a:    47 20             	r7 = 0x0			  ## clock.c:336:0
  10d38c:    c0 14             	r8 = 0			  ## clock.c:336:0
  10d38e:    c1 14             	r9 = 0			  ## clock.c:336:0
  10d390:    ca ff d8 de 10 00 	r10 = 0x10ded8 <tmr3_isr : 10ded8 >			  ## clock.c:336:0
  10d396:    c4 ff 00 07 1e 00 	r4 = 0x1e0700 <__stub_VecMinScalar_float_c_f_c+0xD0704 : 1e0700 >			  ## clock.c:336:0
  10d39c:    4b e0 12 04       	r11 = 0x412 <ROM_RAM_SIZE+0xF2 : 412 >			  ## clock.c:336:0
  10d3a0:    cc ff 20 fb 10 00 	r12 = 0x10fb20 <fCos_Tab+0x40C : 10fb20 >			  ## clock.c:336:0
  10d3a6:    4d e0 a0 0f       	r13 = 0xfa0 <usb_code_size+0x465 : fa0 >			  ## clock.c:336:0
  10d3aa:    35 e1 00 4f       	r5 = r4 + -0x100			  ## clock.c:336:0
  10d3ae:    4e e0 11 40       	r14 = 0x4011 <os_code_size+0x1EBB : 4010 >			  ## clock.c:336:0
  10d3b2:    0f 16             	r15 = r0			  ## clock.c:336:0
  10d3b4:    bf ea 69 fe       	call -0x32e <wdt_clr : 10d08a >			  ## clock.c:340:9
  10d3b8:    e7 68             	[r6+0x20] = r7			  ## clock.c:345:25
  10d3ba:    a1 d6             	r1 = r10  #			  ## clock.c:357:9
  10d3bc:    e7 6c             		 [r6+0x30] = r7			  ## clock.c:346:22
  10d3be:    50 ec 65 82       	d[r6+0x24] = r9_r8			  ## clock.c:347:18
  10d3c2:    e7 6b             	[r6+0x2c] = r7			  ## clock.c:349:19
  10d3c4:    40 27             	r0 = 0x7			  ## clock.c:357:9
  10d3c6:    42 20             	r2 = 0x0			  ## clock.c:357:9
  10d3c8:    bf ea b4 fb       	call -0x898 <HWI_Install : 10cb34 >			  ## clock.c:357:9
  10d3cc:    40 21             	r0 = 0x1			  ## clock.c:358:9
  10d3ce:    bf ea 26 fe       	call -0x3b4 <set_timer3_captrue_dp : 10d01e >			  ## clock.c:358:9
  10d3d2:    c7 62             	[r4+0x8] = r7			  ## clock.c:360:24
  10d3d4:    c7 61             	[r4+0x4] = r7			  ## clock.c:361:24
  10d3d6:    d0 ec 41 b0       	[r4+0x0] = r11			  ## clock.c:362:24
  10d3da:    c0 16             	r0 = r12			  ## clock.c:364:26
  10d3dc:    bf ea 5c fd       	call -0x548 <clk_get : 10ce98 >			  ## clock.c:364:26
  10d3e0:    f4 e1 00 0d       	r0 = r0 / r13 (u)			  ## clock.c:364:45
  10d3e4:    d0 62             	[r5+0x8] = r0			  ## clock.c:364:24
  10d3e6:    d7 61             	[r5+0x4] = r7			  ## clock.c:365:24
  10d3e8:    d0 ec 51 e0       	[r5+0x0] = r14			  ## clock.c:366:24
  10d3ec:    40 e0 e8 03       	r0 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >
  10d3f0:    81 17             	r1 = r0.l (u)			  ## clock.c:370:9
  10d3f2:    01 4a             	if (r1 == 0) goto 0x14 <check_usb_sof+0x86 : 10d408 >			  ## clock.c:370:9
  10d3f4:    00 ef 80 5c       	[r5+0x0] |= 0x4000			  ## clock.c:371:28
  10d3f8:    f8 3f             	r0 += -0x1			  ## clock.c:370:23
  10d3fa:    51 60             	r1 = [r5+0x0] 			  ## clock.c:373:32
  10d3fc:    99 17             	r1 = r1.l (s)			  ## clock.c:373:47
  10d3fe:    81 fd f7 01       	ifs (r1 < 0x0) goto -0x12 <check_usb_sof+0x6E : 10d3f0 >			  ## clock.c:373:47
  10d402:    61 6c             	r1 = [r6+0x30] 			  ## clock.c:374:21
  10d404:    71 5a             	if (r1 == 0) goto -0xc <check_usb_sof+0x78 : 10d3fa >			  ## clock.c:374:21
  10d406:    04 8c             	goto 0x18 <check_usb_sof+0x9E : 10d420 >			  ## clock.c:374:21
  10d408:    40 21             	r0 = 0x1			  ## clock.c:383:9
  10d40a:    51 8e             	call -0xa4 <set_timer3_captrue_dp_disable : 10d368 >			  ## clock.c:383:9
  10d40c:    70 28             	r0 = 0xc8			  ## clock.c:385:9
  10d40e:    bf ea d7 fb       	call -0x852 <mdelay : 10cbc0 >			  ## clock.c:385:9
  10d412:    30 e1 ff ff       	r0 = r15 + -0x1			  ## clock.c:395:19
  10d416:    61 ff ff f0 cb ff 	if ((r15 & 0xFF) != 0) goto -0x6a <check_usb_sof+0x30 : 10d3b2 >			  ## clock.c:395:19
  10d41c:    41 20             	r1 = 0x0
  10d41e:    04 83             	goto 0x6 <check_usb_sof+0xA4 : 10d426 >
  10d420:    40 ea 80 5c       	[r5+0x0] = 0x4000			  ## clock.c:375:36
  10d424:    41 21             	r1 = 0x1			  ## clock.c:375:36
  10d426:    40 21             	r0 = 0x1			  ## clock.c:406:5
  10d428:    41 9f             	call -0xc2 <set_timer3_captrue_dp_disable : 10d368 >			  ## clock.c:406:5
  10d42a:    10 16             	r0 = r1			  ## clock.c:408:1
  10d42c:    5f 04             	{pc, r15-r4} = [sp++]			  ## clock.c:408:1


spi_port_io_init:
  10d42e:    7d 04             	[--sp] = {rets, r13-r4}			  ## spi0.c:22:0
  10d430:    c1 ff 04 bc 02 00 	r1 = 0x2bc04 <boot_arg_list : 2bc04 >			  ## spi0.c:19:29
  10d436:    98 42             	b[r1+0x2] = r0			  ## spi0.c:19:29
  10d438:    c1 ff 00 53 1e 00 	r1 = 0x1e5300 <__stub_VecMinScalar_float_c_f_c+0xD5304 : 1e5300 >			  ## spi0.c:19:29
  10d43e:    d0 ec 10 c0       	r12 = [r1+0x0]			  ## spi0.c:19:29
  10d442:    00 55             	if (r0 == 0) goto 0x2a <spi_port_io_init+0x40 : 10d46e >			  ## spi0.c:19:29
  10d444:    48 e0 1a 00       	r8 = 0x1a <TLB_BEGIN+0x1A : 1a >
  10d448:    09 e1 64 13       	r9 = r1 + 0x364
  10d44c:    4a e0 fd ff       	r10 = -0x3 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEF0000 : fffffffffffffffc >
  10d450:    44 22             	r4 = 0x2
  10d452:    4b e0 20 00       	r11 = 0x20 <TLB_BEGIN+0x20 : 20 >
  10d456:    0d e1 7c 13       	r13 = r1 + 0x37c
  10d45a:    40 e0 7f ff       	r0 = -0x81 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFF82 : ffffffffffffff7e >
  10d45e:    62 20             	r2 = 0x80
  10d460:    03 e1 78 13       	r3 = r1 + 0x378
  10d464:    45 e0 bf ff       	r5 = -0x41 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFC2 : ffffffffffffffbe >
  10d468:    16 3e             	r6 = -0x2
  10d46a:    47 21             	r7 = 0x1
  10d46c:    04 92             	goto 0x24 <spi_port_io_init+0x64 : 10d492 >
  10d46e:    48 e0 1b 00       	r8 = 0x1b <TLB_BEGIN+0x1A : 1a >
  10d472:    09 e1 68 13       	r9 = r1 + 0x368
  10d476:    4a e0 fb ff       	r10 = -0x5 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFFE : fffffffffffffffa >
  10d47a:    44 24             	r4 = 0x4
  10d47c:    4b e0 1a 00       	r11 = 0x1a <TLB_BEGIN+0x1A : 1a >
  10d480:    0d e1 64 13       	r13 = r1 + 0x364
  10d484:    10 3d             	r0 = -0x3
  10d486:    42 22             	r2 = 0x2
  10d488:    03 e1 60 13       	r3 = r1 + 0x360
  10d48c:    15 3e             	r5 = -0x2
  10d48e:    16 37             	r6 = -0x9
  10d490:    47 28             	r7 = 0x8
  10d492:    90 e1 70 7c       	r7 = r7 | r12
  10d496:    97 60             	[r1+0x0] = r7
  10d498:    64 e8 0a 16       	[r1+0x8] &= r6
  10d49c:    64 e8 12 16       	[r1+0x10] &= r6
  10d4a0:    64 e8 16 16       	[r1+0x14] &= r6
  10d4a4:    64 e8 12 15       	[r1+0x10] &= r5
  10d4a8:    64 e8 16 15       	[r1+0x14] &= r5
  10d4ac:    64 e8 0a 15       	[r1+0x8] &= r5
  10d4b0:    40 ea 4b 30       	[r3+0x0] = 0x4B
  10d4b4:    64 e8 10 12       	[r1+0x10] |= r2
  10d4b8:    64 e8 16 10       	[r1+0x14] &= r0
  10d4bc:    64 e8 08 12       	[r1+0x8] |= r2
  10d4c0:    40 ea 4f d0       	[r13+0x0] = 0x4F
  10d4c4:    00 e1 54 14       	r0 = r1 + 0x454
  10d4c8:    d0 ec 01 b0       	[r0+0x0] = r11
  10d4cc:    64 e8 10 14       	[r1+0x10] |= r4
  10d4d0:    64 e8 16 1a       	[r1+0x14] &= r10
  10d4d4:    64 e8 08 14       	[r1+0x8] |= r4
  10d4d8:    40 ea 53 90       	[r9+0x0] = 0x53
  10d4dc:    d0 ec 05 80       	[r0+0x4] = r8
  10d4e0:    5d 04             	{pc, r13-r4} = [sp++]			  ## spi0.c:111:1


spi_get_port:
  10d4e2:    c0 ff 04 bc 02 00 	r0 = 0x2bc04 <boot_arg_list : 2bc04 >			  ## spi0.c:12:0
  10d4e8:    08 42             	r0 = b[r0+0x2] (u)			  ## spi0.c:14:12
  10d4ea:    80 00             	rts			  ## spi0.c:14:5


SPI0_cs:
  10d4ec:    75 04             	[--sp] = {rets, r5, r4}			  ## spi0.c:195:0
  10d4ee:    01 16             	r1 = r0			  ## spi0.c:195:0
  10d4f0:    71 98             	call -0x10 <spi_get_port : 10d4e2 >			  ## spi0.c:196:16
  10d4f2:    c2 ff 00 53 1e 00 	r2 = 0x1e5300 <__stub_VecMinScalar_float_c_f_c+0xD5304 : 1e5300 >			  ## spi0.c:196:16
  10d4f8:    23 60             	r3 = [r2+0x0] 			  ## spi0.c:196:16
  10d4fa:    b0 e8 00 60       	if (r0 != 0x0) {
  10d4fe:    44 21             		r4 = 0x1
  10d500:    10 3e             		r0 = -0x2
                               	} else {
  10d502:    44 28             		r4 = 0x8
  10d504:    10 37             		r0 = -0x9
                               	}
  10d506:    90 e1 02 53       	r5 = r0 & r3
  10d50a:    43 19             	r3 |= r4
  10d50c:    31 e8 00 00       	if (r1 == 0x0) {
  10d510:    53 16             		r3 = r5
                               	}
  10d512:    a3 60             	[r2+0x0] = r3
  10d514:    64 e8 0a 20       	[r2+0x8] &= r0
  10d518:    55 04             	{pc, r5, r4} = [sp++]			  ## spi0.c:213:1


spi0_wait_ok:
  10d51a:    c0 ff 00 1c 1e 00 	r0 = 0x1e1c00 <__stub_VecMinScalar_float_c_f_c+0xD1C04 : 1e1c00 >			  ## spi0.c:256:0
  10d520:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:257:23
  10d522:    51 e8 fd 79       	if ((r1 & 0x8000) == 0) goto -0x6 <spi0_wait_ok+0x6 : 10d520 >			  ## spi0.c:257:5
  10d526:    00 ef 80 0c       	[r0+0x0] |= 0x4000			  ## spi0.c:259:18
  10d52a:    80 00             	rts			  ## spi0.c:259:18


SPI0_WriteByte:
  10d52c:    c1 ff 00 1c 1e 00 	r1 = 0x1e1c00 <__stub_VecMinScalar_float_c_f_c+0xD1C04 : 1e1c00 >			  ## spi0.c:279:0
  10d532:    c0 ef 80 1d       	[r1+0x0] &= 0xFFFFEFFF			  ## spi0.c:280:18
  10d536:    90 62             	[r1+0x8] = r0			  ## spi0.c:281:18
  10d538:    f7 90             	goto -0x20 <spi0_wait_ok : 10d51a >			  ## spi0.c:282:5


SPI0_ReadByte:
  10d53a:    10 04             	[--sp] = rets			  ## spi0.c:299:0
  10d53c:    c2 ff 00 1c 1e 00 	r2 = 0x1e1c00 <__stub_VecMinScalar_float_c_f_c+0xD1C04 : 1e1c00 >			  ## spi0.c:299:0
  10d542:    00 ef 80 2d       	[r2+0x0] |= 0x1000			  ## spi0.c:301:18
  10d546:    40 2a             	r0 = 0xa			  ## spi0.c:302:5
  10d548:    bf ea 15 fb       	call -0x9d6 <udelay : 10cb76 >			  ## spi0.c:302:5
  10d54c:    42 ea ff 20       	[r2+0x8] = 0xFF			  ## spi0.c:303:18
  10d550:    71 84             	call -0x38 <spi0_wait_ok : 10d51a >			  ## spi0.c:304:5
  10d552:    20 62             	r0 = [r2+0x8] 			  ## spi0.c:305:25
  10d554:    00 17             	r0 = r0.b0 (u)			  ## spi0.c:307:5
  10d556:    00 04             	pc = [sp++]			  ## spi0.c:307:5


LZ4_decompress_generic:
  10d558:    7f 04             	[--sp] = {rets, r15-r4}			  ## lz4.c:421:0
  10d55a:    e2 95             	sp += -0x2c			  ## lz4.c:421:0
  10d55c:    d4 e9 78 d0       	r13 = [sp+120]			  ## lz4.c:421:0
  10d560:    49 e0 01 00       	r9 = 0x1 <TLB_BEGIN : 0 >			  ## lz4.c:421:0
  10d564:    2d e9 80 0b       	if (r13 >= 0x10000) {			  ## lz4.c:421:0
  10d568:    c1 14             		r9 = 0
                               	}			  ## lz4.c:435:56
  10d56a:    d4 e9 60 c0       	r12 = [sp+96]			  ## lz4.c:435:56
  10d56e:    c6 16             	r6 = r12			  ## lz4.c:434:40
  10d570:    b6 e8 01 00       	if (r6 != 0x1) {			  ## lz4.c:434:40
  10d574:    46 20             		r6 = 0x0
                               	}			  ## lz4.c:434:40
  10d576:    04 3a             	r4 = [sp+104]			  ## lz4.c:434:40
  10d578:    b4 f0 10 84       	r8 = r1 + r4  #			  ## lz4.c:428:22
  10d57c:    05 39             		 r5 = [sp+100]			  ## lz4.c:428:22
  10d57e:    9f 1c             	r7 = r1 + r3			  ## lz4.c:426:27
  10d580:    b5 e8 00 40       	if (r5 != 0x0) {
  10d584:    34 e1 f4 7f       		r4 = r7 + -0xc			  ## lz4.c:439:44
  10d588:    35 e4 80 84       		r8 = umin(r8, r4)
                               	}			  ## lz4.c:439:9
  10d58c:    83 43             	if (r3 != 0) goto 0x6 <LZ4_decompress_generic+0x3C : 10d594 >			  ## lz4.c:439:9
  10d58e:    01 ff 00 c0 0b 01 	if (r12 != 0x0) goto 0x216 <LZ4_decompress_generic+0x252 : 10d7aa >
  10d594:    90 f1 62 69       	r6 = r6 & r9  #			  ## lz4.c:435:43
  10d598:    04 3d             		 r4 = [sp+116]			  ## lz4.c:435:43
  10d59a:    d4 d8             	r4 += r13  #			  ## lz4.c:430:57
  10d59c:    86 2a             		 [sp+40] = r6			  ## lz4.c:430:57
  10d59e:    84 dc             	r4 = r0 + r2  #			  ## lz4.c:423:33
  10d5a0:    84 24             		 [sp+16] = r4			  ## lz4.c:423:33
  10d5a2:    4f e0 01 00       	r15 = 0x1 <TLB_BEGIN : 0 >			  ## lz4.c:445:23
  10d5a6:    bc e8 00 00       	if (r12 != 0x0) {			  ## lz4.c:445:23
  10d5aa:    c7 14             		r15 = 0
                               	}			  ## lz4.c:445:23
  10d5ac:    83 43             	if (r3 != 0) goto 0x6 <LZ4_decompress_generic+0x5C : 10d5b4 >			  ## lz4.c:445:23
  10d5ae:    01 ff 00 f0 05 01 	if (r15 != 0x0) goto 0x20a <LZ4_decompress_generic+0x266 : 10d7be >
  10d5b4:    32 f1 f4 7f       	r2 = r7 + -0xc  #
  10d5b8:    85 22             		 [sp+8] = r5
  10d5ba:    35 e8 00 00       	if (r5 == 0x0) {
  10d5be:    28 16             		r8 = r2
                               	}
  10d5c0:    d4 e9 70 a0       	r10 = [sp+112]
  10d5c4:    39 f1 f1 4f       	r9 = r4 + -0xf  #
  10d5c8:    02 3b             		 r2 = [sp+108]
  10d5ca:    32 f1 f8 7f       	r2 = r7 + -0x8  #
  10d5ce:    82 29             		 [sp+36] = r2
  10d5d0:    3e f1 fb 4f       	r14 = r4 + -0x5  #
  10d5d4:    82 26             		 [sp+24] = r2
  10d5d6:    32 f1 fb 7f       	r2 = r7 + -0x5  #
  10d5da:    87 23             		 [sp+12] = r7
  10d5dc:    32 f1 f8 4f       	r2 = r4 + -0x8  #
  10d5e0:    82 28             		 [sp+32] = r2
  10d5e2:    14 d6             	r4 = r1  #
  10d5e4:    84 21             		 [sp+4] = r4
  10d5e6:    06 d6             	r6 = r0  #
  10d5e8:    82 27             		 [sp+28] = r2
  10d5ea:    81 20             	[sp] = r1
  10d5ec:    80 25             	[sp+20] = r0
  10d5ee:    04 93             	goto 0x26 <LZ4_decompress_generic+0xBE : 10d616 >
  10d5f0:    17 03             	rep 0x4 r7 {			  ## lz4.c:323:5
  10d5f2:    10 07             		r0 = b[r1++=0x1] (u)			  ## lz4.c:323:5
  10d5f4:    d0 07             		b[r5++=0x1] = r0
                               	}			  ## lz4.c:323:5
  10d5f6:    f7 5c             	if (r7 != 0) goto -0x8 <LZ4_decompress_generic+0x98 : 10d5f0 >			  ## lz4.c:323:5
  10d5f8:    04 8e             	goto 0x1c <LZ4_decompress_generic+0xBE : 10d616 >			  ## lz4.c:323:5
  10d5fa:    72 d6             	r2 = r7  #			  ## lz4.c:534:17
  10d5fc:    00 24             		 r0 = [sp+16]			  ## lz4.c:534:37
  10d5fe:    b4 e0 02 1b       	r1 = r0 - r11			  ## lz4.c:534:37
  10d602:    50 16             	r0 = r5			  ## lz4.c:534:17
  10d604:    bf ea 9c b9       	call -0x8cc8 <memmove : 104940 >			  ## lz4.c:534:17
  10d608:    04 86             	goto 0xc <LZ4_decompress_generic+0xBE : 10d616 >
  10d60a:    40 16             	r0 = r4			  ## lz4.c:549:21
  10d60c:    a1 16             	r1 = r10			  ## lz4.c:549:21
  10d60e:    72 16             	r2 = r7			  ## lz4.c:549:21
  10d610:    bf ea 96 b9       	call -0x8cd4 <memmove : 104940 >			  ## lz4.c:549:21
  10d614:    74 18             	r4 += r7			  ## lz4.c:550:24
  10d616:    50 ee 60 b0       	r11 = b[r6+0x0] (u)			  ## lz4.c:456:32
  10d61a:    c0 e1 b4 78       	r7 = r11 >> 0x4			  ## lz4.c:457:30
  10d61e:    69 81             	r1 = r6 + 0x1			  ## lz4.c:456:35
  10d620:    87 f8 1d 1e       	if (r7 != 0xf) goto 0x3a <LZ4_decompress_generic+0x106 : 10d65e >
  10d624:    47 2f             	r7 = 0xf
  10d626:    1e 81             	r6 = r1 + 0x1			  ## lz4.c:460:24
  10d628:    42 21             	r2 = 0x1
  10d62a:    16 e9 00 09       	if (r6 >= r9) {
  10d62e:    42 20             		r2 = 0x0
                               	}			  ## lz4.c:462:22
  10d630:    19 40             	r1 = b[r1+0x0] (u)			  ## lz4.c:460:21
  10d632:    17 18             	r7 += r1			  ## lz4.c:461:24
  10d634:    91 f8 04 fe       	if (r1 != 0xff) goto 0x8 <LZ4_decompress_generic+0xE8 : 10d640 >
  10d638:    90 e1 20 2f       	r2 = r2 | r15			  ## lz4.c:462:22
  10d63c:    61 16             	r1 = r6			  ## lz4.c:462:22
  10d63e:    f2 53             	if (r2 != 0) goto -0x1a <LZ4_decompress_generic+0xCE : 10d626 >
  10d640:    8c f8 0e 02       	if (r12 != 0x1) goto 0x1c <LZ4_decompress_generic+0x108 : 10d660 >
  10d644:    72 1d             	r2 = r7 + r4
  10d646:    41 21             	r1 = 0x1
  10d648:    12 e9 00 07       	if (r2 >= r7) {
  10d64c:    41 20             		r1 = 0x0
                               	}
  10d64e:    b1 54             	if (r1 != 0) goto 0xe8 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d650:    f2 1d             	r2 = r7 + r6
  10d652:    41 21             	r1 = 0x1
  10d654:    12 e9 00 07       	if (r2 >= r7) {
  10d658:    41 20             		r1 = 0x0
                               	}
  10d65a:    01 42             	if (r1 == 0) goto 0x4 <LZ4_decompress_generic+0x108 : 10d660 >
  10d65c:    34 8d             	goto 0xda <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d65e:    16 16             	r6 = r1
  10d660:    cd 1d             	r5 = r4 + r7			  ## lz4.c:472:18
  10d662:    0c f8 07 00       	if (r12 == 0x0) goto 0xe <LZ4_decompress_generic+0x11C : 10d674 >			  ## lz4.c:473:27
  10d666:    08 ec 6c 50       	if (r5 > r8) goto 0xd8 <LZ4_decompress_generic+0x1EA : 10d742 >
  10d66a:    e9 dd             	r1 = r6 + r7  #			  ## lz4.c:473:89
  10d66c:    00 27             		 r0 = [sp+28]			  ## lz4.c:473:89
  10d66e:    80 ec 05 10       	if (r1 <= r0) goto 0xa <LZ4_decompress_generic+0x124 : 10d67c >
  10d672:    34 87             	goto 0xce <LZ4_decompress_generic+0x1EA : 10d742 >
  10d674:    00 26             	r0 = [sp+24]			  ## lz4.c:473:13
  10d676:    00 ec 64 50       	if (r5 > r0) goto 0xc8 <LZ4_decompress_generic+0x1EA : 10d742 >
  10d67a:    e9 1d             	r1 = r6 + r7			  ## lz4.c:496:12
  10d67c:    72 16             	r2 = r7			  ## lz4.c:323:5
  10d67e:    63 16             	r3 = r6			  ## lz4.c:323:5
  10d680:    12 03             	rep 0x4 r2 {			  ## lz4.c:323:5
  10d682:    30 07             		r0 = b[r3++=0x1] (u)			  ## lz4.c:323:5
  10d684:    c0 07             		b[r4++=0x1] = r0
                               	}			  ## lz4.c:323:5
  10d686:    f2 5c             	if (r2 != 0) goto -0x8 <LZ4_decompress_generic+0x128 : 10d680 >			  ## lz4.c:323:5
  10d688:    18 41             	r0 = b[r1+0x1] (u)			  ## lz4.c:500:18
  10d68a:    1a 40             	r2 = b[r1+0x0] (u)			  ## lz4.c:500:18
  10d68c:    a2 e1 20 04       	r2 <= insert(r0, p:0x8, l:0x8)			  ## lz4.c:500:18
  10d690:    d1 1e             	r1 = r5 - r2			  ## lz4.c:502:20
  10d692:    b4 e0 10 0d       	r0 = r1 + r13			  ## lz4.c:503:31
  10d696:    43 21             	r3 = 0x1			  ## lz4.c:503:31
  10d698:    10 e9 00 0a       	if (r0 >= r10) {			  ## lz4.c:503:31
  10d69c:    43 20             		r3 = 0x0
                               	}			  ## lz4.c:503:31
  10d69e:    e8 1d             	r0 = r6 + r7			  ## lz4.c:496:12
  10d6a0:    0e 82             	r6 = r0 + 0x2			  ## lz4.c:501:12
  10d6a2:    00 2a             	r0 = [sp+40]
  10d6a4:    30 fb 48 00       	if ((r0 & r3) != 0) goto 0x90 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d6a8:    40 20             	r0 = 0x0
  10d6aa:    d8 43             	b[r5+0x3] = r0			  ## lz4.c:234:30
  10d6ac:    d8 42             	b[r5+0x2] = r0			  ## lz4.c:234:30
  10d6ae:    da 40             	b[r5+0x0] = r2			  ## lz4.c:234:30
  10d6b0:    a2 a8             	r2 = r2 >> 0x8			  ## lz4.c:234:30
  10d6b2:    70 f1 f0 b0       	r0 = r11 & 0xFFFFFF0F  #			  ## lz4.c:509:24
  10d6b6:    da 41             		 b[r5+0x1] = r2			  ## lz4.c:234:30
  10d6b8:    80 f8 13 1e       	if (r0 != 0xf) goto 0x26 <LZ4_decompress_generic+0x18A : 10d6e2 >
  10d6bc:    40 2f             	r0 = 0xf
  10d6be:    63 16             	r3 = r6
  10d6c0:    3e 81             	r6 = r3 + 0x1			  ## lz4.c:513:24
  10d6c2:    32 07             	r2 = b[r3++=0x1] (u)			  ## lz4.c:513:21
  10d6c4:    0c f8 02 00       	if (r12 == 0x0) goto 0x4 <LZ4_decompress_generic+0x174 : 10d6cc >			  ## lz4.c:513:21
  10d6c8:    0e ec 35 60       	if (r6 > r14) goto 0x6a <LZ4_decompress_generic+0x1DE : 10d736 >
  10d6cc:    20 18             	r0 += r2			  ## lz4.c:517:24
  10d6ce:    12 f8 f6 ff       	if (r2 == 0xff) goto -0x14 <LZ4_decompress_generic+0x166 : 10d6be >
  10d6d2:    0b 1d             	r3 = r0 + r5
  10d6d4:    42 21             	r2 = 0x1
  10d6d6:    13 e9 00 00       	if (r3 >= r0) {
  10d6da:    42 20             		r2 = 0x0
                               	}
  10d6dc:    8c f8 01 02       	if (r12 != 0x1) goto 0x2 <LZ4_decompress_generic+0x18A : 10d6e2 >
  10d6e0:    92 4b             	if (r2 != 0) goto 0x56 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d6e2:    0f 84             	r7 = r0 + 0x4			  ## lz4.c:523:16
  10d6e4:    00 29             	r0 = [sp+36]			  ## lz4.c:526:36
  10d6e6:    80 f8 21 04       	if (r0 != 0x2) goto 0x42 <LZ4_decompress_generic+0x1D4 : 10d72c >			  ## lz4.c:526:36
  10d6ea:    0a ed 1f 10       	ifs (r1 >= r10) goto 0x3e <LZ4_decompress_generic+0x1D4 : 10d72c >
  10d6ee:    dc dd             	r4 = r5 + r7  #			  ## lz4.c:528:17
  10d6f0:    00 28             		 r0 = [sp+32]			  ## lz4.c:528:17
  10d6f2:    00 ec 21 40       	if (r4 > r0) goto 0x42 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d6f6:    b4 e0 a2 b1       	r11 = r10 - r1			  ## lz4.c:532:46
  10d6fa:    8b ec 7e 71       	if (r7 <= r11) goto -0x104 <LZ4_decompress_generic+0xA2 : 10d5fa >
  10d6fe:    b2 d6             	r2 = r11  #			  ## lz4.c:540:17
  10d700:    00 24             		 r0 = [sp+16]			  ## lz4.c:540:36
  10d702:    b4 e0 02 1b       	r1 = r0 - r11			  ## lz4.c:540:36
  10d706:    50 16             	r0 = r5			  ## lz4.c:540:17
  10d708:    bf ea 1a b9       	call -0x8dcc <memmove : 104940 >			  ## lz4.c:540:17
  10d70c:    b4 e0 72 7b       	r7 = r7 - r11			  ## lz4.c:539:48
  10d710:    b4 e0 50 4b       	r4 = r5 + r11			  ## lz4.c:541:20
  10d714:    b4 e0 42 0a       	r0 = r4 - r10			  ## lz4.c:542:44
  10d718:    80 ec 77 71       	if (r7 <= r0) goto -0x112 <LZ4_decompress_generic+0xB2 : 10d60a >			  ## lz4.c:542:21
  10d71c:    c8 1d             	r0 = r4 + r7			  ## lz4.c:543:49
  10d71e:    a1 16             	r1 = r10
  10d720:    04 82             	goto 0x4 <LZ4_decompress_generic+0x1CE : 10d726 >
  10d722:    12 07             	r2 = b[r1++=0x1] (u)			  ## lz4.c:546:33
  10d724:    c2 07             	b[r4++=0x1] = r2			  ## lz4.c:546:31
  10d726:    80 e9 fc 41       	if (r4 < r0) goto -0x8 <LZ4_decompress_generic+0x1CA : 10d722 >
  10d72a:    b7 95             	goto -0x116 <LZ4_decompress_generic+0xBE : 10d616 >
  10d72c:    dc dd             	r4 = r5 + r7  #			  ## lz4.c:557:18
  10d72e:    00 28             		 r0 = [sp+32]			  ## lz4.c:557:18
  10d730:    80 ec 5e 41       	if (r4 <= r0) goto -0x144 <LZ4_decompress_generic+0x98 : 10d5f0 >
  10d734:    04 81             	goto 0x2 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d736:    36 16             	r6 = r3
  10d738:    00 25             	r0 = [sp+20]			  ## lz4.c:612:18
  10d73a:    f8 3f             	r0 += -0x1			  ## lz4.c:612:18
  10d73c:    80 1f             	r0 = r0 - r6			  ## lz4.c:612:47
  10d73e:    02 8b             	sp += 0x2c
  10d740:    5f 04             	{pc, r15-r4} = [sp++]			  ## lz4.c:613:1
  10d742:    00 22             	r0 = [sp+8]			  ## lz4.c:475:17
  10d744:    00 52             	if (r0 == 0) goto 0x24 <LZ4_decompress_generic+0x212 : 10d76a >			  ## lz4.c:475:17
  10d746:    00 23             	r0 = [sp+12]
  10d748:    00 ec f6 51       	if (r5 > r0) goto -0x14 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d74c:    b4 e0 60 87       	r8 = r6 + r7			  ## lz4.c:479:41
  10d750:    0c f8 03 00       	if (r12 == 0x0) goto 0x6 <LZ4_decompress_generic+0x202 : 10d75a >			  ## lz4.c:479:41
  10d754:    00 21             	r0 = [sp+4]
  10d756:    00 ec ef 81       	if (r8 > r0) goto -0x22 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d75a:    40 16             	r0 = r4			  ## lz4.c:490:13
  10d75c:    61 16             	r1 = r6			  ## lz4.c:490:13
  10d75e:    72 16             	r2 = r7			  ## lz4.c:490:13
  10d760:    bf ea ee b8       	call -0x8e24 <memmove : 104940 >			  ## lz4.c:490:13
  10d764:    8c f8 13 00       	if (r12 != 0x0) goto 0x26 <LZ4_decompress_generic+0x236 : 10d78e >
  10d768:    04 9c             	goto 0x38 <LZ4_decompress_generic+0x24A : 10d7a2 >
  10d76a:    00 23             	r0 = [sp+12]
  10d76c:    8c f8 02 00       	if (r12 != 0x0) goto 0x4 <LZ4_decompress_generic+0x21C : 10d774 >
  10d770:    80 e8 e2 51       	if (r5 != r0) goto -0x3c <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d774:    0c f8 0e 00       	if (r12 == 0x0) goto 0x1c <LZ4_decompress_generic+0x23C : 10d794 >
  10d778:    00 ec de 51       	if (r5 > r0) goto -0x44 <LZ4_decompress_generic+0x1E0 : 10d738 >
  10d77c:    e8 dd             	r0 = r6 + r7  #			  ## lz4.c:486:42
  10d77e:    01 21             		 r1 = [sp+4]			  ## lz4.c:486:42
  10d780:    81 e8 da 01       	if (r0 != r1) goto -0x4c <LZ4_decompress_generic+0x1E0 : 10d738 >			  ## lz4.c:486:42
  10d784:    40 16             	r0 = r4			  ## lz4.c:490:13
  10d786:    61 16             	r1 = r6			  ## lz4.c:490:13
  10d788:    72 16             	r2 = r7			  ## lz4.c:490:13
  10d78a:    bf ea d9 b8       	call -0x8e4e <memmove : 104940 >			  ## lz4.c:490:13
  10d78e:    00 20             	r0 = [sp]			  ## lz4.c:605:35
  10d790:    50 1e             	r0 = r5 - r0			  ## lz4.c:605:35
  10d792:    e7 95             	goto -0x56 <LZ4_decompress_generic+0x1E6 : 10d73e >			  ## lz4.c:605:35
  10d794:    40 16             	r0 = r4			  ## lz4.c:490:13
  10d796:    61 16             	r1 = r6			  ## lz4.c:490:13
  10d798:    72 16             	r2 = r7			  ## lz4.c:490:13
  10d79a:    bf ea d1 b8       	call -0x8e5e <memmove : 104940 >			  ## lz4.c:490:13
  10d79e:    b4 e0 60 87       	r8 = r6 + r7			  ## lz4.c:491:16
  10d7a2:    00 25             	r0 = [sp+20]			  ## lz4.c:607:41
  10d7a4:    b4 e0 82 00       	r0 = r8 - r0			  ## lz4.c:607:41
  10d7a8:    e7 8a             	goto -0x6c <LZ4_decompress_generic+0x1E6 : 10d73e >			  ## lz4.c:607:41
  10d7aa:    43 21             	r3 = 0x1
  10d7ac:    82 f8 04 02       	if (r2 != 0x1) goto 0x8 <LZ4_decompress_generic+0x260 : 10d7b8 >
  10d7b0:    09 40             	r1 = b[r0+0x0] (u)			  ## lz4.c:443:36
  10d7b2:    31 e8 00 00       	if (r1 == 0x0) {
  10d7b6:    13 16             		r3 = r1
                               	}
  10d7b8:    a0 e0 00 30       	r0 = 0x0 - r3			  ## lz4.c:443:16
  10d7bc:    e7 80             	goto -0x80 <LZ4_decompress_generic+0x1E6 : 10d73e >
  10d7be:    09 40             	r1 = b[r0+0x0] (u)			  ## lz4.c:446:17
  10d7c0:    40 21             	r0 = 0x1			  ## lz4.c:446:17
  10d7c2:    b1 e8 00 00       	if (r1 != 0x0) {
  10d7c6:    10 3f             		r0 = -0x1
                               	}			  ## lz4.c:446:17
  10d7c8:    d7 9a             	goto -0x8c <LZ4_decompress_generic+0x1E6 : 10d73e >			  ## lz4.c:446:17


LZ4_decompress_safe_continue:
  10d7ca:    77 04             	[--sp] = {rets, r7-r4}			  ## lz4.c:660:0
  10d7cc:    e2 99             	sp += -0x1c			  ## lz4.c:660:0
  10d7ce:    04 d6             	r4 = r0  #			  ## lz4.c:660:0
  10d7d0:    06 2c             		 r6 = [sp+48]			  ## lz4.c:660:0
  10d7d2:    25 d6             	r5 = r2  #			  ## lz4.c:660:0
  10d7d4:    40 63             		 r0 = [r4+0xc] 			  ## lz4.c:660:0
  10d7d6:    47 62             	r7 = [r4+0x8] 			  ## lz4.c:664:16
  10d7d8:    05 e8 18 70       	if (r7 == r5) goto 0x30 <LZ4_decompress_safe_continue+0x42 : 10d80c >
  10d7dc:    72 de             	r2 = r7 - r0  #			  ## lz4.c:675:48
  10d7de:    c0 61             		 [r4+0x4] = r0			  ## lz4.c:674:28
  10d7e0:    c2 60             	[r4+0x0] = r2			  ## lz4.c:675:29
  10d7e2:    80 26             	[sp+24] = r0			  ## lz4.c:676:18
  10d7e4:    32 d6             	r2 = r3  #			  ## lz4.c:676:18
  10d7e6:    82 25             		 [sp+20] = r2			  ## lz4.c:676:18
  10d7e8:    63 d6             	r3 = r6  #			  ## lz4.c:676:18
  10d7ea:    85 24             		 [sp+16] = r5			  ## lz4.c:676:18
  10d7ec:    40 22             	r0 = 0x2			  ## lz4.c:676:18
  10d7ee:    80 23             	[sp+12] = r0			  ## lz4.c:676:18
  10d7f0:    40 20             	r0 = 0x0			  ## lz4.c:676:18
  10d7f2:    80 22             	[sp+8] = r0			  ## lz4.c:676:18
  10d7f4:    80 21             	[sp+4] = r0			  ## lz4.c:676:18
  10d7f6:    40 21             	r0 = 0x1			  ## lz4.c:676:18
  10d7f8:    10 d6             	r0 = r1  #			  ## lz4.c:676:18
  10d7fa:    80 20             		 [sp] = r0			  ## lz4.c:676:18
  10d7fc:    51 16             	r1 = r5			  ## lz4.c:676:18
  10d7fe:    bf ea ab fe       	call -0x2aa <LZ4_decompress_generic : 10d558 >			  ## lz4.c:676:18
  10d802:    80 fd 1d 02       	ifs (r0 < 0x1) goto 0x3a <LZ4_decompress_safe_continue+0x76 : 10d840 >
  10d806:    51 dc             	r1 = r5 + r0  #			  ## lz4.c:683:42
  10d808:    c0 63             		 [r4+0xc] = r0			  ## lz4.c:682:27
  10d80a:    04 99             	goto 0x32 <LZ4_decompress_safe_continue+0x74 : 10d83e >			  ## lz4.c:682:27
  10d80c:    04 eb 84 00       	{r7, r2} = [r4+]			  ## lz4.c:667:100
  10d810:    50 de             	r0 = r5 - r0  #			  ## lz4.c:667:72
  10d812:    87 26             		 [sp+24] = r7			  ## lz4.c:665:18
  10d814:    32 d6             	r2 = r3  #			  ## lz4.c:665:18
  10d816:    82 25             		 [sp+20] = r2			  ## lz4.c:665:18
  10d818:    63 d6             	r3 = r6  #			  ## lz4.c:665:18
  10d81a:    80 24             		 [sp+16] = r0			  ## lz4.c:665:18
  10d81c:    40 22             	r0 = 0x2			  ## lz4.c:665:18
  10d81e:    80 23             	[sp+12] = r0			  ## lz4.c:665:18
  10d820:    40 20             	r0 = 0x0			  ## lz4.c:665:18
  10d822:    80 22             	[sp+8] = r0			  ## lz4.c:665:18
  10d824:    80 21             	[sp+4] = r0			  ## lz4.c:665:18
  10d826:    40 21             	r0 = 0x1			  ## lz4.c:665:18
  10d828:    10 d6             	r0 = r1  #			  ## lz4.c:665:18
  10d82a:    80 20             		 [sp] = r0			  ## lz4.c:665:18
  10d82c:    51 16             	r1 = r5			  ## lz4.c:665:18
  10d82e:    bf ea 93 fe       	call -0x2da <LZ4_decompress_generic : 10d558 >			  ## lz4.c:665:18
  10d832:    80 fd 05 02       	ifs (r0 < 0x1) goto 0xa <LZ4_decompress_safe_continue+0x76 : 10d840 >
  10d836:    68 e8 0c 40       	[r4+0xc] += r0			  ## lz4.c:671:27
  10d83a:    41 62             	r1 = [r4+0x8] 			  ## lz4.c:672:27
  10d83c:    01 18             	r1 += r0			  ## lz4.c:672:27
  10d83e:    c1 62             	[r4+0x8] = r1			  ## lz4.c:672:27
  10d840:    02 87             	sp += 0x1c
  10d842:    57 04             	{pc, r7-r4} = [sp++]			  ## lz4.c:687:1


Run_App:
  10d844:    7e 04             	[--sp] = {rets, r14-r4}			  ## bankSwitch.c:15:0
  10d846:    c2 9f             	sp += -0x84			  ## bankSwitch.c:15:0
  10d848:    04 16             	r4 = r0			  ## bankSwitch.c:15:0
  10d84a:    04 eb 05 00       	{r2, r0} = [r4+]			  ## sdfile.c:29:60
  10d84e:    ed 84             	r5 = sp + 100			  ## sdfile.c:29:60
  10d850:    4b 20             	r3 = 0x20			  ## sdfile.c:29:5
  10d852:    51 d6             	r1 = r5  #			  ## sdfile.c:29:5
  10d854:    46 63             		 r6 = [r4+0xc] 			  ## sdfile.c:29:11
  10d856:    c6 00             	call r6			  ## sdfile.c:29:5
  10d858:    40 e1 02 50       	r0 = r5 | 0x2			  ## sdfile.c:31:24
  10d85c:    41 3e             	r1 = 0x1e			  ## sdfile.c:31:12
  10d85e:    bf ea 53 fc       	call -0x75a <chip_crc16 : 10d108 >			  ## sdfile.c:31:12
  10d862:    00 f8 82 00       	if (r0 == 0x0) goto 0x104 <Run_App+0x126 : 10d96a >			  ## sdfile.c:31:12
  10d866:    d8 e9 64 10       	r1 = h[sp+100] (u)			  ## sdfile.c:34:29
  10d86a:    80 e8 7e 10       	if (r1 != r0) goto 0xfc <Run_App+0x126 : 10d96a >			  ## sdfile.c:34:29
  10d86e:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## sdfile.c:35:31
  10d872:    02 f1 20 10       	r2 = r1 + 0x20  #			  ## sdfile.c:36:64
  10d876:    46 63             		 r6 = [r4+0xc] 			  ## sdfile.c:35:15
  10d878:    cd 84             	r5 = sp + 68			  ## sdfile.c:35:15
  10d87a:    4b 20             	r3 = 0x20			  ## sdfile.c:35:9
  10d87c:    51 16             	r1 = r5			  ## sdfile.c:35:9
  10d87e:    c6 00             	call r6			  ## sdfile.c:35:9
  10d880:    f8 e8 34 80       	r8 = sp + 52			  ## sdfile.c:35:9
  10d884:    17 3c             	r7 = -0x4			  ## sdfile.c:35:9
  10d886:    04 93             	goto 0x26 <Run_App+0x6A : 10d8ae >			  ## sdfile.c:35:9
  10d888:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## bankSwitch.c:32:57
  10d88c:    52 61             	r2 = [r5+0x4] 			  ## bankSwitch.c:32:75
  10d88e:    12 d8             	r2 += r1  #			  ## bankSwitch.c:32:68
  10d890:    46 63             		 r6 = [r4+0xc] 			  ## bankSwitch.c:32:19
  10d892:    a9 94             	r1 = sp + 52			  ## bankSwitch.c:32:19
  10d894:    43 30             	r3 = 0x10			  ## bankSwitch.c:32:13
  10d896:    c6 00             	call r6			  ## bankSwitch.c:32:13
  10d898:    00 49             	if (r0 == 0) goto 0x12 <Run_App+0x68 : 10d8ac >			  ## bankSwitch.c:32:13
  10d89a:    a8 94             	r0 = sp + 52
  10d89c:    41 2e             	r1 = 0xe			  ## bankSwitch.c:33:19
  10d89e:    bf ea 33 fc       	call -0x79a <chip_crc16 : 10d108 >			  ## bankSwitch.c:33:19
  10d8a2:    00 44             	if (r0 == 0) goto 0x8 <Run_App+0x68 : 10d8ac >			  ## bankSwitch.c:33:19
  10d8a4:    50 ed 8e 10       	r1 = h[r8+0xe] (u)			  ## bankSwitch.c:35:32
  10d8a8:    00 e8 03 10       	if (r1 == r0) goto 0x6 <Run_App+0x6E : 10d8b2 >			  ## bankSwitch.c:35:32
  10d8ac:    c7 21             	r7 += 0x1			  ## bankSwitch.c:30:9
  10d8ae:    f7 4c             	if (r7 != 0) goto -0x28 <Run_App+0x44 : 10d888 >
  10d8b0:    24 9c             	goto 0xb8 <Run_App+0x126 : 10d96a >
  10d8b2:    50 61             	r0 = [r5+0x4] 			  ## bankSwitch.c:36:35
  10d8b4:    01 2f             	r1 = [sp+60]			  ## bankSwitch.c:36:49
  10d8b6:    d4 e9 38 80       	r8 = [sp+56]			  ## bankSwitch.c:38:35
  10d8ba:    dc e9 50 20       	r2 = b[sp+80] (u)			  ## bankSwitch.c:50:14
  10d8be:    d8 e9 36 a0       	r10 = h[sp+54] (u)			  ## bankSwitch.c:37:29
  10d8c2:    b4 e0 10 c0       	r12 = r1 + r0			  ## bankSwitch.c:36:40
  10d8c6:    f8 e8 44 90       	r9 = sp + 68
  10d8ca:    8e 16             	r14 = r8
  10d8cc:    52 e8 0a 30       	if ((r2 & 0x40) == 0) goto 0x14 <Run_App+0xA0 : 10d8e4 >
  10d8d0:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## bankSwitch.c:51:68
  10d8d4:    b4 f0 10 2c       	r2 = r1 + r12  #			  ## bankSwitch.c:51:79
  10d8d8:    46 63             		 r6 = [r4+0xc] 			  ## bankSwitch.c:51:15
  10d8da:    a9 84             	r1 = sp + 36			  ## bankSwitch.c:51:15
  10d8dc:    43 30             	r3 = 0x10			  ## bankSwitch.c:51:9
  10d8de:    c6 00             	call r6			  ## bankSwitch.c:51:9
  10d8e0:    d4 e9 2c e0       	r14 = [sp+44]			  ## bankSwitch.c:52:35
  10d8e4:    f8 e8 34 b0       	r11 = sp + 52
  10d8e8:    17 3c             	r7 = -0x4
  10d8ea:    cd ff 04 35 1e 00 	r13 = 0x1e3504 <__stub_VecMinScalar_float_c_f_c+0xD3508 : 1e3504 >
  10d8f0:    04 92             	goto 0x24 <Run_App+0xD2 : 10d916 >
  10d8f2:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## bankSwitch.c:58:67
  10d8f6:    b4 f0 10 2c       	r2 = r1 + r12  #			  ## bankSwitch.c:58:78
  10d8fa:    46 63             		 r6 = [r4+0xc] 			  ## bankSwitch.c:58:19
  10d8fc:    e1 16             	r1 = r14			  ## bankSwitch.c:58:13
  10d8fe:    a3 16             	r3 = r10			  ## bankSwitch.c:58:13
  10d900:    c6 00             	call r6			  ## bankSwitch.c:58:13
  10d902:    00 48             	if (r0 == 0) goto 0x10 <Run_App+0xD0 : 10d914 >			  ## bankSwitch.c:58:13
  10d904:    d0 ec d0 00       	r0 = [r13+0x0]			  ## bankSwitch.c:67:27
  10d908:    50 ed bc 10       	r1 = h[r11+0xc] (u)			  ## bankSwitch.c:70:24
  10d90c:    80 17             	r0 = r0.l (u)			  ## bankSwitch.c:70:28
  10d90e:    80 e8 01 10       	if (r1 != r0) goto 0x2 <Run_App+0xD0 : 10d914 >			  ## bankSwitch.c:70:28
  10d912:    80 43             	if (r0 != 0) goto 0x6 <Run_App+0xD6 : 10d91a >
  10d914:    c7 21             	r7 += 0x1			  ## bankSwitch.c:30:9
  10d916:    f7 4d             	if (r7 != 0) goto -0x26 <Run_App+0xAE : 10d8f2 >
  10d918:    14 88             	goto 0x50 <Run_App+0x126 : 10d96a >
  10d91a:    50 ee 9c 00       	r0 = b[r9+0xc] (u)			  ## bankSwitch.c:82:14
  10d91e:    50 e8 18 30       	if ((r0 & 0x40) == 0) goto 0x30 <Run_App+0x10E : 10d952 >			  ## bankSwitch.c:82:14
  10d922:    d0 e9 24 00       	r1_r0 = d[sp+36]			  ## bankSwitch.c:85:82
  10d926:    10 d8             	r0 += r1  #			  ## lz4.c:645:50
  10d928:    80 24             		 [sp+16] = r0			  ## lz4.c:644:23
  10d92a:    01 2b             	r1 = [sp+44]			  ## bankSwitch.c:88:91
  10d92c:    80 23             	[sp+12] = r0			  ## lz4.c:645:22
  10d92e:    42 20             	r2 = 0x0			  ## lz4.c:646:25
  10d930:    43 20             	r3 = 0x0			  ## lz4.c:646:25
  10d932:    d0 e9 05 20       	d[sp+4] = r3_r2			  ## lz4.c:646:25
  10d936:    b4 e0 12 28       	r2 = r1 - r8			  ## bankSwitch.c:88:101
  10d93a:    01 f1 10 e0       	r1 = r14 + 0x10  #			  ## bankSwitch.c:87:77
  10d93e:    82 20             		 [sp] = r2			  ## bankSwitch.c:87:24
  10d940:    33 e1 f0 af       	r3 = r10 + -0x10			  ## bankSwitch.c:88:52
  10d944:    88 84             	r0 = sp + 4			  ## bankSwitch.c:88:52
  10d946:    82 16             	r2 = r8			  ## bankSwitch.c:87:24
  10d948:    bf ea 3f ff       	call -0x182 <LZ4_decompress_safe_continue : 10d7ca >			  ## bankSwitch.c:87:24
  10d94c:    01 2c             	r1 = [sp+48]			  ## bankSwitch.c:90:39
  10d94e:    81 e8 0c 00       	if (r0 != r1) goto 0x18 <Run_App+0x126 : 10d96a >
  10d952:    64 e0 00 0b       	r0 = icfg			  ## bankSwitch.c:104:5
  10d956:    b8 28             	r0 &= 0xfffffeff			  ## bankSwitch.c:105:9
  10d958:    64 e0 80 0b       	icfg = r0			  ## bankSwitch.c:106:5
  10d95c:    60 00             	cli			  ## bankSwitch.c:107:5
  10d95e:    40 d6             	r0 = r4  #			  ## bankSwitch.c:110:5
  10d960:    51 61             		 r1 = [r5+0x4] 			  ## bankSwitch.c:110:57
  10d962:    c2 ff 04 bc 02 00 	r2 = 0x2bc04 <boot_arg_list : 2bc04 >			  ## bankSwitch.c:110:5
  10d968:    c8 00             	call r8			  ## bankSwitch.c:110:5
  10d96a:    22 81             	sp += 0x84
  10d96c:    5e 04             	{pc, r14-r4} = [sp++]			  ## bankSwitch.c:113:1


spi_unmount:
  10d96e:    7e 04             	[--sp] = {rets, r14-r4}			  ## spi0.c:113:0
  10d970:    c0 ff 00 1c 1e 00 	r0 = 0x1e1c00 <__stub_VecMinScalar_float_c_f_c+0xD1C04 : 1e1c00 >			  ## spi0.c:115:18
  10d976:    41 20             	r1 = 0x0			  ## spi0.c:115:18
  10d978:    81 60             	[r0+0x0] = r1			  ## spi0.c:115:18
  10d97a:    bf ea b2 fd       	call -0x49c <spi_get_port : 10d4e2 >			  ## spi0.c:119:16
  10d97e:    c2 ff 08 53 1e 00 	r2 = 0x1e5308 <__stub_VecMinScalar_float_c_f_c+0xD530C : 1e5308 >			  ## spi0.c:119:16
  10d984:    d0 ec 28 b0       	r11 = [r2+0x8]			  ## spi0.c:119:16
  10d988:    00 54             	if (r0 == 0) goto 0x28 <spi_unmount+0x44 : 10d9b2 >
  10d98a:    40 21             	r0 = 0x1
  10d98c:    48 e0 fe ff       	r8 = -0x2 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEF0002 : fffffffffffffffe >
  10d990:    09 e1 5c 23       	r9 = r2 + 0x35c
  10d994:    4a e0 02 00       	r10 = 0x2 <TLB_BEGIN+0x2 : 2 >
  10d998:    17 3d             	r7 = -0x3
  10d99a:    0c e1 74 23       	r12 = r2 + 0x374
  10d99e:    4d e0 80 00       	r13 = 0x80 <TLB_BEGIN+0x80 : 80 >
  10d9a2:    45 e0 7f ff       	r5 = -0x81 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFF82 : ffffffffffffff7e >
  10d9a6:    0e e1 70 23       	r14 = r2 + 0x370
  10d9aa:    53 20             	r3 = 0x40
  10d9ac:    44 e0 bf ff       	r4 = -0x41 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFC2 : ffffffffffffffbe >
  10d9b0:    04 91             	goto 0x22 <spi_unmount+0x66 : 10d9d4 >
  10d9b2:    40 28             	r0 = 0x8
  10d9b4:    48 e0 f7 ff       	r8 = -0x9 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFFFA : fffffffffffffff6 >
  10d9b8:    09 e1 60 23       	r9 = r2 + 0x360
  10d9bc:    4a e0 04 00       	r10 = 0x4 <TLB_BEGIN+0x4 : 4 >
  10d9c0:    17 3b             	r7 = -0x5
  10d9c2:    0c e1 5c 23       	r12 = r2 + 0x35c
  10d9c6:    4d e0 02 00       	r13 = 0x2 <TLB_BEGIN+0x2 : 2 >
  10d9ca:    15 3d             	r5 = -0x3
  10d9cc:    0e e1 58 23       	r14 = r2 + 0x358
  10d9d0:    43 21             	r3 = 0x1
  10d9d2:    14 3e             	r4 = -0x2
  10d9d4:    90 e1 42 6b       	r6 = r4 & r11
  10d9d8:    a6 62             	[r2+0x8] = r6
  10d9da:    64 e8 0e 24       	[r2+0xc] &= r4
  10d9de:    64 e8 00 23       	[r2+0x0] |= r3
  10d9e2:    d0 ec e1 10       	[r14+0x0] = r1
  10d9e6:    64 e8 0a 25       	[r2+0x8] &= r5
  10d9ea:    64 e8 0e 25       	[r2+0xc] &= r5
  10d9ee:    64 e8 00 2d       	[r2+0x0] |= r13
  10d9f2:    d0 ec c1 10       	[r12+0x0] = r1
  10d9f6:    03 e1 4c 24       	r3 = r2 + 0x44c
  10d9fa:    b1 60             	[r3+0x0] = r1
  10d9fc:    64 e8 0a 27       	[r2+0x8] &= r7
  10da00:    64 e8 0e 27       	[r2+0xc] &= r7
  10da04:    64 e8 00 2a       	[r2+0x0] |= r10
  10da08:    d0 ec 91 10       	[r9+0x0] = r1
  10da0c:    b1 61             	[r3+0x4] = r1
  10da0e:    64 e8 0e 28       	[r2+0xc] &= r8
  10da12:    64 e8 08 20       	[r2+0x8] |= r0
  10da16:    64 e8 00 20       	[r2+0x0] |= r0
  10da1a:    5e 04             	{pc, r14-r4} = [sp++]			  ## spi0.c:192:1


run_flash:
  10da1c:    77 04             	[--sp] = {rets, r7-r4}			  ## boot_flash.c:74:0
  10da1e:    c6 ff 34 fb 10 00 	r6 = 0x10fb34 <spi_flash_io_nor : 10fb34 >			  ## boot_flash.c:74:0
  10da24:    c4 ff e0 bb 02 00 	r4 = 0x2bbe0 <spi_flash_io : 2bbe0 >			  ## boot_flash.c:74:0
  10da2a:    60 16             	r0 = r6			  ## boot_flash.c:78:5
  10da2c:    41 16             	r1 = r4			  ## boot_flash.c:78:5
  10da2e:    10 83             	rep 0x4 0x4 {			  ## boot_flash.c:78:5
  10da30:    02 05             		r2 = [r0++=0x4] 			  ## boot_flash.c:78:5
  10da32:    92 05             		[r1++=0x4] = r2
                               	}			  ## boot_flash.c:78:5
  10da34:    c0 ff f0 bb 02 00 	r0 = 0x2bbf0 <spi_port : 2bbf0 >			  ## boot_flash.c:80:27
  10da3a:    07 60             	r7 = [r0+0x0] 			  ## boot_flash.c:80:27
  10da3c:    c0 ff 00 02 1f 00 	r0 = 0x1f0200 <__stub_VecMinScalar_float_c_f_c+0xE0204 : 1f0200 >			  ## spi0.c:234:17
  10da42:    40 ea 00 00       	[r0+0x0] = 0x0			  ## spi0.c:234:17
  10da46:    c5 ff 00 1c 1e 00 	r5 = 0x1e1c00 <__stub_VecMinScalar_float_c_f_c+0xD1C04 : 1e1c00 >			  ## spi0.c:234:17
  10da4c:    40 ea 20 50       	[r5+0x0] = 0x20			  ## spi0.c:235:18
  10da50:    78 41             	r0 = b[r7+0x1] (u)			  ## spi0.c:236:28
  10da52:    d0 61             	[r5+0x4] = r0			  ## spi0.c:236:19
  10da54:    78 60             	r0 = h[r7+0x0] (u)			  ## spi0.c:238:29
  10da56:    b0 e1 94 01       	r0 = uextra(r0, p:0x3, l:0x5)			  ## spi0.c:238:29
  10da5a:    bf ea e8 fc       	call -0x630 <spi_port_io_init : 10d42e >			  ## spi0.c:238:5
  10da5e:    7a 60             	r2 = h[r7+0x0] (u)			  ## spi0.c:242:16
  10da60:    51 60             	r1 = [r5+0x0] 			  ## spi0.c:242:16
  10da62:    c0 ff 14 54 1e 00 	r0 = 0x1e5414 <__stub_VecMinScalar_float_c_f_c+0xD5418 : 1e5414 >			  ## spi0.c:242:16
  10da68:    60 ff 07 20 05 00 	if ((r2 & 0x7) == 0) goto 0xa <run_flash+0x5C : 10da78 >			  ## spi0.c:242:9
  10da6e:    31 23             	r1 |= 0x8			  ## spi0.c:243:22
  10da70:    d1 60             	[r5+0x0] = r1			  ## spi0.c:243:22
  10da72:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:244:24
  10da74:    b9 33             	r1 &= 0xfff7ffff			  ## spi0.c:244:24
  10da76:    04 84             	goto 0x8 <run_flash+0x64 : 10da80 >			  ## spi0.c:244:24
  10da78:    b9 23             	r1 &= 0xfffffff7			  ## spi0.c:247:22
  10da7a:    d1 60             	[r5+0x0] = r1			  ## spi0.c:247:22
  10da7c:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:248:24
  10da7e:    31 33             	r1 |= 0x80000			  ## spi0.c:248:24
  10da80:    81 60             	[r0+0x0] = r1
  10da82:    00 ef 01 50       	[r5+0x0] |= 0x1			  ## spi0.c:251:18
  10da86:    40 21             	r0 = 0x1			  ## spi0.c:252:5
  10da88:    bf ea 30 fd       	call -0x5a0 <SPI0_cs : 10d4ec >			  ## spi0.c:252:5
  10da8c:    40 20             	r0 = 0x0			  ## norflash.c:221:5
  10da8e:    bf ea 2d fd       	call -0x5a6 <SPI0_cs : 10d4ec >			  ## norflash.c:221:5
  10da92:    68 2b             	r0 = 0xab			  ## norflash.c:223:5
  10da94:    bf ea 4a fd       	call -0x56c <SPI0_WriteByte : 10d52c >			  ## norflash.c:223:5
  10da98:    78 3f             	r0 = 0xff			  ## norflash.c:226:5
  10da9a:    bf ea 47 fd       	call -0x572 <SPI0_WriteByte : 10d52c >			  ## norflash.c:226:5
  10da9e:    78 3f             	r0 = 0xff			  ## norflash.c:227:5
  10daa0:    bf ea 44 fd       	call -0x578 <SPI0_WriteByte : 10d52c >			  ## norflash.c:227:5
  10daa4:    78 3f             	r0 = 0xff			  ## norflash.c:228:5
  10daa6:    bf ea 41 fd       	call -0x57e <SPI0_WriteByte : 10d52c >			  ## norflash.c:228:5
  10daaa:    bf ea 46 fd       	call -0x574 <SPI0_ReadByte : 10d53a >			  ## norflash.c:230:5
  10daae:    40 21             	r0 = 0x1			  ## norflash.c:231:5
  10dab0:    bf ea 1c fd       	call -0x5c8 <SPI0_cs : 10d4ec >			  ## norflash.c:231:5
  10dab4:    47 e0 6a ff       	r7 = -0x96 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFF6E : ffffffffffffff6a >
  10dab8:    04 92             	goto 0x24 <run_flash+0xC2 : 10dade >
  10daba:    40 20             	r0 = 0x0			  ## norflash.c:58:9
  10dabc:    bf ea 16 fd       	call -0x5d4 <SPI0_cs : 10d4ec >			  ## norflash.c:58:9
  10dac0:    40 25             	r0 = 0x5			  ## norflash.c:59:9
  10dac2:    bf ea 33 fd       	call -0x59a <SPI0_WriteByte : 10d52c >			  ## norflash.c:59:9
  10dac6:    bf ea 38 fd       	call -0x590 <SPI0_ReadByte : 10d53a >			  ## norflash.c:60:19
  10daca:    05 16             	r5 = r0			  ## norflash.c:60:19
  10dacc:    40 21             	r0 = 0x1			  ## norflash.c:61:9
  10dace:    bf ea 0d fd       	call -0x5e6 <SPI0_cs : 10d4ec >			  ## norflash.c:61:9
  10dad2:    55 e8 05 00       	if ((r5 & 0x1) == 0) goto 0xa <run_flash+0xC4 : 10dae0 >			  ## norflash.c:61:9
  10dad6:    40 21             	r0 = 0x1			  ## norflash.c:66:9
  10dad8:    bf ea 72 f8       	call -0xf1c <mdelay : 10cbc0 >			  ## norflash.c:66:9
  10dadc:    c7 21             	r7 += 0x1			  ## norflash.c:66:9
  10dade:    f7 4d             	if (r7 != 0) goto -0x26 <run_flash+0x9E : 10daba >
  10dae0:    40 20             	r0 = 0x0			  ## norflash.c:254:5
  10dae2:    45 20             	r5 = 0x0			  ## norflash.c:254:5
  10dae4:    bf ea 02 fd       	call -0x5fc <SPI0_cs : 10d4ec >			  ## norflash.c:254:5
  10dae8:    58 26             	r0 = 0x66			  ## norflash.c:255:5
  10daea:    bf ea 1f fd       	call -0x5c2 <SPI0_WriteByte : 10d52c >			  ## norflash.c:255:5
  10daee:    40 21             	r0 = 0x1			  ## norflash.c:257:5
  10daf0:    bf ea fc fc       	call -0x608 <SPI0_cs : 10d4ec >			  ## norflash.c:257:5
  10daf4:    40 20             	r0 = 0x0			  ## norflash.c:259:5
  10daf6:    bf ea f9 fc       	call -0x60e <SPI0_cs : 10d4ec >			  ## norflash.c:259:5
  10dafa:    60 39             	r0 = 0x99			  ## norflash.c:261:5
  10dafc:    bf ea 16 fd       	call -0x5d4 <SPI0_WriteByte : 10d52c >			  ## norflash.c:261:5
  10db00:    40 21             	r0 = 0x1			  ## norflash.c:263:5
  10db02:    bf ea f3 fc       	call -0x61a <SPI0_cs : 10d4ec >			  ## norflash.c:263:5
  10db06:    40 22             	r0 = 0x2			  ## norflash.c:264:5
  10db08:    bf ea 5a f8       	call -0xf4c <mdelay : 10cbc0 >			  ## norflash.c:264:5
  10db0c:    c5 61             	[r4+0x4] = r5			  ## boot_flash.c:82:29
  10db0e:    04 88             	goto 0x10 <run_flash+0x104 : 10db20 >			  ## boot_flash.c:82:29
  10db10:    40 16             	r0 = r4			  ## boot_flash.c:85:9
  10db12:    bf ea 97 fe       	call -0x2d2 <Run_App : 10d844 >			  ## boot_flash.c:85:9
  10db16:    68 90             	r0 = r6 + 0x10			  ## boot_flash.c:86:35
  10db18:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## boot_flash.c:86:35
  10db1c:    c0 61             	[r4+0x4] = r0			  ## boot_flash.c:86:33
  10db1e:    c5 21             	r5 += 0x1			  ## boot_flash.c:84:37
  10db20:    85 f8 f6 0b       	if (r5 != 0x5) goto -0x14 <run_flash+0xF4 : 10db10 >
  10db24:    37 04             	{rets, r7-r4} = [sp++]			  ## boot_flash.c:89:5
  10db26:    97 83             	goto -0x1ba <spi_unmount : 10d96e >			  ## boot_flash.c:89:5


flash_poweroff:
  10db28:    75 04             	[--sp] = {rets, r5, r4}			  ## norflash.c:439:0
  10db2a:    04 16             	r4 = r0			  ## norflash.c:439:0
  10db2c:    c5 ff 00 53 1e 00 	r5 = 0x1e5300 <__stub_VecMinScalar_float_c_f_c+0xD5304 : 1e5300 >			  ## norflash.c:439:0
  10db32:    54 e8 13 00       	if ((r4 & 0x1) == 0) goto 0x26 <flash_poweroff+0x34 : 10db5c >			  ## norflash.c:439:0
  10db36:    c7 ef 10 50       	[r5+0x1c] &= 0xFFFFFFEF			  ## norflash.c:441:23
  10db3a:    c6 ef 10 50       	[r5+0x18] &= 0xFFFFFFEF			  ## norflash.c:442:23
  10db3e:    02 ef 10 50       	[r5+0x8] |= 0x10			  ## norflash.c:443:23
  10db42:    c4 ef 10 50       	[r5+0x10] &= 0xFFFFFFEF			  ## norflash.c:444:23
  10db46:    05 ef 10 50       	[r5+0x14] |= 0x10			  ## norflash.c:445:23
  10db4a:    c0 ef 10 50       	[r5+0x0] &= 0xFFFFFFEF			  ## norflash.c:446:23
  10db4e:    40 21             	r0 = 0x1			  ## norflash.c:447:9
  10db50:    bf ea 36 f8       	call -0xf94 <mdelay : 10cbc0 >			  ## norflash.c:447:9
  10db54:    40 21             	r0 = 0x1			  ## norflash.c:448:9
  10db56:    41 20             	r1 = 0x0			  ## norflash.c:448:9
  10db58:    bf ea 20 f8       	call -0xfc0 <spi_cs_pu : 10cb9c >			  ## norflash.c:448:9
  10db5c:    54 e8 13 08       	if ((r4 & 0x2) == 0) goto 0x26 <flash_poweroff+0x5E : 10db86 >
  10db60:    c7 ef 20 50       	[r5+0x1c] &= 0xFFFFFFDF			  ## norflash.c:452:23
  10db64:    c6 ef 20 50       	[r5+0x18] &= 0xFFFFFFDF			  ## norflash.c:453:23
  10db68:    02 ef 20 50       	[r5+0x8] |= 0x20			  ## norflash.c:454:23
  10db6c:    c4 ef 20 50       	[r5+0x10] &= 0xFFFFFFDF			  ## norflash.c:455:23
  10db70:    05 ef 20 50       	[r5+0x14] |= 0x20			  ## norflash.c:456:23
  10db74:    c0 ef 20 50       	[r5+0x0] &= 0xFFFFFFDF			  ## norflash.c:457:23
  10db78:    40 21             	r0 = 0x1			  ## norflash.c:458:9
  10db7a:    bf ea 21 f8       	call -0xfbe <mdelay : 10cbc0 >			  ## norflash.c:458:9
  10db7e:    40 22             	r0 = 0x2			  ## norflash.c:459:9
  10db80:    41 20             	r1 = 0x0			  ## norflash.c:459:9
  10db82:    bf ea 0b f8       	call -0xfea <spi_cs_pu : 10cb9c >			  ## norflash.c:459:9
  10db86:    55 04             	{pc, r5, r4} = [sp++]			  ## norflash.c:461:1


delay:
  10db88:    e2 9f             	sp += -0x4			  ## timer.c:35:0
  10db8a:    80 20             	[sp] = r0			  ## timer.c:35:0
  10db8c:    04 81             	goto 0x2 <delay+0x8 : 10db90 >			  ## timer.c:35:0
  10db8e:    00 00             	nop			  ## timer.c:40:9
  10db90:    00 20             	r0 = [sp]			  ## timer.c:39:16
  10db92:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## timer.c:39:16
  10db96:    81 20             	[sp] = r1			  ## timer.c:39:16
  10db98:    f0 5a             	if (r0 != 0) goto -0xc <delay+0x6 : 10db8e >			  ## timer.c:39:16
  10db9a:    02 81             	sp += 0x4
  10db9c:    80 00             	rts			  ## timer.c:43:1


_pll_init:
  10db9e:    10 04             	[--sp] = rets			  ## clock.c:169:0
  10dba0:    c3 ff 00 47 1e 00 	r3 = 0x1e4700 <__stub_VecMinScalar_float_c_f_c+0xD4704 : 1e4700 >			  ## clock.c:169:0
  10dba6:    44 ea 00 30       	[r3+0x10] = 0x0			  ## clock.c:120:23
  10dbaa:    40 e0 1f 01       	r0 = 0x11f <var_bss_size+0x16 : 11e >			  ## clock.c:121:23
  10dbae:    b0 63             	[r3+0xc] = r0			  ## clock.c:121:23
  10dbb0:    42 ea 5e 30       	[r3+0x8] = 0x5E			  ## clock.c:122:23
  10dbb4:    c2 ff 04 bc 02 00 	r2 = 0x2bc04 <boot_arg_list : 2bc04 >			  ## clock.c:194:27
  10dbba:    e1 f0 76 3d       	r1 = r3 + 0x3D80  #			  ## clock.c:123:25
  10dbbe:    20 61             		 r0 = [r2+0x4] 			  ## clock.c:123:25
  10dbc0:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## clock.c:123:25
  10dbc4:    f8 3e             	r0 += -0x2			  ## clock.c:123:25
  10dbc6:    30 2b             	r0 |= 0x800			  ## clock.c:123:25
  10dbc8:    b0 61             	[r3+0x4] = r0			  ## clock.c:123:23
  10dbca:    c0 ff 90 1d 09 00 	r0 = 0x91d90 <RAM_LIMIT_H+0x65D90 : 91d90 >			  ## clock.c:124:23
  10dbd0:    b0 60             	[r3+0x0] = r0			  ## clock.c:124:23
  10dbd2:    00 ef 01 30       	[r3+0x0] |= 0x1			  ## clock.c:125:22
  10dbd6:    40 2a             	r0 = 0xa			  ## clock.c:126:5
  10dbd8:    bf ea cd f7       	call -0x1066 <udelay : 10cb76 >			  ## clock.c:126:5
  10dbdc:    00 ef 02 30       	[r3+0x0] |= 0x2			  ## clock.c:127:22
  10dbe0:    68 20             	r0 = 0xa0			  ## clock.c:128:5
  10dbe2:    bf ea c8 f7       	call -0x1070 <udelay : 10cb76 >			  ## clock.c:128:5
  10dbe6:    03 ef 00 3f       	[r3+0xc] |= 0x200			  ## clock.c:129:22
  10dbea:    c3 ff 0c 00 1e 00 	r3 = 0x1e000c <__stub_VecMinScalar_float_c_f_c+0xD0010 : 1e000c >			  ## clock.c:129:22
  10dbf0:    c0 ef 70 30       	[r3+0x0] &= 0xFFFFFF8F			  ## clock.c:172:24
  10dbf4:    00 ef 50 30       	[r3+0x0] |= 0x50			  ## clock.c:173:24
  10dbf8:    00 ef 80 3f       	[r3+0x0] |= 0x100			  ## clock.c:174:24
  10dbfc:    c0 ef 00 3f       	[r3+0x0] &= 0xFFFFFDFF			  ## clock.c:175:24
  10dc00:    c0 ef 80 3e       	[r3+0x0] &= 0xFFFFFBFF			  ## clock.c:177:24
  10dc04:    c2 ef 40 3f       	[r3+0x8] &= 0xFFFFFCFF			  ## clock.c:179:24
  10dc08:    c1 ef 07 30       	[r3+0x4] &= 0xFFFFFFF8			  ## clock.c:182:24
  10dc0c:    01 ef 05 30       	[r3+0x4] |= 0x5			  ## clock.c:183:24
  10dc10:    c1 ef f0 30       	[r3+0x4] &= 0xFFFFFF0F			  ## clock.c:184:24
  10dc14:    01 ef 80 30       	[r3+0x4] |= 0x80			  ## clock.c:185:24
  10dc18:    40 2a             	r0 = 0xa			  ## clock.c:187:5
  10dc1a:    51 96             	call -0x94 <delay : 10db88 >			  ## clock.c:187:5
  10dc1c:    c1 ef e0 3e       	[r3+0x4] &= 0xFFFFF8FF			  ## clock.c:188:24
  10dc20:    20 00             	csync			  ## clock.c:189:5
  10dc22:    01 ef c0 3e       	[r3+0x4] |= 0x600			  ## clock.c:190:24
  10dc26:    20 00             	csync			  ## clock.c:191:5
  10dc28:    40 2a             	r0 = 0xa			  ## clock.c:192:5
  10dc2a:    51 8e             	call -0xa4 <delay : 10db88 >			  ## clock.c:192:5
  10dc2c:    c0 ff 00 6c dc 02 	r0 = 0x2dc6c00 <__stub_VecMinScalar_float_c_f_c+0x2CB6C04 : 2dc6c00 >			  ## clock.c:194:27
  10dc32:    a0 62             	[r2+0x8] = r0			  ## clock.c:194:27
  10dc34:    00 04             	pc = [sp++]			  ## clock.c:196:1


main:
  10dc36:    bf ea e4 f9       	call -0xc38 <osc_clk_init : 10d002 >			  ## main.c:73:0
  10dc3a:    c0 ff e4 bc 02 00 	r0 = 0x2bce4 <mask_putchar : 2bce4 >			  ## uart.c:42:18
  10dc40:    c1 ff ae de 10 00 	r1 = 0x10deae <ut_empty : 10deae >			  ## uart.c:42:18
  10dc46:    81 60             	[r0+0x0] = r1			  ## uart.c:42:18
  10dc48:    bf ea d4 b7       	call -0x9058 <nvram_boot_state : 104bf4 >			  ## boot_mode.c:108:25
  10dc4c:    ca ff c0 93 02 00 	r10 = 0x293c0 <var_bss_begin : 293c0 >
  10dc52:    b0 5c             	if (r0 != 0) goto 0xf8 <main+0x116 : 10dd4c >
  10dc54:    c0 ff ff ff 00 00 	r0 = 0xffff <os_code_size+0xDEA9 : fffe >			  ## usb_key.c:46:16
  10dc5a:    50 ed a5 00       	h[r10+0x4] = r0			  ## usb_key.c:46:16
  10dc5e:    c5 ff 00 54 1e 00 	r5 = 0x1e5400 <__stub_VecMinScalar_float_c_f_c+0xD5404 : 1e5400 >			  ## usb_key.c:46:16
  10dc64:    00 ef 04 50       	[r5+0x0] |= 0x4			  ## usb_key.c:73:5
  10dc68:    00 ef 08 50       	[r5+0x0] |= 0x8			  ## usb_key.c:74:5
  10dc6c:    00 ef 80 5f       	[r5+0x0] |= 0x100			  ## usb_key.c:76:5
  10dc70:    00 ef 00 5f       	[r5+0x0] |= 0x200			  ## usb_key.c:77:5
  10dc74:    c1 ff 4e de 10 00 	r1 = 0x10de4e <usb_key_isr : 10de4e >			  ## usb_key.c:80:5
  10dc7a:    40 27             	r0 = 0x7			  ## usb_key.c:80:5
  10dc7c:    42 20             	r2 = 0x0			  ## usb_key.c:80:5
  10dc7e:    46 20             	r6 = 0x0			  ## usb_key.c:80:5
  10dc80:    bf ea 58 f7       	call -0x1150 <HWI_Install : 10cb34 >			  ## usb_key.c:80:5
  10dc84:    40 20             	r0 = 0x0			  ## usb_key.c:81:5
  10dc86:    bf ea ca f9       	call -0xc6c <set_timer3_captrue_dp : 10d01e >			  ## usb_key.c:81:5
  10dc8a:    c7 ff 00 07 1e 00 	r7 = 0x1e0700 <__stub_VecMinScalar_float_c_f_c+0xD0704 : 1e0700 >			  ## usb_key.c:81:5
  10dc90:    f6 62             	[r7+0x8] = r6			  ## usb_key.c:83:20
  10dc92:    f6 61             	[r7+0x4] = r6			  ## usb_key.c:84:20
  10dc94:    40 ea 12 70       	[r7+0x0] = 0x12			  ## usb_key.c:85:20
  10dc98:    c8 ff f8 bb 02 00 	r8 = 0x2bbf8 <g_boot_soft_flag : 2bbf8 >			  ## usb_key.c:85:20
  10dc9e:    50 ee 81 00       	r0 = b[r8+0x1] (u)			  ## uart_key.c:212:38
  10dca2:    0b e1 08 55       	r11 = r5 + 0x508			  ## uart_key.c:212:38
  10dca6:    20 ea 10 c0       	if ((r0 & 0x10) == 0) {			  ## uart_key.c:212:38
  10dcaa:    c2 ef 01 b0       		[r11+0x8] &= 0xFFFFFFFE			  ## uart_key.c:213:46
  10dcae:    03 ef 01 b0       		[r11+0xc] |= 0x1			  ## uart_key.c:214:46
  10dcb2:    00 ef 01 b0       		[r11+0x0] |= 0x1			  ## uart_key.c:215:47
  10dcb6:    01 ef 01 b0       		[r11+0x4] |= 0x1
                               	}			  ## uart_key.c:216:47
  10dcba:    d0 ec a9 60       	[r10+0x8] = r6			  ## uart_key.c:194:13
  10dcbe:    bf ea e0 f8       	call -0xe40 <reset_status : 10ce82 >			  ## uart_key.c:195:5
  10dcc2:    09 e1 2c 53       	r9 = r5 + 0x32c			  ## uart_key.c:195:5
  10dcc6:    40 ea 23 90       	[r9+0x0] = 0x23			  ## uart_key.c:200:26
  10dcca:    34 e1 00 7e       	r4 = r7 + -0x200			  ## uart_key.c:200:26
  10dcce:    40 ea 80 4c       	[r4+0x0] = 0x4000			  ## uart_key.c:202:18
  10dcd2:    c1 ff 06 cf 10 00 	r1 = 0x10cf06 <capture_isr : 10cf06 >			  ## uart_key.c:203:5
  10dcd8:    40 25             	r0 = 0x5			  ## uart_key.c:203:5
  10dcda:    42 20             	r2 = 0x0			  ## uart_key.c:203:5
  10dcdc:    bf ea 2a f7       	call -0x11ac <HWI_Install : 10cb34 >			  ## uart_key.c:203:5
  10dce0:    43 ea 01 a0       	[r10+0xc] = 0x1			  ## uart_key.c:204:15
  10dce4:    c6 61             	[r4+0x4] = r6			  ## uart_key.c:205:18
  10dce6:    c6 62             	[r4+0x8] = r6			  ## uart_key.c:206:18
  10dce8:    40 ea 42 40       	[r4+0x0] = 0x42			  ## uart_key.c:207:18
  10dcec:    bf ea f5 f8       	call -0xe16 <set_cap_timeout : 10ceda >			  ## boot_mode.c:72:5
  10dcf0:    02 e1 00 41       	r2 = r4 + 0x100			  ## boot_mode.c:72:5
  10dcf4:    21 60             	r1 = [r2+0x0] 			  ## boot_mode.c:40:21
  10dcf6:    99 17             	r1 = r1.l (s)			  ## boot_mode.c:73:12
  10dcf8:    81 fd 0f 00       	ifs (r1 < 0x0) goto 0x1e <main+0xE4 : 10dd1a >			  ## boot_mode.c:73:12
  10dcfc:    50 ed a4 00       	r0 = h[r10+0x4] (u)			  ## boot_mode.c:76:35
  10dd00:    bf ea b0 f9       	call -0xca0 <check_key_type : 10d064 >			  ## boot_mode.c:76:20
  10dd04:    00 f8 08 02       	if (r0 == 0x1) goto 0x10 <main+0xE2 : 10dd18 >
  10dd08:    50 ed a2 00       	r0 = h[r10+0x2] (u)			  ## boot_mode.c:83:35
  10dd0c:    bf ea aa f9       	call -0xcac <check_key_type : 10d064 >			  ## boot_mode.c:83:20
  10dd10:    80 f8 f0 09       	if (r0 != 0x4) goto -0x20 <main+0xBE : 10dcf4 >
  10dd14:    40 24             	r0 = 0x4
  10dd16:    04 81             	goto 0x2 <main+0xE4 : 10dd1a >
  10dd18:    40 21             	r0 = 0x1
  10dd1a:    41 e0 00 40       	r1 = 0x4000 <os_code_size+0x1EAB : 4000 >			  ## boot_mode.c:44:17
  10dd1e:    a1 60             	[r2+0x0] = r1			  ## boot_mode.c:44:17
  10dd20:    f1 60             	[r7+0x0] = r1			  ## clock.c:332:20
  10dd22:    00 ef 04 50       	[r5+0x0] |= 0x4			  ## usb_key.c:91:5
  10dd26:    00 ef 08 50       	[r5+0x0] |= 0x8			  ## usb_key.c:92:5
  10dd2a:    c0 ef 40 50       	[r5+0x0] &= 0xFFFFFFBF			  ## usb_key.c:94:5
  10dd2e:    c0 ef 80 50       	[r5+0x0] &= 0xFFFFFF7F			  ## usb_key.c:95:5
  10dd32:    c0 ef 10 50       	[r5+0x0] &= 0xFFFFFFEF			  ## usb_key.c:97:5
  10dd36:    c0 ef 20 50       	[r5+0x0] &= 0xFFFFFFDF			  ## usb_key.c:98:5
  10dd3a:    50 ee 81 20       	r2 = b[r8+0x1] (u)			  ## uart_key.c:228:38
  10dd3e:    22 ea 10 00       	if ((r2 & 0x10) == 0) {			  ## uart_key.c:228:38
  10dd42:    c3 ef 01 b0       		[r11+0xc] &= 0xFFFFFFFE
                               	}			  ## uart_key.c:229:46
  10dd46:    c1 60             	[r4+0x0] = r1			  ## uart_key.c:79:18
  10dd48:    40 ea 00 90       	[r9+0x0] = 0x0			  ## uart_key.c:80:26
  10dd4c:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## main.c:101:5
  10dd50:    c8 ff 04 bc 02 00 	r8 = 0x2bc04 <boot_arg_list : 2bc04 >
  10dd56:    81 f9 07 04       	if (r1 < 0x2) goto 0xe <main+0x132 : 10dd68 >			  ## main.c:101:5
  10dd5a:    f8 3d             	r0 += -0x3
  10dd5c:    00 fc 08 02       	if (r0 > 0x1) goto 0x10 <main+0x13A : 10dd70 >
  10dd60:    40 20             	r0 = 0x0			  ## main.c:106:9
  10dd62:    bf ea a6 fa       	call -0xab4 <uart_upgrade_init : 10d2b2 >			  ## main.c:106:9
  10dd66:    14 9f             	goto 0x7e <main+0x1B0 : 10dde6 >			  ## main.c:106:9
  10dd68:    40 23             	r0 = 0x3			  ## main.c:113:9
  10dd6a:    bf ea 0a fb       	call -0x9ec <check_usb_sof : 10d382 >			  ## main.c:113:9
  10dd6e:    14 9b             	goto 0x76 <main+0x1B0 : 10dde6 >			  ## main.c:113:9
  10dd70:    45 20             	r5 = 0x0
  10dd72:    52 ee 80 50       	b[r8+0x0] = r5			  ## main.c:34:31
  10dd76:    cc ff 00 bc 02 00 	r12 = 0x2bc00 <g_spi_boot_port : 2bc00 >			  ## main.c:34:31
  10dd7c:    c7 ff f0 bb 02 00 	r7 = 0x2bbf0 <spi_port : 2bbf0 >			  ## main.c:34:31
  10dd82:    44 21             	r4 = 0x1			  ## main.c:34:31
  10dd84:    c9 ff 04 f7 10 00 	r9 = 0x10f704 <norflash_check_in.spi0_porta_config : 10f704 >			  ## main.c:34:31
  10dd8a:    cb ff 00 f7 10 00 	r11 = 0x10f700 <norflash_check_in.spi0_portb_config : 10f700 >			  ## main.c:34:31
  10dd90:    04 82             	goto 0x4 <main+0x160 : 10dd96 >			  ## main.c:34:31
  10dd92:    bf ea 7a f9       	call -0xd0c <wdt_clr : 10d08a >			  ## main.c:59:9
  10dd96:    50 ee c0 60       	r6 = b[r12+0x0] (u)			  ## boot_init.c:79:12
  10dd9a:    56 e8 0c 08       	if ((r6 & 0x2) == 0) goto 0x18 <main+0x180 : 10ddb6 >
  10dd9e:    fc 44             	b[r7+0x4] = r4			  ## boot_flash.c:106:24
  10dda0:    d0 ec 71 b0       	[r7+0x0] = r11			  ## boot_flash.c:107:32
  10dda4:    40 22             	r0 = 0x2			  ## boot_flash.c:109:9
  10dda6:    41 2a             	r1 = 0xa			  ## boot_flash.c:109:9
  10dda8:    bf ea 13 f7       	call -0x11da <flash_poweron : 10cbd2 >			  ## boot_flash.c:109:9
  10ddac:    bf ea 36 fe       	call -0x394 <run_flash : 10da1c >			  ## boot_flash.c:111:9
  10ddb0:    40 22             	r0 = 0x2			  ## boot_flash.c:113:9
  10ddb2:    bf ea b9 fe       	call -0x28e <flash_poweroff : 10db28 >			  ## boot_flash.c:113:9
  10ddb6:    56 e8 0c 00       	if ((r6 & 0x1) == 0) goto 0x18 <main+0x19C : 10ddd2 >
  10ddba:    fc 44             	b[r7+0x4] = r4			  ## boot_flash.c:124:24
  10ddbc:    d0 ec 71 90       	[r7+0x0] = r9			  ## boot_flash.c:125:32
  10ddc0:    40 21             	r0 = 0x1			  ## boot_flash.c:127:9
  10ddc2:    41 2a             	r1 = 0xa			  ## boot_flash.c:127:9
  10ddc4:    bf ea 05 f7       	call -0x11f6 <flash_poweron : 10cbd2 >			  ## boot_flash.c:127:9
  10ddc8:    bf ea 28 fe       	call -0x3b0 <run_flash : 10da1c >			  ## boot_flash.c:129:9
  10ddcc:    40 21             	r0 = 0x1			  ## boot_flash.c:131:9
  10ddce:    bf ea ab fe       	call -0x2aa <flash_poweroff : 10db28 >			  ## boot_flash.c:131:9
  10ddd2:    35 e8 00 80       	if (r5 == 0x0) {
  10ddd6:    40 21             		r0 = 0x1			  ## main.c:48:13
  10ddd8:    45 21             		r5 = 0x1			  ## main.c:48:13
  10ddda:    bf ea 6a fa       		call -0xb2c
                               	} <uart_upgrade_init : 10d2b2 >			  ## main.c:48:13
  10ddde:    40 20             	r0 = 0x0			  ## main.c:53:19
  10dde0:    bf ea cf fa       	call -0xa62 <check_usb_sof : 10d382 >			  ## main.c:53:19
  10dde4:    60 56             	if (r0 == 0) goto -0x54 <main+0x15C : 10dd92 >
  10dde6:    c0 ff 95 18 1a 00 	r0 = 0x1a1895 <__stub_VecMinScalar_float_c_f_c+0x91898 : 1a1894 >
  10ddec:    09 40             	r1 = b[r0+0x0] (u)			  ## main.c:126:5
  10ddee:    71 e1 07 10       	r1 = r1 & 0xFFFFFFF8			  ## main.c:126:5
  10ddf2:    41 e1 06 10       	r1 = r1 | 0x6			  ## main.c:126:5
  10ddf6:    43 f0 a0 0f       	r3 = 0xfa0  # <usb_code_size+0x465 : fa0 >			  ## main.c:126:5
  10ddfa:    89 40             		 b[r0+0x0] = r1			  ## main.c:126:5
  10ddfc:    d0 ec a0 12       	r1 = [r10+0x20]			  ## main.c:126:5
  10de00:    41 ea 00 80       	[r8+0x4] = 0x0			  ## clock.c:149:28
  10de04:    30 e1 60 10       	r0 = r1 + -0xfa0			  ## clock.c:151:10
  10de08:    a2 e0 00 10       	r2 = 0x0 - r1			  ## clock.c:151:10
  10de0c:    c1 ff 00 09 3d 00 	r1 = 0x3d0900 <__stub_VecMinScalar_float_c_f_c+0x2C0904 : 3d0900 >			  ## clock.c:151:10
  10de12:    c4 ff 80 bb 00 00 	r4 = 0xbb80 <os_code_size+0x9A2B : bb80 >			  ## clock.c:151:10
  10de18:    c5 ff 80 84 1e 00 	r5 = 0x1e8480 <__stub_VecMinScalar_float_c_f_c+0xD8484 : 1e8480 >			  ## clock.c:151:10
  10de1e:    04 85             	goto 0xa <main+0x1F4 : 10de2a >			  ## clock.c:151:10
  10de20:    51 18             	r1 += r5			  ## clock.c:151:5
  10de22:    30 e1 30 08       	r0 = r0 + -0x7d0			  ## clock.c:151:5
  10de26:    03 e1 d0 37       	r3 = r3 + 0x7d0			  ## clock.c:151:44
  10de2a:    04 ec 09 30       	if (r3 > r4) goto 0x12 <main+0x20A : 10de40 >
  10de2e:    ae 1c             	r6 = r2 + r3			  ## clock.c:153:13
  10de30:    b6 ee ff 0f       	ifs (r6 <= -0x1) {			  ## clock.c:153:13
  10de34:    06 16             		r6 = r0
                               	}			  ## clock.c:153:13
  10de36:    0c ff e8 63 f2 ff 	ifs (r6 > 0x3e8) goto -0x1c <main+0x1EA : 10de20 >			  ## clock.c:153:13
  10de3c:    d0 ec 85 10       	[r8+0x4] = r1			  ## clock.c:154:36
  10de40:    bf ea ad fe       	call -0x2a6 <_pll_init : 10db9e >			  ## clock.c:220:5
  10de44:    48 32             	r0 = 0x32			  ## clock.c:221:5
  10de46:    bf ea bb f6       	call -0x128a <mdelay : 10cbc0 >			  ## clock.c:221:5
  10de4a:    bf ea 64 cc       	call -0x6738 <usb_slave_mode : 107716 >			  ## main.c:132:5


usb_key_isr:
  10de4e:    e9 04             	[--sp] = {psr, rets, reti}			  ## usb_key.c:17:0
  10de50:    d8 e8 07 00       	[--sp] = {r2-r0}			  ## usb_key.c:20:20
  10de54:    c0 ff 00 07 1e 00 	r0 = 0x1e0700 <__stub_VecMinScalar_float_c_f_c+0xD0704 : 1e0700 >			  ## usb_key.c:20:20
  10de5a:    00 ef 80 0c       	[r0+0x0] |= 0x4000			  ## usb_key.c:20:20
  10de5e:    10 e1 00 01       	r0 = r0 + 0x1100			  ## usb_key.c:22:9
  10de62:    00 60             	r0 = [r0+0x0] 			  ## usb_key.c:22:9
  10de64:    c1 ff c0 93 02 00 	r1 = 0x293c0 <var_bss_begin : 293c0 >			  ## usb_key.c:22:9
  10de6a:    b0 f1 04 08       	r0 = uextra(r0, p:0x10, l:0x1)  #			  ## usb_key.c:22:9
  10de6e:    1a 62             		 r2 = h[r1+0x4] (u)			  ## usb_key.c:22:9
  10de70:    a0 e1 fc 20       	r0 <= insert(r2, p:0x1, l:0x1f)			  ## usb_key.c:22:9
  10de74:    98 62             	h[r1+0x4] = r0			  ## usb_key.c:22:9
  10de76:    41 f0 ef 16       	r1 = 0x16ef  # <usb_code_size+0xBB3 : 16ee >			  ## usb_key.c:28:20
  10de7a:    18 62             		 r0 = h[r1+0x4] (u)			  ## usb_key.c:28:9
  10de7c:    81 e8 13 00       	if (r0 != r1) goto 0x26 <usb_key_isr+0x58 : 10dea6 >			  ## usb_key.c:28:9
  10de80:    40 20             	r0 = 0x0
  10de82:    c1 ff 00 54 1e 00 	r1 = 0x1e5400 <__stub_VecMinScalar_float_c_f_c+0xD5404 : 1e5400 >
  10de88:    d2 ec 15 08       	[r1+0x284] = r0			  ## usb_key.c:30:28
  10de8c:    d2 ec 11 08       	[r1+0x280] = r0			  ## usb_key.c:31:28
  10de90:    c0 ef 01 10       	[r1+0x0] &= 0xFFFFFFFE			  ## usb_key.c:32:9
  10de94:    c0 ef 02 10       	[r1+0x0] &= 0xFFFFFFFD			  ## usb_key.c:33:9
  10de98:    c0 ef 04 10       	[r1+0x0] &= 0xFFFFFFFB			  ## usb_key.c:34:9
  10de9c:    c0 ef 08 10       	[r1+0x0] &= 0xFFFFFFF7			  ## usb_key.c:35:9
  10dea0:    40 22             	r0 = 0x2			  ## usb_key.c:36:9
  10dea2:    bf ea 8d f6       	call -0x12e6 <mdelay : 10cbc0 >			  ## usb_key.c:36:9
  10dea6:    d4 e8 07 00       	{r2-r0} = [sp++]			  ## usb_key.c:38:1
  10deaa:    a9 04             	{psr, rets, reti} = [sp++]			  ## usb_key.c:38:1
  10deac:    81 00             	rti			  ## usb_key.c:38:1


ut_empty:
  10deae:    80 00             	rts			  ## uart.c:19:0


switch_to_hrc_asm:
  10deb0:    40 e0 00 fc       	r0 = -0x400 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEFC04 : fffffffffffffc00 >			  ## clock.c:226:0
  10deb4:    c1 ff 08 00 1e 00 	r1 = 0x1e0008 <__stub_VecMinScalar_float_c_f_c+0xD000C : 1e0008 >			  ## clock.c:227:23
  10deba:    64 e8 02 10       	[r1+0x0] &= r0			  ## clock.c:227:23
  10debe:    01 ef 01 10       	[r1+0x4] |= 0x1			  ## clock.c:228:24
  10dec2:    20 00             	csync			  ## clock.c:229:5
  10dec4:    00 00             	nop			  ## clock.c:230:5
  10dec6:    00 00             	nop			  ## clock.c:231:5
  10dec8:    00 00             	nop			  ## clock.c:232:5
  10deca:    02 ef 40 1f       	[r1+0x8] |= 0x300			  ## clock.c:233:24
  10dece:    20 00             	csync			  ## clock.c:234:5
  10ded0:    00 00             	nop			  ## clock.c:235:5
  10ded2:    00 00             	nop			  ## clock.c:236:5
  10ded4:    00 00             	nop			  ## clock.c:237:5
  10ded6:    80 00             	rts			  ## clock.c:238:1


tmr3_isr:
  10ded8:    e9 04             	[--sp] = {psr, rets, reti}			  ## clock.c:274:0
  10deda:    d8 e8 1f 00       	[--sp] = {r4-r0}			  ## clock.c:278:5
  10dede:    58 24             	r0 = 0x64			  ## clock.c:278:5
  10dee0:    bf ea 52 fe       	call -0x35c <delay : 10db88 >			  ## clock.c:278:5
  10dee4:    c2 ff 00 07 1e 00 	r2 = 0x1e0700 <__stub_VecMinScalar_float_c_f_c+0xD0704 : 1e0700 >			  ## clock.c:278:5
  10deea:    00 ef 80 2c       	[r2+0x0] |= 0x4000			  ## clock.c:279:20
  10deee:    21 62             	r1 = [r2+0x8] 			  ## clock.c:281:30
  10def0:    c0 ff c0 93 02 00 	r0 = 0x293c0 <var_bss_begin : 293c0 >			  ## clock.c:281:30
  10def6:    04 69             	r4 = [r0+0x24] 			  ## clock.c:281:36
  10def8:    11 df             	r1 = r1 - r4  #			  ## clock.c:281:34
  10defa:    23 62             		 r3 = [r2+0x8] 			  ## clock.c:282:27
  10defc:    83 69             	[r0+0x24] = r3			  ## clock.c:282:14
  10defe:    03 6a             	r3 = [r0+0x28] 			  ## clock.c:289:21
  10df00:    34 e1 fc 3e       	r4 = r3 + -0x104			  ## clock.c:289:30
  10df04:    84 ec 10 10       	if (r1 <= r4) goto 0x20 <tmr3_isr+0x50 : 10df28 >			  ## clock.c:289:30
  10df08:    03 e1 04 31       	r3 = r3 + 0x104			  ## clock.c:289:62
  10df0c:    03 e9 0c 10       	if (r1 >= r3) goto 0x18 <tmr3_isr+0x50 : 10df28 >			  ## clock.c:289:62
  10df10:    68 e8 20 01       	[r0+0x20] += r1			  ## clock.c:290:23
  10df14:    03 6b             	r3 = [r0+0x2c] 			  ## clock.c:292:16
  10df16:    c3 21             	r3 += 0x1			  ## clock.c:292:16
  10df18:    83 6b             	[r0+0x2c] = r3			  ## clock.c:292:16
  10df1a:    33 e8 04 40       	if (r3 == 0x4) {			  ## clock.c:292:16
  10df1e:    40 ea 80 2c       		[r2+0x0] = 0x4000			  ## clock.c:295:28
  10df22:    4c ea 01 00       		[r0+0x30] = 0x1
                               	}			  ## clock.c:297:26
  10df26:    04 83             	goto 0x6 <tmr3_isr+0x56 : 10df2e >			  ## clock.c:297:26
  10df28:    42 20             	r2 = 0x0
  10df2a:    82 6b             	[r0+0x2c] = r2			  ## clock.c:300:17
  10df2c:    82 68             	[r0+0x20] = r2			  ## clock.c:301:23
  10df2e:    81 6a             	[r0+0x28] = r1			  ## clock.c:304:14
  10df30:    d4 e8 1f 00       	{r4-r0} = [sp++]			  ## clock.c:305:1
  10df34:    a9 04             	{psr, rets, reti} = [sp++]			  ## clock.c:305:1
  10df36:    81 00             	rti			  ## clock.c:305:1


sfc_suspend:
  10df38:    20 00             	csync			  ## sfc.c:7:0
  10df3a:    c1 ff 00 e4 1b 00 	r1 = 0x1be400 <__stub_VecMinScalar_float_c_f_c+0xAE404 : 1be400 >			  ## sfc.c:9:5
  10df40:    12 60             	r2 = [r1+0x0] 			  ## sfc.c:9:5
  10df42:    72 fe fd ff       	ifs (r2 > -0x1) goto -0x6 <sfc_suspend+0x8 : 10df40 >			  ## sfc.c:9:5
  10df46:    20 00             	csync			  ## sfc.c:10:5
  10df48:    c1 ff 00 05 1b 00 	r1 = 0x1b0500 <__stub_VecMinScalar_float_c_f_c+0xA0504 : 1b0500 >			  ## sfc.c:10:5
  10df4e:    12 60             	r2 = [r1+0x0] 			  ## sfc.c:10:5
  10df50:    72 fe fd ff       	ifs (r2 > -0x1) goto -0x6 <sfc_suspend+0x16 : 10df4e >			  ## sfc.c:10:5
  10df54:    c1 ff 00 02 1f 00 	r1 = 0x1f0200 <__stub_VecMinScalar_float_c_f_c+0xE0204 : 1f0200 >
  10df5a:    12 60             	r2 = [r1+0x0] 			  ## sfc.c:13:20
  10df5c:    82 fd fd 01       	ifs (r2 < 0x0) goto -0x6 <sfc_suspend+0x22 : 10df5a >			  ## sfc.c:13:5
  10df60:    c0 ef 01 10       	[r1+0x0] &= 0xFFFFFFFE			  ## sfc.c:15:17
  10df64:    b0 e8 00 40       	if (r0 != 0x0) {			  ## sfc.c:15:17
  10df68:    c0 ff 00 1c 1e 00 		r0 = 0x1e1c00 <__stub_VecMinScalar_float_c_f_c+0xD1C04 : 1e1c00 >			  ## sfc.c:17:22
  10df6e:    00 ef 01 00       		[r0+0x0] |= 0x1
                               	}			  ## sfc.c:17:22
  10df72:    80 00             	rts			  ## sfc.c:19:1


sfc_resume:
  10df74:    b0 e8 00 40       	if (r0 != 0x0) {			  ## sfc.c:22:0
  10df78:    c0 ff 00 1c 1e 00 		r0 = 0x1e1c00 <__stub_VecMinScalar_float_c_f_c+0xD1C04 : 1e1c00 >			  ## sfc.c:25:22
  10df7e:    c0 ef 01 00       		[r0+0x0] &= 0xFFFFFFFE
                               	}			  ## sfc.c:25:22
  10df82:    c0 ff 00 02 1f 00 	r0 = 0x1f0200 <__stub_VecMinScalar_float_c_f_c+0xE0204 : 1f0200 >			  ## sfc.c:27:17
  10df88:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## sfc.c:27:17
  10df8c:    80 00             	rts			  ## sfc.c:30:1


IcuCmdKst:
  10df8e:    e1 00             	cli r1			  ## cache.c:90:0
  10df90:    20 00             	csync			  ## cache.c:92:5
  10df92:    c2 ff 00 e4 1b 00 	r2 = 0x1be400 <__stub_VecMinScalar_float_c_f_c+0xAE404 : 1be400 >			  ## cache.c:92:5
  10df98:    23 60             	r3 = [r2+0x0] 			  ## cache.c:92:5
  10df9a:    73 fe fd ff       	ifs (r3 > -0x1) goto -0x6 <IcuCmdKst+0xA : 10df98 >			  ## cache.c:92:5
  10df9e:    60 e0 4a 34       	r3 = 0xCA000000			  ## cache.c:93:50
  10dfa2:    94 e1 30 00       	r0 = r3 | (1 << r0)			  ## cache.c:93:50
  10dfa6:    a0 64             	[r2+0x10] = r0			  ## cache.c:93:37
  10dfa8:    20 00             	csync			  ## cache.c:94:5
  10dfaa:    20 60             	r0 = [r2+0x0] 			  ## cache.c:94:5
  10dfac:    70 fe fd ff       	ifs (r0 > -0x1) goto -0x6 <IcuCmdKst+0x1C : 10dfaa >			  ## cache.c:94:5
  10dfb0:    f1 00             	sti r1			  ## hwi.h:107:5
  10dfb2:    80 00             	rts			  ## cache.c:96:1


IcuCmdSend:
  10dfb4:    74 04             	[--sp] = {rets, r4}			  ## cache.c:108:0
  10dfb6:    e4 00             	cli r4			  ## hwi.h:101:5
  10dfb8:    c3 ff 14 e4 1b 00 	r3 = 0x1be414 <__stub_VecMinScalar_float_c_f_c+0xAE418 : 1be414 >
  10dfbe:    10 d8             	r0 += r1  #			  ## cache.c:111:48
  10dfc0:    b0 60             		 [r3+0x0] = r0			  ## cache.c:110:37
  10dfc2:    f8 3f             	r0 += -0x1			  ## cache.c:111:54
  10dfc4:    b0 61             	[r3+0x4] = r0			  ## cache.c:111:37
  10dfc6:    40 21             	r0 = 0x1			  ## cache.c:113:19
  10dfc8:    21 ed 80 0d       	ifs (r1 >= 0x1000) {			  ## cache.c:113:19
  10dfcc:    40 20             		r0 = 0x0
                               	}			  ## cache.c:113:19
  10dfce:    20 18             	r0 += r2			  ## cache.c:113:19
  10dfd0:    61 9e             	call -0x44 <IcuCmdKst : 10df8e >			  ## cache.c:114:5
  10dfd2:    f4 00             	sti r4			  ## hwi.h:107:5
  10dfd4:    54 04             	{pc, r4} = [sp++]			  ## cache.c:116:1


DcuCmdKst:
  10dfd6:    e1 00             	cli r1			  ## cache.c:99:0
  10dfd8:    20 00             	csync			  ## cache.c:101:5
  10dfda:    c2 ff 00 05 1b 00 	r2 = 0x1b0500 <__stub_VecMinScalar_float_c_f_c+0xA0504 : 1b0500 >			  ## cache.c:101:5
  10dfe0:    23 60             	r3 = [r2+0x0] 			  ## cache.c:101:5
  10dfe2:    73 fe fd ff       	ifs (r3 > -0x1) goto -0x6 <DcuCmdKst+0xA : 10dfe0 >			  ## cache.c:101:5
  10dfe6:    60 e0 4a 34       	r3 = 0xCA000000			  ## cache.c:102:34
  10dfea:    94 e1 30 00       	r0 = r3 | (1 << r0)			  ## cache.c:102:34
  10dfee:    a0 64             	[r2+0x10] = r0			  ## cache.c:102:21
  10dff0:    20 00             	csync			  ## cache.c:103:5
  10dff2:    20 60             	r0 = [r2+0x0] 			  ## cache.c:103:5
  10dff4:    70 fe fd ff       	ifs (r0 > -0x1) goto -0x6 <DcuCmdKst+0x1C : 10dff2 >			  ## cache.c:103:5
  10dff8:    f1 00             	sti r1			  ## hwi.h:107:5
  10dffa:    80 00             	rts			  ## cache.c:105:1


DcuCmdSend:
  10dffc:    74 04             	[--sp] = {rets, r4}			  ## cache.c:119:0
  10dffe:    e4 00             	cli r4			  ## hwi.h:101:5
  10e000:    c3 ff 14 05 1b 00 	r3 = 0x1b0514 <__stub_VecMinScalar_float_c_f_c+0xA0518 : 1b0514 >
  10e006:    10 d8             	r0 += r1  #			  ## cache.c:122:32
  10e008:    b0 60             		 [r3+0x0] = r0			  ## cache.c:121:21
  10e00a:    f8 3f             	r0 += -0x1			  ## cache.c:122:38
  10e00c:    b0 61             	[r3+0x4] = r0			  ## cache.c:122:21
  10e00e:    40 21             	r0 = 0x1			  ## cache.c:124:19
  10e010:    21 ed 00 0e       	ifs (r1 >= 0x800) {			  ## cache.c:124:19
  10e014:    40 20             		r0 = 0x0
                               	}			  ## cache.c:124:19
  10e016:    20 18             	r0 += r2			  ## cache.c:124:19
  10e018:    61 9e             	call -0x44 <DcuCmdKst : 10dfd6 >			  ## cache.c:125:5
  10e01a:    f4 00             	sti r4			  ## hwi.h:107:5
  10e01c:    54 04             	{pc, r4} = [sp++]			  ## cache.c:127:1


DcuFlushinvRegion:
  10e01e:    42 25             	r2 = 0x5			  ## cache.c:173:0
  10e020:    f7 8d             	goto -0x26 <DcuCmdSend : 10dffc >			  ## cache.c:174:5


sfc_drop_cache:
  10e022:    75 04             	[--sp] = {rets, r5, r4}			  ## sfc.c:32:0
  10e024:    14 16             	r4 = r1			  ## sfc.c:32:0
  10e026:    05 16             	r5 = r0			  ## sfc.c:32:0
  10e028:    42 25             	r2 = 0x5			  ## cache.c:146:5
  10e02a:    61 84             	call -0x78 <IcuCmdSend : 10dfb4 >			  ## cache.c:146:5
  10e02c:    50 16             	r0 = r5			  ## sfc.c:34:5
  10e02e:    41 16             	r1 = r4			  ## sfc.c:34:5
  10e030:    35 04             	{rets, r5, r4} = [sp++]			  ## sfc.c:34:5
  10e032:    f7 95             	goto -0x16 <DcuFlushinvRegion : 10e01e >			  ## sfc.c:34:5


flush_dcache:
  10e034:    80 00             	rts			  ## sfc.c:38:0


flushinv_dcache:
  10e036:    f7 93             	goto -0x1a <DcuFlushinvRegion : 10e01e >			  ## sfc.c:43:0


skip_atoi:
  10e038:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:18:0
  10e03a:    41 20             	r1 = 0x0			  ## printf-stdarg.c:18:0
  10e03c:    04 89             	goto 0x12 <skip_atoi+0x18 : 10e050 >			  ## printf-stdarg.c:18:0
  10e03e:    2b 81             	r3 = r2 + 0x1			  ## printf-stdarg.c:21:29
  10e040:    e1 f1 0a 10       	r1 = r1 * 0xA  #			  ## printf-stdarg.c:21:15
  10e044:    83 60             		 [r0+0x0] = r3			  ## printf-stdarg.c:21:29
  10e046:    54 ee 20 20       	r2 = b[r2+0x0] (s)			  ## printf-stdarg.c:21:22
  10e04a:    21 18             	r1 += r2			  ## printf-stdarg.c:21:20
  10e04c:    f1 30             	r1 += -0x30			  ## printf-stdarg.c:21:33
  10e04e:    32 16             	r2 = r3			  ## printf-stdarg.c:20:12
  10e050:    2b 40             	r3 = b[r2+0x0] (u)			  ## printf-stdarg.c:20:12
  10e052:    f3 30             	r3 += -0x30			  ## printf-stdarg.c:20:12
  10e054:    33 17             	r3 = r3.b0 (u)			  ## printf-stdarg.c:20:12
  10e056:    83 fc f2 13       	if (r3 <= 0x9) goto -0x1c <skip_atoi+0x6 : 10e03e >			  ## printf-stdarg.c:20:12
  10e05a:    10 16             	r0 = r1			  ## printf-stdarg.c:23:5
  10e05c:    80 00             	rts			  ## printf-stdarg.c:23:5


printchar:
  10e05e:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:29:0
  10e060:    00 49             	if (r0 == 0) goto 0x12 <printchar+0x16 : 10e074 >			  ## printf-stdarg.c:30:9
  10e062:    04 60             	r4 = [r0+0x0] 
  10e064:    01 43             	if (r1 == 0) goto 0x6 <printchar+0xE : 10e06c >
  10e066:    43 20             	r3 = 0x0
  10e068:    01 e9 0b 40       	if (r4 >= r1) goto 0x16 <printchar+0x24 : 10e082 >
  10e06c:    ca 40             	b[r4+0x0] = r2			  ## printf-stdarg.c:34:15
  10e06e:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## printf-stdarg.c:35:9
  10e072:    04 86             	goto 0xc <printchar+0x22 : 10e080 >			  ## printf-stdarg.c:35:9
  10e074:    c0 ff e4 bc 02 00 	r0 = 0x2bce4 <mask_putchar : 2bce4 >			  ## uart.c:49:5
  10e07a:    28 d7             	r0 = r2.b0 (s)  #			  ## uart.c:49:5
  10e07c:    01 60             		 r1 = [r0+0x0] 			  ## uart.c:49:5
  10e07e:    c1 00             	call r1			  ## uart.c:49:5
  10e080:    43 21             	r3 = 0x1
  10e082:    30 16             	r0 = r3			  ## printf-stdarg.c:45:1
  10e084:    54 04             	{pc, r4} = [sp++]			  ## printf-stdarg.c:45:1


prints:
  10e086:    79 04             	[--sp] = {rets, r9-r4}			  ## printf-stdarg.c:57:0
  10e088:    36 16             	r6 = r3			  ## printf-stdarg.c:57:0
  10e08a:    27 16             	r7 = r2			  ## printf-stdarg.c:57:0
  10e08c:    19 16             	r9 = r1			  ## printf-stdarg.c:57:0
  10e08e:    05 16             	r5 = r0			  ## printf-stdarg.c:57:0
  10e090:    86 fd 1f 02       	ifs (r6 < 0x1) goto 0x3e <prints+0x4C : 10e0d2 >			  ## printf-stdarg.c:57:0
  10e094:    01 27             	r1 = [sp+28]			  ## printf-stdarg.c:57:0
  10e096:    40 20             	r0 = 0x0			  ## printf-stdarg.c:57:0
  10e098:    04 81             	goto 0x2 <prints+0x16 : 10e09c >			  ## printf-stdarg.c:57:0
  10e09a:    c0 21             	r0 += 0x1			  ## printf-stdarg.c:64:13
  10e09c:    d8 ee 70 20       	r2 = b[r7+r0] (u)			  ## printf-stdarg.c:63:28
  10e0a0:    f2 5c             	if (r2 != 0) goto -0x8 <prints+0x14 : 10e09a >			  ## printf-stdarg.c:63:28
  10e0a2:    34 e4 61 20       	r2 = smax(r6, r0)			  ## printf-stdarg.c:71:13
  10e0a6:    22 1e             	r2 = r2 - r0			  ## printf-stdarg.c:71:13
  10e0a8:    13 a3             	r3 = r1 << 0x3			  ## printf-stdarg.c:71:13
  10e0aa:    63 e1 10 30       	r3 = r3 & 0x10			  ## printf-stdarg.c:71:13
  10e0ae:    48 e1 20 30       	r8 = r3 | 0x20			  ## printf-stdarg.c:71:13
  10e0b2:    44 20             	r4 = 0x0
  10e0b4:    51 e8 11 02       	if ((r1 & 0x1) != 0) goto 0x22 <prints+0x54 : 10e0da >
  10e0b8:    82 fd 0f 02       	ifs (r2 < 0x1) goto 0x1e <prints+0x54 : 10e0da >
  10e0bc:    66 1e             	r6 = r6 - r0			  ## printf-stdarg.c:69:19
  10e0be:    50 16             	r0 = r5			  ## printf-stdarg.c:77:17
  10e0c0:    91 16             	r1 = r9			  ## printf-stdarg.c:77:17
  10e0c2:    82 16             	r2 = r8			  ## printf-stdarg.c:77:17
  10e0c4:    61 8c             	call -0x68 <printchar : 10e05e >			  ## printf-stdarg.c:77:17
  10e0c6:    00 50             	if (r0 == 0) goto 0x20 <prints+0x62 : 10e0e8 >			  ## printf-stdarg.c:77:17
  10e0c8:    fe 3f             	r6 += -0x1			  ## printf-stdarg.c:76:27
  10e0ca:    c4 21             	r4 += 0x1			  ## printf-stdarg.c:80:13
  10e0cc:    06 fe f7 01       	ifs (r6 > 0x0) goto -0x12 <prints+0x38 : 10e0be >
  10e0d0:    04 8b             	goto 0x16 <prints+0x62 : 10e0e8 >
  10e0d2:    44 20             	r4 = 0x0
  10e0d4:    48 e0 20 00       	r8 = 0x20 <TLB_BEGIN+0x20 : 20 >
  10e0d8:    04 87             	goto 0xe <prints+0x62 : 10e0e8 >
  10e0da:    26 16             	r6 = r2
  10e0dc:    04 85             	goto 0xa <prints+0x62 : 10e0e8 >
  10e0de:    50 16             	r0 = r5			  ## printf-stdarg.c:84:13
  10e0e0:    91 16             	r1 = r9			  ## printf-stdarg.c:84:13
  10e0e2:    51 9d             	call -0x86 <printchar : 10e05e >			  ## printf-stdarg.c:84:13
  10e0e4:    00 44             	if (r0 == 0) goto 0x8 <prints+0x68 : 10e0ee >			  ## printf-stdarg.c:84:13
  10e0e6:    c4 21             	r4 += 0x1			  ## printf-stdarg.c:87:9
  10e0e8:    d4 ee 71 20       	r2 = b[r7++=0x1] (s)			  ## printf-stdarg.c:83:12
  10e0ec:    f2 58             	if (r2 != 0) goto -0x10 <prints+0x58 : 10e0de >
  10e0ee:    47 20             	r7 = 0x0
  10e0f0:    04 86             	goto 0xc <prints+0x78 : 10e0fe >
  10e0f2:    50 16             	r0 = r5			  ## printf-stdarg.c:90:13
  10e0f4:    91 16             	r1 = r9			  ## printf-stdarg.c:90:13
  10e0f6:    82 16             	r2 = r8			  ## printf-stdarg.c:90:13
  10e0f8:    51 92             	call -0x9c <printchar : 10e05e >			  ## printf-stdarg.c:90:13
  10e0fa:    00 44             	if (r0 == 0) goto 0x8 <prints+0x7E : 10e104 >			  ## printf-stdarg.c:90:13
  10e0fc:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:89:5
  10e0fe:    e8 1d             	r0 = r6 + r7			  ## printf-stdarg.c:89:18
  10e100:    00 fd f7 03       	ifs (r0 >= 0x1) goto -0x12 <prints+0x6C : 10e0f2 >			  ## printf-stdarg.c:89:18
  10e104:    c8 1f             	r0 = r4 - r7			  ## printf-stdarg.c:96:5
  10e106:    59 04             	{pc, r9-r4} = [sp++]			  ## printf-stdarg.c:96:5


printi:
  10e108:    7a 04             	[--sp] = {rets, r10-r4}			  ## printf-stdarg.c:103:0
  10e10a:    e2 9c             	sp += -0x10			  ## printf-stdarg.c:103:0
  10e10c:    d4 e9 38 a0       	r10 = [sp+56]			  ## printf-stdarg.c:103:0
  10e110:    18 d6             	r8 = r1  #			  ## printf-stdarg.c:103:0
  10e112:    04 2d             		 r4 = [sp+52]			  ## printf-stdarg.c:103:0
  10e114:    09 16             	r9 = r0			  ## printf-stdarg.c:103:0
  10e116:    12 5a             	if (r2 == 0) goto 0x74 <printi+0x84 : 10e18c >			  ## printf-stdarg.c:103:0
  10e118:    00 2c             	r0 = [sp+48]			  ## printf-stdarg.c:103:0
  10e11a:    41 20             	r1 = 0x0			  ## printf-stdarg.c:103:0
  10e11c:    de e9 0f 10       	b[sp+15] = r1			  ## printf-stdarg.c:121:8
  10e120:    41 21             	r1 = 0x1			  ## printf-stdarg.c:121:8
  10e122:    46 21             	r6 = 0x1			  ## printf-stdarg.c:115:17
  10e124:    b3 e8 0a 00       	if (r3 != 0xa) {			  ## printf-stdarg.c:115:17
  10e128:    46 20             		r6 = 0x0
                               	}			  ## printf-stdarg.c:115:17
  10e12a:    30 e8 00 00       	if (r0 == 0x0) {			  ## printf-stdarg.c:115:17
  10e12e:    01 16             		r1 = r0
                               	}			  ## printf-stdarg.c:115:9
  10e130:    90 f1 62 01       	r0 = r6 & r1  #			  ## printf-stdarg.c:115:12
  10e134:    07 2f             		 r7 = [sp+60]
  10e136:    a6 e0 00 20       	r6 = 0x0 - r2			  ## printf-stdarg.c:117:13
  10e13a:    a1 bf             	r1 = r2 >> 0x1f			  ## printf-stdarg.c:115:28
  10e13c:    11 ea 00 00       	if ((r1 & r0) == 0) {			  ## printf-stdarg.c:115:28
  10e140:    26 16             		r6 = r2
                               	}			  ## printf-stdarg.c:115:28
  10e142:    81 19             	r1 &= r0			  ## printf-stdarg.c:115:12
  10e144:    88 84             	r0 = sp + 4			  ## printf-stdarg.c:115:12
  10e146:    c0 2a             	r0 += 0xa			  ## printf-stdarg.c:115:12
  10e148:    05 e1 c6 70       	r5 = r7 + 0xc6			  ## printf-stdarg.c:115:12
  10e14c:    04 8d             	goto 0x1a <printi+0x60 : 10e168 >			  ## printf-stdarg.c:115:12
  10e14e:    f4 e1 60 73       	r7 = r6 / r3 (u)			  ## printf-stdarg.c:124:15
  10e152:    f0 e1 70 23       	r2 = r7 * r3			  ## printf-stdarg.c:124:15
  10e156:    e6 1e             	r6 = r6 - r2			  ## printf-stdarg.c:124:15
  10e158:    52 16             	r2 = r5			  ## printf-stdarg.c:125:13
  10e15a:    b6 ee 09 00       	ifs (r6 <= 0x9) {			  ## printf-stdarg.c:125:13
  10e15e:    42 20             		r2 = 0x0
                               	}			  ## printf-stdarg.c:125:13
  10e160:    62 18             	r2 += r6			  ## printf-stdarg.c:125:13
  10e162:    ca 30             	r2 += 0x30			  ## printf-stdarg.c:128:18
  10e164:    76 d6             	r6 = r7  #			  ## printf-stdarg.c:128:18
  10e166:    8a 07             		 b[r0++=-0x1] = r2			  ## printf-stdarg.c:128:14
  10e168:    f6 52             	if (r6 != 0) goto -0x1c <printi+0x46 : 10e14e >
  10e16a:    0f 81             	r7 = r0 + 0x1			  ## printf-stdarg.c:132:9
  10e16c:    46 20             	r6 = 0x0
  10e16e:    01 5f             	if (r1 == 0) goto 0x3e <printi+0xA6 : 10e1ae >
  10e170:    04 5b             	if (r4 == 0) goto 0x36 <printi+0xA0 : 10e1a8 >
  10e172:    5a e8 19 08       	if ((r10 & 0x2) == 0) goto 0x32 <printi+0xA0 : 10e1a8 >
  10e176:    4a 2d             	r2 = 0x2d			  ## printf-stdarg.c:134:17
  10e178:    90 16             	r0 = r9			  ## printf-stdarg.c:134:17
  10e17a:    81 16             	r1 = r8			  ## printf-stdarg.c:134:17
  10e17c:    bf ea 6f ff       	call -0x122 <printchar : 10e05e >			  ## printf-stdarg.c:134:17
  10e180:    46 21             	r6 = 0x1			  ## printf-stdarg.c:134:17
  10e182:    30 e8 00 00       	if (r0 == 0x0) {
  10e186:    06 16             		r6 = r0
                               	}			  ## printf-stdarg.c:134:17
  10e188:    c4 1f             	r4 = r4 - r6			  ## printf-stdarg.c:134:17
  10e18a:    04 91             	goto 0x22 <printi+0xA6 : 10e1ae >
  10e18c:    48 30             	r0 = 0x30			  ## printf-stdarg.c:110:22
  10e18e:    de e9 04 00       	b[sp+4] = r0			  ## printf-stdarg.c:110:22
  10e192:    40 20             	r0 = 0x0			  ## printf-stdarg.c:110:22
  10e194:    de e9 05 00       	b[sp+5] = r0			  ## printf-stdarg.c:111:22
  10e198:    8a 84             	r2 = sp + 4			  ## printf-stdarg.c:111:22
  10e19a:    d4 e9 01 a0       	[sp] = r10			  ## printf-stdarg.c:112:16
  10e19e:    90 16             	r0 = r9			  ## printf-stdarg.c:112:16
  10e1a0:    43 16             	r3 = r4			  ## printf-stdarg.c:112:16
  10e1a2:    bf ea 70 ff       	call -0x120 <prints : 10e086 >			  ## printf-stdarg.c:112:16
  10e1a6:    04 8c             	goto 0x18 <printi+0xB8 : 10e1c0 >			  ## printf-stdarg.c:112:16
  10e1a8:    49 2d             	r1 = 0x2d			  ## printf-stdarg.c:139:18
  10e1aa:    07 d6             	r7 = r0  #			  ## printf-stdarg.c:139:18
  10e1ac:    89 40             		 b[r0+0x0] = r1			  ## printf-stdarg.c:139:18
  10e1ae:    d4 e9 01 a0       	[sp] = r10			  ## printf-stdarg.c:143:17
  10e1b2:    90 16             	r0 = r9			  ## printf-stdarg.c:143:17
  10e1b4:    81 16             	r1 = r8			  ## printf-stdarg.c:143:17
  10e1b6:    72 16             	r2 = r7			  ## printf-stdarg.c:143:17
  10e1b8:    43 16             	r3 = r4			  ## printf-stdarg.c:143:17
  10e1ba:    bf ea 64 ff       	call -0x138 <prints : 10e086 >			  ## printf-stdarg.c:143:17
  10e1be:    60 18             	r0 += r6			  ## printf-stdarg.c:143:15
  10e1c0:    02 84             	sp += 0x10
  10e1c2:    5a 04             	{pc, r10-r4} = [sp++]			  ## printf-stdarg.c:144:1


print:
  10e1c4:    7e 04             	[--sp] = {rets, r14-r4}			  ## printf-stdarg.c:147:0
  10e1c6:    e2 99             	sp += -0x1c			  ## printf-stdarg.c:147:0
  10e1c8:    1e d6             	r14 = r1  #			  ## printf-stdarg.c:147:0
  10e1ca:    82 26             		 [sp+24] = r2			  ## printf-stdarg.c:147:0
  10e1cc:    04 d6             	r4 = r0  #			  ## printf-stdarg.c:147:0
  10e1ce:    83 25             		 [sp+20] = r3			  ## printf-stdarg.c:147:0
  10e1d0:    f8 e8 12 80       	r8 = sp + 18			  ## printf-stdarg.c:147:0
  10e1d4:    c1 14             	r9 = 0			  ## printf-stdarg.c:147:0
  10e1d6:    4a e0 41 00       	r10 = 0x41 <TLB_BEGIN+0x40 : 40 >			  ## printf-stdarg.c:147:0
  10e1da:    4b e0 61 00       	r11 = 0x61 <TLB_BEGIN+0x60 : 60 >			  ## printf-stdarg.c:147:0
  10e1de:    4c e0 01 00       	r12 = 0x1 <TLB_BEGIN : 0 >			  ## printf-stdarg.c:147:0
  10e1e2:    cd ff 54 fb 10 00 	r13 = 0x10fb54 <nor_flash_boot_table+0x10 : 10fb54 >			  ## printf-stdarg.c:147:0
  10e1e8:    46 20             	r6 = 0x0			  ## printf-stdarg.c:147:0
  10e1ea:    84 80             	goto 0x200 <.GJTIE78_0_0_+0x12C : 10e3ec >			  ## printf-stdarg.c:147:0
  10e1ec:    29 81             	r1 = r2 + 0x1			  ## printf-stdarg.c:154:13
  10e1ee:    81 26             	[sp+24] = r1			  ## printf-stdarg.c:154:13
  10e1f0:    28 41             	r0 = b[r2+0x1] (u)			  ## printf-stdarg.c:156:17
  10e1f2:    00 f8 05 4a       	if (r0 == 0x25) goto 0xa <print+0x3C : 10e200 >			  ## printf-stdarg.c:156:17
  10e1f6:    00 f8 0b 5a       	if (r0 == 0x2d) goto 0x16 <print+0x4C : 10e210 >
  10e1fa:    45 20             	r5 = 0x0
  10e1fc:    80 50             	if (r0 != 0) goto 0x20 <print+0x5A : 10e21e >
  10e1fe:    74 9c             	goto 0x1f8 <.GJTIE78_0_0_+0x138 : 10e3f8 >
  10e200:    48 25             	r0 = 0x25
  10e202:    0a 17             	r2 = r0.b0 (s)			  ## printf-stdarg.c:276:39
  10e204:    40 16             	r0 = r4			  ## printf-stdarg.c:276:19
  10e206:    e1 16             	r1 = r14			  ## printf-stdarg.c:276:19
  10e208:    bf ea 29 ff       	call -0x1ae <printchar : 10e05e >			  ## printf-stdarg.c:276:19
  10e20c:    06 18             	r6 += r0
  10e20e:    24 98             	goto 0xb0 <.GJTIE78_0_0_ : 10e2c0 >
  10e210:    29 82             	r1 = r2 + 0x2			  ## printf-stdarg.c:163:17
  10e212:    81 26             	[sp+24] = r1			  ## printf-stdarg.c:163:17
  10e214:    45 21             	r5 = 0x1
  10e216:    04 83             	goto 0x6 <print+0x5A : 10e21e >
  10e218:    c1 21             	r1 += 0x1			  ## printf-stdarg.c:167:17
  10e21a:    81 26             	[sp+24] = r1			  ## printf-stdarg.c:167:17
  10e21c:    35 21             	r5 |= 0x2			  ## printf-stdarg.c:168:21
  10e21e:    1a 40             	r2 = b[r1+0x0] (u)			  ## printf-stdarg.c:166:20
  10e220:    02 f8 fa 61       	if (r2 == 0x30) goto -0xc <print+0x54 : 10e218 >			  ## printf-stdarg.c:166:20
  10e224:    30 e1 d0 2f       	r0 = r2 + -0x30			  ## printf-stdarg.c:172:17
  10e228:    00 17             	r0 = r0.b0 (u)			  ## printf-stdarg.c:172:17
  10e22a:    17 3f             	r7 = -0x1			  ## printf-stdarg.c:172:17
  10e22c:    00 fc 06 12       	if (r0 > 0x9) goto 0xc <print+0x78 : 10e23c >			  ## printf-stdarg.c:172:17
  10e230:    88 98             	r0 = sp + 24
  10e232:    bf ea 01 ff       	call -0x1fe <skip_atoi : 10e038 >			  ## printf-stdarg.c:173:25
  10e236:    07 d6             	r7 = r0  #			  ## printf-stdarg.c:173:25
  10e238:    01 26             		 r1 = [sp+24]			  ## printf-stdarg.c:173:25
  10e23a:    1a 40             	r2 = b[r1+0x0] (u)			  ## printf-stdarg.c:173:25
  10e23c:    82 f8 0d 5c       	if (r2 != 0x2e) goto 0x1a <print+0x96 : 10e25a >
  10e240:    18 81             	r0 = r1 + 0x1			  ## printf-stdarg.c:178:17
  10e242:    80 26             	[sp+24] = r0			  ## printf-stdarg.c:178:17
  10e244:    1a 41             	r2 = b[r1+0x1] (u)			  ## printf-stdarg.c:179:21
  10e246:    33 e1 d0 2f       	r3 = r2 + -0x30			  ## printf-stdarg.c:179:21
  10e24a:    33 17             	r3 = r3.b0 (u)			  ## printf-stdarg.c:179:21
  10e24c:    03 fc 07 12       	if (r3 > 0x9) goto 0xe <print+0x9A : 10e25e >			  ## printf-stdarg.c:179:21
  10e250:    88 98             	r0 = sp + 24
  10e252:    bf ea f1 fe       	call -0x21e <skip_atoi : 10e038 >			  ## printf-stdarg.c:180:33
  10e256:    00 26             	r0 = [sp+24]
  10e258:    04 89             	goto 0x12 <print+0xA8 : 10e26c >
  10e25a:    10 16             	r0 = r1			  ## printf-stdarg.c:250:18
  10e25c:    04 87             	goto 0xe <print+0xA8 : 10e26c >			  ## printf-stdarg.c:250:18
  10e25e:    32 e8 2a c0       	if (r2 == 0x2a) {
  10e262:    88 94             		r0 = sp + 20
  10e264:    c0 eb 04 00       		[r0+0x0] += 0x4			  ## printf-stdarg.c:183:33
  10e268:    18 82             		r0 = r1 + 0x2			  ## printf-stdarg.c:182:21
  10e26a:    80 26             		[sp+24] = r0
                               	}			  ## printf-stdarg.c:182:21
  10e26c:    09 40             	r1 = b[r0+0x0] (u)
  10e26e:    32 e1 90 1f       	r2 = r1 + -0x70			  ## printf-stdarg.c:193:17
  10e272:    82 fc 1f 10       	if (r2 <= 0x8) goto 0x3e <print+0xF0 : 10e2b4 >			  ## printf-stdarg.c:193:17
  10e276:    01 f8 41 98       	if (r1 == 0x4c) goto 0x82 <.GJTIE78_0_0_+0x3C : 10e2fc >
  10e27a:    01 f8 49 b0       	if (r1 == 0x58) goto 0x92 <.GJTIE78_0_0_+0x50 : 10e310 >
  10e27e:    01 f8 57 c6       	if (r1 == 0x63) goto 0xae <.GJTIE78_0_0_+0x70 : 10e330 >
  10e282:    01 f8 65 c8       	if (r1 == 0x64) goto 0xca <.GJTIE78_0_0_+0x90 : 10e350 >
  10e286:    81 f8 1b d8       	if (r1 != 0x6c) goto 0x36 <.GJTIE78_0_0_ : 10e2c0 >
  10e28a:    09 41             	r1 = b[r0+0x1] (u)			  ## printf-stdarg.c:202:39
  10e28c:    01 f8 6c f0       	if (r1 == 0x78) goto 0xd8 <.GJTIE78_0_0_+0xA8 : 10e368 >			  ## printf-stdarg.c:202:39
  10e290:    01 f8 74 d8       	if (r1 == 0x6c) goto 0xe8 <.GJTIE78_0_0_+0xBC : 10e37c >
  10e294:    01 f8 81 ea       	if (r1 == 0x75) goto 0x102 <.GJTIE78_0_0_+0xDA : 10e39a >
  10e298:    81 f8 12 c8       	if (r1 != 0x64) goto 0x24 <.GJTIE78_0_0_ : 10e2c0 >
  10e29c:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:203:40
  10e29e:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:203:40
  10e2a0:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:203:40
  10e2a2:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:203:40
  10e2a4:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:203:23
  10e2a8:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:203:23
  10e2aa:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:203:23
  10e2ac:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:203:23
  10e2ae:    d4 e9 01 c0       	[sp] = r12			  ## printf-stdarg.c:203:23
  10e2b2:    34 9e             	goto 0xfc <.GJTIE78_0_0_+0xF0 : 10e3b0 >			  ## printf-stdarg.c:203:23
  10e2b4:    02 01             	tbb [r2]


.GJTIS78_0_0_:
  10e2b6:    09     < 9 : 0x9 >
  10e2b7:    05     < 5 : 0x5 >
  10e2b8:    05     < 5 : 0x5 >
  10e2b9:    10     < 16 : 0x10 >
  10e2ba:    05     < 5 : 0x5 >
  10e2bb:    19     < 25 : 0x19 >
  10e2bc:    05     < 5 : 0x5 >
  10e2bd:    05     < 5 : 0x5 >
  10e2be:    09     < 9 : 0x9 >
  10e2bf:    00     < 0 : 0x0 >
  10e2c0:    00 26             	r0 = [sp+24]			  ## printf-stdarg.c:152:26
  10e2c2:    0a 81             	r2 = r0 + 0x1			  ## printf-stdarg.c:152:26
  10e2c4:    82 26             	[sp+24] = r2			  ## printf-stdarg.c:152:26
  10e2c6:    44 92             	goto 0x124 <.GJTIE78_0_0_+0x12C : 10e3ec >			  ## printf-stdarg.c:152:26
  10e2c8:    00 25             	r0 = [sp+20]
  10e2ca:    09 84             	r1 = r0 + 0x4
  10e2cc:    81 25             	[sp+20] = r1
  10e2ce:    02 60             	r2 = [r0+0x0] 
  10e2d0:    d4 e9 0d b0       	[sp+12] = r11
  10e2d4:    14 83             	goto 0x46 <.GJTIE78_0_0_+0x5C : 10e31c >
  10e2d6:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:194:44
  10e2d8:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:194:44
  10e2da:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:194:44
  10e2dc:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:194:44
  10e2de:    85 20             	[sp] = r5			  ## printf-stdarg.c:195:23
  10e2e0:    32 e8 00 00       	if (r2 == 0x0) {			  ## printf-stdarg.c:195:23
  10e2e4:    d2 16             		r2 = r13
                               	}			  ## printf-stdarg.c:195:40
  10e2e6:    14 8e             	goto 0x5c <.GJTIE78_0_0_+0x84 : 10e344 >
  10e2e8:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:236:40
  10e2ea:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:236:40
  10e2ec:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:236:40
  10e2ee:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:236:40
  10e2f0:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:236:23
  10e2f4:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:236:23
  10e2f6:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:236:23
  10e2f8:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:236:23
  10e2fa:    04 93             	goto 0x26 <.GJTIE78_0_0_+0x62 : 10e322 >			  ## printf-stdarg.c:236:23
  10e2fc:    08 41             	r0 = b[r0+0x1] (u)			  ## printf-stdarg.c:230:39
  10e2fe:    80 f8 df b1       	if (r0 != 0x58) goto -0x42 <.GJTIE78_0_0_ : 10e2c0 >
  10e302:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:231:40
  10e304:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:231:40
  10e306:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:231:40
  10e308:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:231:40
  10e30a:    d4 e9 0d a0       	[sp+12] = r10			  ## printf-stdarg.c:231:23
  10e30e:    14 92             	goto 0x64 <.GJTIE78_0_0_+0xB4 : 10e374 >			  ## printf-stdarg.c:231:23
  10e310:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:227:40
  10e312:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:227:40
  10e314:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:227:40
  10e316:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:227:40
  10e318:    d4 e9 0d a0       	[sp+12] = r10			  ## printf-stdarg.c:227:23
  10e31c:    85 22             	[sp+8] = r5
  10e31e:    87 21             	[sp+4] = r7
  10e320:    43 30             	r3 = 0x10
  10e322:    d4 e9 01 90       	[sp] = r9
  10e326:    40 16             	r0 = r4
  10e328:    e1 16             	r1 = r14
  10e32a:    bf ea ed fe       	call -0x226 <printi : 10e108 >
  10e32e:    b7 8e             	goto -0x124 <print+0x48 : 10e20c >
  10e330:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:252:32
  10e332:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:252:32
  10e334:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:252:32
  10e336:    00 60             	r0 = [r0+0x0] 			  ## printf-stdarg.c:252:32
  10e338:    de e9 12 00       	b[sp+18] = r0			  ## printf-stdarg.c:252:24
  10e33c:    52 ee 81 90       	b[r8+0x1] = r9			  ## printf-stdarg.c:253:24
  10e340:    8a 92             	r2 = sp + 18
  10e342:    85 20             	[sp] = r5			  ## printf-stdarg.c:254:23
  10e344:    40 16             	r0 = r4
  10e346:    e1 16             	r1 = r14
  10e348:    73 16             	r3 = r7
  10e34a:    bf ea 9c fe       	call -0x2c8 <prints : 10e086 >
  10e34e:    a7 9e             	goto -0x144 <print+0x48 : 10e20c >
  10e350:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:199:40
  10e352:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:199:40
  10e354:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:199:40
  10e356:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:199:40
  10e358:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:199:23
  10e35c:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:199:23
  10e35e:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:199:23
  10e360:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:199:23
  10e362:    d4 e9 01 c0       	[sp] = r12			  ## printf-stdarg.c:199:23
  10e366:    e7 9f             	goto -0x42 <.GJTIE78_0_0_+0x66 : 10e326 >			  ## printf-stdarg.c:199:23
  10e368:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:222:40
  10e36a:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:222:40
  10e36c:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:222:40
  10e36e:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:222:40
  10e370:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:222:23
  10e374:    85 22             	[sp+8] = r5
  10e376:    87 21             	[sp+4] = r7
  10e378:    43 30             	r3 = 0x10
  10e37a:    04 98             	goto 0x30 <.GJTIE78_0_0_+0xEC : 10e3ac >
  10e37c:    09 42             	r1 = b[r0+0x2] (u)			  ## printf-stdarg.c:207:67
  10e37e:    81 f8 1f c8       	if (r1 != 0x64) goto 0x3e <.GJTIE78_0_0_+0x100 : 10e3c0 >			  ## printf-stdarg.c:207:17
  10e382:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:208:40
  10e384:    09 88             	r1 = r0 + 0x8			  ## printf-stdarg.c:208:40
  10e386:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:208:40
  10e388:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:208:40
  10e38a:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:208:23
  10e38e:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:208:23
  10e390:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:208:23
  10e392:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:208:23
  10e394:    d4 e9 01 c0       	[sp] = r12			  ## printf-stdarg.c:208:23
  10e398:    14 81             	goto 0x42 <.GJTIE78_0_0_+0x11C : 10e3dc >			  ## printf-stdarg.c:208:23
  10e39a:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:240:40
  10e39c:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:240:40
  10e39e:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:240:40
  10e3a0:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:240:40
  10e3a2:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:240:23
  10e3a6:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:240:23
  10e3a8:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:240:23
  10e3aa:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:240:23
  10e3ac:    d4 e9 01 90       	[sp] = r9
  10e3b0:    40 16             	r0 = r4
  10e3b2:    e1 16             	r1 = r14
  10e3b4:    bf ea a8 fe       	call -0x2b0 <printi : 10e108 >
  10e3b8:    89 98             	r1 = sp + 24
  10e3ba:    c0 eb 01 10       	[r1+0x0] += 0x1
  10e3be:    97 86             	goto -0x1b4 <print+0x48 : 10e20c >
  10e3c0:    08 42             	r0 = b[r0+0x2] (u)			  ## printf-stdarg.c:244:67
  10e3c2:    80 f8 7d eb       	if (r0 != 0x75) goto -0x106 <.GJTIE78_0_0_ : 10e2c0 >
  10e3c6:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:245:40
  10e3c8:    09 88             	r1 = r0 + 0x8			  ## printf-stdarg.c:245:40
  10e3ca:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:245:40
  10e3cc:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:245:40
  10e3ce:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:245:23
  10e3d2:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:245:23
  10e3d4:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:245:23
  10e3d6:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:245:23
  10e3d8:    d4 e9 01 90       	[sp] = r9			  ## printf-stdarg.c:245:23
  10e3dc:    40 16             	r0 = r4
  10e3de:    e1 16             	r1 = r14
  10e3e0:    bf ea 92 fe       	call -0x2dc <printi : 10e108 >
  10e3e4:    89 98             	r1 = sp + 24
  10e3e6:    c0 eb 02 10       	[r1+0x0] += 0x2
  10e3ea:    87 90             	goto -0x1e0 <print+0x48 : 10e20c >
  10e3ec:    28 40             	r0 = b[r2+0x0] (u)			  ## printf-stdarg.c:152:12
  10e3ee:    00 ff 25 00 fc fe 	if (r0 == 0x25) goto -0x208 <print+0x28 : 10e1ec >			  ## printf-stdarg.c:152:5
  10e3f4:    80 f8 05 01       	if (r0 != 0x0) goto -0x1f6 <print+0x3E : 10e202 >
  10e3f8:    b4 e8 00 80       	if (r4 != 0x0) {
  10e3fc:    40 60             		r0 = [r4+0x0] 			  ## printf-stdarg.c:280:10
  10e3fe:    41 20             		r1 = 0x0			  ## printf-stdarg.c:280:15
  10e400:    89 40             		b[r0+0x0] = r1
                               	}			  ## printf-stdarg.c:280:15
  10e402:    60 16             	r0 = r6			  ## printf-stdarg.c:283:5
  10e404:    02 87             	sp += 0x1c			  ## printf-stdarg.c:283:5
  10e406:    5e 04             	{pc, r14-r4} = [sp++]			  ## printf-stdarg.c:283:5


puts:
  10e408:    75 04             	[--sp] = {rets, r5, r4}			  ## printf-stdarg.c:288:0
  10e40a:    04 16             	r4 = r0			  ## printf-stdarg.c:288:0
  10e40c:    c5 ff e4 bc 02 00 	r5 = 0x2bce4 <mask_putchar : 2bce4 >			  ## printf-stdarg.c:288:0
  10e412:    04 82             	goto 0x4 <puts+0x10 : 10e418 >			  ## printf-stdarg.c:288:0
  10e414:    08 17             	r0 = r0.b0 (s)			  ## uart.c:49:5
  10e416:    c1 00             	call r1			  ## uart.c:49:5
  10e418:    51 60             	r1 = [r5+0x0] 			  ## uart.c:49:5
  10e41a:    40 07             	r0 = b[r4++=0x1] (u)			  ## printf-stdarg.c:318:12
  10e41c:    f0 5b             	if (r0 != 0) goto -0xa <puts+0xC : 10e414 >
  10e41e:    40 2a             	r0 = 0xa			  ## uart.c:49:5
  10e420:    c1 00             	call r1			  ## uart.c:49:5
  10e422:    40 20             	r0 = 0x0			  ## printf-stdarg.c:326:5
  10e424:    55 04             	{pc, r5, r4} = [sp++]			  ## printf-stdarg.c:326:5


printf:
  10e426:    61 04             	[--sp] = {r3-r1}			  ## printf-stdarg.c:331:0
  10e428:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:331:0
  10e42a:    e2 9f             	sp += -0x4			  ## printf-stdarg.c:331:0
  10e42c:    8b 8c             	r3 = sp + 12			  ## printf-stdarg.c:331:0
  10e42e:    04 d6             	r4 = r0  #			  ## printf-stdarg.c:331:0
  10e430:    83 20             		 [sp] = r3			  ## printf-stdarg.c:335:5
  10e432:    80 14             	r1_r0 = 0			  ## printf-stdarg.c:365:11
  10e434:    42 16             	r2 = r4			  ## printf-stdarg.c:365:11
  10e436:    bf ea c5 fe       	call -0x276 <print : 10e1c4 >			  ## printf-stdarg.c:365:11
  10e43a:    02 81             	sp += 0x4
  10e43c:    34 04             	{rets, r4} = [sp++]			  ## printf-stdarg.c:368:5
  10e43e:    02 83             	sp += 0xc			  ## printf-stdarg.c:368:5
  10e440:    80 00             	rts			  ## printf-stdarg.c:368:5


sprintf:
  10e442:    62 04             	[--sp] = {r3, r2}			  ## printf-stdarg.c:373:0
  10e444:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:373:0
  10e446:    e2 9e             	sp += -0x8			  ## printf-stdarg.c:373:0
  10e448:    14 d6             	r4 = r1  #			  ## printf-stdarg.c:373:0
  10e44a:    80 21             		 [sp+4] = r0			  ## printf-stdarg.c:373:0
  10e44c:    8b 90             	r3 = sp + 16			  ## printf-stdarg.c:373:0
  10e44e:    42 d6             	r2 = r4  #			  ## printf-stdarg.c:378:12
  10e450:    83 20             		 [sp] = r3			  ## printf-stdarg.c:376:5
  10e452:    88 84             	r0 = sp + 4			  ## printf-stdarg.c:376:5
  10e454:    41 20             	r1 = 0x0			  ## printf-stdarg.c:378:12
  10e456:    bf ea b5 fe       	call -0x296 <print : 10e1c4 >			  ## printf-stdarg.c:378:12
  10e45a:    02 82             	sp += 0x8
  10e45c:    34 04             	{rets, r4} = [sp++]			  ## printf-stdarg.c:378:5
  10e45e:    02 82             	sp += 0x8			  ## printf-stdarg.c:378:5
  10e460:    80 00             	rts			  ## printf-stdarg.c:378:5


vprintf:
  10e462:    10 04             	[--sp] = rets			  ## printf-stdarg.c:382:0
  10e464:    02 15             	r3_r2 = r1_r0			  ## printf-stdarg.c:382:0
  10e466:    80 14             	r1_r0 = 0			  ## printf-stdarg.c:385:12
  10e468:    bf ea ac fe       	call -0x2a8 <print : 10e1c4 >			  ## printf-stdarg.c:385:12
  10e46c:    00 04             	pc = [sp++]			  ## printf-stdarg.c:387:5


norflash_read:
  10e46e:    78 04             	[--sp] = {rets, r8-r4}			  ## norflash.c:314:0
  10e470:    34 d6             	r4 = r3  #			  ## norflash.c:314:0
  10e472:    08 44             		 r0 = b[r0+0x4] (u)			  ## norflash.c:318:19
  10e474:    26 16             	r6 = r2
  10e476:    15 16             	r5 = r1
  10e478:    c8 ff 00 41 1e 00 	r8 = 0x1e4100 <__stub_VecMinScalar_float_c_f_c+0xD4104 : 1e4100 >
  10e47e:    b0 e8 00 40       	if (r0 != 0x0) {
  10e482:    42 ea 00 80       		[r8+0x8] = 0x0			  ## norflash.c:319:28
  10e486:    40 ea 83 80       		[r8+0x0] = 0x83
                               	}			  ## norflash.c:320:28
  10e48a:    40 20             	r0 = 0x0			  ## norflash.c:324:5
  10e48c:    47 20             	r7 = 0x0			  ## norflash.c:324:5
  10e48e:    bf ea 2d f8       	call -0xfa6 <SPI0_cs : 10d4ec >			  ## norflash.c:324:5
  10e492:    40 23             	r0 = 0x3			  ## norflash.c:326:5
  10e494:    bf ea 4a f8       	call -0xf6c <SPI0_WriteByte : 10d52c >			  ## norflash.c:326:5
  10e498:    b0 e1 20 68       	r0 = uextra(r6, p:0x10, l:0x8)			  ## norflash.c:111:5
  10e49c:    bf ea 46 f8       	call -0xf74 <SPI0_WriteByte : 10d52c >			  ## norflash.c:111:5
  10e4a0:    b0 e1 20 64       	r0 = uextra(r6, p:0x8, l:0x8)			  ## norflash.c:112:5
  10e4a4:    bf ea 42 f8       	call -0xf7c <SPI0_WriteByte : 10d52c >			  ## norflash.c:112:5
  10e4a8:    60 17             	r0 = r6.b0 (u)			  ## norflash.c:113:5
  10e4aa:    bf ea 3f f8       	call -0xf82 <SPI0_WriteByte : 10d52c >			  ## norflash.c:113:5
  10e4ae:    30 e1 04 84       	r0 = r8 + -0xbfc			  ## norflash.c:330:17
  10e4b2:    22 f1 fc 06       	r2 = r0 + -0x1904  #			  ## norflash.c:330:17
  10e4b6:    87 60             		 [r0+0x0] = r7			  ## norflash.c:330:17
  10e4b8:    00 ef 80 2d       	[r2+0x0] |= 0x1000			  ## spi0.c:326:18
  10e4bc:    40 2a             	r0 = 0xa			  ## spi0.c:327:5
  10e4be:    bf ea 5a f3       	call -0x194c <udelay : 10cb76 >			  ## spi0.c:327:5
  10e4c2:    c0 ef 40 2e       	[r2+0x0] &= 0xFFFFF3FF			  ## spi0.c:328:18
  10e4c6:    c0 d7             	r0 = r4.l (u)  #			  ## spi0.c:331:20
  10e4c8:    a5 63             		 [r2+0xc] = r5			  ## spi0.c:330:18
  10e4ca:    a0 64             	[r2+0x10] = r0			  ## spi0.c:331:18
  10e4cc:    bf ea 25 f8       	call -0xfb6 <spi0_wait_ok : 10d51a >			  ## spi0.c:333:5
  10e4d0:    40 21             	r0 = 0x1			  ## norflash.c:335:5
  10e4d2:    bf ea 0b f8       	call -0xfea <SPI0_cs : 10d4ec >			  ## norflash.c:335:5
  10e4d6:    40 21             	r0 = 0x1			  ## norflash.c:341:5
  10e4d8:    d0 ec 81 70       	[r8+0x0] = r7			  ## norflash.c:338:24
  10e4dc:    58 04             	{pc, r8-r4} = [sp++]			  ## norflash.c:341:5


uart_isr:
  10e4de:    e9 04             	[--sp] = {psr, rets, reti}			  ## uart_upgrade.c:185:0
  10e4e0:    d8 e8 3f 00       	[--sp] = {r5-r0}			  ## uart_upgrade.c:185:0
  10e4e4:    60 e0 f1 49       	r4 = 0x1E2000			  ## uart_upgrade.c:185:0
  10e4e8:    40 60             	r0 = [r4+0x0] 			  ## uart_upgrade.c:186:16
  10e4ea:    50 e8 29 58       	if ((r0 & 0x800) == 0) goto 0x52 <uart_isr+0x62 : 10e540 >			  ## uart_upgrade.c:186:16
  10e4ee:    00 ef 80 40       	[r4+0x0] |= 0x80			  ## uart_upgrade.c:187:20
  10e4f2:    00 ef a0 4d       	[r4+0x0] |= 0x1400			  ## uart_upgrade.c:188:20
  10e4f6:    20 00             	csync			  ## uart_upgrade.c:189:9
  10e4f8:    40 6a             	r0 = [r4+0x28] 			  ## uart_upgrade.c:190:28
  10e4fa:    42 20             	r2 = 0x0
  10e4fc:    c0 ff 80 93 02 00 	r0 = 0x29380 <uart_dma_buffer : 29380 >
  10e502:    21 16             	r1 = r2
  10e504:    01 fc 1c 7a       	if (r1 > 0x3d) goto 0x38 <uart_isr+0x62 : 10e540 >
  10e508:    d8 ee 10 30       	r3 = b[r1+r0] (u)			  ## uart_upgrade.c:125:14
  10e50c:    1a 81             	r2 = r1 + 0x1			  ## uart_upgrade.c:125:14
  10e50e:    83 f8 f8 ab       	if (r3 != 0x55) goto -0x10 <uart_isr+0x24 : 10e502 >			  ## uart_upgrade.c:125:14
  10e512:    13 1c             	r3 = r1 + r0			  ## uart_upgrade.c:125:37
  10e514:    3b 41             	r3 = b[r3+0x1] (u)			  ## uart_upgrade.c:125:37
  10e516:    93 f8 f4 55       	if (r3 != 0xaa) goto -0x18 <uart_isr+0x24 : 10e502 >			  ## uart_upgrade.c:125:37
  10e51a:    42 20             	r2 = 0x0
  10e51c:    c3 ff 40 93 02 00 	r3 = 0x29340 <ut_cmd : 29340 >
  10e522:    04 89             	goto 0x12 <uart_isr+0x58 : 10e536 >
  10e524:    95 1c             	r5 = r1 + r2			  ## uart_upgrade.c:129:45
  10e526:    cd 3f             	r5 += 0x3f			  ## uart_upgrade.c:129:45
  10e528:    65 e1 3f 50       	r5 = r5 & 0x3F			  ## uart_upgrade.c:129:45
  10e52c:    d8 ee 50 50       	r5 = b[r5+r0] (u)			  ## uart_upgrade.c:129:30
  10e530:    d8 ee 21 53       	b[r2+r3] = r5			  ## uart_upgrade.c:129:28
  10e534:    c2 21             	r2 += 0x1			  ## uart_upgrade.c:128:50
  10e536:    82 f8 f5 2b       	if (r2 != 0x15) goto -0x16 <uart_isr+0x46 : 10e524 >
  10e53a:    bf ea f4 f5       	call -0x1418 <uart_cmd_verify : 10d126 >			  ## uart_upgrade.c:137:20
  10e53e:    80 44             	if (r0 != 0) goto 0x8 <uart_isr+0x6A : 10e548 >
  10e540:    d4 e8 3f 00       	{r5-r0} = [sp++]
  10e544:    a9 04             	{psr, rets, reti} = [sp++]
  10e546:    81 00             	rti
  10e548:    c0 ef 20 40       	[r4+0x0] &= 0xFFFFFFDF			  ## uart_upgrade.c:194:24
  10e54c:    bf ea 24 f6       	call -0x13b8 <uart_recv_loader : 10d198 >			  ## uart_upgrade.c:195:13


LZ4_setStreamDecode:
  10e550:    75 04             	[--sp] = {rets, r5, r4}			  ## lz4.c:642:0
  10e552:    03 16             	r3 = r0			  ## lz4.c:642:0
  10e554:    90 dc             	r0 = r1 + r2  #			  ## lz4.c:645:50
  10e556:    b2 63             		 [r3+0xc] = r2			  ## lz4.c:644:23
  10e558:    b0 62             	[r3+0x8] = r0			  ## lz4.c:645:22
  10e55a:    44 20             	r4 = 0x0			  ## lz4.c:646:25
  10e55c:    45 20             	r5 = 0x0			  ## lz4.c:646:25
  10e55e:    40 21             	r0 = 0x1			  ## lz4.c:648:5
  10e560:    50 ec 31 40       	d[r3+0x0] = r5_r4			  ## lz4.c:646:25
  10e564:    55 04             	{pc, r5, r4} = [sp++]			  ## lz4.c:648:5


doe:
  10e566:    76 04             	[--sp] = {rets, r6-r4}			  ## crc.c:116:0
  10e568:    b3 e8 00 40       	if (r3 != 0x0) {			  ## crc.c:116:0
  10e56c:    b3 a2             		r3 = r3 >> 0x2			  ## crc.c:106:19
  10e56e:    38 19             		r0 ^= r3
                               	}			  ## crc.c:106:25
  10e570:    fa 3f             	r2 += -0x1
  10e572:    43 e0 de ef       	r3 = -0x1022 <__stub_VecMinScalar_float_c_f_c+0xFFFFFFFFFFEEEFE2 : ffffffffffffefde >
  10e576:    04 16             	r4 = r0
  10e578:    04 93             	goto 0x26 <doe+0x3A : 10e5a0 >
  10e57a:    04 a1             	r4 = r0 << 0x1			  ## crc.c:91:24
  10e57c:    b4 19             	r4 &= r3			  ## crc.c:92:19
  10e57e:    80 17             	r0 = r0.l (u)			  ## crc.c:89:33
  10e580:    85 af             	r5 = r0 >> 0xf			  ## crc.c:89:33
  10e582:    54 19             	r4 |= r5			  ## crc.c:92:19
  10e584:    86 ab             	r6 = r0 >> 0xb			  ## crc.c:92:30
  10e586:    5e 19             	r6 ^= r5			  ## crc.c:92:34
  10e588:    66 ac             	r6 = r6 << 0xc			  ## crc.c:92:19
  10e58a:    66 e1 80 6d       	r6 = r6 & 0x1000			  ## crc.c:92:19
  10e58e:    64 19             	r4 |= r6			  ## crc.c:93:18
  10e590:    80 a4             	r0 = r0 >> 0x4			  ## crc.c:93:29
  10e592:    58 19             	r0 ^= r5			  ## crc.c:93:32
  10e594:    00 a5             	r0 = r0 << 0x5			  ## crc.c:93:18
  10e596:    60 e1 20 00       	r0 = r0 & 0x20			  ## crc.c:93:18
  10e59a:    40 19             	r0 |= r4			  ## crc.c:94:18
  10e59c:    04 17             	r4 = r0.b0 (u)			  ## crc.c:98:21
  10e59e:    fa 3f             	r2 += -0x1			  ## crc.c:110:5
  10e5a0:    1d 40             	r5 = b[r1+0x0] (u)
  10e5a2:    5c 19             	r4 ^= r5
  10e5a4:    94 07             	b[r1++=0x1] = r4
  10e5a6:    f2 49             	if (r2 != 0) goto -0x2e <doe+0x14 : 10e57a >
  10e5a8:    56 04             	{pc, r6-r4} = [sp++]			  ## crc.c:119:1


logAprx_CORDIC_float:
  10e5aa:    75 04             	[--sp] = {rets, r5, r4}			  ## MathApproximate_floatSpecialization_maskrom.c:15:0
  10e5ac:    00 60             	r0 = [r0+0x0] 			  ## MathApproximate_floatSpecialization_maskrom.c:37:13
  10e5ae:    c2 ff 18 72 31 3f 	r2 = 0x3f317218 <__stub_VecMinScalar_float_c_f_c+0x3F20721C : 3f317218 >			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5b4:    b3 e1 a0 0b       	r3 = uextra(r0, p:0x17, l:0x8)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5b8:    b4 e1 5c 00       	r4 = uextra(r0, p:0x0, l:0x17)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5bc:    34 37             	r4 |= 0x800000			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5be:    45 21             	r5 = 0x1			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5c0:    e3 21             	r3 += -0x7f			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5c2:    3f e5 8f 33       	r3 = itof(r3)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5c6:    3f e5 32 32       	r3 = r3 * r2 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5ca:    ff e1 17 44       	r5_r4 = copex(r5_r4) (0x17)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5ce:    3f e5 8f 44       	r4 = itof(r4)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5d2:    f4 e0 40 46       	r4 = r4 - 0xC000000			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5d6:    3f e5 40 03       	r0 = r4 + r3 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5da:    90 60             	[r1+0x0] = r0			  ## MathApproximate_floatSpecialization_maskrom.c:20:5
  10e5dc:    55 04             	{pc, r5, r4} = [sp++]			  ## MathApproximate_floatSpecialization_maskrom.c:41:1


expAprx_CORDIC_float:
  10e5de:    74 04             	[--sp] = {rets, r4}			  ## MathApproximate_floatSpecialization_maskrom.c:44:0
  10e5e0:    00 60             	r0 = [r0+0x0] 			  ## MathApproximate_floatSpecialization_maskrom.c:69:13
  10e5e2:    c4 ff 00 00 20 41 	r4 = 0x41200000 <__stub_VecMinScalar_float_c_f_c+0x410F0004 : 41200000 >			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e5e8:    3f e5 45 30       	r3 = fmin(r4, r0)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e5ec:    54 e1 00 44       	r4 = r4 ^ 0x80000000			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e5f0:    3f e5 46 33       	r3 = fmax(r4, r3)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e5f4:    e3 e0 40 36       	r3 = r3 + 0xC000000			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e5f8:    3f e5 1f 23       	r2 = ftoi(r3) (trunc)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e5fc:    ff e1 0f 22       	r3_r2 = copex(r3_r2) (0xf)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e600:    b4 e1 18 3d       	r4 = uextra(r3, p:0x1a, l:0x6)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e604:    4c 98             	r4 = r4 + 0x18			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e606:    44 b7             	r4 = r4 << 0x17			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e608:    b3 e1 69 30       	r3 = sextra(r3, p:0x0, l:0x1a)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e60c:    3f e5 8f 22       	r2 = itof(r2)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e610:    3f e5 8f 33       	r3 = itof(r3)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e614:    3f e5 22 23       	r2 = r2 * r3 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e618:    20 1f             	r0 = r2 - r4			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e61a:    90 60             	[r1+0x0] = r0			  ## MathApproximate_floatSpecialization_maskrom.c:48:5
  10e61c:    54 04             	{pc, r4} = [sp++]			  ## MathApproximate_floatSpecialization_maskrom.c:72:1


magnAprx_float:
  10e61e:    76 04             	[--sp] = {rets, r6-r4}			  ## MathApproximate_floatSpecialization_maskrom.c:75:0
  10e620:    c2 ff 01 df 75 3f 	r2 = 0x3f75df01 <__stub_VecMinScalar_float_c_f_c+0x3F64DF04 : 3f75df00 >			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e626:    c3 ff b8 af cb 3e 	r3 = 0x3ecbafb8 <__stub_VecMinScalar_float_c_f_c+0x3EBAAFBC : 3ecbafb8 >			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e62c:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e630:    74 e1 00 44       	r4 = r4 & 0x7FFFFFFF			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e634:    75 e1 00 54       	r5 = r5 & 0x7FFFFFFF			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e638:    3f e5 56 64       	r6 = fmax(r5, r4)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e63c:    3f e5 55 54       	r5 = fmin(r5, r4)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e640:    3f e5 62 62       	r6 = r6 * r2 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e644:    3f e5 57 63       	r6 += r5 * r3 (f)			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e648:    96 60             	[r1+0x0] = r6			  ## MathApproximate_floatSpecialization_maskrom.c:82:5
  10e64a:    56 04             	{pc, r6-r4} = [sp++]			  ## MathApproximate_floatSpecialization_maskrom.c:100:1


MatrixCopy_float_c_c:
  10e64c:    79 04             	[--sp] = {rets, r9-r4}			  ## Matrix_floatOperation_maskrom.c:10:0
  10e64e:    d0 ec 10 80       	r8 = [r1+0x0]			  ## Matrix_floatOperation_maskrom.c:17:5
  10e652:    14 61             	r4 = [r1+0x4] 			  ## Matrix_floatOperation_maskrom.c:17:5
  10e654:    d0 ec 08 90       	r9 = [r0+0x8]			  ## Matrix_floatOperation_maskrom.c:17:5
  10e658:    05 63             	r5 = [r0+0xc] 			  ## Matrix_floatOperation_maskrom.c:17:5
  10e65a:    c0 e1 93 90       	r9 = r9 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
  10e65e:    55 a3             	r5 = r5 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
  10e660:    16 62             	r6 = [r1+0x8] 			  ## Matrix_floatOperation_maskrom.c:17:5
  10e662:    17 63             	r7 = [r1+0xc] 			  ## Matrix_floatOperation_maskrom.c:17:5
  10e664:    66 a3             	r6 = r6 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
  10e666:    77 a3             	r7 = r7 << 0x3			  ## Matrix_floatOperation_maskrom.c:17:5
  10e668:    00 65             	r0 = [r0+0x14] 			  ## Matrix_floatOperation_maskrom.c:17:5
  10e66a:    11 65             	r1 = [r1+0x14] 			  ## Matrix_floatOperation_maskrom.c:17:5
  10e66c:    f2 e0 01 80       	r2 = r8 - 0x1			  ## Matrix_floatOperation_maskrom.c:17:5
  10e670:    32 03             	rep 0x8 r2 {			  ## Matrix_floatOperation_maskrom.c:17:5
  10e672:    5e ec 02 25       		r3_r2 = d[r0++=r5]			  ## Matrix_floatOperation_maskrom.c:17:5
  10e676:    5e ec 13 27       		d[r1++=r7] = r3_r2
                               	}			  ## Matrix_floatOperation_maskrom.c:17:5
  10e67a:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <MatrixCopy_float_c_c+0x24 : 10e670 >			  ## Matrix_floatOperation_maskrom.c:17:5
  10e67e:    a5 e0 00 50       	r5 = 0x0 - r5			  ## Matrix_floatOperation_maskrom.c:17:5
  10e682:    50 ec 00 20       	r3_r2 = d[r0+0x0]			  ## Matrix_floatOperation_maskrom.c:17:5
  10e686:    a7 e0 00 70       	r7 = 0x0 - r7			  ## Matrix_floatOperation_maskrom.c:17:5
  10e68a:    50 ec 11 20       	d[r1+0x0] = r3_r2			  ## Matrix_floatOperation_maskrom.c:17:5
  10e68e:    90 18             	r0 += r9			  ## Matrix_floatOperation_maskrom.c:17:5
  10e690:    91 1d             	r1 = r1 + r6			  ## Matrix_floatOperation_maskrom.c:17:5
  10e692:    04 ea eb ff       	if (--r4 != 0) goto -0x2a <MatrixCopy_float_c_c+0x20 : 10e66c >			  ## Matrix_floatOperation_maskrom.c:17:5
  10e696:    59 04             	{pc, r9-r4} = [sp++]			  ## Matrix_floatOperation_maskrom.c:66:1


MatrixCopy_float_f_f:
  10e698:    78 04             	[--sp] = {rets, r8-r4}			  ## Matrix_floatOperation_maskrom.c:69:0
  10e69a:    17 60             	r7 = [r1+0x0] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e69c:    13 61             	r3 = [r1+0x4] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e69e:    d0 ec 08 80       	r8 = [r0+0x8]			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6a2:    04 63             	r4 = [r0+0xc] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6a4:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6a8:    44 a2             	r4 = r4 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6aa:    15 62             	r5 = [r1+0x8] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6ac:    16 63             	r6 = [r1+0xc] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6ae:    55 a2             	r5 = r5 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6b0:    66 a2             	r6 = r6 << 0x2			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6b2:    00 65             	r0 = [r0+0x14] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6b4:    11 65             	r1 = [r1+0x14] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6b6:    f2 e0 01 70       	r2 = r7 - 0x1			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6ba:    32 03             	rep 0x8 r2 {			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6bc:    de ec 02 24       		r2 = [r0++=r4]			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6c0:    de ec 13 26       		[r1++=r6] = r2
                               	}			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6c4:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <MatrixCopy_float_f_f+0x22 : 10e6ba >			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6c8:    a4 f0 00 40       	r4 = 0x0 - r4  #			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6cc:    02 60             		 r2 = [r0+0x0] 			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6ce:    a6 f0 00 60       	r6 = 0x0 - r6  #			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6d2:    92 60             		 [r1+0x0] = r2			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6d4:    80 18             	r0 += r8			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6d6:    19 1d             	r1 = r1 + r5			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6d8:    03 ea ed ff       	if (--r3 != 0) goto -0x26 <MatrixCopy_float_f_f+0x1E : 10e6b6 >			  ## Matrix_floatOperation_maskrom.c:76:5
  10e6dc:    58 04             	{pc, r8-r4} = [sp++]			  ## Matrix_floatOperation_maskrom.c:123:1


MatrixEwMulAndSumOneDim_float_c_c_c_s0:
  10e6de:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:10:0
  10e6e0:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6e4:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6e6:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6ea:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6ee:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6f2:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6f6:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6fa:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e6fe:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e702:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e706:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e708:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e70a:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e70e:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e712:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e714:    f4 e0 01 e0       	r4 = r14 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e718:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e71a:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e71c:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e720:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e724:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e728:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e72c:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e730:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e734:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwMulAndSumOneDim_float_c_c_c_s0+0x3C : 10e71a >			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e738:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e73c:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e740:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e744:    3f e5 58 87       	r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e748:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e74c:    3f e5 57 96       	r9 += r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e750:    aa e0 00 a0       	r10 = 0x0 - r10			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e754:    ac e0 00 c0       	r12 = 0x0 - r12			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e758:    f0 18             	r0 += r15			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e75a:    b1 18             	r1 += r11			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e75c:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e760:    03 ea d8 ff       	if (--r3 != 0) goto -0x50 <MatrixEwMulAndSumOneDim_float_c_c_c_s0+0x36 : 10e714 >			  ## Matrix_Vector_floatOperation_maskrom.c:19:5
  10e764:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:89:1


MatrixEwMulAndSumOneDim_float_c_c_c_s1:
  10e766:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:92:0
  10e768:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e76c:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e76e:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e772:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e776:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e77a:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e77e:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e782:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e786:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e78a:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e78e:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e790:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e792:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e796:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e79a:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e79c:    f4 e0 01 30       	r4 = r3 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7a0:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7a2:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7a4:    5e ec 02 4f       		r5_r4 = d[r0++=r15]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7a8:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7ac:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7b0:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7b4:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7b8:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7bc:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwMulAndSumOneDim_float_c_c_c_s1+0x3C : 10e7a2 >			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7c0:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7c4:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7c8:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7cc:    3f e5 58 87       	r8 -= r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7d0:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7d4:    3f e5 57 96       	r9 += r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7d8:    af e0 00 f0       	r15 = 0x0 - r15			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7dc:    ab e0 00 b0       	r11 = 0x0 - r11			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7e0:    a0 18             	r0 += r10			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7e2:    c1 18             	r1 += r12			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7e4:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7e8:    0e ea d8 ff       	if (--r14 != 0) goto -0x50 <MatrixEwMulAndSumOneDim_float_c_c_c_s1+0x36 : 10e79c >			  ## Matrix_Vector_floatOperation_maskrom.c:101:5
  10e7ec:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:171:1


MatrixEwMulAndSumOneDim_float_f_f_f_s0:
  10e7ee:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:174:0
  10e7f0:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e7f2:    04 60             	r4 = [r0+0x0] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e7f4:    fc 3f             	r4 += -0x1			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e7f6:    d0 ec 1c b0       	r11 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e7fa:    c0 e1 b2 b4       	r11 = r11 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e7fe:    07 62             	r7 = [r0+0x8] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e800:    7f a2             	r7 = r7 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e802:    d0 ec 18 80       	r8 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e806:    c0 e1 82 84       	r8 = r8 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e80a:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e80e:    c0 e1 a2 a4       	r10 = r10 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e812:    d0 ec 04 f1       	r15 = [r0+0x14]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e816:    16 65             	r6 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e818:    d0 ec 24 90       	r9 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e81c:    c0 e1 92 94       	r9 = r9 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e820:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e822:    f0 16             	r0 = r15			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e824:    61 16             	r1 = r6			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e826:    de ec 02 da       	r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e82a:    de ec 12 eb       	r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e82e:    3f e5 d2 5e       	r5 = r13 * r14 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e832:    4c 16             	r12 = r4			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e834:    5c 03             	rep 0xc r12 {			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e836:    de ec 02 da       		r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e83a:    de ec 12 eb       		r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e83e:    3f e5 d7 5e       		r5 += r13 * r14 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e842:    0c fe f7 01       	ifs (r12 > 0x0) goto -0x12 <MatrixEwMulAndSumOneDim_float_f_f_f_s0+0x46 : 10e834 >			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e846:    7f d8             	r15 += r7  #			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e848:    ad 08             		 [r2++=r9] = r5			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e84a:    86 18             	r6 += r8			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e84c:    03 ea e9 ff       	if (--r3 != 0) goto -0x2e <MatrixEwMulAndSumOneDim_float_f_f_f_s0+0x34 : 10e822 >			  ## Matrix_Vector_floatOperation_maskrom.c:182:5
  10e850:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:253:1


MatrixEwMulAndSumOneDim_float_f_f_f_s1:
  10e852:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:256:0
  10e854:    03 60             	r3 = [r0+0x0] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e856:    04 61             	r4 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e858:    fc 3f             	r4 += -0x1			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e85a:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e85e:    c0 e1 b2 b4       	r11 = r11 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e862:    07 63             	r7 = [r0+0xc] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e864:    7f a2             	r7 = r7 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e866:    d0 ec 1c 80       	r8 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e86a:    c0 e1 82 84       	r8 = r8 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e86e:    d0 ec 08 a0       	r10 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e872:    c0 e1 a2 a4       	r10 = r10 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e876:    d0 ec 04 f1       	r15 = [r0+0x14]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e87a:    16 65             	r6 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e87c:    d0 ec 24 90       	r9 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e880:    c0 e1 92 94       	r9 = r9 <<< 0x2			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e884:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e886:    f0 16             	r0 = r15			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e888:    61 16             	r1 = r6			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e88a:    de ec 02 da       	r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e88e:    de ec 12 eb       	r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e892:    3f e5 d2 5e       	r5 = r13 * r14 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e896:    4c 16             	r12 = r4			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e898:    5c 03             	rep 0xc r12 {			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e89a:    de ec 02 da       		r13 = [r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e89e:    de ec 12 eb       		r14 = [r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e8a2:    3f e5 d7 5e       		r5 += r13 * r14 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e8a6:    0c fe f7 01       	ifs (r12 > 0x0) goto -0x12 <MatrixEwMulAndSumOneDim_float_f_f_f_s1+0x46 : 10e898 >			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e8aa:    7f d8             	r15 += r7  #			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e8ac:    ad 08             		 [r2++=r9] = r5			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e8ae:    86 18             	r6 += r8			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e8b0:    03 ea e9 ff       	if (--r3 != 0) goto -0x2e <MatrixEwMulAndSumOneDim_float_f_f_f_s1+0x34 : 10e886 >			  ## Matrix_Vector_floatOperation_maskrom.c:264:5
  10e8b4:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:335:1


MatrixEwConjMulAndSumOneDim_float_c_c_c_s0:
  10e8b6:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:338:0
  10e8b8:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8bc:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8be:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8c2:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8c6:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8ca:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8ce:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8d2:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8d6:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8da:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8de:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8e0:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8e2:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8e6:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8ea:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8ec:    f4 e0 01 e0       	r4 = r14 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8f0:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8f2:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8f4:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8f8:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e8fc:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e900:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e904:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e908:    3f e5 58 96       		r9 -= r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e90c:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwConjMulAndSumOneDim_float_c_c_c_s0+0x3C : 10e8f2 >			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e910:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e914:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e918:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e91c:    3f e5 57 87       	r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e920:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e924:    3f e5 58 96       	r9 -= r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e928:    aa e0 00 a0       	r10 = 0x0 - r10			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e92c:    ac e0 00 c0       	r12 = 0x0 - r12			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e930:    f0 18             	r0 += r15			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e932:    b1 18             	r1 += r11			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e934:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e938:    03 ea d8 ff       	if (--r3 != 0) goto -0x50 <MatrixEwConjMulAndSumOneDim_float_c_c_c_s0+0x36 : 10e8ec >			  ## Matrix_Vector_floatOperation_maskrom.c:347:5
  10e93c:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:417:1


MatrixEwConjMulAndSumOneDim_float_c_c_c_s1:
  10e93e:    7f 04             	[--sp] = {rets, r15-r4}			  ## Matrix_Vector_floatOperation_maskrom.c:420:0
  10e940:    d0 ec 00 e0       	r14 = [r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e944:    03 61             	r3 = [r0+0x4] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e946:    d0 ec 08 f0       	r15 = [r0+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e94a:    d0 ec 0c a0       	r10 = [r0+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e94e:    c0 e1 f3 f0       	r15 = r15 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e952:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e956:    d0 ec 18 b0       	r11 = [r1+0x8]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e95a:    d0 ec 1c c0       	r12 = [r1+0xc]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e95e:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e962:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e966:    00 65             	r0 = [r0+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e968:    11 65             	r1 = [r1+0x14] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e96a:    d0 ec 24 d0       	r13 = [r2+0x4]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e96e:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e972:    22 64             	r2 = [r2+0x10] 			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e974:    f4 e0 01 30       	r4 = r3 - 0x1			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e978:    88 14             	r9_r8 = 0			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e97a:    b4 03             	rep 0x18 r4 {			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e97c:    5e ec 02 4f       		r5_r4 = d[r0++=r15]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e980:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e984:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e988:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e98c:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e990:    3f e5 58 96       		r9 -= r5 * r6 (f)
                               	}			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e994:    04 fe f1 01       	ifs (r4 > 0x0) goto -0x1e <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1+0x3C : 10e97a >			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e998:    50 ec 00 40       	r5_r4 = d[r0+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e99c:    50 ec 10 60       	r7_r6 = d[r1+0x0]			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9a0:    3f e5 47 86       	r8 += r4 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9a4:    3f e5 57 87       	r8 += r5 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9a8:    3f e5 47 97       	r9 += r4 * r7 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9ac:    3f e5 58 96       	r9 -= r5 * r6 (f)			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9b0:    af e0 00 f0       	r15 = 0x0 - r15			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9b4:    ab e0 00 b0       	r11 = 0x0 - r11			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9b8:    a0 18             	r0 += r10			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9ba:    c1 18             	r1 += r12			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9bc:    5e ec 23 8d       	d[r2++=r13] = r9_r8			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9c0:    0e ea d8 ff       	if (--r14 != 0) goto -0x50 <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1+0x36 : 10e974 >			  ## Matrix_Vector_floatOperation_maskrom.c:429:5
  10e9c4:    5f 04             	{pc, r15-r4} = [sp++]			  ## Matrix_Vector_floatOperation_maskrom.c:499:1


VecMeanSq_s16_f32:
  10e9c6:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
  10e9c8:    e2 9f             	sp += -0x4			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
  10e9ca:    81 20             	[sp] = r1			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
  10e9cc:    89 80             	r1 = sp + 0			  ## Vector_fixHalfOperation_maksrom_v2.c:10:0
  10e9ce:    06 60             	r6 = [r0+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9d0:    f2 f0 01 60       	r2 = r6 - 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9d4:    03 61             		 r3 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9d6:    c0 f1 31 30       	r3 = r3 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9da:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9dc:    de ed 02 43       	r4 = h[r0++=r3] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9e0:    3f e5 8f 44       	r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9e4:    3f e5 42 54       	r5 = r4 * r4 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9e8:    3f e5 8f 66       	r6 = itof(r6)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9ec:    52 03             	rep 0xc r2 {			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9ee:    de ed 02 43       		r4 = h[r0++=r3] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9f2:    3f e5 8f 44       		r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9f6:    3f e5 47 54       		r5 += r4 * r4 (f)
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9fa:    f2 58             	if (r2 != 0) goto -0x10 <VecMeanSq_s16_f32+0x26 : 10e9ec >			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10e9fc:    3f e5 53 56       	r5 = r5 / r6 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10ea00:    95 60             	[r1+0x0] = r5			  ## Vector_fixHalfOperation_maksrom_v2.c:15:5
  10ea02:    02 81             	sp += 0x4
  10ea04:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:44:1


VecOverShift_s16_f32:
  10ea06:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:47:0
  10ea08:    13 64             	r3 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea0a:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea0e:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea12:    05 60             		 r5 = [r0+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea14:    17 60             	r7 = [r1+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea16:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverShift_s16_f32+0x22 : 10ea28 >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea1a:    f0 e1 80 67       	r6 = r8 * r7			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea1e:    b4 e0 62 68       	r6 = r6 - r8			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea22:    b3 1d             	r3 = r3 + r6			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea24:    a8 e0 00 80       	r8 = 0x0 - r8			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea28:    7f 1f             	r7 = r7 - r5			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea2a:    85 1b             	r5 *= r8			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea2c:    3c 1d             	r4 = r3 + r5			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea2e:    17 03             	rep 0x4 r7 {			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea30:    45 08             		r5 = [r4++=r8] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea32:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea34:    f7 5c             	if (r7 != 0) goto -0x8 <VecOverShift_s16_f32+0x28 : 10ea2e >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea36:    04 64             	r4 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea38:    d0 ec 04 90       	r9 = [r0+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea3c:    c0 f1 91 90       	r9 = r9 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea40:    07 60             		 r7 = [r0+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea42:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverShift_s16_f32+0x4E : 10ea54 >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea46:    f0 e1 70 69       	r6 = r7 * r9			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea4a:    b4 e0 62 69       	r6 = r6 - r9			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea4e:    c4 1d             	r4 = r4 + r6			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea50:    a9 e0 00 90       	r9 = 0x0 - r9			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea54:    47 03             	rep 0xa r7 {			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea56:    de ed 42 59       		r5 = h[r4++=r9] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea5a:    3f e5 8f 55       		r5 = itof(r5)			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea5e:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea60:    f7 59             	if (r7 != 0) goto -0xe <VecOverShift_s16_f32+0x4E : 10ea54 >			  ## Vector_fixHalfOperation_maksrom_v2.c:54:5
  10ea62:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:107:1


VecMinus_s16_f32_f32:
  10ea64:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:110:0
  10ea68:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea6c:    c0 f1 81 80       	r8 = r8 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea70:    23 60             		 r3 = [r2+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea72:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea76:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea7a:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea7c:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea80:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea84:    11 64             		 r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea86:    22 64             	r2 = [r2+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea88:    73 03             	rep 0x10 r3 {			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea8a:    de ed 02 58       		r5 = h[r0++=r8] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea8e:    3f e5 8f 55       		r5 = itof(r5)			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea92:    94 08             		r4 = [r1++=r9] 			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea94:    3f e5 51 54       		r5 = r5 - r4 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea98:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea9a:    03 fe f5 01       	ifs (r3 > 0x0) goto -0x16 <VecMinus_s16_f32_f32+0x24 : 10ea88 >			  ## Vector_fixHalfOperation_maksrom_v2.c:116:5
  10ea9e:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:152:1


VectorCopy_f32_s16:
  10eaa2:    75 04             	[--sp] = {rets, r5, r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:155:0
  10eaa4:    02 61             	r2 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eaa6:    c0 f1 22 20       	r2 = r2 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eaaa:    14 60             		 r4 = [r1+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eaac:    13 61             	r3 = [r1+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eaae:    c0 f1 31 30       	r3 = r3 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eab2:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eab4:    11 64             	r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eab6:    74 03             	rep 0x10 r4 {			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eab8:    de ec 02 52       		r5 = [r0++=r2]			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eabc:    3f e5 3f 55       		r5 = ftoi(r5) (floor)			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eac0:    78 e0 01 55       		r5 = sat16(r5) (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eac4:    de ed 11 53       		h[r1++=r3] = r5
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eac8:    f4 56             	if (r4 != 0) goto -0x14 <VectorCopy_f32_s16+0x14 : 10eab6 >			  ## Vector_fixHalfOperation_maksrom_v2.c:161:5
  10eaca:    55 04             	{pc, r5, r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:188:1


VecEleMul_s16_s16_f32:
  10eacc:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:191:0
  10eace:    60 e0 7e 85       	r8 = 0x3F800000			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10ead2:    04 63             	r4 = [r0+0xc] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10ead4:    b3 e1 a0 8b       	r3 = uextra(r8, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10ead8:    33 1f             	r3 = r3 - r4			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eada:    a8 e1 a0 3b       	r8 <= insert(r3, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eade:    60 e0 7e 95       	r9 = 0x3F800000			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eae2:    14 63             	r4 = [r1+0xc] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eae4:    b3 e1 a0 9b       	r3 = uextra(r9, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eae8:    33 1f             	r3 = r3 - r4			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eaea:    a9 e1 a0 3b       	r9 <= insert(r3, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eaee:    05 61             	r5 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eaf0:    c0 f1 51 50       	r5 = r5 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eaf4:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eaf6:    16 61             	r6 = [r1+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eaf8:    c0 f1 61 60       	r6 = r6 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eafc:    11 64             		 r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eafe:    23 60             	r3 = [r2+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb00:    27 61             	r7 = [r2+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb02:    c0 f1 72 70       	r7 = r7 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb06:    22 64             		 r2 = [r2+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb08:    f3 03             	rep 0x20 r3 {			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb0a:    de ed 02 45       		r4 = h[r0++=r5] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb0e:    de ed 12 36       		r3 = h[r1++=r6] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb12:    3f e5 8f 44       		r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb16:    3f e5 42 48       		r4 = r4 * r8 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb1a:    3f e5 8f 33       		r3 = itof(r3)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb1e:    3f e5 32 39       		r3 = r3 * r9 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb22:    3f e5 42 43       		r4 = r4 * r3 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb26:    de ec 23 47       		[r2++=r7] = r4
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb2a:    03 fe ed 01       	ifs (r3 > 0x0) goto -0x26 <VecEleMul_s16_s16_f32+0x3C : 10eb08 >			  ## Vector_fixHalfOperation_maksrom_v2.c:199:5
  10eb2e:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:250:1


VecEleMul_f32_s16_f32:
  10eb30:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_fixHalfOperation_maksrom_v2.c:253:0
  10eb32:    60 e0 7e 95       	r9 = 0x3F800000			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb36:    b5 e1 a0 9b       	r5 = uextra(r9, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb3a:    14 63             	r4 = [r1+0xc] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb3c:    55 1f             	r5 = r5 - r4			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb3e:    a9 e1 a0 5b       	r9 <= insert(r5, p:0x17, l:0x8)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb42:    06 61             	r6 = [r0+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb44:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb48:    00 64             		 r0 = [r0+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb4a:    17 61             	r7 = [r1+0x4] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb4c:    c0 f1 71 70       	r7 = r7 << 0x1  #			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb50:    11 64             		 r1 = [r1+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb52:    23 60             	r3 = [r2+0x0] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb54:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb58:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb5c:    22 64             		 r2 = [r2+0x10] 			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb5e:    a3 03             	rep 0x16 r3 {			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb60:    de ed 12 47       		r4 = h[r1++=r7] (s)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb64:    3f e5 8f 44       		r4 = itof(r4)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb68:    3f e5 42 49       		r4 = r4 * r9 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb6c:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb70:    3f e5 42 45       		r4 = r4 * r5 (f)			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb74:    2c 08             		[r2++=r8] = r4
                               	}			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb76:    03 fe f2 01       	ifs (r3 > 0x0) goto -0x1c <VecEleMul_f32_s16_f32+0x2E : 10eb5e >			  ## Vector_fixHalfOperation_maksrom_v2.c:261:5
  10eb7a:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_fixHalfOperation_maksrom_v2.c:303:1


VectorSet_float_f_f:
  10eb7c:    74 04             	[--sp] = {rets, r4}			  ## Vector_floatOperation_maskrom.c:62:0
  10eb7e:    13 61             	r3 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:67:5
  10eb80:    33 a2             	r3 = r3 << 0x2			  ## Vector_floatOperation_maskrom.c:67:5
  10eb82:    12 60             	r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:67:5
  10eb84:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:67:5
  10eb86:    04 60             	r4 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:67:5
  10eb88:    12 03             	rep 0x4 r2 {			  ## Vector_floatOperation_maskrom.c:67:5
  10eb8a:    de ec 13 43       		[r1++=r3] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:67:5
  10eb8e:    02 fe fb 01       	ifs (r2 > 0x0) goto -0xa <VectorSet_float_f_f+0xC : 10eb88 >			  ## Vector_floatOperation_maskrom.c:67:5
  10eb92:    54 04             	{pc, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:88:1


VecMagRecAve_float_c_f_f:
  10eb94:    d9 e8 30 03       	[--sp] = {rets, r9, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:91:0
  10eb98:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:131:13
  10eb9a:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:96:5
  10eb9e:    c0 e1 83 80       	r8 = r8 << 0x3			  ## Vector_floatOperation_maskrom.c:96:5
  10eba2:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:96:5
  10eba6:    c0 e1 92 90       	r9 = r9 << 0x2			  ## Vector_floatOperation_maskrom.c:96:5
  10ebaa:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:96:5
  10ebac:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:96:5
  10ebae:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:96:5
  10ebb0:    b3 03             	rep 0x18 r3 {			  ## Vector_floatOperation_maskrom.c:96:5
  10ebb2:    5e ec 02 48       		r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:96:5
  10ebb6:    3f e5 42 44       		r4 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:96:5
  10ebba:    3f e5 57 45       		r4 += r5 * r5 (f)			  ## Vector_floatOperation_maskrom.c:96:5
  10ebbe:    15 60             		r5 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:96:5
  10ebc0:    3f e5 41 45       		r4 = r4 - r5 (f)			  ## Vector_floatOperation_maskrom.c:96:5
  10ebc4:    3f e5 47 52       		r5 += r4 * r2 (f)			  ## Vector_floatOperation_maskrom.c:96:5
  10ebc8:    9d 08             		[r1++=r9] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:96:5
  10ebca:    f3 52             	if (r3 != 0) goto -0x1c <VecMagRecAve_float_c_f_f+0x1C : 10ebb0 >			  ## Vector_floatOperation_maskrom.c:96:5
  10ebcc:    d5 e8 30 03       	{pc, r9, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:133:1


VecMulScalar_float_c_f_c:
  10ebd0:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:136:0
  10ebd2:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:171:13
  10ebd4:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:141:5
  10ebd6:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:141:5
  10ebda:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:141:5
  10ebdc:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:141:5
  10ebde:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:141:5
  10ebe2:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:141:5
  10ebe4:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:141:5
  10ebe6:    73 03             	rep 0x10 r3 {			  ## Vector_floatOperation_maskrom.c:141:5
  10ebe8:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:141:5
  10ebec:    3f e5 52 51       		r5 = r5 * r1 (f)			  ## Vector_floatOperation_maskrom.c:141:5
  10ebf0:    3f e5 42 41       		r4 = r4 * r1 (f)			  ## Vector_floatOperation_maskrom.c:141:5
  10ebf4:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:141:5
  10ebf8:    03 fe f5 01       	ifs (r3 > 0x0) goto -0x16 <VecMulScalar_float_c_f_c+0x16 : 10ebe6 >			  ## Vector_floatOperation_maskrom.c:141:5
  10ebfc:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:173:1


VecConjEleMul_float_c_c_c:
  10ebfe:    7c 04             	[--sp] = {rets, r12-r4}			  ## Vector_floatOperation_maskrom.c:176:0
  10ec00:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:184:5
  10ec04:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:184:5
  10ec08:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:184:5
  10ec0a:    d0 ec 14 c0       	r12 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:184:5
  10ec0e:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Vector_floatOperation_maskrom.c:184:5
  10ec12:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:184:5
  10ec14:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:184:5
  10ec16:    d0 ec 24 b0       	r11 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:184:5
  10ec1a:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:184:5
  10ec1e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:184:5
  10ec20:    d3 03             	rep 0x1c r3 {			  ## Vector_floatOperation_maskrom.c:184:5
  10ec22:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:184:5
  10ec26:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Vector_floatOperation_maskrom.c:184:5
  10ec2a:    3f e5 42 86       		r8 = r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:184:5
  10ec2e:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:184:5
  10ec32:    3f e5 42 97       		r9 = r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:184:5
  10ec36:    3f e5 58 96       		r9 -= r5 * r6 (f)			  ## Vector_floatOperation_maskrom.c:184:5
  10ec3a:    5e ec 23 8b       		d[r2++=r11] = r9_r8
                               	}			  ## Vector_floatOperation_maskrom.c:184:5
  10ec3e:    f3 50             	if (r3 != 0) goto -0x20 <VecConjEleMul_float_c_c_c+0x22 : 10ec20 >			  ## Vector_floatOperation_maskrom.c:184:5
  10ec40:    5c 04             	{pc, r12-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:227:1


VecPlus_float_f_f_f:
  10ec42:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:230:0
  10ec46:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:236:5
  10ec4a:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:236:5
  10ec4e:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:236:5
  10ec50:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:236:5
  10ec54:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:236:5
  10ec58:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:236:5
  10ec5a:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:236:5
  10ec5e:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:236:5
  10ec62:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:236:5
  10ec64:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:236:5
  10ec66:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:236:5
  10ec68:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:236:5
  10ec6a:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:236:5
  10ec6c:    3f e5 40 55       		r5 = r4 + r5 (f)			  ## Vector_floatOperation_maskrom.c:236:5
  10ec70:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:236:5
  10ec72:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecPlus_float_f_f_f+0x24 : 10ec66 >			  ## Vector_floatOperation_maskrom.c:236:5
  10ec76:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:271:1


VecDivide_float_c_f_c_f:
  10ec7a:    7a 04             	[--sp] = {rets, r10-r4}			  ## Vector_floatOperation_maskrom.c:274:0
  10ec7c:    d0 ec 30 80       	r8 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:320:13
  10ec80:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:281:5
  10ec82:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:281:5
  10ec84:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:281:5
  10ec86:    d0 ec 14 a0       	r10 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:281:5
  10ec8a:    c0 e1 a2 a0       	r10 = r10 << 0x2			  ## Vector_floatOperation_maskrom.c:281:5
  10ec8e:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:281:5
  10ec90:    24 60             	r4 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:281:5
  10ec92:    d0 ec 24 90       	r9 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:281:5
  10ec96:    c0 e1 93 90       	r9 = r9 << 0x3			  ## Vector_floatOperation_maskrom.c:281:5
  10ec9a:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:281:5
  10ec9c:    a4 03             	rep 0x16 r4 {			  ## Vector_floatOperation_maskrom.c:281:5
  10ec9e:    5e ec 02 63       		r7_r6 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:281:5
  10eca2:    15 09             		r5 = [r1++=r10] 			  ## Vector_floatOperation_maskrom.c:281:5
  10eca4:    3f e5 50 58       		r5 = r5 + r8 (f)			  ## Vector_floatOperation_maskrom.c:281:5
  10eca8:    3f e5 63 65       		r6 = r6 / r5 (f)			  ## Vector_floatOperation_maskrom.c:281:5
  10ecac:    3f e5 73 75       		r7 = r7 / r5 (f)			  ## Vector_floatOperation_maskrom.c:281:5
  10ecb0:    5e ec 23 69       		d[r2++=r9] = r7_r6
                               	}			  ## Vector_floatOperation_maskrom.c:281:5
  10ecb4:    f4 53             	if (r4 != 0) goto -0x1a <VecDivide_float_c_f_c_f+0x22 : 10ec9c >			  ## Vector_floatOperation_maskrom.c:281:5
  10ecb6:    5a 04             	{pc, r10-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:322:1


VecPlus_float_c_c_c:
  10ecb8:    d9 e8 70 07       	[--sp] = {rets, r10-r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:325:0
  10ecbc:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:331:5
  10ecc0:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:331:5
  10ecc4:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ecc6:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:331:5
  10ecca:    c0 f1 93 90       	r9 = r9 << 0x3  #			  ## Vector_floatOperation_maskrom.c:331:5
  10ecce:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ecd0:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:331:5
  10ecd4:    c0 f1 a3 a0       	r10 = r10 << 0x3  #			  ## Vector_floatOperation_maskrom.c:331:5
  10ecd8:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ecda:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ecdc:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:331:5
  10ecde:    05 61             		r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ece0:    14 61             		r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ece2:    3f e5 40 55       		r5 = r4 + r5 (f)			  ## Vector_floatOperation_maskrom.c:331:5
  10ece6:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ece8:    06 08             		r6 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:331:5
  10ecea:    3f e5 60 64       		r6 = r6 + r4 (f)			  ## Vector_floatOperation_maskrom.c:331:5
  10ecee:    a5 61             		[r2+0x4] = r5			  ## Vector_floatOperation_maskrom.c:331:5
  10ecf0:    2e 09             		[r2++=r10] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:331:5
  10ecf2:    f3 54             	if (r3 != 0) goto -0x18 <VecPlus_float_c_c_c+0x24 : 10ecdc >			  ## Vector_floatOperation_maskrom.c:331:5
  10ecf4:    d5 e8 70 07       	{pc, r10-r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:372:1


VecConjMulRecAve_float_c_c_c_f:
  10ecf8:    7d 04             	[--sp] = {rets, r13-r4}			  ## Vector_floatOperation_maskrom.c:375:0
  10ecfa:    d0 ec 30 c0       	r12 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:430:13
  10ecfe:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:383:5
  10ed00:    55 a3             	r5 = r5 << 0x3			  ## Vector_floatOperation_maskrom.c:383:5
  10ed02:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:383:5
  10ed04:    d0 ec 14 d0       	r13 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:383:5
  10ed08:    c0 e1 d3 d0       	r13 = r13 << 0x3			  ## Vector_floatOperation_maskrom.c:383:5
  10ed0c:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:383:5
  10ed0e:    24 60             	r4 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:383:5
  10ed10:    23 61             	r3 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:383:5
  10ed12:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:383:5
  10ed14:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:383:5
  10ed16:    5e ec 02 65       	r7_r6 = d[r0++=r5]			  ## Vector_floatOperation_maskrom.c:383:5
  10ed1a:    5e ec 12 8d       	r9_r8 = d[r1++=r13]			  ## Vector_floatOperation_maskrom.c:383:5
  10ed1e:    3f e5 62 a8       	r10 = r6 * r8 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed22:    3f e5 77 a9       	r10 += r7 * r9 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed26:    3f e5 62 b9       	r11 = r6 * r9 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed2a:    3f e5 78 b8       	r11 -= r7 * r8 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed2e:    50 ec 20 80       	r9_r8 = d[r2+0x0]			  ## Vector_floatOperation_maskrom.c:383:5
  10ed32:    3f e5 b1 b9       	r11 = r11 - r9 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed36:    3f e5 a1 a8       	r10 = r10 - r8 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed3a:    3f e5 b7 9c       	r9 += r11 * r12 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed3e:    3f e5 a7 8c       	r8 += r10 * r12 (f)			  ## Vector_floatOperation_maskrom.c:383:5
  10ed42:    5e ec 23 83       	d[r2++=r3] = r9_r8			  ## Vector_floatOperation_maskrom.c:383:5
  10ed46:    04 ea e6 ff       	if (--r4 != 0) goto -0x34 <VecConjMulRecAve_float_c_c_c_f+0x1E : 10ed16 >			  ## Vector_floatOperation_maskrom.c:383:5
  10ed4a:    5d 04             	{pc, r13-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:432:1


VecGetMag_float_c_f:
  10ed4c:    d9 e8 30 01       	[--sp] = {rets, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:435:0
  10ed50:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:440:5
  10ed52:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:440:5
  10ed54:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:440:5
  10ed56:    12 60             	r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:440:5
  10ed58:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:440:5
  10ed5c:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:440:5
  10ed60:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:440:5
  10ed62:    62 03             	rep 0xe r2 {			  ## Vector_floatOperation_maskrom.c:440:5
  10ed64:    5e ec 02 43       		r5_r4 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:440:5
  10ed68:    3f e5 42 44       		r4 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:440:5
  10ed6c:    3f e5 57 45       		r4 += r5 * r5 (f)			  ## Vector_floatOperation_maskrom.c:440:5
  10ed70:    1c 08             		[r1++=r8] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:440:5
  10ed72:    f2 57             	if (r2 != 0) goto -0x12 <VecGetMag_float_c_f+0x16 : 10ed62 >			  ## Vector_floatOperation_maskrom.c:440:5
  10ed74:    d5 e8 30 01       	{pc, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:469:1


VecMax_float_f_f:
  10ed78:    74 04             	[--sp] = {rets, r4}			  ## Vector_floatOperation_maskrom.c:472:0
  10ed7a:    00 60             	r0 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:497:13
  10ed7c:    12 61             	r2 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:475:5
  10ed7e:    c0 f1 22 20       	r2 = r2 << 0x2  #			  ## Vector_floatOperation_maskrom.c:475:5
  10ed82:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:475:5
  10ed84:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:475:5
  10ed86:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:475:5
  10ed88:    14 60             		r4 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:475:5
  10ed8a:    94 e9 80 10       		iff (r4 < r0) {			  ## Vector_floatOperation_maskrom.c:475:5
  10ed8e:    de ec 13 02       			[r1++=r2] = r0
                               	} else {			  ## Vector_floatOperation_maskrom.c:475:5
  10ed92:    91 1c             			r1 = r1 + r2
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:475:5
  10ed94:    f3 58             	if (r3 != 0) goto -0x10 <VecMax_float_f_f+0xE : 10ed86 >			  ## Vector_floatOperation_maskrom.c:475:5
  10ed96:    54 04             	{pc, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:499:1


VecRecAve_float_f_f_f:
  10ed98:    d9 e8 70 01       	[--sp] = {rets, r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:502:0
  10ed9c:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:535:13
  10ed9e:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:507:5
  10eda2:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:507:5
  10eda6:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:507:5
  10eda8:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:507:5
  10edaa:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:507:5
  10edae:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:507:5
  10edb0:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:507:5
  10edb2:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:507:5
  10edb4:    04 08             		r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:507:5
  10edb6:    15 60             		r5 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:507:5
  10edb8:    3f e5 41 45       		r4 = r4 - r5 (f)			  ## Vector_floatOperation_maskrom.c:507:5
  10edbc:    3f e5 42 42       		r4 = r4 * r2 (f)			  ## Vector_floatOperation_maskrom.c:507:5
  10edc0:    3f e5 50 54       		r5 = r5 + r4 (f)			  ## Vector_floatOperation_maskrom.c:507:5
  10edc4:    de ec 13 56       		[r1++=r6] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:507:5
  10edc8:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecRecAve_float_f_f_f+0x1A : 10edb2 >			  ## Vector_floatOperation_maskrom.c:507:5
  10edcc:    d5 e8 70 01       	{pc, r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:537:1


VecEleMul_float_f_f_f:
  10edd0:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:540:0
  10edd2:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:547:5
  10edd4:    66 a2             	r6 = r6 << 0x2			  ## Vector_floatOperation_maskrom.c:547:5
  10edd6:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:547:5
  10edd8:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:547:5
  10edda:    77 a2             	r7 = r7 << 0x2			  ## Vector_floatOperation_maskrom.c:547:5
  10eddc:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:547:5
  10edde:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:547:5
  10ede0:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:547:5
  10ede4:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:547:5
  10ede8:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:547:5
  10edea:    63 03             	rep 0xe r3 {			  ## Vector_floatOperation_maskrom.c:547:5
  10edec:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_floatOperation_maskrom.c:547:5
  10edf0:    de ec 12 47       		r4 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:547:5
  10edf4:    3f e5 52 44       		r4 = r5 * r4 (f)			  ## Vector_floatOperation_maskrom.c:547:5
  10edf8:    2c 08             		[r2++=r8] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:547:5
  10edfa:    03 fe f6 01       	ifs (r3 > 0x0) goto -0x14 <VecEleMul_float_f_f_f+0x1A : 10edea >			  ## Vector_floatOperation_maskrom.c:547:5
  10edfe:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:583:1


VecMagAndDiv_float_c_f_f_f:
  10ee00:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:586:0
  10ee02:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:629:13
  10ee04:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:594:5
  10ee06:    c0 f1 53 50       	r5 = r5 << 0x3  #			  ## Vector_floatOperation_maskrom.c:594:5
  10ee0a:    34 60             		 r4 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:594:5
  10ee0c:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:594:5
  10ee0e:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:594:5
  10ee12:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:594:5
  10ee16:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:594:5
  10ee18:    d0 ec 34 90       	r9 = [r3+0x4]			  ## Vector_floatOperation_maskrom.c:594:5
  10ee1c:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:594:5
  10ee20:    33 64             		 r3 = [r3+0x10] 			  ## Vector_floatOperation_maskrom.c:594:5
  10ee22:    b4 03             	rep 0x18 r4 {			  ## Vector_floatOperation_maskrom.c:594:5
  10ee24:    5e ec 02 65       		r7_r6 = d[r0++=r5]			  ## Vector_floatOperation_maskrom.c:594:5
  10ee28:    3f e5 62 66       		r6 = r6 * r6 (f)			  ## Vector_floatOperation_maskrom.c:594:5
  10ee2c:    3f e5 77 67       		r6 += r7 * r7 (f)			  ## Vector_floatOperation_maskrom.c:594:5
  10ee30:    17 08             		r7 = [r1++=r8] 			  ## Vector_floatOperation_maskrom.c:594:5
  10ee32:    3f e5 70 72       		r7 = r7 + r2 (f)			  ## Vector_floatOperation_maskrom.c:594:5
  10ee36:    3f e5 63 67       		r6 = r6 / r7 (f)			  ## Vector_floatOperation_maskrom.c:594:5
  10ee3a:    be 08             		[r3++=r9] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:594:5
  10ee3c:    f4 52             	if (r4 != 0) goto -0x1c <VecMagAndDiv_float_c_f_f_f+0x22 : 10ee22 >			  ## Vector_floatOperation_maskrom.c:594:5
  10ee3e:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:631:1


VecMin_float_f_f:
  10ee40:    74 04             	[--sp] = {rets, r4}			  ## Vector_floatOperation_maskrom.c:634:0
  10ee42:    00 60             	r0 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:659:13
  10ee44:    12 61             	r2 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:637:5
  10ee46:    c0 f1 22 20       	r2 = r2 << 0x2  #			  ## Vector_floatOperation_maskrom.c:637:5
  10ee4a:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:637:5
  10ee4c:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:637:5
  10ee4e:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:637:5
  10ee50:    14 60             		r4 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:637:5
  10ee52:    14 ee 80 10       		iff (r4 > r0) {			  ## Vector_floatOperation_maskrom.c:637:5
  10ee56:    de ec 13 02       			[r1++=r2] = r0
                               	} else {			  ## Vector_floatOperation_maskrom.c:637:5
  10ee5a:    91 1c             			r1 = r1 + r2
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:637:5
  10ee5c:    f3 58             	if (r3 != 0) goto -0x10 <VecMin_float_f_f+0xE : 10ee4e >			  ## Vector_floatOperation_maskrom.c:637:5
  10ee5e:    54 04             	{pc, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:661:1


VecMinus_float_f_f_f:
  10ee60:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:664:0
  10ee64:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:670:5
  10ee68:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:670:5
  10ee6c:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:670:5
  10ee6e:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:670:5
  10ee72:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:670:5
  10ee76:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:670:5
  10ee78:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:670:5
  10ee7c:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:670:5
  10ee80:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:670:5
  10ee82:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:670:5
  10ee84:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:670:5
  10ee86:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:670:5
  10ee88:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:670:5
  10ee8a:    3f e5 51 54       		r5 = r5 - r4 (f)			  ## Vector_floatOperation_maskrom.c:670:5
  10ee8e:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:670:5
  10ee90:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecMinus_float_f_f_f+0x24 : 10ee84 >			  ## Vector_floatOperation_maskrom.c:670:5
  10ee94:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:705:1


VecMean_float_f_f:
  10ee98:    d9 e8 30 01       	[--sp] = {rets, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:708:0
  10ee9c:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:714:5
  10eea0:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:714:5
  10eea4:    03 60             		 r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:714:5
  10eea6:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:714:5
  10eea8:    f2 e0 01 30       	r2 = r3 - 0x1			  ## Vector_floatOperation_maskrom.c:714:5
  10eeac:    3f e5 8f 33       	r3 = itof(r3)			  ## Vector_floatOperation_maskrom.c:714:5
  10eeb0:    04 08             	r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:714:5
  10eeb2:    45 16             	r5 = r4			  ## Vector_floatOperation_maskrom.c:714:5
  10eeb4:    22 03             	rep 0x6 r2 {			  ## Vector_floatOperation_maskrom.c:714:5
  10eeb6:    04 08             		r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:714:5
  10eeb8:    3f e5 50 54       		r5 = r5 + r4 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:714:5
  10eebc:    f2 5b             	if (r2 != 0) goto -0xa <VecMean_float_f_f+0x1C : 10eeb4 >			  ## Vector_floatOperation_maskrom.c:714:5
  10eebe:    3f e5 53 53       	r5 = r5 / r3 (f)			  ## Vector_floatOperation_maskrom.c:714:5
  10eec2:    95 60             	[r1+0x0] = r5			  ## Vector_floatOperation_maskrom.c:714:5
  10eec4:    d5 e8 30 01       	{pc, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:743:1


VecEleMul_float_c_f_c:
  10eec8:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:746:0
  10eeca:    07 61             	r7 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:753:5
  10eecc:    77 a3             	r7 = r7 << 0x3			  ## Vector_floatOperation_maskrom.c:753:5
  10eece:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:753:5
  10eed0:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:753:5
  10eed4:    c0 e1 92 90       	r9 = r9 << 0x2			  ## Vector_floatOperation_maskrom.c:753:5
  10eed8:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:753:5
  10eeda:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:753:5
  10eedc:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:753:5
  10eee0:    c0 e1 83 80       	r8 = r8 << 0x3			  ## Vector_floatOperation_maskrom.c:753:5
  10eee4:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:753:5
  10eee6:    83 03             	rep 0x12 r3 {			  ## Vector_floatOperation_maskrom.c:753:5
  10eee8:    5e ec 02 47       		r5_r4 = d[r0++=r7]			  ## Vector_floatOperation_maskrom.c:753:5
  10eeec:    96 08             		r6 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:753:5
  10eeee:    3f e5 42 46       		r4 = r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:753:5
  10eef2:    3f e5 52 56       		r5 = r5 * r6 (f)			  ## Vector_floatOperation_maskrom.c:753:5
  10eef6:    5e ec 23 48       		d[r2++=r8] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:753:5
  10eefa:    f3 55             	if (r3 != 0) goto -0x16 <VecEleMul_float_c_f_c+0x1E : 10eee6 >			  ## Vector_floatOperation_maskrom.c:753:5
  10eefc:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:792:1


VecMeanSqu_float_c_f:
  10eefe:    d9 e8 70 01       	[--sp] = {rets, r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:795:0
  10ef02:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:802:5
  10ef06:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:802:5
  10ef0a:    03 60             		 r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:802:5
  10ef0c:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:802:5
  10ef0e:    f2 e0 01 30       	r2 = r3 - 0x1			  ## Vector_floatOperation_maskrom.c:802:5
  10ef12:    3f e5 8f 33       	r3 = itof(r3)			  ## Vector_floatOperation_maskrom.c:802:5
  10ef16:    5e ec 02 48       	r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:802:5
  10ef1a:    3f e5 42 64       	r6 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:802:5
  10ef1e:    3f e5 57 65       	r6 += r5 * r5 (f)			  ## Vector_floatOperation_maskrom.c:802:5
  10ef22:    52 03             	rep 0xc r2 {			  ## Vector_floatOperation_maskrom.c:802:5
  10ef24:    5e ec 02 48       		r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:802:5
  10ef28:    3f e5 47 64       		r6 += r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:802:5
  10ef2c:    3f e5 57 65       		r6 += r5 * r5 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:802:5
  10ef30:    f2 58             	if (r2 != 0) goto -0x10 <VecMeanSqu_float_c_f+0x24 : 10ef22 >			  ## Vector_floatOperation_maskrom.c:802:5
  10ef32:    3f e5 63 63       	r6 = r6 / r3 (f)			  ## Vector_floatOperation_maskrom.c:802:5
  10ef36:    96 60             	[r1+0x0] = r6			  ## Vector_floatOperation_maskrom.c:802:5
  10ef38:    d5 e8 70 01       	{pc, r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:835:1


VecCopy_float_f_f:
  10ef3c:    75 04             	[--sp] = {rets, r5, r4}			  ## Vector_floatOperation_maskrom.c:838:0
  10ef3e:    15 61             	r5 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:843:5
  10ef40:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:843:5
  10ef44:    04 61             		 r4 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:843:5
  10ef46:    c0 f1 42 40       	r4 = r4 << 0x2  #			  ## Vector_floatOperation_maskrom.c:843:5
  10ef4a:    12 60             		 r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:843:5
  10ef4c:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:843:5
  10ef4e:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:843:5
  10ef50:    32 03             	rep 0x8 r2 {			  ## Vector_floatOperation_maskrom.c:843:5
  10ef52:    de ec 02 34       		r3 = [r0++=r4]			  ## Vector_floatOperation_maskrom.c:843:5
  10ef56:    de ec 13 35       		[r1++=r5] = r3
                               	}			  ## Vector_floatOperation_maskrom.c:843:5
  10ef5a:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <VecCopy_float_f_f+0x14 : 10ef50 >			  ## Vector_floatOperation_maskrom.c:843:5
  10ef5e:    55 04             	{pc, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:868:1


VecMin_float_f_f_f:
  10ef60:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:871:0
  10ef64:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:877:5
  10ef68:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:877:5
  10ef6c:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:877:5
  10ef6e:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:877:5
  10ef72:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:877:5
  10ef76:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:877:5
  10ef78:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:877:5
  10ef7c:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:877:5
  10ef80:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:877:5
  10ef82:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:877:5
  10ef84:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:877:5
  10ef86:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:877:5
  10ef88:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:877:5
  10ef8a:    3f e5 55 54       		r5 = fmin(r5, r4)			  ## Vector_floatOperation_maskrom.c:877:5
  10ef8e:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:877:5
  10ef90:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecMin_float_f_f_f+0x24 : 10ef84 >			  ## Vector_floatOperation_maskrom.c:877:5
  10ef94:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:912:1


VecDivide_float_f_f_f_f:
  10ef98:    d9 e8 70 07       	[--sp] = {rets, r10-r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:915:0
  10ef9c:    33 60             	r3 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:956:13
  10ef9e:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:921:5
  10efa2:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:921:5
  10efa6:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:921:5
  10efa8:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:921:5
  10efac:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:921:5
  10efb0:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:921:5
  10efb2:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:921:5
  10efb6:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:921:5
  10efba:    24 60             		 r4 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:921:5
  10efbc:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:921:5
  10efbe:    64 03             	rep 0xe r4 {			  ## Vector_floatOperation_maskrom.c:921:5
  10efc0:    06 08             		r6 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:921:5
  10efc2:    95 08             		r5 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:921:5
  10efc4:    3f e5 50 53       		r5 = r5 + r3 (f)			  ## Vector_floatOperation_maskrom.c:921:5
  10efc8:    3f e5 63 65       		r6 = r6 / r5 (f)			  ## Vector_floatOperation_maskrom.c:921:5
  10efcc:    2e 09             		[r2++=r10] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:921:5
  10efce:    04 fe f6 01       	ifs (r4 > 0x0) goto -0x14 <VecDivide_float_f_f_f_f+0x26 : 10efbe >			  ## Vector_floatOperation_maskrom.c:921:5
  10efd2:    d5 e8 70 07       	{pc, r10-r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:958:1


VecCompBT_float_f_f_f:
  10efd6:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:961:0
  10efd8:    25 61             	r5 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:967:5
  10efda:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:967:5
  10efde:    26 60             		 r6 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:967:5
  10efe0:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:967:5
  10efe2:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:967:5
  10efe6:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:967:5
  10efea:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:967:5
  10efec:    14 61             	r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:967:5
  10efee:    44 a2             	r4 = r4 << 0x2			  ## Vector_floatOperation_maskrom.c:967:5
  10eff0:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:967:5
  10eff2:    86 03             	rep 0x12 r6 {			  ## Vector_floatOperation_maskrom.c:967:5
  10eff4:    07 08             		r7 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:967:5
  10eff6:    de ec 12 34       		r3 = [r1++=r4]			  ## Vector_floatOperation_maskrom.c:967:5
  10effa:    17 ee 80 13       		iff (r7 > r3) {			  ## Vector_floatOperation_maskrom.c:967:5
  10effe:    47 21             			r7 = 0x1
                               	} else {			  ## Vector_floatOperation_maskrom.c:967:5
  10f000:    47 20             			r7 = 0x0
                               	}			  ## Vector_floatOperation_maskrom.c:967:5
  10f002:    de ec 23 75       		[r2++=r5] = r7
                               	}			  ## Vector_floatOperation_maskrom.c:967:5
  10f006:    f6 55             	if (r6 != 0) goto -0x16 <VecCompBT_float_f_f_f+0x1C : 10eff2 >			  ## Vector_floatOperation_maskrom.c:967:5
  10f008:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1008:1


VecCondCopy_float_f_f_f:
  10f00a:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:1011:0
  10f00c:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1017:5
  10f00e:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1017:5
  10f012:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1017:5
  10f014:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1017:5
  10f016:    c0 f1 72 70       	r7 = r7 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1017:5
  10f01a:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1017:5
  10f01c:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1017:5
  10f01e:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1017:5
  10f020:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1017:5
  10f024:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1017:5
  10f026:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1017:5
  10f028:    de ec 12 46       		r4 = [r1++=r6]			  ## Vector_floatOperation_maskrom.c:1017:5
  10f02c:    24 e8 00 60       		if (r4 == 0x0) {			  ## Vector_floatOperation_maskrom.c:1017:5
  10f030:    08 1d             			r0 = r0 + r5			  ## Vector_floatOperation_maskrom.c:1017:5
  10f032:    aa 1d             			r2 = r2 + r7
                               	} else {			  ## Vector_floatOperation_maskrom.c:1017:5
  10f034:    de ec 02 45       			r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1017:5
  10f038:    de ec 23 47       			[r2++=r7] = r4
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:1017:5
  10f03c:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecCondCopy_float_f_f_f+0x1C : 10f026 >			  ## Vector_floatOperation_maskrom.c:1017:5
  10f040:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1058:1


VecMulScalar_float_f_f_f:
  10f042:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1061:0
  10f044:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1091:13
  10f046:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1066:5
  10f048:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1066:5
  10f04c:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1066:5
  10f04e:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1066:5
  10f052:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1066:5
  10f054:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1066:5
  10f056:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1066:5
  10f058:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1066:5
  10f05a:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1066:5
  10f05e:    3f e5 42 41       		r4 = r4 * r1 (f)			  ## Vector_floatOperation_maskrom.c:1066:5
  10f062:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1066:5
  10f066:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecMulScalar_float_f_f_f+0x16 : 10f058 >			  ## Vector_floatOperation_maskrom.c:1066:5
  10f06a:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1093:1


VecPlusScalar_float_f_f_f:
  10f06c:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1096:0
  10f06e:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1126:13
  10f070:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1101:5
  10f072:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1101:5
  10f076:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1101:5
  10f078:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1101:5
  10f07c:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1101:5
  10f07e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1101:5
  10f080:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1101:5
  10f082:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1101:5
  10f084:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1101:5
  10f088:    3f e5 40 41       		r4 = r4 + r1 (f)			  ## Vector_floatOperation_maskrom.c:1101:5
  10f08c:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1101:5
  10f090:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecPlusScalar_float_f_f_f+0x16 : 10f082 >			  ## Vector_floatOperation_maskrom.c:1101:5
  10f094:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1128:1


VecMinScalar_float_f_f_f:
  10f096:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1131:0
  10f098:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1161:13
  10f09a:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:1136:5
  10f09c:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0a0:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0a2:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0a6:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0a8:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0aa:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0ac:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0ae:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0b2:    3f e5 41 41       		r4 = r4 - r1 (f)			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0b6:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0ba:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecMinScalar_float_f_f_f+0x16 : 10f0ac >			  ## Vector_floatOperation_maskrom.c:1136:5
  10f0be:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1163:1


VecOpposite_float_f_f:
  10f0c0:    75 04             	[--sp] = {rets, r5, r4}			  ## Vector_floatOperation_maskrom.c:1166:0
  10f0c2:    15 61             	r5 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0c4:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0c8:    04 61             		 r4 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0ca:    c0 f1 42 40       	r4 = r4 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0ce:    12 60             		 r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0d0:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0d2:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0d4:    52 03             	rep 0xc r2 {			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0d6:    de ec 02 34       		r3 = [r0++=r4]			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0da:    53 e1 00 34       		r3 = r3 ^ 0x80000000			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0de:    de ec 13 35       		[r1++=r5] = r3
                               	}			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0e2:    02 fe f7 01       	ifs (r2 > 0x0) goto -0x12 <VecOpposite_float_f_f+0x14 : 10f0d4 >			  ## Vector_floatOperation_maskrom.c:1171:5
  10f0e6:    55 04             	{pc, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1197:1


VecEleMla_float_f_f_f:
  10f0e8:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:1199:0
  10f0ea:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0ec:    66 a2             	r6 = r6 << 0x2			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0ee:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0f0:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0f2:    77 a2             	r7 = r7 << 0x2			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0f4:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0f6:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0f8:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1207:5
  10f0fc:    c0 e1 82 80       	r8 = r8 << 0x2			  ## Vector_floatOperation_maskrom.c:1207:5
  10f100:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1207:5
  10f102:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1207:5
  10f104:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_floatOperation_maskrom.c:1207:5
  10f108:    de ec 12 47       		r4 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:1207:5
  10f10c:    d0 ec 20 90       		r9 = [r2+0x0]			  ## Vector_floatOperation_maskrom.c:1207:5
  10f110:    3f e5 57 94       		r9 += r5 * r4 (f)			  ## Vector_floatOperation_maskrom.c:1207:5
  10f114:    de ec 23 98       		[r2++=r8] = r9
                               	}			  ## Vector_floatOperation_maskrom.c:1207:5
  10f118:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecEleMla_float_f_f_f+0x1A : 10f102 >			  ## Vector_floatOperation_maskrom.c:1207:5
  10f11c:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1246:1


VecEleMla_float_c_c_c:
  10f11e:    7c 04             	[--sp] = {rets, r12-r4}			  ## Vector_floatOperation_maskrom.c:1249:0
  10f120:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1257:5
  10f124:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:1257:5
  10f128:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1257:5
  10f12a:    d0 ec 14 c0       	r12 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1257:5
  10f12e:    c0 e1 c3 c0       	r12 = r12 << 0x3			  ## Vector_floatOperation_maskrom.c:1257:5
  10f132:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1257:5
  10f134:    23 60             	r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1257:5
  10f136:    d0 ec 24 b0       	r11 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1257:5
  10f13a:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:1257:5
  10f13e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1257:5
  10f140:    f3 03             	rep 0x20 r3 {			  ## Vector_floatOperation_maskrom.c:1257:5
  10f142:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:1257:5
  10f146:    5e ec 12 6c       		r7_r6 = d[r1++=r12]			  ## Vector_floatOperation_maskrom.c:1257:5
  10f14a:    50 ec 20 80       		r9_r8 = d[r2+0x0]			  ## Vector_floatOperation_maskrom.c:1257:5
  10f14e:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
  10f152:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
  10f156:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
  10f15a:    3f e5 57 96       		r9 += r5 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1257:5
  10f15e:    5e ec 23 8b       		d[r2++=r11] = r9_r8
                               	}			  ## Vector_floatOperation_maskrom.c:1257:5
  10f162:    f3 4e             	if (r3 != 0) goto -0x24 <VecEleMla_float_c_c_c+0x22 : 10f140 >			  ## Vector_floatOperation_maskrom.c:1257:5
  10f164:    5c 04             	{pc, r12-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1301:1


VecMinus_float_c_c_c:
  10f166:    d9 e8 70 07       	[--sp] = {rets, r10-r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:1304:0
  10f16a:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1310:5
  10f16e:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1310:5
  10f172:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f174:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1310:5
  10f178:    c0 f1 93 90       	r9 = r9 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1310:5
  10f17c:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f17e:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1310:5
  10f182:    c0 f1 a3 a0       	r10 = r10 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1310:5
  10f186:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f188:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f18a:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1310:5
  10f18c:    05 61             		r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f18e:    14 61             		r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f190:    3f e5 51 54       		r5 = r5 - r4 (f)			  ## Vector_floatOperation_maskrom.c:1310:5
  10f194:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f196:    06 08             		r6 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1310:5
  10f198:    3f e5 61 64       		r6 = r6 - r4 (f)			  ## Vector_floatOperation_maskrom.c:1310:5
  10f19c:    a5 61             		[r2+0x4] = r5			  ## Vector_floatOperation_maskrom.c:1310:5
  10f19e:    2e 09             		[r2++=r10] = r6
                               	}			  ## Vector_floatOperation_maskrom.c:1310:5
  10f1a0:    f3 54             	if (r3 != 0) goto -0x18 <VecMinus_float_c_c_c+0x24 : 10f18a >			  ## Vector_floatOperation_maskrom.c:1310:5
  10f1a2:    d5 e8 70 07       	{pc, r10-r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1351:1


VecDotProduct_float_f_f_f:
  10f1a6:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:1354:0
  10f1a8:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1aa:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1ac:    66 a2             	r6 = r6 << 0x2			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1ae:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1b0:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1b2:    77 a2             	r7 = r7 << 0x2			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1b4:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1b6:    c0 14             	r8 = 0			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1b8:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1bc:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1be:    de ec 02 56       		r5 = [r0++=r6]			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1c2:    de ec 12 47       		r4 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1c6:    3f e5 57 84       		r8 += r5 * r4 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1ca:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecDotProduct_float_f_f_f+0x16 : 10f1bc >			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1ce:    d0 ec 21 80       	[r2+0x0] = r8			  ## Vector_floatOperation_maskrom.c:1362:5
  10f1d2:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1397:1


VecDotProduct_float_c_c_c:
  10f1d4:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:1400:0
  10f1d6:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1d8:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1dc:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1e0:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1e2:    d0 ec 14 b0       	r11 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1e6:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1ea:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1ec:    88 14             	r9_r8 = 0			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1ee:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1f2:    3f e5 8f 99       	r9 = itof(r9)			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1f6:    b3 03             	rep 0x18 r3 {			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1f8:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:1408:5
  10f1fc:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Vector_floatOperation_maskrom.c:1408:5
  10f200:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1408:5
  10f204:    3f e5 58 87       		r8 -= r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1408:5
  10f208:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1408:5
  10f20c:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1408:5
  10f210:    f3 52             	if (r3 != 0) goto -0x1c <VecDotProduct_float_c_c_c+0x22 : 10f1f6 >			  ## Vector_floatOperation_maskrom.c:1408:5
  10f212:    50 ec 21 80       	d[r2+0x0] = r9_r8			  ## Vector_floatOperation_maskrom.c:1408:5
  10f216:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1449:1


VecDotProduct_float_c_f_c:
  10f218:    7a 04             	[--sp] = {rets, r10-r4}			  ## Vector_floatOperation_maskrom.c:1452:0
  10f21a:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1460:5
  10f21c:    07 61             	r7 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1460:5
  10f21e:    77 a3             	r7 = r7 << 0x3			  ## Vector_floatOperation_maskrom.c:1460:5
  10f220:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1460:5
  10f222:    d0 ec 14 a0       	r10 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1460:5
  10f226:    c0 e1 a2 a0       	r10 = r10 << 0x2			  ## Vector_floatOperation_maskrom.c:1460:5
  10f22a:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1460:5
  10f22c:    88 14             	r9_r8 = 0			  ## Vector_floatOperation_maskrom.c:1460:5
  10f22e:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1460:5
  10f232:    3f e5 8f 99       	r9 = itof(r9)			  ## Vector_floatOperation_maskrom.c:1460:5
  10f236:    63 03             	rep 0xe r3 {			  ## Vector_floatOperation_maskrom.c:1460:5
  10f238:    5e ec 02 47       		r5_r4 = d[r0++=r7]			  ## Vector_floatOperation_maskrom.c:1460:5
  10f23c:    16 09             		r6 = [r1++=r10] 			  ## Vector_floatOperation_maskrom.c:1460:5
  10f23e:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1460:5
  10f242:    3f e5 57 96       		r9 += r5 * r6 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1460:5
  10f246:    f3 57             	if (r3 != 0) goto -0x12 <VecDotProduct_float_c_f_c+0x1E : 10f236 >			  ## Vector_floatOperation_maskrom.c:1460:5
  10f248:    50 ec 21 80       	d[r2+0x0] = r9_r8			  ## Vector_floatOperation_maskrom.c:1460:5
  10f24c:    5a 04             	{pc, r10-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1499:1


VecCopy_float_c_c:
  10f24e:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1502:0
  10f250:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1507:5
  10f252:    c0 f1 33 30       	r3 = r3 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1507:5
  10f256:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1507:5
  10f258:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1507:5
  10f25a:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1507:5
  10f25e:    12 60             		 r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1507:5
  10f260:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1507:5
  10f262:    32 03             	rep 0x8 r2 {			  ## Vector_floatOperation_maskrom.c:1507:5
  10f264:    5e ec 02 43       		r5_r4 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:1507:5
  10f268:    5e ec 13 46       		d[r1++=r6] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:1507:5
  10f26c:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <VecCopy_float_c_c+0x14 : 10f262 >			  ## Vector_floatOperation_maskrom.c:1507:5
  10f270:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1536:1


VecCopy_float_f_c:
  10f272:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:1539:0
  10f274:    42 20             	r2 = 0x0			  ## Vector_floatOperation_maskrom.c:1545:5
  10f276:    05 61             	r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1545:5
  10f278:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1545:5
  10f27c:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1545:5
  10f27e:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1545:5
  10f280:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1545:5
  10f284:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1545:5
  10f286:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1545:5
  10f288:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:1545:5
  10f28a:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:1545:5
  10f28e:    92 61             		[r1+0x4] = r2			  ## Vector_floatOperation_maskrom.c:1545:5
  10f290:    de ec 13 46       		[r1++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:1545:5
  10f294:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecCopy_float_f_c+0x16 : 10f288 >			  ## Vector_floatOperation_maskrom.c:1545:5
  10f298:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1572:1


VecConjDotProduct_float_c_c_c:
  10f29a:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:1575:0
  10f29c:    03 60             	r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1583:5
  10f29e:    d0 ec 04 a0       	r10 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2a2:    c0 e1 a3 a0       	r10 = r10 << 0x3			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2a6:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2a8:    d0 ec 14 b0       	r11 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2ac:    c0 e1 b3 b0       	r11 = r11 << 0x3			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2b0:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2b2:    88 14             	r9_r8 = 0			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2b4:    3f e5 8f 88       	r8 = itof(r8)			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2b8:    3f e5 8f 99       	r9 = itof(r9)			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2bc:    b3 03             	rep 0x18 r3 {			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2be:    5e ec 02 4a       		r5_r4 = d[r0++=r10]			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2c2:    5e ec 12 6b       		r7_r6 = d[r1++=r11]			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2c6:    3f e5 47 86       		r8 += r4 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2ca:    3f e5 57 87       		r8 += r5 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2ce:    3f e5 47 97       		r9 += r4 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2d2:    3f e5 58 96       		r9 -= r5 * r6 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2d6:    f3 52             	if (r3 != 0) goto -0x1c <VecConjDotProduct_float_c_c_c+0x22 : 10f2bc >			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2d8:    50 ec 21 80       	d[r2+0x0] = r9_r8			  ## Vector_floatOperation_maskrom.c:1583:5
  10f2dc:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1624:1


VecNormalize_float_c_c_f:
  10f2de:    7c 04             	[--sp] = {rets, r12-r4}			  ## Vector_floatOperation_maskrom.c:1627:0
  10f2e0:    60 e0 7c 85       	r8 = 0x3F000000			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2e4:    60 e0 7f 95       	r9 = 0x3FC00000			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2e8:    c4 ff df 59 37 5f 	r4 = 0x5f3759df <__stub_VecMinScalar_float_c_f_c+0x5F2659E2 : 5f3759de >			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2ee:    02 61             	r2 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2f0:    c0 f1 23 20       	r2 = r2 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2f4:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2f6:    13 61             	r3 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2f8:    c0 f1 33 30       	r3 = r3 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2fc:    15 60             		 r5 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1637:5
  10f2fe:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1637:5
  10f300:    5e ec 02 62       	r7_r6 = d[r0++=r2]			  ## Vector_floatOperation_maskrom.c:1637:5
  10f304:    3f e5 62 a6       	r10 = r6 * r6 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f308:    3f e5 77 a7       	r10 += r7 * r7 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f30c:    3f e5 a2 b8       	r11 = r10 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f310:    c0 e1 a1 ac       	r10 = r10 >>> 0x1			  ## Vector_floatOperation_maskrom.c:1637:5
  10f314:    b4 e0 42 aa       	r10 = r4 - r10			  ## Vector_floatOperation_maskrom.c:1637:5
  10f318:    70 81             	rep 0x10 0x2 {			  ## Vector_floatOperation_maskrom.c:1637:5
  10f31a:    3f e5 b2 ca       		r12 = r11 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f31e:    3f e5 c2 ca       		r12 = r12 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f322:    3f e5 91 cc       		r12 = r9 - r12 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f326:    3f e5 c2 aa       		r10 = r12 * r10 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1637:5
  10f32a:    3f e5 62 6a       	r6 = r6 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f32e:    3f e5 72 7a       	r7 = r7 * r10 (f)			  ## Vector_floatOperation_maskrom.c:1637:5
  10f332:    5e ec 13 63       	d[r1++=r3] = r7_r6			  ## Vector_floatOperation_maskrom.c:1637:5
  10f336:    05 ea e3 ff       	if (--r5 != 0) goto -0x3a <VecNormalize_float_c_c_f+0x22 : 10f300 >			  ## Vector_floatOperation_maskrom.c:1637:5
  10f33a:    5c 04             	{pc, r12-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1685:1


VecRecAve_float_c_c_f:
  10f33c:    d9 e8 70 0d       	[--sp] = {rets, r11, r10, r8, r6-r4}			  ## Vector_floatOperation_maskrom.c:1688:0
  10f340:    22 60             	r2 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1724:13
  10f342:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1693:5
  10f346:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1693:5
  10f34a:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1693:5
  10f34c:    16 61             	r6 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1693:5
  10f34e:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1693:5
  10f352:    13 60             		 r3 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1693:5
  10f354:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1693:5
  10f356:    d3 03             	rep 0x1c r3 {			  ## Vector_floatOperation_maskrom.c:1693:5
  10f358:    5e ec 02 48       		r5_r4 = d[r0++=r8]			  ## Vector_floatOperation_maskrom.c:1693:5
  10f35c:    50 ec 10 a0       		r11_r10 = d[r1+0x0]			  ## Vector_floatOperation_maskrom.c:1693:5
  10f360:    3f e5 41 4a       		r4 = r4 - r10 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
  10f364:    3f e5 51 5b       		r5 = r5 - r11 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
  10f368:    3f e5 47 a2       		r10 += r4 * r2 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
  10f36c:    3f e5 57 b2       		r11 += r5 * r2 (f)			  ## Vector_floatOperation_maskrom.c:1693:5
  10f370:    5e ec 13 a6       		d[r1++=r6] = r11_r10
                               	}			  ## Vector_floatOperation_maskrom.c:1693:5
  10f374:    03 fe ef 01       	ifs (r3 > 0x0) goto -0x22 <VecRecAve_float_c_c_f+0x1A : 10f356 >			  ## Vector_floatOperation_maskrom.c:1693:5
  10f378:    d5 e8 70 0d       	{pc, r11, r10, r8, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1726:1


VecOverlapShift_float_f_f_i:
  10f37c:    79 04             	[--sp] = {rets, r9-r4}			  ## Vector_floatOperation_maskrom.c:1729:0
  10f37e:    13 64             	r3 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1736:5
  10f380:    d0 ec 14 80       	r8 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1736:5
  10f384:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1736:5
  10f388:    05 60             		 r5 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1736:5
  10f38a:    17 60             	r7 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:1736:5
  10f38c:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverlapShift_float_f_f_i+0x22 : 10f39e >			  ## Vector_floatOperation_maskrom.c:1736:5
  10f390:    f0 e1 80 67       	r6 = r8 * r7			  ## Vector_floatOperation_maskrom.c:1736:5
  10f394:    b4 e0 62 68       	r6 = r6 - r8			  ## Vector_floatOperation_maskrom.c:1736:5
  10f398:    b3 1d             	r3 = r3 + r6			  ## Vector_floatOperation_maskrom.c:1736:5
  10f39a:    a8 e0 00 80       	r8 = 0x0 - r8			  ## Vector_floatOperation_maskrom.c:1736:5
  10f39e:    7f 1f             	r7 = r7 - r5			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3a0:    85 1b             	r5 *= r8			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3a2:    3c 1d             	r4 = r3 + r5			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3a4:    17 03             	rep 0x4 r7 {			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3a6:    45 08             		r5 = [r4++=r8] 			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3a8:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3aa:    f7 5c             	if (r7 != 0) goto -0x8 <VecOverlapShift_float_f_f_i+0x28 : 10f3a4 >			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3ac:    04 64             	r4 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3ae:    d0 ec 04 90       	r9 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3b2:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3b6:    07 60             		 r7 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3b8:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOverlapShift_float_f_f_i+0x4E : 10f3ca >			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3bc:    f0 e1 70 69       	r6 = r7 * r9			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3c0:    b4 e0 62 69       	r6 = r6 - r9			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3c4:    c4 1d             	r4 = r4 + r6			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3c6:    a9 e0 00 90       	r9 = 0x0 - r9			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3ca:    17 03             	rep 0x4 r7 {			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3cc:    c5 08             		r5 = [r4++=r9] 			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3ce:    3d 08             		[r3++=r8] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3d0:    f7 5c             	if (r7 != 0) goto -0x8 <VecOverlapShift_float_f_f_i+0x4E : 10f3ca >			  ## Vector_floatOperation_maskrom.c:1736:5
  10f3d2:    59 04             	{pc, r9-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1788:1


VecMax_float_f_f_f:
  10f3d4:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:1791:0
  10f3d8:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3dc:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3e0:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3e2:    d0 ec 14 90       	r9 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3e6:    c0 f1 92 90       	r9 = r9 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3ea:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3ec:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3f0:    c0 f1 a2 a0       	r10 = r10 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3f4:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3f6:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3f8:    43 03             	rep 0xa r3 {			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3fa:    05 08             		r5 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3fc:    94 08             		r4 = [r1++=r9] 			  ## Vector_floatOperation_maskrom.c:1797:5
  10f3fe:    3f e5 56 54       		r5 = fmax(r5, r4)			  ## Vector_floatOperation_maskrom.c:1797:5
  10f402:    2d 09             		[r2++=r10] = r5
                               	}			  ## Vector_floatOperation_maskrom.c:1797:5
  10f404:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecMax_float_f_f_f+0x24 : 10f3f8 >			  ## Vector_floatOperation_maskrom.c:1797:5
  10f408:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1832:1


VecConjEwMulAndDiv_float_c_c_f_f_c:
  10f40c:    7f 04             	[--sp] = {rets, r15-r4}			  ## Vector_floatOperation_maskrom.c:1835:0
  10f40e:    d0 ec 30 c0       	r12 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:1897:13
  10f412:    d4 e9 34 d0       	r13 = [sp+52]			  ## Vector_floatOperation_maskrom.c:1897:13
  10f416:    03 61             	r3 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1844:5
  10f418:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:1844:5
  10f41a:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1844:5
  10f41c:    d0 ec 14 e0       	r14 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f420:    c0 e1 e3 e0       	r14 = r14 << 0x3			  ## Vector_floatOperation_maskrom.c:1844:5
  10f424:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1844:5
  10f426:    d0 ec 24 f0       	r15 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f42a:    c0 e1 f2 f0       	r15 = r15 << 0x2			  ## Vector_floatOperation_maskrom.c:1844:5
  10f42e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1844:5
  10f430:    d0 ec d0 50       	r5 = [r13+0x0]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f434:    d0 ec d4 40       	r4 = [r13+0x4]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f438:    44 a3             	r4 = r4 << 0x3			  ## Vector_floatOperation_maskrom.c:1844:5
  10f43a:    d0 ec d0 d1       	r13 = [r13+0x10]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f43e:    5e ec 02 63       	r7_r6 = d[r0++=r3]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f442:    5e ec 12 8e       	r9_r8 = d[r1++=r14]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f446:    3f e5 62 a8       	r10 = r6 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
  10f44a:    3f e5 77 a9       	r10 += r7 * r9 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
  10f44e:    3f e5 62 b9       	r11 = r6 * r9 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
  10f452:    3f e5 78 b8       	r11 -= r7 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
  10f456:    de ec 22 8f       	r8 = [r2++=r15]			  ## Vector_floatOperation_maskrom.c:1844:5
  10f45a:    3f e5 80 8c       	r8 = r8 + r12 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
  10f45e:    3f e5 b3 b8       	r11 = r11 / r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
  10f462:    3f e5 a3 a8       	r10 = r10 / r8 (f)			  ## Vector_floatOperation_maskrom.c:1844:5
  10f466:    5e ec d3 a4       	d[r13++=r4] = r11_r10			  ## Vector_floatOperation_maskrom.c:1844:5
  10f46a:    05 ea e8 ff       	if (--r5 != 0) goto -0x30 <VecConjEwMulAndDiv_float_c_c_f_f_c+0x32 : 10f43e >			  ## Vector_floatOperation_maskrom.c:1844:5
  10f46e:    5f 04             	{pc, r15-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1899:1


VecPlusMulScalar_float_c_c_f_c:
  10f470:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:1902:0
  10f472:    d0 ec 20 80       	r8 = [r2+0x0]			  ## Vector_floatOperation_maskrom.c:1947:13
  10f476:    d0 ec 04 90       	r9 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1910:5
  10f47a:    c0 e1 93 90       	r9 = r9 << 0x3			  ## Vector_floatOperation_maskrom.c:1910:5
  10f47e:    32 60             	r2 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:1910:5
  10f480:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1910:5
  10f482:    d0 ec 14 a0       	r10 = [r1+0x4]			  ## Vector_floatOperation_maskrom.c:1910:5
  10f486:    c0 f1 a3 a0       	r10 = r10 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1910:5
  10f48a:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1910:5
  10f48c:    d0 ec 34 b0       	r11 = [r3+0x4]			  ## Vector_floatOperation_maskrom.c:1910:5
  10f490:    c0 f1 b3 b0       	r11 = r11 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1910:5
  10f494:    33 64             		 r3 = [r3+0x10] 			  ## Vector_floatOperation_maskrom.c:1910:5
  10f496:    92 03             	rep 0x14 r2 {			  ## Vector_floatOperation_maskrom.c:1910:5
  10f498:    5e ec 12 6a       		r7_r6 = d[r1++=r10]			  ## Vector_floatOperation_maskrom.c:1910:5
  10f49c:    5e ec 02 49       		r5_r4 = d[r0++=r9]			  ## Vector_floatOperation_maskrom.c:1910:5
  10f4a0:    3f e5 67 48       		r4 += r6 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1910:5
  10f4a4:    3f e5 77 58       		r5 += r7 * r8 (f)			  ## Vector_floatOperation_maskrom.c:1910:5
  10f4a8:    5e ec 33 4b       		d[r3++=r11] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:1910:5
  10f4ac:    f2 54             	if (r2 != 0) goto -0x18 <VecPlusMulScalar_float_c_c_f_c+0x26 : 10f496 >			  ## Vector_floatOperation_maskrom.c:1910:5
  10f4ae:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1949:1


VecMeanSq_float_f_f:
  10f4b0:    d9 e8 30 01       	[--sp] = {rets, r8, r5, r4}			  ## Vector_floatOperation_maskrom.c:1952:0
  10f4b4:    d0 ec 04 80       	r8 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4b8:    c0 f1 82 80       	r8 = r8 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4bc:    03 60             		 r3 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4be:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4c0:    f2 e0 01 30       	r2 = r3 - 0x1			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4c4:    3f e5 8f 33       	r3 = itof(r3)			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4c8:    04 08             	r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4ca:    3f e5 42 54       	r5 = r4 * r4 (f)			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4ce:    22 03             	rep 0x6 r2 {			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4d0:    04 08             		r4 = [r0++=r8] 			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4d2:    3f e5 47 54       		r5 += r4 * r4 (f)
                               	}			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4d6:    f2 5b             	if (r2 != 0) goto -0xa <VecMeanSq_float_f_f+0x1E : 10f4ce >			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4d8:    3f e5 53 53       	r5 = r5 / r3 (f)			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4dc:    95 60             	[r1+0x0] = r5			  ## Vector_floatOperation_maskrom.c:1959:5
  10f4de:    d5 e8 30 01       	{pc, r8, r5, r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:1988:1


VecCondCopy_float_c_i_c:
  10f4e2:    78 04             	[--sp] = {rets, r8-r4}			  ## Vector_floatOperation_maskrom.c:1990:0
  10f4e4:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4e6:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4ea:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4ec:    d0 ec 24 80       	r8 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4f0:    c0 f1 83 80       	r8 = r8 << 0x3  #			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4f4:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4f6:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4f8:    17 61             	r7 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4fa:    c0 f1 72 70       	r7 = r7 << 0x2  #			  ## Vector_floatOperation_maskrom.c:1996:5
  10f4fe:    11 64             		 r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:1996:5
  10f500:    93 03             	rep 0x14 r3 {			  ## Vector_floatOperation_maskrom.c:1996:5
  10f502:    de ec 12 57       		r5 = [r1++=r7]			  ## Vector_floatOperation_maskrom.c:1996:5
  10f506:    25 e8 00 60       		if (r5 == 0x0) {			  ## Vector_floatOperation_maskrom.c:1996:5
  10f50a:    80 1d             			r0 = r0 + r6			  ## Vector_floatOperation_maskrom.c:1996:5
  10f50c:    82 18             			r2 += r8
                               	} else {			  ## Vector_floatOperation_maskrom.c:1996:5
  10f50e:    5e ec 02 46       			r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:1996:5
  10f512:    5e ec 23 48       			d[r2++=r8] = r5_r4
                               	}
                               	}			  ## Vector_floatOperation_maskrom.c:1996:5
  10f516:    03 fe f3 01       	ifs (r3 > 0x0) goto -0x1a <VecCondCopy_float_c_i_c+0x1E : 10f500 >			  ## Vector_floatOperation_maskrom.c:1996:5
  10f51a:    58 04             	{pc, r8-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2037:1


VecEleMulAndDiv_float_f_f_f_f_f:
  10f51c:    7b 04             	[--sp] = {rets, r11-r4}			  ## Vector_floatOperation_maskrom.c:2040:0
  10f51e:    e2 9f             	sp += -0x4			  ## Vector_floatOperation_maskrom.c:2040:0
  10f520:    d0 ec 30 80       	r8 = [r3+0x0]			  ## Vector_floatOperation_maskrom.c:2093:13
  10f524:    03 2a             	r3 = [sp+40]			  ## Vector_floatOperation_maskrom.c:2093:13
  10f526:    83 20             	[sp] = r3
  10f528:    03 20             	r3 = [sp]			  ## Vector_floatOperation_maskrom.c:2048:5
  10f52a:    d0 ec 04 b0       	r11 = [r0+0x4]			  ## Vector_floatOperation_maskrom.c:2048:5
  10f52e:    c0 e1 b2 b0       	r11 = r11 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
  10f532:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f534:    14 61             	r4 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f536:    44 a2             	r4 = r4 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
  10f538:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f53a:    35 60             	r5 = [r3+0x0] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f53c:    d0 ec 34 90       	r9 = [r3+0x4]			  ## Vector_floatOperation_maskrom.c:2048:5
  10f540:    c0 e1 92 90       	r9 = r9 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
  10f544:    33 64             	r3 = [r3+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f546:    d0 ec 24 a0       	r10 = [r2+0x4]			  ## Vector_floatOperation_maskrom.c:2048:5
  10f54a:    c0 e1 a2 a0       	r10 = r10 << 0x2			  ## Vector_floatOperation_maskrom.c:2048:5
  10f54e:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f550:    a5 03             	rep 0x16 r5 {			  ## Vector_floatOperation_maskrom.c:2048:5
  10f552:    87 09             		r7 = [r0++=r11] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f554:    de ec 12 64       		r6 = [r1++=r4]			  ## Vector_floatOperation_maskrom.c:2048:5
  10f558:    3f e5 72 76       		r7 = r7 * r6 (f)			  ## Vector_floatOperation_maskrom.c:2048:5
  10f55c:    26 09             		r6 = [r2++=r10] 			  ## Vector_floatOperation_maskrom.c:2048:5
  10f55e:    3f e5 60 68       		r6 = r6 + r8 (f)			  ## Vector_floatOperation_maskrom.c:2048:5
  10f562:    3f e5 73 76       		r7 = r7 / r6 (f)			  ## Vector_floatOperation_maskrom.c:2048:5
  10f566:    bf 08             		[r3++=r9] = r7
                               	}			  ## Vector_floatOperation_maskrom.c:2048:5
  10f568:    05 fe f2 01       	ifs (r5 > 0x0) goto -0x1c <VecEleMulAndDiv_float_f_f_f_f_f+0x34 : 10f550 >			  ## Vector_floatOperation_maskrom.c:2048:5
  10f56c:    02 81             	sp += 0x4
  10f56e:    5b 04             	{pc, r11-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2095:1


VectorSet_float_f_c:
  10f570:    00 60             	r0 = [r0+0x0] 			  ## Vector_floatOperation_maskrom.c:2098:0
  10f572:    13 61             	r3 = [r1+0x4] 			  ## Vector_floatOperation_maskrom.c:2101:5
  10f574:    33 a3             	r3 = r3 << 0x3			  ## Vector_floatOperation_maskrom.c:2101:5
  10f576:    12 60             	r2 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2101:5
  10f578:    11 64             	r1 = [r1+0x10] 			  ## Vector_floatOperation_maskrom.c:2101:5
  10f57a:    32 03             	rep 0x8 r2 {			  ## Vector_floatOperation_maskrom.c:2101:5
  10f57c:    41 ea 00 10       		[r1+0x4] = 0x0			  ## Vector_floatOperation_maskrom.c:2101:5
  10f580:    de ec 13 03       		[r1++=r3] = r0
                               	}			  ## Vector_floatOperation_maskrom.c:2101:5
  10f584:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <VectorSet_float_f_c+0xA : 10f57a >			  ## Vector_floatOperation_maskrom.c:2101:5
  10f588:    80 00             	rts			  ## Vector_floatOperation_maskrom.c:2120:1


VecDivScalar_float_f_f_f:
  10f58a:    76 04             	[--sp] = {rets, r6-r4}			  ## Vector_floatOperation_maskrom.c:2123:0
  10f58c:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2153:13
  10f58e:    26 61             	r6 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2128:5
  10f590:    c0 f1 62 60       	r6 = r6 << 0x2  #			  ## Vector_floatOperation_maskrom.c:2128:5
  10f594:    05 61             		 r5 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2128:5
  10f596:    c0 f1 52 50       	r5 = r5 << 0x2  #			  ## Vector_floatOperation_maskrom.c:2128:5
  10f59a:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2128:5
  10f59c:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2128:5
  10f59e:    00 64             	r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2128:5
  10f5a0:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:2128:5
  10f5a2:    de ec 02 45       		r4 = [r0++=r5]			  ## Vector_floatOperation_maskrom.c:2128:5
  10f5a6:    3f e5 43 41       		r4 = r4 / r1 (f)			  ## Vector_floatOperation_maskrom.c:2128:5
  10f5aa:    de ec 23 46       		[r2++=r6] = r4
                               	}			  ## Vector_floatOperation_maskrom.c:2128:5
  10f5ae:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecDivScalar_float_f_f_f+0x16 : 10f5a0 >			  ## Vector_floatOperation_maskrom.c:2128:5
  10f5b2:    56 04             	{pc, r6-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2155:1


VecDivScalar_float_c_f_c:
  10f5b4:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:2158:0
  10f5b6:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2189:13
  10f5b8:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5ba:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5be:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5c0:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5c2:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5c6:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5c8:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5ca:    73 03             	rep 0x10 r3 {			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5cc:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5d0:    3f e5 53 51       		r5 = r5 / r1 (f)			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5d4:    3f e5 43 41       		r4 = r4 / r1 (f)			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5d8:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5dc:    03 fe f5 01       	ifs (r3 > 0x0) goto -0x16 <VecDivScalar_float_c_f_c+0x16 : 10f5ca >			  ## Vector_floatOperation_maskrom.c:2163:5
  10f5e0:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2191:1


VecPlusScalar_float_c_f_c:
  10f5e2:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:2194:0
  10f5e4:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2224:13
  10f5e6:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5e8:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5ec:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5ee:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5f0:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5f4:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5f6:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5f8:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5fa:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:2199:5
  10f5fe:    3f e5 40 41       		r4 = r4 + r1 (f)			  ## Vector_floatOperation_maskrom.c:2199:5
  10f602:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:2199:5
  10f606:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecPlusScalar_float_c_f_c+0x16 : 10f5f8 >			  ## Vector_floatOperation_maskrom.c:2199:5
  10f60a:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2226:1


VecMinScalar_float_c_f_c:
  10f60c:    77 04             	[--sp] = {rets, r7-r4}			  ## Vector_floatOperation_maskrom.c:2229:0
  10f60e:    11 60             	r1 = [r1+0x0] 			  ## Vector_floatOperation_maskrom.c:2259:13
  10f610:    06 61             	r6 = [r0+0x4] 			  ## Vector_floatOperation_maskrom.c:2234:5
  10f612:    c0 f1 63 60       	r6 = r6 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2234:5
  10f616:    00 64             		 r0 = [r0+0x10] 			  ## Vector_floatOperation_maskrom.c:2234:5
  10f618:    27 61             	r7 = [r2+0x4] 			  ## Vector_floatOperation_maskrom.c:2234:5
  10f61a:    c0 f1 73 70       	r7 = r7 << 0x3  #			  ## Vector_floatOperation_maskrom.c:2234:5
  10f61e:    23 60             		 r3 = [r2+0x0] 			  ## Vector_floatOperation_maskrom.c:2234:5
  10f620:    22 64             	r2 = [r2+0x10] 			  ## Vector_floatOperation_maskrom.c:2234:5
  10f622:    53 03             	rep 0xc r3 {			  ## Vector_floatOperation_maskrom.c:2234:5
  10f624:    5e ec 02 46       		r5_r4 = d[r0++=r6]			  ## Vector_floatOperation_maskrom.c:2234:5
  10f628:    3f e5 41 41       		r4 = r4 - r1 (f)			  ## Vector_floatOperation_maskrom.c:2234:5
  10f62c:    5e ec 23 47       		d[r2++=r7] = r5_r4
                               	}			  ## Vector_floatOperation_maskrom.c:2234:5
  10f630:    03 fe f7 01       	ifs (r3 > 0x0) goto -0x12 <VecMinScalar_float_c_f_c+0x16 : 10f622 >			  ## Vector_floatOperation_maskrom.c:2234:5
  10f634:    57 04             	{pc, r7-r4} = [sp++]			  ## Vector_floatOperation_maskrom.c:2261:1


firfft:
  10f636:    ff ea db c7       	goto -0x704a <_rfifft_wrap : 1085f0 >


firifft:
  10f63a:    ff ea 00 c8       	goto -0x7000 <_rififft_wrap : 10863e >


flrfft:
  10f63e:    ff ea 41 c8       	goto -0x6f7e <_rflfft_wrap : 1086c4 >


flrifft:
  10f642:    ff ea 8b c8       	goto -0x6eea <_riflfft_wrap : 10875c >


endian_change:
  10f646:    76 04             	[--sp] = {rets, r6-r4}			  ## crc.c:128:0
  10f648:    01 4f             	if (r1 == 0) goto 0x1e <endian_change+0x22 : 10f668 >			  ## crc.c:128:0
  10f64a:    32 e1 ff 1f       	r2 = r1 + -0x1			  ## crc.c:128:0
  10f64e:    91 a1             	r1 = r1 >> 0x1			  ## crc.c:128:0
  10f650:    03 16             	r3 = r0			  ## crc.c:128:0
  10f652:    04 89             	goto 0x12 <endian_change+0x20 : 10f666 >			  ## crc.c:128:0
  10f654:    a4 d7             	r4 = r2.l (u)  #			  ## crc.c:137:22
  10f656:    3d 40             		 r5 = b[r3+0x0] (u)			  ## crc.c:138:25
  10f658:    d8 ee 00 64       	r6 = b[r0+r4] (u)			  ## crc.c:137:22
  10f65c:    d8 ee 01 54       	b[r0+r4] = r5			  ## crc.c:138:23
  10f660:    b6 07             	b[r3++=0x1] = r6			  ## crc.c:139:16
  10f662:    fa 3f             	r2 += -0x1			  ## crc.c:136:5
  10f664:    f9 3f             	r1 += -0x1			  ## crc.c:136:5
  10f666:    f1 56             	if (r1 != 0) goto -0x14 <endian_change+0xE : 10f654 >
  10f668:    56 04             	{pc, r6-r4} = [sp++]			  ## crc.c:142:1


p11_boot:
  10f66a:    64 e0 00 e3       	r14 = rets			  ## p11.S:7:0
  10f66e:    c0 ff 04 3e 1e 00 	r0 = 0x1e3e04 <__stub_VecMinScalar_float_c_f_c+0xD3E08 : 1e3e04 >			  ## p11.S:8:0
  10f674:    01 60             	r1 = [r0+0x0] 			  ## p11.S:10:0
  10f676:    51 e8 fd 29       	if ((r1 & 0x20) == 0) goto -0x6 <p11_boot+0xA : 10f674 >			  ## p11.S:11:0
  10f67a:    79 3f             	r1 = 0xff			  ## p11.S:13:0
  10f67c:    7a 2e             	r2 = 0xee			  ## p11.S:14:0
  10f67e:    6b 2b             	r3 = 0xab			  ## p11.S:15:0
  10f680:    44 2e             	r4 = 0xe			  ## p11.S:16:0
  10f682:    55 35             	r5 = 0x55			  ## p11.S:17:0
  10f684:    c6 ff ff 1f 1a 00 	r6 = 0x1a1fff <__stub_VecMinScalar_float_c_f_c+0x92002 : 1a1ffe >			  ## p11.S:19:0
  10f68a:    04 88             	goto 0x10 <p11_boot+0x32 : 10f69c >			  ## p11.S:21:0
  10f68c:    e9 40             	b[r6+0x0] = r1			  ## p11.S:23:0
  10f68e:    ea 40             	b[r6+0x0] = r2			  ## p11.S:24:0
  10f690:    eb 40             	b[r6+0x0] = r3			  ## p11.S:25:0
  10f692:    ec 40             	b[r6+0x0] = r4			  ## p11.S:26:0
  10f694:    ed 40             	b[r6+0x0] = r5			  ## p11.S:27:0
  10f696:    20 00             	csync			  ## p11.S:28:0
  10f698:    00 00             	nop			  ## p11.S:29:0
  10f69a:    00 00             	nop			  ## p11.S:30:0
  10f69c:    07 60             	r7 = [r0+0x0] 			  ## p11.S:32:0
  10f69e:    57 e8 f5 01       	if ((r7 & 0x1) == 0) goto -0x16 <p11_boot+0x22 : 10f68c >			  ## p11.S:33:0
  10f6a2:    c0 ff 8a 1f 1a 00 	r0 = 0x1a1f8a <__stub_VecMinScalar_float_c_f_c+0x91F8E : 1a1f8a >			  ## p11.S:44:0
  10f6a8:    08 40             	r0 = b[r0+0x0] (u)			  ## p11.S:45:0
  10f6aa:    50 e8 17 3a       	if ((r0 & 0x80) != 0) goto 0x2e <p11_boot+0x72 : 10f6dc >			  ## p11.S:46:0
  10f6ae:    c0 ff ec 0f 1a 00 	r0 = 0x1a0fec <__stub_VecMinScalar_float_c_f_c+0x90FF0 : 1a0fec >			  ## p11.S:49:0
  10f6b4:    01 96             	call 0x2c <read_32 : 10f6e2 >			  ## p11.S:50:0
  10f6b6:    c2 ff ef 27 12 ab 	r2 = 0xab1227ef <__stub_VecMinScalar_float_c_f_c+0xAB0127F2 : ab1227ee >			  ## p11.S:51:0
  10f6bc:    82 e8 0e 00       	if (r0 != r2) goto 0x1c <p11_boot+0x72 : 10f6dc >			  ## p11.S:52:0
  10f6c0:    c0 ff f0 0f 1a 00 	r0 = 0x1a0ff0 <__stub_VecMinScalar_float_c_f_c+0x90FF4 : 1a0ff0 >			  ## p11.S:54:0
  10f6c6:    01 8d             	call 0x1a <read_32 : 10f6e2 >			  ## p11.S:55:0
  10f6c8:    64 e0 80 0d       	ssp = r0			  ## p11.S:56:0
  10f6cc:    c0 ff f4 0f 1a 00 	r0 = 0x1a0ff4 <__stub_VecMinScalar_float_c_f_c+0x90FF8 : 1a0ff4 >			  ## p11.S:58:0
  10f6d2:    01 87             	call 0xe <read_32 : 10f6e2 >			  ## p11.S:59:0
  10f6d4:    64 e0 80 0c       	usp = r0			  ## p11.S:60:0
  10f6d8:    64 e0 80 0e       	sp = r0			  ## p11.S:61:0
  10f6dc:    64 e0 80 e3       	rets = r14			  ## p11.S:63:0
  10f6e0:    80 00             	rts			  ## p11.S:64:0


read_32:
  10f6e2:    09 43             	r1 = b[r0+0x3] (u)			  ## p11.S:71:0
  10f6e4:    0a 42             	r2 = b[r0+0x2] (u)			  ## p11.S:72:0
  10f6e6:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## p11.S:73:0
  10f6ea:    0b 41             		 r3 = b[r0+0x1] (u)			  ## p11.S:73:0
  10f6ec:    08 40             	r0 = b[r0+0x0] (u)			  ## p11.S:74:0
  10f6ee:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## p11.S:75:0
  10f6f2:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## p11.S:76:0
  10f6f6:    80 00             	rts			  ## p11.S:77:0
  10f6f8:    00 00             	nop
  10f6fa:    00 00             	nop
  10f6fc:    00 00             	nop
  10f6fe:    00 00             	nop


norflash_check_in.spi0_portb_config:
  10f700:	 08 00 00 00                     ....


norflash_check_in.spi0_porta_config:
  10f704:	 00 00 00 00                     ....


nvram_boot_tag:
  10f708:	 bf ec cb d9 c6 f4 b6 af         ........


iCos_Tab:
  10f710:	 cd fc 0f 00                     ....


fCos_Tab:
  10f714:	 00 00 80 3f c5 fe 7f 3f         ...?...?
  10f71c:	 11 fb 7f 3f e6 f4 7f 3f         ...?...?
  10f724:	 43 ec 7f 3f 29 e1 7f 3f         C..?)..?
  10f72c:	 98 d3 7f 3f 8e c3 7f 3f         ...?...?
  10f734:	 10 b1 7f 3f 19 9c 7f 3f         ...?...?
  10f73c:	 ab 84 7f 3f c8 6a 7f 3f         ...?.j.?
  10f744:	 6e 4e 7f 3f 9d 2f 7f 3f         nN.?./.?
  10f74c:	 58 0e 7f 3f 9d ea 7e 3f         X..?..~?
  10f754:	 6d c4 7e 3f c9 9b 7e 3f         m.~?..~?
  10f75c:	 b0 70 7e 3f 23 43 7e 3f         .p~?#C~?
  10f764:	 23 13 7e 3f b2 e0 7d 3f         #.~?..}?
  10f76c:	 cb ab 7d 3f 74 74 7d 3f         ..}?tt}?
  10f774:	 ac 3a 7d 3f 73 fe 7c 3f         .:}?s.|?
  10f77c:	 c9 bf 7c 3f b0 7e 7c 3f         ..|?.~|?
  10f784:	 27 3b 7c 3f 31 f5 7b 3f         ';|?1.{?
  10f78c:	 cd ac 7b 3f fc 61 7b 3f         ..{?.a{?
  10f794:	 bf 14 7b 3f 16 c5 7a 3f         ..{?..z?
  10f79c:	 02 73 7a 3f 83 1e 7a 3f         .sz?..z?
  10f7a4:	 9d c7 79 3f 4f 6e 79 3f         ..y?Ony?
  10f7ac:	 99 12 79 3f 7b b4 78 3f         ..y?{.x?
  10f7b4:	 f9 53 78 3f 10 f1 77 3f         .Sx?..w?
  10f7bc:	 c6 8b 77 3f 16 24 77 3f         ..w?.$w?
  10f7c4:	 08 ba 76 3f 97 4d 76 3f         ..v?.Mv?
  10f7cc:	 c6 de 75 3f 98 6d 75 3f         ..u?.mu?
  10f7d4:	 0a fa 74 3f 22 84 74 3f         ..t?".t?
  10f7dc:	 dd 0b 74 3f 3f 91 73 3f         ..t??.s?
  10f7e4:	 48 14 73 3f f8 94 72 3f         H.s?..r?
  10f7ec:	 52 13 72 3f 58 8f 71 3f         R.r?X.q?
  10f7f4:	 09 09 71 3f 66 80 70 3f         ..q?f.p?
  10f7fc:	 73 f5 6f 3f 30 68 6f 3f         s.o?0ho?
  10f804:	 9e d8 6e 3f bf 46 6e 3f         ..n?.Fn?
  10f80c:	 93 b2 6d 3f 1d 1c 6d 3f         ..m?..m?
  10f814:	 5e 83 6c 3f 57 e8 6b 3f         ^.l?W.k?
  10f81c:	 0c 4b 6b 3f 7b ab 6a 3f         .Kk?{.j?
  10f824:	 a7 09 6a 3f 90 65 69 3f         ..j?.ei?
  10f82c:	 3c bf 68 3f a8 16 68 3f         <.h?..h?
  10f834:	 d8 6b 67 3f cc be 66 3f         .kg?..f?
  10f83c:	 88 0f 66 3f 0a 5e 65 3f         ..f?.^e?
  10f844:	 59 aa 64 3f 72 f4 63 3f         Y.d?r.c?
  10f84c:	 59 3c 63 3f 10 82 62 3f         Y<c?..b?
  10f854:	 98 c5 61 3f f2 06 61 3f         ..a?..a?
  10f85c:	 21 46 60 3f 27 83 5f 3f         !F`?'._?
  10f864:	 06 be 5e 3f bd f6 5d 3f         ..^?..]?
  10f86c:	 54 2d 5d 3f c6 61 5c 3f         T-]?.a\?
  10f874:	 1a 94 5b 3f 50 c4 5a 3f         ..[?P.Z?
  10f87c:	 6a f2 59 3f 69 1e 59 3f         j.Y?i.Y?
  10f884:	 53 48 58 3f 26 70 57 3f         SHX?&pW?
  10f88c:	 e5 95 56 3f 93 b9 55 3f         ..V?..U?
  10f894:	 31 db 54 3f c2 fa 53 3f         1.T?..S?
  10f89c:	 49 18 53 3f c6 33 52 3f         I.S?.3R?
  10f8a4:	 3d 4d 51 3f af 64 50 3f         =MQ?.dP?
  10f8ac:	 20 7a 4f 3f 90 8d 4e 3f          zO?..N?
  10f8b4:	 02 9f 4d 3f 7a ae 4c 3f         ..M?z.L?
  10f8bc:	 f8 bb 4b 3f 80 c7 4a 3f         ..K?..J?
  10f8c4:	 12 d1 49 3f b4 d8 48 3f         ..I?..H?
  10f8cc:	 65 de 47 3f 2a e2 46 3f         e.G?*.F?
  10f8d4:	 04 e4 45 3f f4 e3 44 3f         ..E?..D?
  10f8dc:	 01 e2 43 3f 29 de 42 3f         ..C?).B?
  10f8e4:	 70 d8 41 3f da d0 40 3f         p.A?..@?
  10f8ec:	 67 c7 3f 3f 1c bc 3e 3f         g.??..>?
  10f8f4:	 f9 ae 3d 3f 03 a0 3c 3f         ..=?..<?
  10f8fc:	 3b 8f 3b 3f a5 7c 3a 3f         ;.;?.|:?
  10f904:	 42 68 39 3f 15 52 38 3f         Bh9?.R8?
  10f90c:	 22 3a 37 3f 6c 20 36 3f         ":7?l 6?
  10f914:	 f4 04 35 3f bb e7 33 3f         ..5?..3?
  10f91c:	 c8 c8 32 3f 1e a8 31 3f         ..2?..1?
  10f924:	 ba 85 30 3f a5 61 2f 3f         ..0?.a/?
  10f92c:	 de 3b 2e 3f 69 14 2d 3f         .;.?i.-?
  10f934:	 4a eb 2b 3f 81 c0 2a 3f         J.+?..*?
  10f93c:	 15 94 29 3f 05 66 28 3f         ..)?.f(?
  10f944:	 55 36 27 3f 0a 05 26 3f         U6'?..&?
  10f94c:	 24 d2 24 3f a8 9d 23 3f         $.$?..#?
  10f954:	 99 67 22 3f f8 2f 21 3f         .g"?./!?
  10f95c:	 cb f6 1f 3f 12 bc 1e 3f         ...?...?
  10f964:	 d1 7f 1d 3f 0c 42 1c 3f         ...?.B.?
  10f96c:	 c5 02 1b 3f 01 c2 19 3f         ...?...?
  10f974:	 c0 7f 18 3f 07 3c 17 3f         ...?.<.?
  10f97c:	 da f6 15 3f 3a b0 14 3f         ...?:..?
  10f984:	 2b 68 13 3f af 1e 12 3f         +h.?...?
  10f98c:	 cd d3 10 3f 85 87 0f 3f         ...?...?
  10f994:	 d9 39 0e 3f d1 ea 0c 3f         .9.?...?
  10f99c:	 6b 9a 0b 3f ae 48 0a 3f         k..?.H.?
  10f9a4:	 9a f5 08 3f 35 a1 07 3f         ...?5..?
  10f9ac:	 83 4b 06 3f 84 f4 04 3f         .K.?...?
  10f9b4:	 3c 9c 03 3f b0 42 02 3f         <..?.B.?
  10f9bc:	 e5 e7 00 3f b3 17 ff 3e         ...?...>
  10f9c4:	 27 5d fc 3e 2e a0 f9 3e         '].>...>
  10f9cc:	 cc e0 f6 3e 06 1f f4 3e         ...>...>
  10f9d4:	 e9 5a f1 3e 79 94 ee 3e         .Z.>y..>
  10f9dc:	 ba cb eb 3e b8 00 e9 3e         ...>...>
  10f9e4:	 74 33 e6 3e f9 63 e3 3e         t3.>.c.>
  10f9ec:	 4d 92 e0 3e 78 be dd 3e         M..>x..>
  10f9f4:	 81 e8 da 3e 6c 10 d8 3e         ...>l..>
  10f9fc:	 43 36 d5 3e 0a 5a d2 3e         C6.>.Z.>
  10fa04:	 ca 7b cf 3e 8b 9b cc 3e         .{.>...>
  10fa0c:	 52 b9 c9 3e 28 d5 c6 3e         R..>(..>
  10fa14:	 14 ef c3 3e 1d 07 c1 3e         ...>...>
  10fa1c:	 4a 1d be 3e a1 31 bb 3e         J..>.1.>
  10fa24:	 28 44 b8 3e eb 54 b5 3e         (D.>.T.>
  10fa2c:	 f0 63 b2 3e 39 71 af 3e         .c.>9q.>
  10fa34:	 d5 7c ac 3e c4 86 a9 3e         .|.>...>
  10fa3c:	 12 8f a6 3e c4 95 a3 3e         ...>...>
  10fa44:	 e3 9a a0 3e 76 9e 9d 3e         ...>v..>
  10fa4c:	 84 a0 9a 3e 17 a1 97 3e         ...>...>
  10fa54:	 32 a0 94 3e dc 9d 91 3e         2..>...>
  10fa5c:	 22 9a 8e 3e 08 95 8b 3e         "..>...>
  10fa64:	 95 8e 88 3e ce 86 85 3e         ...>...>
  10fa6c:	 c2 7d 82 3e e0 e6 7e 3e         .}.>..~>
  10fa74:	 cd cf 78 3e 51 b6 72 3e         ..x>Q.r>
  10fa7c:	 7f 9a 6c 3e 65 7c 66 3e         ..l>e|f>
  10fa84:	 11 5c 60 3e 96 39 5a 3e         .\`>.9Z>
  10fa8c:	 03 15 54 3e 5d ee 4d 3e         ..T>].M>
  10fa94:	 c0 c5 47 3e 3a 9b 41 3e         ..G>:.A>
  10fa9c:	 d0 6e 3b 3e 97 40 35 3e         .n;>.@5>
  10faa4:	 a3 10 2f 3e fb de 28 3e         ../>..(>
  10faac:	 b3 ab 22 3e df 76 1c 3e         ..">.v.>
  10fab4:	 85 40 16 3e b4 08 10 3e         .@.>...>
  10fabc:	 86 cf 09 3e 02 95 03 3e         ...>...>
  10fac4:	 76 b2 fa 3d 72 38 ee 3d         v..=r8.=
  10facc:	 2d bc e1 3d b5 3d d5 3d         -..=.=.=
  10fad4:	 36 bd c8 3d c4 3a bc 3d         6..=.:.=
  10fadc:	 80 b6 af 3d 8c 30 a3 3d         ...=.0.=
  10fae4:	 04 a9 96 3d 0a 20 8a 3d         ...=. .=
  10faec:	 75 2b 7b 3d 67 14 62 3d         u+{=g.b=
  10faf4:	 2e fb 48 3d 07 e0 2f 3d         ..H=../=
  10fafc:	 2b c3 16 3d b8 49 fb 3c         +..=.I.<
  10fb04:	 b1 0a c9 3c b6 c9 96 3c         ...<...<
  10fb0c:	 92 0e 49 3c 89 0f c9 3b         ..I<...;
  10fb14:	 32 31 8d 24 00 00 00 00         21.$....
  10fb1c:	 00 00 00 00 73 79 73 00         ....sys.
  10fb24:	 6f 73 63 00                     osc.


ack_cmd:
  10fb28:	 55 aa 01 20 22 75 61 72         U.. "uar
  10fb30:	 74 00 00 00                     t...


spi_flash_io_nor:
  10fb34:	 f0 bb 02 00 00 00 00 00         ........
  10fb3c:	 00 00 00 00 6e e4 10 00         ....n...


nor_flash_boot_table:
  10fb44:	 00 10 00 00 00 00 01 00         ........
  10fb4c:	 00 00 02 00 00 00 04 00         ........
  10fb54:	 28 6e 75 6c 6c 29 00 47         (null).G
  10fb5c:	 37 32 39 00 53 48 41 2d         729.SHA-
  10fb64:	 32 35 36 00                     256.


CrcDecode.keylcode:
  10fb68:	 c3 cf c0 e8 ce d2 b0 ae         ........
  10fb70:	 c4 e3 a3 ac d3 f1 c1 d6         ........


rom_size:
  10fb78:    00 00             	nop
  10fb7a:    00 00             	nop
  10fb7c:    00 00             	nop
  10fb7e:    00 00             	nop
  10fb80:    00 00             	nop
  10fb82:    00 00             	nop
  10fb84:    00 00             	nop
  10fb86:    00 00             	nop
  10fb88:    00 00             	nop
  10fb8a:    00 00             	nop
  10fb8c:    00 00             	nop
  10fb8e:    00 00             	nop
  10fb90:    00 00             	nop
  10fb92:    00 00             	nop
  10fb94:    00 00             	nop
  10fb96:    00 00             	nop
  10fb98:    00 00             	nop
  10fb9a:    00 00             	nop
  10fb9c:    00 00             	nop
  10fb9e:    00 00             	nop
  10fba0:    00 00             	nop
  10fba2:    00 00             	nop
  10fba4:    00 00             	nop
  10fba6:    00 00             	nop
  10fba8:    00 00             	nop
  10fbaa:    00 00             	nop
  10fbac:    00 00             	nop
  10fbae:    00 00             	nop
  10fbb0:    00 00             	nop
  10fbb2:    00 00             	nop
  10fbb4:    00 00             	nop
  10fbb6:    00 00             	nop
  10fbb8:    00 00             	nop
  10fbba:    00 00             	nop
  10fbbc:    00 00             	nop
  10fbbe:    00 00             	nop
  10fbc0:    00 00             	nop
  10fbc2:    00 00             	nop
  10fbc4:    00 00             	nop
  10fbc6:    00 00             	nop
  10fbc8:    00 00             	nop
  10fbca:    00 00             	nop
  10fbcc:    00 00             	nop
  10fbce:    00 00             	nop
  10fbd0:    00 00             	nop
  10fbd2:    00 00             	nop
  10fbd4:    00 00             	nop
  10fbd6:    00 00             	nop
  10fbd8:    00 00             	nop
  10fbda:    00 00             	nop
  10fbdc:    00 00             	nop
  10fbde:    00 00             	nop
  10fbe0:    00 00             	nop
  10fbe2:    00 00             	nop
  10fbe4:    00 00             	nop
  10fbe6:    00 00             	nop
  10fbe8:    00 00             	nop
  10fbea:    00 00             	nop
  10fbec:    00 00             	nop
  10fbee:    00 00             	nop
  10fbf0:    00 00             	nop
  10fbf2:    00 00             	nop
  10fbf4:    00 00             	nop
  10fbf6:    00 00             	nop
  10fbf8:    00 00             	nop
  10fbfa:    00 00             	nop
  10fbfc:    00 00             	nop
  10fbfe:    00 00             	nop
  10fc00:    00 00             	nop
  10fc02:    00 00             	nop
  10fc04:    00 00             	nop
  10fc06:    00 00             	nop
  10fc08:    00 00             	nop
  10fc0a:    00 00             	nop
  10fc0c:    00 00             	nop
  10fc0e:    00 00             	nop
  10fc10:    00 00             	nop
  10fc12:    00 00             	nop
  10fc14:    00 00             	nop
  10fc16:    00 00             	nop
  10fc18:    00 00             	nop
  10fc1a:    00 00             	nop
  10fc1c:    00 00             	nop
  10fc1e:    00 00             	nop
  10fc20:    00 00             	nop
  10fc22:    00 00             	nop
  10fc24:    00 00             	nop
  10fc26:    00 00             	nop
  10fc28:    00 00             	nop
  10fc2a:    00 00             	nop
  10fc2c:    00 00             	nop
  10fc2e:    00 00             	nop
  10fc30:    00 00             	nop
  10fc32:    00 00             	nop
  10fc34:    00 00             	nop
  10fc36:    00 00             	nop
  10fc38:    00 00             	nop
  10fc3a:    00 00             	nop
  10fc3c:    00 00             	nop
  10fc3e:    00 00             	nop
  10fc40:    00 00             	nop
  10fc42:    00 00             	nop
  10fc44:    00 00             	nop
  10fc46:    00 00             	nop
  10fc48:    00 00             	nop
  10fc4a:    00 00             	nop


__stub_local_irq_enable:
  10fc4c:    ff ea 27 a8       	goto -0xafb2 <local_irq_enable : 104c9e >			  ## entry_list.S:7:0


__stub_local_irq_disable:
  10fc50:    ff ea 1e a8       	goto -0xafc4 <local_irq_disable : 104c90 >			  ## entry_list.S:14:0


__stub_lp_signature_set:
  10fc54:    ff ea 09 e7       	goto -0x31ee <lp_signature_set : 10ca6a >			  ## entry_list.S:21:0


__stub_os_init:
  10fc58:    ff ea 8d b2       	goto -0x9ae6 <os_init : 106176 >			  ## entry_list.S:28:0


__stub_os_start:
  10fc5c:    ff ea ac b2       	goto -0x9aa8 <os_start : 1061b8 >			  ## entry_list.S:35:0


__stub_os_get_curr_tcb_var:
  10fc60:    ff ea 8f b2       	goto -0x9ae2 <os_get_curr_tcb_var : 106182 >			  ## entry_list.S:42:0


__stub_os_task_create:
  10fc64:    ff ea e3 b2       	goto -0x9a3a <os_task_create : 10622e >			  ## entry_list.S:49:0


__stub_os_current_task_rom:
  10fc68:    ff ea 18 b3       	goto -0x99d0 <os_current_task_rom : 10629c >			  ## entry_list.S:56:0


__stub_os_time_dly:
  10fc6c:    ff ea 23 b3       	goto -0x99ba <os_time_dly : 1062b6 >			  ## entry_list.S:63:0


__stub_os_time_get:
  10fc70:    ff ea 30 b3       	goto -0x99a0 <os_time_get : 1062d4 >			  ## entry_list.S:70:0


__stub_os_task_del_req:
  10fc74:    ff ea 6b b3       	goto -0x992a <os_task_del_req : 10634e >			  ## entry_list.S:77:0


__stub_os_task_del_res:
  10fc78:    ff ea 91 b3       	goto -0x98de <os_task_del_res : 10639e >			  ## entry_list.S:84:0


__stub_os_task_del:
  10fc7c:    ff ea 99 b3       	goto -0x98ce <os_task_del : 1063b2 >			  ## entry_list.S:91:0


__stub___os_taskq_pend:
  10fc80:    ff ea fb b3       	goto -0x980a <__os_taskq_pend : 10647a >			  ## entry_list.S:98:0


__stub_os_taskq_pend:
  10fc84:    ff ea 7b b4       	goto -0x970a <os_taskq_pend : 10657e >			  ## entry_list.S:105:0


__stub_os_task_pend:
  10fc88:    ff ea 7c b4       	goto -0x9708 <os_task_pend : 106584 >			  ## entry_list.S:112:0


__stub___os_taskq_post:
  10fc8c:    ff ea 7d b4       	goto -0x9706 <__os_taskq_post : 10658a >			  ## entry_list.S:119:0


__stub_os_taskq_post:
  10fc90:    ff ea b9 b4       	goto -0x968e <os_taskq_post : 106606 >			  ## entry_list.S:126:0


__stub_os_taskq_post_type:
  10fc94:    ff ea d2 b4       	goto -0x965c <os_taskq_post_type : 10663c >			  ## entry_list.S:133:0


__stub_os_taskq_flush:
  10fc98:    ff ea d1 b4       	goto -0x965e <os_taskq_flush : 10663e >			  ## entry_list.S:140:0


__stub_task_queue_post_event:
  10fc9c:    ff ea 2f b5       	goto -0x95a2 <task_queue_post_event : 1066fe >			  ## entry_list.S:147:0


__stub_os_taskq_post_msg:
  10fca0:    ff ea 31 b5       	goto -0x959e <os_taskq_post_msg : 106706 >			  ## entry_list.S:154:0


__stub_os_taskq_post_event:
  10fca4:    ff ea 4b b5       	goto -0x956a <os_taskq_post_event : 10673e >			  ## entry_list.S:161:0


__stub_os_taskq_accept:
  10fca8:    ff ea 65 b5       	goto -0x9536 <os_taskq_accept : 106776 >			  ## entry_list.S:168:0


__stub_os_taskq_del:
  10fcac:    ff ea 66 b5       	goto -0x9534 <os_taskq_del : 10677c >			  ## entry_list.S:175:0


__stub_os_taskq_del_type:
  10fcb0:    ff ea d2 b5       	goto -0x945c <os_taskq_del_type : 106858 >			  ## entry_list.S:182:0


__stub_os_sem_create:
  10fcb4:    ff ea d1 b5       	goto -0x945e <os_sem_create : 10685a >			  ## entry_list.S:189:0


__stub_os_sem_del:
  10fcb8:    ff ea f0 b5       	goto -0x9420 <os_sem_del : 10689c >			  ## entry_list.S:196:0


__stub_os_sem_pend:
  10fcbc:    ff ea f3 b5       	goto -0x941a <os_sem_pend : 1068a6 >			  ## entry_list.S:203:0


__stub_os_sem_post:
  10fcc0:    ff ea 89 b3       	goto -0x98ee <os_sem_post : 1063d6 >			  ## entry_list.S:210:0


__stub_os_sem_set:
  10fcc4:    ff ea 04 b6       	goto -0x93f8 <os_sem_set : 1068d0 >			  ## entry_list.S:217:0


__stub_os_sem_valid:
  10fcc8:    ff ea 1b b6       	goto -0x93ca <os_sem_valid : 106902 >			  ## entry_list.S:224:0


__stub_os_sem_query:
  10fccc:    ff ea 20 b6       	goto -0x93c0 <os_sem_query : 106910 >			  ## entry_list.S:231:0


__stub_os_mutex_create:
  10fcd0:    ff ea 2a b6       	goto -0x93ac <os_mutex_create : 106928 >			  ## entry_list.S:238:0


__stub_os_mutex_del:
  10fcd4:    ff ea 3e b6       	goto -0x9384 <os_mutex_del : 106954 >			  ## entry_list.S:245:0


__stub_os_mutex_pend:
  10fcd8:    ff ea 4a b6       	goto -0x936c <os_mutex_pend : 106970 >			  ## entry_list.S:252:0


__stub_os_mutex_post:
  10fcdc:    ff ea 88 b6       	goto -0x92f0 <os_mutex_post : 1069f0 >			  ## entry_list.S:259:0


__stub_os_mutex_valid:
  10fce0:    ff ea b9 b6       	goto -0x928e <os_mutex_valid : 106a56 >			  ## entry_list.S:266:0


__stub_xTaskCreate:
  10fce4:    ff ea 6b af       	goto -0xa12a <xTaskCreate : 105bbe >			  ## entry_list.S:273:0


__stub_xTaskGetCurrentTaskHandle:
  10fce8:    ff ea 39 b2       	goto -0x9b8e <xTaskGetCurrentTaskHandle : 10615e >			  ## entry_list.S:280:0


__stub_xTaskGetTickCount:
  10fcec:    ff ea 4c b1       	goto -0x9d68 <xTaskGetTickCount : 105f88 >			  ## entry_list.S:287:0


__stub_xTaskGetHandle:
  10fcf0:    ff ea 93 b1       	goto -0x9cda <xTaskGetHandle : 10601a >			  ## entry_list.S:294:0


__stub_vTaskDelete:
  10fcf4:    ff ea 61 b0       	goto -0x9f3e <vTaskDelete : 105dba >			  ## entry_list.S:301:0


__stub_xTaskGetApplicationTaskTag:
  10fcf8:    ff ea 01 b2       	goto -0x9bfe <xTaskGetApplicationTaskTag : 1060fe >			  ## entry_list.S:308:0


__stub_vTaskSetApplicationTaskTag:
  10fcfc:    ff ea ea b1       	goto -0x9c2c <vTaskSetApplicationTaskTag : 1060d4 >			  ## entry_list.S:315:0


__stub_xQueueGenericCreateStatic:
  10fd00:    ff ea 40 a9       	goto -0xad80 <xQueueGenericCreateStatic : 104f84 >			  ## entry_list.S:322:0


__stub_xQueueGenericReset:
  10fd04:    ff ea 07 a9       	goto -0xadf2 <xQueueGenericReset : 104f16 >			  ## entry_list.S:329:0


__stub_xQueueGenericSend:
  10fd08:    ff ea 65 ac       	goto -0xa736 <xQueueGenericSend : 1055d6 >			  ## entry_list.S:336:0


__stub_xQueueGenericSendFromISR:
  10fd0c:    ff ea 60 ae       	goto -0xa340 <xQueueGenericSendFromISR : 1059d0 >			  ## entry_list.S:343:0


__stub_xQueueGenericReceive:
  10fd10:    ff ea 36 ad       	goto -0xa594 <xQueueGenericReceive : 105780 >			  ## entry_list.S:350:0


__stub_xQueueReceiveFromISR:
  10fd14:    ff ea b1 ae       	goto -0xa29e <xQueueReceiveFromISR : 105a7a >			  ## entry_list.S:357:0


__stub_vQueueDelete:
  10fd18:    ff ea 34 af       	goto -0xa198 <vQueueDelete : 105b84 >			  ## entry_list.S:364:0


__stub_uxQueueMessagesWaiting:
  10fd1c:    ff ea ee ae       	goto -0xa224 <uxQueueMessagesWaiting : 105afc >			  ## entry_list.S:371:0


__stub_uxQueueMessagesWaitingFromISR:
  10fd20:    ff ea 1e af       	goto -0xa1c4 <uxQueueMessagesWaitingFromISR : 105b60 >			  ## entry_list.S:378:0


__stub_uxQueueSpacesAvailable:
  10fd24:    ff ea 02 af       	goto -0xa1fc <uxQueueSpacesAvailable : 105b2c >			  ## entry_list.S:385:0


__stub_pcTaskGetName:
  10fd28:    ff ea 33 b1       	goto -0x9d9a <pcTaskGetName : 105f92 >			  ## entry_list.S:392:0


__stub_prvGetExpectedIdleTime:
  10fd2c:    ff ea ab b0       	goto -0x9eaa <prvGetExpectedIdleTime : 105e86 >			  ## entry_list.S:399:0


__stub_eTaskConfirmSleepModeStatus:
  10fd30:    ff ea fa b1       	goto -0x9c0c <eTaskConfirmSleepModeStatus : 106128 >			  ## entry_list.S:406:0


__stub_vTaskStepTick:
  10fd34:    ff ea b1 b1       	goto -0x9c9e <vTaskStepTick : 10609a >			  ## entry_list.S:413:0


__stub_pxPortInitialiseStack:
  10fd38:    ff ea 93 b6       	goto -0x92da <pxPortInitialiseStack : 106a62 >			  ## entry_list.S:420:0


__stub_xPortStartScheduler:
  10fd3c:    ff ea 2a b2       	goto -0x9bac <xPortStartScheduler : 106194 >			  ## entry_list.S:427:0


__stub_vPortEndScheduler:
  10fd40:    ff ea 96 b6       	goto -0x92d4 <vPortEndScheduler : 106a70 >			  ## entry_list.S:434:0


__stub_vPortYield:
  10fd44:    ff ea c0 a8       	goto -0xae80 <vPortYield : 104ec8 >			  ## entry_list.S:441:0


__stub_vPortExitCritical:
  10fd48:    ff ea a8 b6       	goto -0x92b0 <vPortExitCritical : 106a9c >			  ## entry_list.S:448:0


__stub_OS_ClrPending:
  10fd4c:    ff ea c1 b6       	goto -0x927e <OS_ClrPending : 106ad2 >			  ## entry_list.S:455:0


__stub_vTickISR:
  10fd50:    ff ea cd b6       	goto -0x9266 <vTickISR : 106aee >			  ## entry_list.S:462:0


__stub_pmalloc_init:
  10fd54:    ff ea 41 b8       	goto -0x8f7e <pmalloc_init : 106dda >			  ## entry_list.S:469:0


__stub_pmalloc:
  10fd58:    ff ea 82 b8       	goto -0x8efc <pmalloc : 106e60 >			  ## entry_list.S:476:0


__stub_pfree:
  10fd5c:    ff ea c5 b8       	goto -0x8e76 <pfree : 106eea >			  ## entry_list.S:483:0


__stub_pmalloc_get_unused_pages:
  10fd60:    ff ea 75 b8       	goto -0x8f16 <pmalloc_get_unused_pages : 106e4e >			  ## entry_list.S:490:0


__stub_get_physic_address:
  10fd64:    ff ea b6 b8       	goto -0x8e94 <get_physic_address : 106ed4 >			  ## entry_list.S:497:0


__stub_pmm_get_var:
  10fd68:    ff ea 6d b8       	goto -0x8f26 <pmm_get_var : 106e46 >			  ## entry_list.S:504:0


__stub_vmm_init_:
  10fd6c:    ff ea f3 b8       	goto -0x8e1a <vmm_init_ : 106f56 >			  ## entry_list.S:511:0


__stub_vmalloc_:
  10fd70:    ff ea 18 b9       	goto -0x8dd0 <vmalloc_ : 106fa4 >			  ## entry_list.S:518:0


__stub_vfree_:
  10fd74:    ff ea b0 b9       	goto -0x8ca0 <vfree_ : 1070d8 >			  ## entry_list.S:525:0


__stub_vmem_get_phy_adr:
  10fd78:    ff ea fb ba       	goto -0x8a0a <vmem_get_phy_adr : 107372 >			  ## entry_list.S:532:0


__stub_vmem_start:
  10fd7c:    ff ea 14 bb       	goto -0x89d8 <vmem_start : 1073a8 >			  ## entry_list.S:539:0


__stub_vmem_end:
  10fd80:    ff ea 19 bb       	goto -0x89ce <vmem_end : 1073b6 >			  ## entry_list.S:546:0


__stub_vmm_get_var:
  10fd84:    ff ea 0a b9       	goto -0x8dec <vmm_get_var : 106f9c >			  ## entry_list.S:553:0


__stub_vmalloc_v2:
  10fd88:    ff ea 0e ba       	goto -0x8be4 <vmalloc_v2 : 1071a8 >			  ## entry_list.S:560:0


__stub_vfree_v2:
  10fd8c:    ff ea 79 ba       	goto -0x8b0e <vfree_v2 : 107282 >			  ## entry_list.S:567:0


__stub_vcopy_:
  10fd90:    ff ea d0 ba       	goto -0x8a60 <vcopy_ : 107334 >			  ## entry_list.S:574:0


__stub_memmem:
  10fd94:    ff ea 35 a6       	goto -0xb396 <memmem : 104a02 >			  ## entry_list.S:581:0


__stub_memcpy:
  10fd98:    ff ea d2 a5       	goto -0xb45c <memmove : 104940 >			  ## entry_list.S:588:0


__stub_memmove:
  10fd9c:    ff ea d0 a5       	goto -0xb460 <memmove : 104940 >			  ## entry_list.S:595:0


__stub_memcmp:
  10fda0:    ff ea b2 a5       	goto -0xb49c <memcmp : 104908 >			  ## entry_list.S:602:0


__stub_memset:
  10fda4:    ff ea 41 a6       	goto -0xb37e <memset : 104a2a >			  ## entry_list.S:609:0


__stub_strcmp:
  10fda8:    ff ea 5f a6       	goto -0xb342 <strcmp : 104a6a >			  ## entry_list.S:616:0


__stub_strcpy:
  10fdac:    ff ea ad a6       	goto -0xb2a6 <strcpy : 104b0a >			  ## entry_list.S:623:0


__stub_strlen:
  10fdb0:    ff ea e2 a6       	goto -0xb23c <strlen : 104b78 >			  ## entry_list.S:630:0


__stub_strncmp:
  10fdb4:    ff ea e6 a6       	goto -0xb234 <strncmp : 104b84 >			  ## entry_list.S:637:0


__stub_strstr:
  10fdb8:    ff ea f4 a6       	goto -0xb218 <strstr : 104ba4 >			  ## entry_list.S:644:0


__stub_strchr:
  10fdbc:    ff ea 4b a6       	goto -0xb36a <strchr : 104a56 >			  ## entry_list.S:651:0


__stub_IcuCmdKst:
  10fdc0:    ff ea e5 f0       	goto -0x1e36 <IcuCmdKst : 10df8e >			  ## entry_list.S:658:0


__stub_DcuCmdKst:
  10fdc4:    ff ea 07 f1       	goto -0x1df2 <DcuCmdKst : 10dfd6 >			  ## entry_list.S:665:0


__stub_IcuCmdSend:
  10fdc8:    ff ea f4 f0       	goto -0x1e18 <IcuCmdSend : 10dfb4 >			  ## entry_list.S:672:0


__stub_DcuCmdSend:
  10fdcc:    ff ea 16 f1       	goto -0x1dd4 <DcuCmdSend : 10dffc >			  ## entry_list.S:679:0


__stub_flush_dcache:
  10fdd0:    ff ea 30 f1       	goto -0x1da0 <flush_dcache : 10e034 >			  ## entry_list.S:686:0


__stub_flushinv_dcache:
  10fdd4:    ff ea 2f f1       	goto -0x1da2 <flushinv_dcache : 10e036 >			  ## entry_list.S:693:0


__stub_sfc_suspend:
  10fdd8:    ff ea ae f0       	goto -0x1ea4 <sfc_suspend : 10df38 >			  ## entry_list.S:700:0


__stub_sfc_resume:
  10fddc:    ff ea ca f0       	goto -0x1e6c <sfc_resume : 10df74 >			  ## entry_list.S:707:0


__stub_sfc_drop_cache:
  10fde0:    ff ea 1f f1       	goto -0x1dc2 <sfc_drop_cache : 10e022 >			  ## entry_list.S:714:0


__stub_chip_crc16:
  10fde4:    ff ea 90 e9       	goto -0x2ce0 <chip_crc16 : 10d108 >			  ## entry_list.S:721:0


__stub_CrcDecode:
  10fde8:    ff ea b3 e9       	goto -0x2c9a <CrcDecode : 10d152 >			  ## entry_list.S:728:0


__stub_mask_init:
  10fdec:    ff ea 6a a7       	goto -0xb12c <mask_init : 104cc4 >			  ## entry_list.S:735:0


__stub_wdt_clr:
  10fdf0:    ff ea 4b e9       	goto -0x2d6a <wdt_clr : 10d08a >			  ## entry_list.S:742:0


__stub_nvram_set_boot_state:
  10fdf4:    ff ea 26 a7       	goto -0xb1b4 <nvram_set_boot_state : 104c44 >			  ## entry_list.S:749:0


__stub_chip_reset:
  10fdf8:    ff ea f5 a6       	goto -0xb216 <chip_reset : 104be6 >			  ## entry_list.S:756:0


__stub_the_debug_isr:
  10fdfc:    ff ea c9 e5       	goto -0x346e <the_debug_isr : 10c992 >			  ## entry_list.S:763:0


__stub_print:
  10fe00:    ff ea e0 f1       	goto -0x1c40 <print : 10e1c4 >			  ## entry_list.S:770:0


__stub_sprintf:
  10fe04:    ff ea 1d f3       	goto -0x19c6 <sprintf : 10e442 >			  ## entry_list.S:777:0


__stub_printf:
  10fe08:    ff ea 0d f3       	goto -0x19e6 <printf : 10e426 >			  ## entry_list.S:784:0


__stub_puts:
  10fe0c:    ff ea fc f2       	goto -0x1a08 <puts : 10e408 >			  ## entry_list.S:791:0


__stub_doe:
  10fe10:    ff ea a9 f3       	goto -0x18ae <doe : 10e566 >			  ## entry_list.S:798:0


__stub_spi_get_port:
  10fe14:    ff ea 65 eb       	goto -0x2936 <spi_get_port : 10d4e2 >			  ## entry_list.S:805:0


__stub__pll_init:
  10fe18:    ff ea c1 ee       	goto -0x227e <_pll_init : 10db9e >			  ## entry_list.S:812:0


__stub_flash_poweron:
  10fe1c:    ff ea d9 e6       	goto -0x324e <flash_poweron : 10cbd2 >			  ## entry_list.S:819:0


__stub_spi_unmount:
  10fe20:    ff ea a5 ed       	goto -0x24b6 <spi_unmount : 10d96e >			  ## entry_list.S:826:0


__stub_spi_port_io_init:
  10fe24:    ff ea 03 eb       	goto -0x29fa <spi_port_io_init : 10d42e >			  ## entry_list.S:833:0


__stub_LZ4_setStreamDecode:
  10fe28:    ff ea 92 f3       	goto -0x18dc <LZ4_setStreamDecode : 10e550 >			  ## entry_list.S:840:0


__stub_LZ4_decompress_safe_continue:
  10fe2c:    ff ea cd ec       	goto -0x2666 <LZ4_decompress_safe_continue : 10d7ca >			  ## entry_list.S:847:0


__stub_LZ4_decompress_generic:
  10fe30:    ff ea 92 eb       	goto -0x28dc <LZ4_decompress_generic : 10d558 >			  ## entry_list.S:854:0


__stub_g_hash_function:
  10fe34:    ff ea 12 d8       	goto -0x4fdc <g_hash_function : 10ae5c >			  ## entry_list.S:861:0


__stub_f1_hash_function:
  10fe38:    ff ea ee d7       	goto -0x5024 <f1_hash_function : 10ae18 >			  ## entry_list.S:868:0


__stub_f2_hash_function:
  10fe3c:    ff ea 37 d8       	goto -0x4f92 <f2_hash_function : 10aeae >			  ## entry_list.S:875:0


__stub_f3_hash_function:
  10fe40:    ff ea 65 d8       	goto -0x4f36 <f3_hash_function : 10af0e >			  ## entry_list.S:882:0


__stub_h2_hash_function:
  10fe44:    ff ea 99 d8       	goto -0x4ece <h2_hash_function : 10af7a >			  ## entry_list.S:889:0


__stub_h3_hash_function:
  10fe48:    ff ea a9 d8       	goto -0x4eae <h3_hash_function : 10af9e >			  ## entry_list.S:896:0


__stub_h4_hash_function:
  10fe4c:    ff ea cf d8       	goto -0x4e62 <h4_hash_function : 10afee >			  ## entry_list.S:903:0


__stub_h5_hash_function:
  10fe50:    ff ea f0 d8       	goto -0x4e20 <h5_hash_function : 10b034 >			  ## entry_list.S:910:0


__stub_g_function:
  10fe54:    ff ea 0b d9       	goto -0x4dea <g_function : 10b06e >			  ## entry_list.S:917:0


__stub_f1_function:
  10fe58:    ff ea 52 d9       	goto -0x4d5c <f1_function : 10b100 >			  ## entry_list.S:924:0


__stub_f2_function:
  10fe5c:    ff ea 86 d9       	goto -0x4cf4 <f2_function : 10b16c >			  ## entry_list.S:931:0


__stub_f3_function:
  10fe60:    ff ea d1 d9       	goto -0x4c5e <f3_function : 10b206 >			  ## entry_list.S:938:0


__stub_sha256Compute:
  10fe64:    ff ea 79 d7       	goto -0x510e <sha256Compute : 10ad5a >			  ## entry_list.S:945:0


__stub_uECC_compute_public_key:
  10fe68:    ff ea 58 df       	goto -0x4150 <uECC_compute_public_key : 10bd1c >			  ## entry_list.S:952:0


__stub_uECC_shared_secret:
  10fe6c:    ff ea 04 df       	goto -0x41f8 <uECC_shared_secret : 10bc78 >			  ## entry_list.S:959:0


__stub_bi_initialize:
  10fe70:    ff ea a0 e1       	goto -0x3cc0 <bi_initialize : 10c1b4 >			  ## entry_list.S:966:0


__stub_bi_read_from_byte:
  10fe74:    ff ea 7a e1       	goto -0x3d0c <bi_read_from_byte : 10c16c >			  ## entry_list.S:973:0


__stub_bi_poly_mod2:
  10fe78:    ff ea c8 e0       	goto -0x3e70 <bi_poly_mod2 : 10c00c >			  ## entry_list.S:980:0


__stub_bi_poly_mul:
  10fe7c:    ff ea 1f e1       	goto -0x3dc2 <bi_poly_mul : 10c0be >			  ## entry_list.S:987:0


__stub_trim:
  10fe80:    ff ea d5 df       	goto -0x4056 <trim : 10be2e >			  ## entry_list.S:994:0


__stub_bi_wirte_to_byte:
  10fe84:    ff ea 5b e1       	goto -0x3d4a <bi_wirte_to_byte : 10c13e >			  ## entry_list.S:1001:0


__stub_bi_free:
  10fe88:    ff ea ab e0       	goto -0x3eaa <bi_free : 10bfe2 >			  ## entry_list.S:1008:0


__stub_bi_terminate:
  10fe8c:    ff ea a9 e1       	goto -0x3cae <bi_terminate : 10c1e2 >			  ## entry_list.S:1015:0


__stub_design_hp:
  10fe90:    ff ea 68 c5       	goto -0x7530 <design_hp : 108964 >			  ## entry_list.S:1022:0


__stub_design_lp:
  10fe94:    ff ea 2c c5       	goto -0x75a8 <design_lp : 1088f0 >			  ## entry_list.S:1029:0


__stub_design_pe:
  10fe98:    ff ea a1 c5       	goto -0x74be <design_pe : 1089de >			  ## entry_list.S:1036:0


__stub_eq_cos_sin:
  10fe9c:    ff ea c0 c4       	goto -0x7680 <eq_cos_sin : 108820 >			  ## entry_list.S:1043:0


__stub_eq_exp:
  10fea0:    ff ea cb c4       	goto -0x766a <eq_exp : 10883a >			  ## entry_list.S:1050:0


__stub_eq_db2mag:
  10fea4:    ff ea eb c4       	goto -0x762a <eq_db2mag : 10887e >			  ## entry_list.S:1057:0


__stub_eq_sqrt:
  10fea8:    ff ea 04 c5       	goto -0x75f8 <eq_sqrt : 1088b4 >			  ## entry_list.S:1064:0


__stub_eq_stable_check:
  10feac:    ff ea ed c5       	goto -0x7426 <eq_stable_check : 108a8a >			  ## entry_list.S:1071:0


__stub_sf_sin_tab1:
  10feb0:    ff ea 28 a1       	goto -0xbdb0 <sf_sin_tab1 : 104104 >			  ## entry_list.S:1078:0


__stub_get_cvsd_codec_ops:
  10feb4:    ff ea 03 c3       	goto -0x79fa <get_cvsd_codec_ops : 1084be >			  ## entry_list.S:1085:0


__stub_B_fir_cal_s:
  10feb8:    ff ea 37 c3       	goto -0x7992 <B_fir_cal_s : 10852a >			  ## entry_list.S:1092:0


__stub_B_array_vol:
  10febc:    ff ea 5e c3       	goto -0x7944 <B_array_vol : 10857c >			  ## entry_list.S:1099:0


__stub_B_Syn_filt:
  10fec0:    ff ea 64 c3       	goto -0x7938 <B_Syn_filt : 10858c >			  ## entry_list.S:1106:0


__stub_B_Residu:
  10fec4:    ff ea 7b c3       	goto -0x790a <B_Residu : 1085be >			  ## entry_list.S:1113:0


__stub_B_comput_correlataionS:
  10fec8:    ff ea 23 c3       	goto -0x79ba <B_comput_correlataionS : 108512 >			  ## entry_list.S:1120:0


__stub_B_iircal:
  10fecc:    ff ea 06 c3       	goto -0x79f4 <B_iircal : 1084dc >			  ## entry_list.S:1127:0


__stub_get_g729dec_ops:
  10fed0:    ff ea 11 c6       	goto -0x73de <get_g729dec_ops : 108af6 >			  ## entry_list.S:1134:0


__stub_firfft:
  10fed4:    ff ea af fb       	goto -0x8a2 <firfft : 10f636 >			  ## entry_list.S:1141:0


__stub_firifft:
  10fed8:    ff ea af fb       	goto -0x8a2 <firifft : 10f63a >			  ## entry_list.S:1148:0


__stub__rfifft_wrap:
  10fedc:    ff ea 88 c3       	goto -0x78f0 <_rfifft_wrap : 1085f0 >			  ## entry_list.S:1155:0


__stub__rififft_wrap:
  10fee0:    ff ea ad c3       	goto -0x78a6 <_rififft_wrap : 10863e >			  ## entry_list.S:1162:0


__stub_flrfft:
  10fee4:    ff ea ab fb       	goto -0x8aa <flrfft : 10f63e >			  ## entry_list.S:1169:0


__stub_flrifft:
  10fee8:    ff ea ab fb       	goto -0x8aa <flrifft : 10f642 >			  ## entry_list.S:1176:0


__stub__rflfft_wrap:
  10feec:    ff ea ea c3       	goto -0x782c <_rflfft_wrap : 1086c4 >			  ## entry_list.S:1183:0


__stub__riflfft_wrap:
  10fef0:    ff ea 34 c4       	goto -0x7798 <_riflfft_wrap : 10875c >			  ## entry_list.S:1190:0


__stub_logAprx_CORDIC_float:
  10fef4:    ff ea 59 f3       	goto -0x194e <logAprx_CORDIC_float : 10e5aa >			  ## entry_list.S:1197:0


__stub_expAprx_CORDIC_float:
  10fef8:    ff ea 71 f3       	goto -0x191e <expAprx_CORDIC_float : 10e5de >			  ## entry_list.S:1204:0


__stub_magnAprx_float:
  10fefc:    ff ea 8f f3       	goto -0x18e2 <magnAprx_float : 10e61e >			  ## entry_list.S:1211:0


__stub_MatrixCopy_float_c_c:
  10ff00:    ff ea a4 f3       	goto -0x18b8 <MatrixCopy_float_c_c : 10e64c >			  ## entry_list.S:1218:0


__stub_MatrixCopy_float_f_f:
  10ff04:    ff ea c8 f3       	goto -0x1870 <MatrixCopy_float_f_f : 10e698 >			  ## entry_list.S:1225:0


__stub_MatrixEwMulAndSumOneDim_float_c_c_c_s0:
  10ff08:    ff ea e9 f3       	goto -0x182e <MatrixEwMulAndSumOneDim_float_c_c_c_s0 : 10e6de >			  ## entry_list.S:1232:0


__stub_MatrixEwMulAndSumOneDim_float_c_c_c_s1:
  10ff0c:    ff ea 2b f4       	goto -0x17aa <MatrixEwMulAndSumOneDim_float_c_c_c_s1 : 10e766 >			  ## entry_list.S:1239:0


__stub_MatrixEwMulAndSumOneDim_float_f_f_f_s0:
  10ff10:    ff ea 6d f4       	goto -0x1726 <MatrixEwMulAndSumOneDim_float_f_f_f_s0 : 10e7ee >			  ## entry_list.S:1246:0


__stub_MatrixEwMulAndSumOneDim_float_f_f_f_s1:
  10ff14:    ff ea 9d f4       	goto -0x16c6 <MatrixEwMulAndSumOneDim_float_f_f_f_s1 : 10e852 >			  ## entry_list.S:1253:0


__stub_MatrixEwConjMulAndSumOneDim_float_c_c_c_s0:
  10ff18:    ff ea cd f4       	goto -0x1666 <MatrixEwConjMulAndSumOneDim_float_c_c_c_s0 : 10e8b6 >			  ## entry_list.S:1260:0


__stub_MatrixEwConjMulAndSumOneDim_float_c_c_c_s1:
  10ff1c:    ff ea 0f f5       	goto -0x15e2 <MatrixEwConjMulAndSumOneDim_float_c_c_c_s1 : 10e93e >			  ## entry_list.S:1267:0


__stub_VecMeanSq_s16_f32:
  10ff20:    ff ea 51 f5       	goto -0x155e <VecMeanSq_s16_f32 : 10e9c6 >			  ## entry_list.S:1274:0


__stub_VecOverShift_s16_f32:
  10ff24:    ff ea 6f f5       	goto -0x1522 <VecOverShift_s16_f32 : 10ea06 >			  ## entry_list.S:1281:0


__stub_VecMinus_s16_f32_f32:
  10ff28:    ff ea 9c f5       	goto -0x14c8 <VecMinus_s16_f32_f32 : 10ea64 >			  ## entry_list.S:1288:0


__stub_VectorCopy_f32_s16:
  10ff2c:    ff ea b9 f5       	goto -0x148e <VectorCopy_f32_s16 : 10eaa2 >			  ## entry_list.S:1295:0


__stub_VecEleMul_s16_s16_f32:
  10ff30:    ff ea cc f5       	goto -0x1468 <VecEleMul_s16_s16_f32 : 10eacc >			  ## entry_list.S:1302:0


__stub_VecEleMul_f32_s16_f32:
  10ff34:    ff ea fc f5       	goto -0x1408 <VecEleMul_f32_s16_f32 : 10eb30 >			  ## entry_list.S:1309:0


__stub_VecMeanSq_float_f_f:
  10ff38:    ff ea ba fa       	goto -0xa8c <VecMeanSq_float_f_f : 10f4b0 >			  ## entry_list.S:1316:0


__stub_VectorSet_float_f_f:
  10ff3c:    ff ea 1e f6       	goto -0x13c4 <VectorSet_float_f_f : 10eb7c >			  ## entry_list.S:1323:0


__stub_VecMagRecAve_float_c_f_f:
  10ff40:    ff ea 28 f6       	goto -0x13b0 <VecMagRecAve_float_c_f_f : 10eb94 >			  ## entry_list.S:1330:0


__stub_VecMulScalar_float_c_f_c:
  10ff44:    ff ea 44 f6       	goto -0x1378 <VecMulScalar_float_c_f_c : 10ebd0 >			  ## entry_list.S:1337:0


__stub_VecConjEleMul_float_c_c_c:
  10ff48:    ff ea 59 f6       	goto -0x134e <VecConjEleMul_float_c_c_c : 10ebfe >			  ## entry_list.S:1344:0


__stub_VecPlus_float_f_f_f:
  10ff4c:    ff ea 79 f6       	goto -0x130e <VecPlus_float_f_f_f : 10ec42 >			  ## entry_list.S:1351:0


__stub_VecDivide_float_c_f_c_f:
  10ff50:    ff ea 93 f6       	goto -0x12da <VecDivide_float_c_f_c_f : 10ec7a >			  ## entry_list.S:1358:0


__stub_VecPlus_float_c_c_c:
  10ff54:    ff ea b0 f6       	goto -0x12a0 <VecPlus_float_c_c_c : 10ecb8 >			  ## entry_list.S:1365:0


__stub_VecConjMulRecAve_float_c_c_c_f:
  10ff58:    ff ea ce f6       	goto -0x1264 <VecConjMulRecAve_float_c_c_c_f : 10ecf8 >			  ## entry_list.S:1372:0


__stub_VecGetMag_float_c_f:
  10ff5c:    ff ea f6 f6       	goto -0x1214 <VecGetMag_float_c_f : 10ed4c >			  ## entry_list.S:1379:0


__stub_VecMax_float_f_f:
  10ff60:    ff ea 0a f7       	goto -0x11ec <VecMax_float_f_f : 10ed78 >			  ## entry_list.S:1386:0


__stub_VecRecAve_float_f_f_f:
  10ff64:    ff ea 18 f7       	goto -0x11d0 <VecRecAve_float_f_f_f : 10ed98 >			  ## entry_list.S:1393:0


__stub_VecEleMul_float_f_f_f:
  10ff68:    ff ea 32 f7       	goto -0x119c <VecEleMul_float_f_f_f : 10edd0 >			  ## entry_list.S:1400:0


__stub_VecMagAndDiv_float_c_f_f_f:
  10ff6c:    ff ea 48 f7       	goto -0x1170 <VecMagAndDiv_float_c_f_f_f : 10ee00 >			  ## entry_list.S:1407:0


__stub_VecMin_float_f_f:
  10ff70:    ff ea 66 f7       	goto -0x1134 <VecMin_float_f_f : 10ee40 >			  ## entry_list.S:1414:0


__stub_VecMinus_float_f_f_f:
  10ff74:    ff ea 74 f7       	goto -0x1118 <VecMinus_float_f_f_f : 10ee60 >			  ## entry_list.S:1421:0


__stub_VecMean_float_f_f:
  10ff78:    ff ea 8e f7       	goto -0x10e4 <VecMean_float_f_f : 10ee98 >			  ## entry_list.S:1428:0


__stub_VecEleMul_float_c_f_c:
  10ff7c:    ff ea a4 f7       	goto -0x10b8 <VecEleMul_float_c_f_c : 10eec8 >			  ## entry_list.S:1435:0


__stub_VecMeanSqu_float_c_f:
  10ff80:    ff ea bd f7       	goto -0x1086 <VecMeanSqu_float_c_f : 10eefe >			  ## entry_list.S:1442:0


__stub_VecCopy_float_f_f:
  10ff84:    ff ea da f7       	goto -0x104c <VecCopy_float_f_f : 10ef3c >			  ## entry_list.S:1449:0


__stub_VecMin_float_f_f_f:
  10ff88:    ff ea ea f7       	goto -0x102c <VecMin_float_f_f_f : 10ef60 >			  ## entry_list.S:1456:0


__stub_VecDivide_float_f_f_f_f:
  10ff8c:    ff ea 04 f8       	goto -0xff8 <VecDivide_float_f_f_f_f : 10ef98 >			  ## entry_list.S:1463:0


__stub_VecCompBT_float_f_f_f:
  10ff90:    ff ea 21 f8       	goto -0xfbe <VecCompBT_float_f_f_f : 10efd6 >			  ## entry_list.S:1470:0


__stub_VecCondCopy_float_f_f_f:
  10ff94:    ff ea 39 f8       	goto -0xf8e <VecCondCopy_float_f_f_f : 10f00a >			  ## entry_list.S:1477:0


__stub_VecMulScalar_float_f_f_f:
  10ff98:    ff ea 53 f8       	goto -0xf5a <VecMulScalar_float_f_f_f : 10f042 >			  ## entry_list.S:1484:0


__stub_VecPlusScalar_float_f_f_f:
  10ff9c:    ff ea 66 f8       	goto -0xf34 <VecPlusScalar_float_f_f_f : 10f06c >			  ## entry_list.S:1491:0


__stub_VecMinScalar_float_f_f_f:
  10ffa0:    ff ea 79 f8       	goto -0xf0e <VecMinScalar_float_f_f_f : 10f096 >			  ## entry_list.S:1498:0


__stub_VecOpposite_float_f_f:
  10ffa4:    ff ea 8c f8       	goto -0xee8 <VecOpposite_float_f_f : 10f0c0 >			  ## entry_list.S:1505:0


__stub_VecEleMla_float_f_f_f:
  10ffa8:    ff ea 9e f8       	goto -0xec4 <VecEleMla_float_f_f_f : 10f0e8 >			  ## entry_list.S:1512:0


__stub_VecEleMla_float_c_c_c:
  10ffac:    ff ea b7 f8       	goto -0xe92 <VecEleMla_float_c_c_c : 10f11e >			  ## entry_list.S:1519:0


__stub_VecMinus_float_c_c_c:
  10ffb0:    ff ea d9 f8       	goto -0xe4e <VecMinus_float_c_c_c : 10f166 >			  ## entry_list.S:1526:0


__stub_VecDotProduct_float_f_f_f:
  10ffb4:    ff ea f7 f8       	goto -0xe12 <VecDotProduct_float_f_f_f : 10f1a6 >			  ## entry_list.S:1533:0


__stub_VecDotProduct_float_c_c_c:
  10ffb8:    ff ea 0c f9       	goto -0xde8 <VecDotProduct_float_c_c_c : 10f1d4 >			  ## entry_list.S:1540:0


__stub_VecDotProduct_float_c_f_c:
  10ffbc:    ff ea 2c f9       	goto -0xda8 <VecDotProduct_float_c_f_c : 10f218 >			  ## entry_list.S:1547:0


__stub_VecCopy_float_c_c:
  10ffc0:    ff ea 45 f9       	goto -0xd76 <VecCopy_float_c_c : 10f24e >			  ## entry_list.S:1554:0


__stub_VecCopy_float_f_c:
  10ffc4:    ff ea 55 f9       	goto -0xd56 <VecCopy_float_f_c : 10f272 >			  ## entry_list.S:1561:0


__stub_VecConjDotProduct_float_c_c_c:
  10ffc8:    ff ea 67 f9       	goto -0xd32 <VecConjDotProduct_float_c_c_c : 10f29a >			  ## entry_list.S:1568:0


__stub_VecNormalize_float_c_c_f:
  10ffcc:    ff ea 87 f9       	goto -0xcf2 <VecNormalize_float_c_c_f : 10f2de >			  ## entry_list.S:1575:0


__stub_VecRecAve_float_c_c_f:
  10ffd0:    ff ea b4 f9       	goto -0xc98 <VecRecAve_float_c_c_f : 10f33c >			  ## entry_list.S:1582:0


__stub_VecOverlapShift_float_f_f_i:
  10ffd4:    ff ea d2 f9       	goto -0xc5c <VecOverlapShift_float_f_f_i : 10f37c >			  ## entry_list.S:1589:0


__stub_VecMax_float_f_f_f:
  10ffd8:    ff ea fc f9       	goto -0xc08 <VecMax_float_f_f_f : 10f3d4 >			  ## entry_list.S:1596:0


__stub_VecConjEwMulAndDiv_float_c_c_f_f_c:
  10ffdc:    ff ea 16 fa       	goto -0xbd4 <VecConjEwMulAndDiv_float_c_c_f_f_c : 10f40c >			  ## entry_list.S:1603:0


__stub_VecPlusMulScalar_float_c_c_f_c:
  10ffe0:    ff ea 46 fa       	goto -0xb74 <VecPlusMulScalar_float_c_c_f_c : 10f470 >			  ## entry_list.S:1610:0


__stub_VecCondCopy_float_c_i_c:
  10ffe4:    ff ea 7d fa       	goto -0xb06 <VecCondCopy_float_c_i_c : 10f4e2 >			  ## entry_list.S:1617:0


__stub_VecEleMulAndDiv_float_f_f_f_f_f:
  10ffe8:    ff ea 98 fa       	goto -0xad0 <VecEleMulAndDiv_float_f_f_f_f_f : 10f51c >			  ## entry_list.S:1624:0


__stub_VectorSet_float_f_c:
  10ffec:    ff ea c0 fa       	goto -0xa80 <VectorSet_float_f_c : 10f570 >			  ## entry_list.S:1631:0


__stub_VecDivScalar_float_f_f_f:
  10fff0:    ff ea cb fa       	goto -0xa6a <VecDivScalar_float_f_f_f : 10f58a >			  ## entry_list.S:1638:0


__stub_VecDivScalar_float_c_f_c:
  10fff4:    ff ea de fa       	goto -0xa44 <VecDivScalar_float_c_f_c : 10f5b4 >			  ## entry_list.S:1645:0


__stub_VecPlusScalar_float_c_f_c:
  10fff8:    ff ea f3 fa       	goto -0xa1a <VecPlusScalar_float_c_f_c : 10f5e2 >			  ## entry_list.S:1652:0


__stub_VecMinScalar_float_c_f_c:
  10fffc:    ff ea 06 fb       	goto -0x9f4 <VecMinScalar_float_c_f_c : 10f60c >			  ## entry_list.S:1659:0

Disassembly of section .nul_space:
$data.__3:
   f4240:	 10 f7 10 00 14 f7 10 00         ........
   f4248:	 04 38 10 00 04 3c 10 00         .8...<..
   f4250:	 04 3e 10 00 04 40 10 00         .>...@..
   f4258:	 04 00 10 00 04 04 10 00         ........
   f4260:	 04 08 10 00 04 10 10 00         ........
   f4268:	 04 18 10 00 04 28 10 00         .....(..
   f4270:	 ec c1 10 00 f0 c2 10 00         ........
   f4278:	 f4 c3 10 00 f8 c4 10 00         ........
   f4280:	 7c c5 10 00                     |...

